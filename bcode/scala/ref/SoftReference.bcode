Compiled from "SoftReference.scala"
public class scala.ref.SoftReference extends java.lang.Object implements scala.ref.ReferenceWrapper,scala.ScalaObject
  SourceFile: "SoftReference.scala"
  ScalaSig: length = 0x3
   05 00 00 
  Signature: length = 0x2
   00 6D 
  RuntimeVisibleAnnotations: length = 0xB
   00 01 00 6E 00 01 00 6F 73 00 70 
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	SoftReference.scala;
Asciz	underlying;
Asciz	Ljava/lang/ref/SoftReference;;
Asciz	Ljava/lang/ref/SoftReference<+TT;>;;
Asciz	Signature;
Asciz	get;
Asciz	()Lscala/Option;;
Asciz	Code;
Asciz	LineNumberTable;
Asciz	scala/ref/ReferenceWrapper$class;
class	scala/ref/ReferenceWrapper$class
Asciz	(Lscala/ref/ReferenceWrapper;)Lscala/Option;;
NameAndType	get:(Lscala/ref/ReferenceWrapper;)Lscala/Option;
Method	scala/ref/ReferenceWrapper$class.get:(Lscala/ref/ReferenceWrapper;)Lscala/Option;
Asciz	apply;
Asciz	()Ljava/lang/Object;;
Asciz	(Lscala/ref/ReferenceWrapper;)Ljava/lang/Object;;
NameAndType	apply:(Lscala/ref/ReferenceWrapper;)Ljava/lang/Object;
Method	scala/ref/ReferenceWrapper$class.apply:(Lscala/ref/ReferenceWrapper;)Ljava/lang/Object;
Asciz	clear;
Asciz	()V;
Asciz	(Lscala/ref/ReferenceWrapper;)V;
NameAndType	clear:(Lscala/ref/ReferenceWrapper;)V
Method	scala/ref/ReferenceWrapper$class.clear:(Lscala/ref/ReferenceWrapper;)V
Asciz	enqueue;
Asciz	()Z;
Asciz	(Lscala/ref/ReferenceWrapper;)Z;
NameAndType	enqueue:(Lscala/ref/ReferenceWrapper;)Z
Method	scala/ref/ReferenceWrapper$class.enqueue:(Lscala/ref/ReferenceWrapper;)Z
Asciz	isEnqueued;
NameAndType	isEnqueued:(Lscala/ref/ReferenceWrapper;)Z
Method	scala/ref/ReferenceWrapper$class.isEnqueued:(Lscala/ref/ReferenceWrapper;)Z
Asciz	self;
Asciz	()Ljava/lang/ref/Reference;;
Asciz	(Lscala/ref/ReferenceWrapper;)Ljava/lang/ref/Reference;;
NameAndType	self:(Lscala/ref/ReferenceWrapper;)Ljava/lang/ref/Reference;
Method	scala/ref/ReferenceWrapper$class.self:(Lscala/ref/ReferenceWrapper;)Ljava/lang/ref/Reference;
Asciz	hashCode;
Asciz	()I;
Asciz	scala/Proxy$class;
class	scala/Proxy$class
Asciz	(Lscala/Proxy;)I;
NameAndType	hashCode:(Lscala/Proxy;)I
Method	scala/Proxy$class.hashCode:(Lscala/Proxy;)I
Asciz	equals;
Asciz	(Ljava/lang/Object;)Z;
Asciz	(Lscala/Proxy;Ljava/lang/Object;)Z;
NameAndType	equals:(Lscala/Proxy;Ljava/lang/Object;)Z
Method	scala/Proxy$class.equals:(Lscala/Proxy;Ljava/lang/Object;)Z
Asciz	this;
Asciz	Lscala/ref/SoftReference;;
Asciz	that;
Asciz	Ljava/lang/Object;;
Asciz	LocalVariableTable;
Asciz	toString;
Asciz	()Ljava/lang/String;;
Asciz	(Lscala/Proxy;)Ljava/lang/String;;
NameAndType	toString:(Lscala/Proxy;)Ljava/lang/String;
Method	scala/Proxy$class.toString:(Lscala/Proxy;)Ljava/lang/String;
Asciz	<init>;
Asciz	(Ljava/lang/Object;)V;
Asciz	scala/ref/SoftReference;
class	scala/ref/SoftReference
Asciz	(Ljava/lang/Object;Lscala/ref/ReferenceQueue;)V;
NameAndType	"<init>":(Ljava/lang/Object;Lscala/ref/ReferenceQueue;)V
Method	scala/ref/SoftReference."<init>":(Ljava/lang/Object;Lscala/ref/ReferenceQueue;)V
Asciz	value;
Asciz	(TT;)V;
Asciz	()Ljava/lang/ref/SoftReference;;
NameAndType	underlying:Ljava/lang/ref/SoftReference;
Field	scala/ref/SoftReference.underlying:Ljava/lang/ref/SoftReference;
Asciz	()Ljava/lang/ref/SoftReference<+TT;>;;
Asciz	scala/ref/ReferenceWrapper;
class	scala/ref/ReferenceWrapper
NameAndType	self:()Ljava/lang/ref/Reference;
InterfaceMethod	scala/ref/ReferenceWrapper.self:()Ljava/lang/ref/Reference;
NameAndType	underlying:()Ljava/lang/ref/SoftReference;
Method	scala/ref/SoftReference.underlying:()Ljava/lang/ref/SoftReference;
Asciz	java/lang/Object;
class	java/lang/Object
NameAndType	"<init>":()V
Method	java/lang/Object."<init>":()V
Asciz	scala/Function0$class;
class	scala/Function0$class
Asciz	$init$;
Asciz	(Lscala/Function0;)V;
NameAndType	$init$:(Lscala/Function0;)V
Method	scala/Function0$class.$init$:(Lscala/Function0;)V
Asciz	scala/ref/Reference$class;
class	scala/ref/Reference$class
Asciz	(Lscala/ref/Reference;)V;
NameAndType	$init$:(Lscala/ref/Reference;)V
Method	scala/ref/Reference$class.$init$:(Lscala/ref/Reference;)V
Asciz	(Lscala/Proxy;)V;
NameAndType	$init$:(Lscala/Proxy;)V
Method	scala/Proxy$class.$init$:(Lscala/Proxy;)V
NameAndType	$init$:(Lscala/ref/ReferenceWrapper;)V
Method	scala/ref/ReferenceWrapper$class.$init$:(Lscala/ref/ReferenceWrapper;)V
Asciz	scala/ref/SoftReferenceWithWrapper;
class	scala/ref/SoftReferenceWithWrapper
Asciz	(Ljava/lang/Object;Lscala/ref/ReferenceQueue;Lscala/ref/SoftReference;)V;
NameAndType	"<init>":(Ljava/lang/Object;Lscala/ref/ReferenceQueue;Lscala/ref/SoftReference;)V
Method	scala/ref/SoftReferenceWithWrapper."<init>":(Ljava/lang/Object;Lscala/ref/ReferenceQueue;Lscala/ref/SoftReference;)V
Asciz	queue;
Asciz	Lscala/ref/ReferenceQueue;;
Asciz	(TT;Lscala/ref/ReferenceQueue<TT;>;)V;
Asciz	ScalaSig;
Asciz	<T:Ljava/lang/Object;>Ljava/lang/Object;Lscala/ref/ReferenceWrapper<TT;>;Lscala/ScalaObject;;
Asciz	Lscala/reflect/ScalaSignature;;
Asciz	bytes;
Asciz	3A!\ti1k4u%4WM]3oGT!aI,gMC8-7b)\"C\tI#\t\t=ia5\tA\1oO*\ta\"kCZB\ty%M[3diB!cE\tI!!I+g-:f],wK]1qaC!\r!)F!D\t7qiB;qAT8uQ&tw\r?%:L(+4mBA-6-7b\nTWm;\t!!Q\nU\tQA^1mkDb\nIKcV,W/\t%%*B9VMZ3sK:W-U;fkDQ5\naP5oSRtDc0aA!A\tZA\tZ\t1A9\"B2)bB%\tANk:$WM7zS:<W#A1ajcA<y5\t!H%A\t-u\"B\ta?\nC\t)AYQO3fe2LN\4!a\tU\tE:w\"AF#yA!A};
Asciz	RuntimeVisibleAnnotations;
Asciz	scala/ScalaObject;
class	scala/ScalaObject

{
private final java.lang.ref.SoftReference underlying;
  Signature: Ljava/lang/ref/SoftReference;
  Signature: length = 0x2
   00 05 

public scala.Option get();
  Signature: ()Lscala/Option;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/ref/ReferenceWrapper$class.get:(Lscala/ref/ReferenceWrapper;)Lscala/Option;
	areturn
  Labels:

public java.lang.Object apply();
  Signature: ()Ljava/lang/Object;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/ref/ReferenceWrapper$class.apply:(Lscala/ref/ReferenceWrapper;)Ljava/lang/Object;
	areturn
  Labels:

public void clear();
  Signature: ()V
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/ref/ReferenceWrapper$class.clear:(Lscala/ref/ReferenceWrapper;)V
	return
  Labels:

public boolean enqueue();
  Signature: ()Z
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/ref/ReferenceWrapper$class.enqueue:(Lscala/ref/ReferenceWrapper;)Z
	ireturn
  Labels:

public boolean isEnqueued();
  Signature: ()Z
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/ref/ReferenceWrapper$class.isEnqueued:(Lscala/ref/ReferenceWrapper;)Z
	ireturn
  Labels:

public java.lang.ref.Reference self();
  Signature: ()Ljava/lang/ref/Reference;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/ref/ReferenceWrapper$class.self:(Lscala/ref/ReferenceWrapper;)Ljava/lang/ref/Reference;
	areturn
  Labels:

public int hashCode();
  Signature: ()I
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/Proxy$class.hashCode:(Lscala/Proxy;)I
	ireturn
  Labels:

public boolean equals(java.lang.Object);
  Signature: (Ljava/lang/Object;)Z
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	invokestatic	Method scala/Proxy$class.equals:(Lscala/Proxy;Ljava/lang/Object;)Z
	ireturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/ref/SoftReference;
   0      6      1    that       Ljava/lang/Object;


public java.lang.String toString();
  Signature: ()Ljava/lang/String;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/Proxy$class.toString:(Lscala/Proxy;)Ljava/lang/String;
	areturn
  Labels:

public scala.ref.SoftReference(java.lang.Object);
  Signature: (Ljava/lang/Object;)V
  Code:
   Stack=3, Locals=2, Args_size=2
	aload_0
	aload_1
	aconst_null
	invokespecial	Method "<init>":(Ljava/lang/Object;Lscala/ref/ReferenceQueue;)V
	return
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/ref/SoftReference;
   0      7      1    value       Ljava/lang/Object;

  Signature: length = 0x2
   00 45 

public java.lang.ref.SoftReference underlying();
  Signature: ()Ljava/lang/ref/SoftReference;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field underlying:Ljava/lang/ref/SoftReference;
	areturn
  Labels:
  Signature: length = 0x2
   00 49 

public java.lang.Object self();
  Signature: ()Ljava/lang/Object;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokeinterface	InterfaceMethod scala/ref/ReferenceWrapper.self:()Ljava/lang/ref/Reference;
	areturn
  Labels:

public java.lang.ref.Reference underlying();
  Signature: ()Ljava/lang/ref/Reference;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokevirtual	Method underlying:()Ljava/lang/ref/SoftReference;
	areturn
  Labels:

public scala.ref.SoftReference(java.lang.Object, scala.ref.ReferenceQueue);
  Signature: (Ljava/lang/Object;Lscala/ref/ReferenceQueue;)V
  Code:
   Stack=6, Locals=3, Args_size=3
	aload_0
	invokespecial	Method java/lang/Object."<init>":()V
	aload_0
	invokestatic	Method scala/Function0$class.$init$:(Lscala/Function0;)V
	aload_0
	invokestatic	Method scala/ref/Reference$class.$init$:(Lscala/ref/Reference;)V
	aload_0
	invokestatic	Method scala/Proxy$class.$init$:(Lscala/Proxy;)V
	aload_0
	invokestatic	Method scala/ref/ReferenceWrapper$class.$init$:(Lscala/ref/ReferenceWrapper;)V
	aload_0
	new	class scala/ref/SoftReferenceWithWrapper
	dup
	aload_1
	aload_2
	aload_0
	invokespecial	Method scala/ref/SoftReferenceWithWrapper."<init>":(Ljava/lang/Object;Lscala/ref/ReferenceQueue;Lscala/ref/SoftReference;)V
	putfield	Field underlying:Ljava/lang/ref/SoftReference;
	return
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      35      0    this       Lscala/ref/SoftReference;
   0      35      1    value       Ljava/lang/Object;
   0      35      2    queue       Lscala/ref/ReferenceQueue;

  Signature: length = 0x2
   00 6B 

}

