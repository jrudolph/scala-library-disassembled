Compiled from "SoftReference.scala"
public class scala.ref.SoftReference extends java.lang.Object implements scala.ref.ReferenceWrapper,scala.ScalaObject
  SourceFile: "SoftReference.scala"
  Signature: length = 0x2
   00 78 
  ScalaSig: length = 0x1AE
   05 00 46 06 04 01 02 00 07 02 0D 53 6F 66 74 52
   65 66 65 72 65 6E 63 65 0A 02 03 04 01 03 72 65
   66 0A 01 05 01 05 73 63 61 6C 61 03 00 15 02 08
   17 13 04 00 09 11 21 10 02 0A 0F 0D 01 0B 0A 02
   0C 0D 01 04 6C 61 6E 67 0A 01 0E 01 04 6A 61 76
   61 09 02 10 0B 02 06 4F 62 6A 65 63 74 10 03 12
   13 15 0D 01 02 09 02 14 02 02 10 52 65 66 65 72
   65 6E 63 65 57 72 61 70 70 65 72 10 02 16 17 0C
   00 04 08 18 00 FFFFFF84 FFFFFF80 FFFFFF84 FFFFFFC2 00 19 02 01 54 11 02
   1A 1E 10 02 1B 1C 0D 01 04 09 02 1D 04 02 07 4E
   6F 74 68 69 6E 67 10 02 1B 1F 09 02 20 04 02 06
   41 6E 79 52 65 66 10 02 1B 22 09 02 23 04 02 0B
   53 63 61 6C 61 4F 62 6A 65 63 74 08 08 25 00 FFFFFF82
   FFFFFF80 FFFFFFA0 FFFFFF80 04 15 01 05 76 61 6C 75 65 08 08 27 00
   FFFFFF82 FFFFFF80 FFFFFFA0 FFFFFF80 04 28 01 05 71 75 65 75 65 10 03 12
   29 15 09 02 2A 02 02 0E 52 65 66 65 72 65 6E 63
   65 51 75 65 75 65 08 05 2C 00 FFFFFF84 00 2D 01 06 3C
   69 6E 69 74 3E 14 03 2E 2F 30 10 03 12 00 15 08
   05 25 2B FFFFFFC0 00 15 08 05 27 2B FFFFFFC0 00 28 08 05 2C
   00 FFFFFF84 00 32 14 02 2E 33 08 05 25 31 FFFFFFC0 00 15 08
   07 35 00 FFFFFFC2 FFFFFF80 FFFFFF84 00 36 01 0A 75 6E 64 65 72 6C
   79 69 6E 67 15 01 37 30 02 38 3D 10 03 39 3B 3C
   0D 01 3A 0A 02 03 0B 09 02 01 3A 10 02 16 3D 04
   08 3E 00 FFFFFF84 FFFFFF80 FFFFFF80 FFFFFF82 00 3F 02 03 5F 24 31 11 02
   1A 15 08 06 41 00 FFFFFFA0 FFFFFF80 04 42 01 0B 75 6E 64 65
   72 6C 79 69 6E 67 20 30 02 43 45 10 03 39 3B 44
   10 02 16 45 04 08 3E 00 FFFFFF84 FFFFFF80 FFFFFF80 FFFFFF82 00 3F 
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	SoftReference.scala;
Asciz	underlying;
Asciz	Ljava/lang/ref/SoftReference;;
Asciz	Ljava/lang/ref/SoftReference<+TT;>;;
Asciz	Signature;
Asciz	<init>;
Asciz	(Ljava/lang/Object;Lscala/ref/ReferenceQueue;)V;
Asciz	Code;
Asciz	LineNumberTable;
Asciz	java/lang/Object;
class	java/lang/Object
Asciz	()V;
NameAndType	"<init>":()V
Method	java/lang/Object."<init>":()V
Asciz	scala/Function0$class;
class	scala/Function0$class
Asciz	$init$;
Asciz	(Lscala/Function0;)V;
NameAndType	$init$:(Lscala/Function0;)V
Method	scala/Function0$class.$init$:(Lscala/Function0;)V
Asciz	scala/ref/Reference$class;
class	scala/ref/Reference$class
Asciz	(Lscala/ref/Reference;)V;
NameAndType	$init$:(Lscala/ref/Reference;)V
Method	scala/ref/Reference$class.$init$:(Lscala/ref/Reference;)V
Asciz	scala/Proxy$class;
class	scala/Proxy$class
Asciz	(Lscala/Proxy;)V;
NameAndType	$init$:(Lscala/Proxy;)V
Method	scala/Proxy$class.$init$:(Lscala/Proxy;)V
Asciz	scala/ref/ReferenceWrapper$class;
class	scala/ref/ReferenceWrapper$class
Asciz	(Lscala/ref/ReferenceWrapper;)V;
NameAndType	$init$:(Lscala/ref/ReferenceWrapper;)V
Method	scala/ref/ReferenceWrapper$class.$init$:(Lscala/ref/ReferenceWrapper;)V
Asciz	equals;
Asciz	(Ljava/lang/Object;)Z;
NameAndType	equals:(Ljava/lang/Object;)Z
Method	java/lang/Object.equals:(Ljava/lang/Object;)Z
Asciz	java/lang/ref/SoftReference;
class	java/lang/ref/SoftReference
Asciz	(Ljava/lang/Object;)V;
NameAndType	"<init>":(Ljava/lang/Object;)V
Method	java/lang/ref/SoftReference."<init>":(Ljava/lang/Object;)V
Asciz	scala/ref/ReferenceQueue;
class	scala/ref/ReferenceQueue
Asciz	()Ljava/lang/ref/ReferenceQueue;;
NameAndType	underlying:()Ljava/lang/ref/ReferenceQueue;
Method	scala/ref/ReferenceQueue.underlying:()Ljava/lang/ref/ReferenceQueue;
Asciz	(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V;
NameAndType	"<init>":(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V
Method	java/lang/ref/SoftReference."<init>":(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V
Asciz	scala/ref/SoftReference;
class	scala/ref/SoftReference
NameAndType	underlying:Ljava/lang/ref/SoftReference;
Field	scala/ref/SoftReference.underlying:Ljava/lang/ref/SoftReference;
Asciz	register;
NameAndType	register:(Lscala/ref/ReferenceWrapper;)V
Method	scala/ref/ReferenceQueue.register:(Lscala/ref/ReferenceWrapper;)V
Asciz	this;
Asciz	Lscala/ref/SoftReference;;
Asciz	value;
Asciz	Ljava/lang/Object;;
Asciz	queue;
Asciz	Lscala/ref/ReferenceQueue;;
Asciz	LocalVariableTable;
Asciz	(TT;Lscala/ref/ReferenceQueue<TT;>;)V;
Asciz	()Ljava/lang/ref/Reference;;
Asciz	()Ljava/lang/ref/SoftReference;;
NameAndType	underlying:()Ljava/lang/ref/SoftReference;
Method	scala/ref/SoftReference.underlying:()Ljava/lang/ref/SoftReference;
Asciz	self;
Asciz	()Ljava/lang/Object;;
Asciz	scala/ref/ReferenceWrapper;
class	scala/ref/ReferenceWrapper
NameAndType	self:()Ljava/lang/ref/Reference;
InterfaceMethod	scala/ref/ReferenceWrapper.self:()Ljava/lang/ref/Reference;
Asciz	()Ljava/lang/ref/SoftReference<+TT;>;;
NameAndType	"<init>":(Ljava/lang/Object;Lscala/ref/ReferenceQueue;)V
Method	scala/ref/SoftReference."<init>":(Ljava/lang/Object;Lscala/ref/ReferenceQueue;)V
Asciz	(TT;)V;
Asciz	toString;
Asciz	()Ljava/lang/String;;
Asciz	(Lscala/Proxy;)Ljava/lang/String;;
NameAndType	toString:(Lscala/Proxy;)Ljava/lang/String;
Method	scala/Proxy$class.toString:(Lscala/Proxy;)Ljava/lang/String;
Asciz	(Lscala/Proxy;Ljava/lang/Object;)Z;
NameAndType	equals:(Lscala/Proxy;Ljava/lang/Object;)Z
Method	scala/Proxy$class.equals:(Lscala/Proxy;Ljava/lang/Object;)Z
Asciz	that;
Asciz	hashCode;
Asciz	()I;
Asciz	(Lscala/Proxy;)I;
NameAndType	hashCode:(Lscala/Proxy;)I
Method	scala/Proxy$class.hashCode:(Lscala/Proxy;)I
Asciz	(Lscala/ref/ReferenceWrapper;)Ljava/lang/ref/Reference;;
NameAndType	self:(Lscala/ref/ReferenceWrapper;)Ljava/lang/ref/Reference;
Method	scala/ref/ReferenceWrapper$class.self:(Lscala/ref/ReferenceWrapper;)Ljava/lang/ref/Reference;
Asciz	isEnqueued;
Asciz	()Z;
Asciz	(Lscala/ref/ReferenceWrapper;)Z;
NameAndType	isEnqueued:(Lscala/ref/ReferenceWrapper;)Z
Method	scala/ref/ReferenceWrapper$class.isEnqueued:(Lscala/ref/ReferenceWrapper;)Z
Asciz	enqueue;
NameAndType	enqueue:(Lscala/ref/ReferenceWrapper;)Z
Method	scala/ref/ReferenceWrapper$class.enqueue:(Lscala/ref/ReferenceWrapper;)Z
Asciz	clear;
NameAndType	clear:(Lscala/ref/ReferenceWrapper;)V
Method	scala/ref/ReferenceWrapper$class.clear:(Lscala/ref/ReferenceWrapper;)V
Asciz	apply;
Asciz	(Lscala/ref/ReferenceWrapper;)Ljava/lang/Object;;
NameAndType	apply:(Lscala/ref/ReferenceWrapper;)Ljava/lang/Object;
Method	scala/ref/ReferenceWrapper$class.apply:(Lscala/ref/ReferenceWrapper;)Ljava/lang/Object;
Asciz	get;
Asciz	()Lscala/Option;;
Asciz	(Lscala/ref/ReferenceWrapper;)Lscala/Option;;
NameAndType	get:(Lscala/ref/ReferenceWrapper;)Lscala/Option;
Method	scala/ref/ReferenceWrapper$class.get:(Lscala/ref/ReferenceWrapper;)Lscala/Option;
Asciz	<T:Ljava/lang/Object;>Ljava/lang/Object;Lscala/ref/ReferenceWrapper<TT;>;Lscala/ScalaObject;;
Asciz	ScalaSig;
Asciz	scala/ScalaObject;
class	scala/ScalaObject

{
private final java.lang.ref.SoftReference underlying;
  Signature: Ljava/lang/ref/SoftReference;
  Signature: length = 0x2
   00 05 

public scala.ref.SoftReference(java.lang.Object, scala.ref.ReferenceQueue);
  Signature: (Ljava/lang/Object;Lscala/ref/ReferenceQueue;)V
  Code:
   Stack=5, Locals=3, Args_size=3
	aload_0
	invokespecial	Method java/lang/Object."<init>":()V
	aload_0
	invokestatic	Method scala/Function0$class.$init$:(Lscala/Function0;)V
	aload_0
	invokestatic	Method scala/ref/Reference$class.$init$:(Lscala/ref/Reference;)V
	aload_0
	invokestatic	Method scala/Proxy$class.$init$:(Lscala/Proxy;)V
	aload_0
	invokestatic	Method scala/ref/ReferenceWrapper$class.$init$:(Lscala/ref/ReferenceWrapper;)V
	aload_0
	aload_2
	dup
	pop
	ifnull	l1 // new
	aload_2
	aconst_null
	invokevirtual	Method java/lang/Object.equals:(Ljava/lang/Object;)Z
	ifeq	l2 // new
l1	new	class java/lang/ref/SoftReference
	dup
	aload_1
	invokespecial	Method java/lang/ref/SoftReference."<init>":(Ljava/lang/Object;)V
	goto	l3 // putfield
l2	new	class java/lang/ref/SoftReference
	dup
	aload_1
	aload_2
	invokevirtual	Method scala/ref/ReferenceQueue.underlying:()Ljava/lang/ref/ReferenceQueue;
	invokespecial	Method java/lang/ref/SoftReference."<init>":(Ljava/lang/Object;Ljava/lang/ref/ReferenceQueue;)V
l3	putfield	Field underlying:Ljava/lang/ref/SoftReference;
	aload_2
	dup
	pop
	ifnull	l4 // return
	aload_2
	aconst_null
	invokevirtual	Method java/lang/Object.equals:(Ljava/lang/Object;)Z
	ifne	l4 // return
	aload_2
	aload_0
	invokevirtual	Method scala/ref/ReferenceQueue.register:(Lscala/ref/ReferenceWrapper;)V
l4	return
  Labels:
   	l1 = 35 // new
   	l2 = 46 // new
   	l3 = 58 // putfield
   	l4 = 80 // return
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      81      0    this       Lscala/ref/SoftReference;
   0      81      1    value       Ljava/lang/Object;
   0      81      2    queue       Lscala/ref/ReferenceQueue;

  Signature: length = 0x2
   00 44 

public java.lang.ref.Reference underlying();
  Signature: ()Ljava/lang/ref/Reference;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokevirtual	Method underlying:()Ljava/lang/ref/SoftReference;
	areturn
  Labels:

public java.lang.Object self();
  Signature: ()Ljava/lang/Object;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokeinterface	InterfaceMethod scala/ref/ReferenceWrapper.self:()Ljava/lang/ref/Reference;
	areturn
  Labels:

public java.lang.ref.SoftReference underlying();
  Signature: ()Ljava/lang/ref/SoftReference;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field underlying:Ljava/lang/ref/SoftReference;
	areturn
  Labels:
  Signature: length = 0x2
   00 4F 

public scala.ref.SoftReference(java.lang.Object);
  Signature: (Ljava/lang/Object;)V
  Code:
   Stack=3, Locals=2, Args_size=2
	aload_0
	aload_1
	aconst_null
	invokespecial	Method "<init>":(Ljava/lang/Object;Lscala/ref/ReferenceQueue;)V
	return
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/ref/SoftReference;
   0      7      1    value       Ljava/lang/Object;

  Signature: length = 0x2
   00 52 

public java.lang.String toString();
  Signature: ()Ljava/lang/String;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/Proxy$class.toString:(Lscala/Proxy;)Ljava/lang/String;
	areturn
  Labels:

public boolean equals(java.lang.Object);
  Signature: (Ljava/lang/Object;)Z
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	invokestatic	Method scala/Proxy$class.equals:(Lscala/Proxy;Ljava/lang/Object;)Z
	ireturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/ref/SoftReference;
   0      6      1    that       Ljava/lang/Object;


public int hashCode();
  Signature: ()I
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/Proxy$class.hashCode:(Lscala/Proxy;)I
	ireturn
  Labels:

public java.lang.ref.Reference self();
  Signature: ()Ljava/lang/ref/Reference;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/ref/ReferenceWrapper$class.self:(Lscala/ref/ReferenceWrapper;)Ljava/lang/ref/Reference;
	areturn
  Labels:

public boolean isEnqueued();
  Signature: ()Z
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/ref/ReferenceWrapper$class.isEnqueued:(Lscala/ref/ReferenceWrapper;)Z
	ireturn
  Labels:

public boolean enqueue();
  Signature: ()Z
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/ref/ReferenceWrapper$class.enqueue:(Lscala/ref/ReferenceWrapper;)Z
	ireturn
  Labels:

public void clear();
  Signature: ()V
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/ref/ReferenceWrapper$class.clear:(Lscala/ref/ReferenceWrapper;)V
	return
  Labels:

public java.lang.Object apply();
  Signature: ()Ljava/lang/Object;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/ref/ReferenceWrapper$class.apply:(Lscala/ref/ReferenceWrapper;)Ljava/lang/Object;
	areturn
  Labels:

public scala.Option get();
  Signature: ()Lscala/Option;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/ref/ReferenceWrapper$class.get:(Lscala/ref/ReferenceWrapper;)Lscala/Option;
	areturn
  Labels:

}

