Compiled from "Show.scala"
public class scala.testing.Show$SymApply extends java.lang.Object implements scala.ScalaObject
  SourceFile: "Show.scala"
  Scala: length = 0x
   
  InnerClass: 
   public #56= #12 of #41; //SymApply=class scala/testing/Show$SymApply of class scala/testing/Show
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	Show.scala;
const #3 = Asciz	$outer;
const #4 = Asciz	Lscala/testing/Show;;
const #5 = Asciz	f;
const #6 = Asciz	Lscala/Symbol;;
const #7 = Asciz	<init>;
const #8 = Asciz	(Lscala/testing/Show;Lscala/Symbol;)V;
const #9 = Asciz	Code;
const #10 = Asciz	LineNumberTable;
const #11 = Asciz	scala/testing/Show$SymApply;
const #12 = class	#11;	//  scala/testing/Show$SymApply
const #13 = NameAndType	#5:#6;//  f:Lscala/Symbol;
const #14 = Field	#12.#13;	//  scala/testing/Show$SymApply.f:Lscala/Symbol;
const #15 = Asciz	java/lang/NullPointerException;
const #16 = class	#15;	//  java/lang/NullPointerException
const #17 = Asciz	()V;
const #18 = NameAndType	#7:#17;//  "<init>":()V
const #19 = Method	#16.#18;	//  java/lang/NullPointerException."<init>":()V
const #20 = NameAndType	#3:#4;//  $outer:Lscala/testing/Show;
const #21 = Field	#12.#20;	//  scala/testing/Show$SymApply.$outer:Lscala/testing/Show;
const #22 = Asciz	java/lang/Object;
const #23 = class	#22;	//  java/lang/Object
const #24 = Method	#23.#18;	//  java/lang/Object."<init>":()V
const #25 = Asciz	this;
const #26 = Asciz	Lscala/testing/Show$SymApply;;
const #27 = Asciz	LocalVariableTable;
const #28 = Asciz	scala$testing$Show$SymApply$$$outer;
const #29 = Asciz	()Lscala/testing/Show;;
const #30 = Asciz	apply;
const #31 = Asciz	(Lscala/collection/Sequence;)V;
const #32 = Asciz	scala/Predef$;
const #33 = class	#32;	//  scala/Predef$
const #34 = Asciz	MODULE$;
const #35 = Asciz	Lscala/Predef$;;
const #36 = NameAndType	#34:#35;//  MODULE$:Lscala/Predef$;
const #37 = Field	#33.#36;	//  scala/Predef$.MODULE$:Lscala/Predef$;
const #38 = NameAndType	#28:#29;//  scala$testing$Show$SymApply$$$outer:()Lscala/testing/Show;
const #39 = Method	#12.#38;	//  scala/testing/Show$SymApply.scala$testing$Show$SymApply$$$outer:()Lscala/testing/Show;
const #40 = Asciz	scala/testing/Show;
const #41 = class	#40;	//  scala/testing/Show
const #42 = Asciz	test;
const #43 = Asciz	(Lscala/Symbol;Lscala/collection/Sequence;)Ljava/lang/String;;
const #44 = NameAndType	#42:#43;//  test:(Lscala/Symbol;Lscala/collection/Sequence;)Ljava/lang/String;
const #45 = InterfaceMethod	#41.#44;	//  scala/testing/Show.test:(Lscala/Symbol;Lscala/collection/Sequence;)Ljava/lang/String;
const #46 = Asciz	println;
const #47 = Asciz	(Ljava/lang/Object;)V;
const #48 = NameAndType	#46:#47;//  println:(Ljava/lang/Object;)V
const #49 = Method	#33.#48;	//  scala/Predef$.println:(Ljava/lang/Object;)V
const #50 = Asciz	args;
const #51 = Asciz	Lscala/collection/Sequence;;
const #52 = Asciz	<A:Ljava/lang/Object;>(Lscala/collection/Sequence<TA;>;)V;
const #53 = Asciz	Signature;
const #54 = Asciz	Scala;
const #55 = Asciz	InnerClasses;
const #56 = Asciz	SymApply;
const #57 = Asciz	scala/ScalaObject;
const #58 = class	#57;	//  scala/ScalaObject

{
public final scala.testing.Show $outer;

public scala.testing.Show$SymApply(scala.testing.Show, scala.Symbol);
  Code:
   Stack=2, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_2
   2:	putfield	#14; //Field f:Lscala/Symbol;
   5:	aload_1
   6:	ifnonnull	17
   9:	new	#16; //class java/lang/NullPointerException
   12:	dup
   13:	invokespecial	#19; //Method java/lang/NullPointerException."<init>":()V
   16:	athrow
   17:	aload_0
   18:	aload_1
   19:	putfield	#21; //Field $outer:Lscala/testing/Show;
   22:	aload_0
   23:	invokespecial	#24; //Method java/lang/Object."<init>":()V
   26:	return
  LineNumberTable: 
   line 34: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      27      0    this       Lscala/testing/Show$SymApply;
   0      27      1    $outer       Lscala/testing/Show;
   0      27      2    f       Lscala/Symbol;


public scala.testing.Show scala$testing$Show$SymApply$$$outer();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#21; //Field $outer:Lscala/testing/Show;
   4:	areturn
  LineNumberTable: 
   line 34: 0


public void apply(scala.collection.Sequence);
  Code:
   Stack=4, Locals=2, Args_size=2
   0:	getstatic	#37; //Field scala/Predef$.MODULE$:Lscala/Predef$;
   3:	aload_0
   4:	invokevirtual	#39; //Method scala$testing$Show$SymApply$$$outer:()Lscala/testing/Show;
   7:	aload_0
   8:	getfield	#14; //Field f:Lscala/Symbol;
   11:	aload_1
   12:	invokeinterface	#45,  3; //InterfaceMethod scala/testing/Show.test:(Lscala/Symbol;Lscala/collection/Sequence;)Ljava/lang/String;
   17:	invokevirtual	#49; //Method scala/Predef$.println:(Ljava/lang/Object;)V
   20:	return
  LineNumberTable: 
   line 36: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      21      0    this       Lscala/testing/Show$SymApply;
   0      21      1    args       Lscala/collection/Sequence;

  Signature: length = 0x2
   00 34 

}

