Compiled from "Benchmark.scala"
public abstract class scala.testing.Benchmark$class extends java.lang.Object
  SourceFile: "Benchmark.scala"
  Scala: length = 0x
   
  InnerClass: 
   public final #142= #53 of #8; //$anonfun$main$1=class scala/testing/Benchmark$$anonfun$main$1 of class scala/testing/Benchmark
   public final #143= #123 of #8; //$anonfun$runBenchmark$1=class scala/testing/Benchmark$$anonfun$runBenchmark$1 of class scala/testing/Benchmark
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	Benchmark.scala;
const #3 = Asciz	$init$;
const #4 = Asciz	(Lscala/testing/Benchmark;)V;
const #5 = Asciz	Code;
const #6 = Asciz	LineNumberTable;
const #7 = Asciz	scala/testing/Benchmark;
const #8 = class	#7;	//  scala/testing/Benchmark
const #9 = Asciz	multiplier_$eq;
const #10 = Asciz	(I)V;
const #11 = NameAndType	#9:#10;//  multiplier_$eq:(I)V
const #12 = InterfaceMethod	#8.#11;	//  scala/testing/Benchmark.multiplier_$eq:(I)V
const #13 = Asciz	$this;
const #14 = Asciz	Lscala/testing/Benchmark;;
const #15 = Asciz	LocalVariableTable;
const #16 = Asciz	main;
const #17 = Asciz	(Lscala/testing/Benchmark;[Ljava/lang/String;)V;
const #18 = Asciz	java/io/OutputStreamWriter;
const #19 = class	#18;	//  java/io/OutputStreamWriter
const #20 = Asciz	java/lang/System;
const #21 = class	#20;	//  java/lang/System
const #22 = Asciz	out;
const #23 = Asciz	Ljava/io/PrintStream;;
const #24 = NameAndType	#22:#23;//  out:Ljava/io/PrintStream;
const #25 = Field	#21.#24;	//  java/lang/System.out:Ljava/io/PrintStream;
const #26 = Asciz	<init>;
const #27 = Asciz	(Ljava/io/OutputStream;)V;
const #28 = NameAndType	#26:#27;//  "<init>":(Ljava/io/OutputStream;)V
const #29 = Method	#19.#28;	//  java/io/OutputStreamWriter."<init>":(Ljava/io/OutputStream;)V
const #30 = Asciz	scala/collection/immutable/StringOps;
const #31 = class	#30;	//  scala/collection/immutable/StringOps
const #32 = Asciz	(Ljava/lang/String;)V;
const #33 = NameAndType	#26:#32;//  "<init>":(Ljava/lang/String;)V
const #34 = Method	#31.#33;	//  scala/collection/immutable/StringOps."<init>":(Ljava/lang/String;)V
const #35 = Asciz	scala/collection/immutable/StringLike;
const #36 = class	#35;	//  scala/collection/immutable/StringLike
const #37 = Asciz	toInt;
const #38 = Asciz	()I;
const #39 = NameAndType	#37:#38;//  toInt:()I
const #40 = InterfaceMethod	#36.#39;	//  scala/collection/immutable/StringLike.toInt:()I
const #41 = Asciz	prefix;
const #42 = Asciz	()Ljava/lang/String;;
const #43 = NameAndType	#41:#42;//  prefix:()Ljava/lang/String;
const #44 = InterfaceMethod	#8.#43;	//  scala/testing/Benchmark.prefix:()Ljava/lang/String;
const #45 = Asciz	write;
const #46 = NameAndType	#45:#32;//  write:(Ljava/lang/String;)V
const #47 = Method	#19.#46;	//  java/io/OutputStreamWriter.write:(Ljava/lang/String;)V
const #48 = Asciz	runBenchmark;
const #49 = Asciz	(I)Lscala/collection/immutable/List;;
const #50 = NameAndType	#48:#49;//  runBenchmark:(I)Lscala/collection/immutable/List;
const #51 = InterfaceMethod	#8.#50;	//  scala/testing/Benchmark.runBenchmark:(I)Lscala/collection/immutable/List;
const #52 = Asciz	scala/testing/Benchmark$$anonfun$main$1;
const #53 = class	#52;	//  scala/testing/Benchmark$$anonfun$main$1
const #54 = Asciz	(Lscala/testing/Benchmark;Ljava/io/OutputStreamWriter;)V;
const #55 = NameAndType	#26:#54;//  "<init>":(Lscala/testing/Benchmark;Ljava/io/OutputStreamWriter;)V
const #56 = Method	#53.#55;	//  scala/testing/Benchmark$$anonfun$main$1."<init>":(Lscala/testing/Benchmark;Ljava/io/OutputStreamWriter;)V
const #57 = Asciz	scala/collection/LinearSeqLike;
const #58 = class	#57;	//  scala/collection/LinearSeqLike
const #59 = Asciz	foreach;
const #60 = Asciz	(Lscala/Function1;)V;
const #61 = NameAndType	#59:#60;//  foreach:(Lscala/Function1;)V
const #62 = InterfaceMethod	#58.#61;	//  scala/collection/LinearSeqLike.foreach:(Lscala/Function1;)V
const #63 = Asciz	scala/compat/Platform$;
const #64 = class	#63;	//  scala/compat/Platform$
const #65 = Asciz	MODULE$;
const #66 = Asciz	Lscala/compat/Platform$;;
const #67 = NameAndType	#65:#66;//  MODULE$:Lscala/compat/Platform$;
const #68 = Field	#64.#67;	//  scala/compat/Platform$.MODULE$:Lscala/compat/Platform$;
const #69 = Asciz	EOL;
const #70 = NameAndType	#69:#42;//  EOL:()Ljava/lang/String;
const #71 = Method	#64.#70;	//  scala/compat/Platform$.EOL:()Ljava/lang/String;
const #72 = Asciz	flush;
const #73 = Asciz	()V;
const #74 = NameAndType	#72:#73;//  flush:()V
const #75 = Method	#19.#74;	//  java/io/OutputStreamWriter.flush:()V
const #76 = Asciz	Usage: scala benchmarks.program <runs> ;
const #77 = String	#76;	//  Usage: scala benchmarks.program <runs> 
const #78 = Asciz	scala/Console$;
const #79 = class	#78;	//  scala/Console$
const #80 = Asciz	Lscala/Console$;;
const #81 = NameAndType	#65:#80;//  MODULE$:Lscala/Console$;
const #82 = Field	#79.#81;	//  scala/Console$.MODULE$:Lscala/Console$;
const #83 = Asciz	()Ljava/io/PrintStream;;
const #84 = NameAndType	#22:#83;//  out:()Ljava/io/PrintStream;
const #85 = Method	#79.#84;	//  scala/Console$.out:()Ljava/io/PrintStream;
const #86 = Asciz	java/io/PrintStream;
const #87 = class	#86;	//  java/io/PrintStream
const #88 = Asciz	println;
const #89 = Asciz	(Ljava/lang/Object;)V;
const #90 = NameAndType	#88:#89;//  println:(Ljava/lang/Object;)V
const #91 = Method	#87.#90;	//  java/io/PrintStream.println:(Ljava/lang/Object;)V
const #92 = Asciz	   or: scala benchmarks.program <runs> <multiplier>;
const #93 = String	#92;	//     or: scala benchmarks.program <runs> <multiplier>
const #94 = Asciz	\n    The benchmark is run <runs> times, forcing a garbage collection between runs. The optional\n    <multiplier> causes the benchmark to be repeated <multiplier> times, each time for <runs>\n    executions.\n      ;
const #95 = String	#94;	//  \n    The benchmark is run <runs> times, forcing a garbage collection between runs. The optional\n    <multiplier> causes the benchmark to be repeated <multiplier> times, each time for <runs>\n    executions.\n      
const #96 = Asciz	args;
const #97 = Asciz	[Ljava/lang/String;;
const #98 = Asciz	logFile$1;
const #99 = Asciz	Ljava/io/OutputStreamWriter;;
const #100 = Asciz	(Lscala/testing/Benchmark;)Ljava/lang/String;;
const #101 = Asciz	java/lang/Object;
const #102 = class	#101;	//  java/lang/Object
const #103 = Asciz	getClass;
const #104 = Asciz	()Ljava/lang/Class;;
const #105 = NameAndType	#103:#104;//  getClass:()Ljava/lang/Class;
const #106 = Method	#102.#105;	//  java/lang/Object.getClass:()Ljava/lang/Class;
const #107 = Asciz	java/lang/Class;
const #108 = class	#107;	//  java/lang/Class
const #109 = Asciz	getName;
const #110 = NameAndType	#109:#42;//  getName:()Ljava/lang/String;
const #111 = Method	#108.#110;	//  java/lang/Class.getName:()Ljava/lang/String;
const #112 = Asciz	(Lscala/testing/Benchmark;I)Lscala/collection/immutable/List;;
const #113 = Asciz	scala/collection/immutable/List$;
const #114 = class	#113;	//  scala/collection/immutable/List$
const #115 = Asciz	Lscala/collection/immutable/List$;;
const #116 = NameAndType	#65:#115;//  MODULE$:Lscala/collection/immutable/List$;
const #117 = Field	#114.#116;	//  scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
const #118 = Asciz	range;
const #119 = Asciz	(II)Lscala/collection/Traversable;;
const #120 = NameAndType	#118:#119;//  range:(II)Lscala/collection/Traversable;
const #121 = Method	#114.#120;	//  scala/collection/immutable/List$.range:(II)Lscala/collection/Traversable;
const #122 = Asciz	scala/testing/Benchmark$$anonfun$runBenchmark$1;
const #123 = class	#122;	//  scala/testing/Benchmark$$anonfun$runBenchmark$1
const #124 = NameAndType	#26:#4;//  "<init>":(Lscala/testing/Benchmark;)V
const #125 = Method	#123.#124;	//  scala/testing/Benchmark$$anonfun$runBenchmark$1."<init>":(Lscala/testing/Benchmark;)V
const #126 = Asciz	canBuildFrom;
const #127 = Asciz	()Lscala/collection/generic/CanBuildFrom;;
const #128 = NameAndType	#126:#127;//  canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
const #129 = Method	#114.#128;	//  scala/collection/immutable/List$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
const #130 = Asciz	scala/collection/TraversableLike;
const #131 = class	#130;	//  scala/collection/TraversableLike
const #132 = Asciz	map;
const #133 = Asciz	(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;;
const #134 = NameAndType	#132:#133;//  map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
const #135 = InterfaceMethod	#131.#134;	//  scala/collection/TraversableLike.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
const #136 = Asciz	scala/collection/immutable/List;
const #137 = class	#136;	//  scala/collection/immutable/List
const #138 = Asciz	noTimes;
const #139 = Asciz	I;
const #140 = Asciz	Scala;
const #141 = Asciz	InnerClasses;
const #142 = Asciz	$anonfun$main$1;
const #143 = Asciz	$anonfun$runBenchmark$1;
const #144 = Asciz	scala/testing/Benchmark$class;
const #145 = class	#144;	//  scala/testing/Benchmark$class

{
public static void $init$(scala.testing.Benchmark);
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	aload_0
   1:	iconst_1
   2:	invokeinterface	#12,  2; //InterfaceMethod scala/testing/Benchmark.multiplier_$eq:(I)V
   7:	return
  LineNumberTable: 
   line 45: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      8      0    $this       Lscala/testing/Benchmark;


public static void main(scala.testing.Benchmark, java.lang.String[]);
  Code:
   Stack=5, Locals=11, Args_size=2
   0:	aload_1
   1:	arraylength
   2:	iconst_0
   3:	if_icmple	115
   6:	new	#19; //class java/io/OutputStreamWriter
   9:	dup
   10:	getstatic	#25; //Field java/lang/System.out:Ljava/io/PrintStream;
   13:	invokespecial	#29; //Method java/io/OutputStreamWriter."<init>":(Ljava/io/OutputStream;)V
   16:	astore	4
   18:	aload_1
   19:	arraylength
   20:	iconst_1
   21:	if_icmple	47
   24:	aload_0
   25:	aload_1
   26:	iconst_1
   27:	aaload
   28:	astore_2
   29:	new	#31; //class scala/collection/immutable/StringOps
   32:	dup
   33:	aload_2
   34:	invokespecial	#34; //Method scala/collection/immutable/StringOps."<init>":(Ljava/lang/String;)V
   37:	invokeinterface	#40,  1; //InterfaceMethod scala/collection/immutable/StringLike.toInt:()I
   42:	invokeinterface	#12,  2; //InterfaceMethod scala/testing/Benchmark.multiplier_$eq:(I)V
   47:	aload	4
   49:	aload_0
   50:	invokeinterface	#44,  1; //InterfaceMethod scala/testing/Benchmark.prefix:()Ljava/lang/String;
   55:	invokevirtual	#47; //Method java/io/OutputStreamWriter.write:(Ljava/lang/String;)V
   58:	aload_0
   59:	aload_1
   60:	iconst_0
   61:	aaload
   62:	astore_3
   63:	new	#31; //class scala/collection/immutable/StringOps
   66:	dup
   67:	aload_3
   68:	invokespecial	#34; //Method scala/collection/immutable/StringOps."<init>":(Ljava/lang/String;)V
   71:	invokeinterface	#40,  1; //InterfaceMethod scala/collection/immutable/StringLike.toInt:()I
   76:	invokeinterface	#51,  2; //InterfaceMethod scala/testing/Benchmark.runBenchmark:(I)Lscala/collection/immutable/List;
   81:	new	#53; //class scala/testing/Benchmark$$anonfun$main$1
   84:	dup
   85:	aload_0
   86:	aload	4
   88:	invokespecial	#56; //Method scala/testing/Benchmark$$anonfun$main$1."<init>":(Lscala/testing/Benchmark;Ljava/io/OutputStreamWriter;)V
   91:	invokeinterface	#62,  2; //InterfaceMethod scala/collection/LinearSeqLike.foreach:(Lscala/Function1;)V
   96:	aload	4
   98:	getstatic	#68; //Field scala/compat/Platform$.MODULE$:Lscala/compat/Platform$;
   101:	invokevirtual	#71; //Method scala/compat/Platform$.EOL:()Ljava/lang/String;
   104:	invokevirtual	#47; //Method java/io/OutputStreamWriter.write:(Ljava/lang/String;)V
   107:	aload	4
   109:	invokevirtual	#75; //Method java/io/OutputStreamWriter.flush:()V
   112:	goto	172
   115:	ldc	#77; //String Usage: scala benchmarks.program <runs> 
   117:	astore	6
   119:	getstatic	#82; //Field scala/Console$.MODULE$:Lscala/Console$;
   122:	astore	5
   124:	aload	5
   126:	invokevirtual	#85; //Method scala/Console$.out:()Ljava/io/PrintStream;
   129:	aload	6
   131:	invokevirtual	#91; //Method java/io/PrintStream.println:(Ljava/lang/Object;)V
   134:	ldc	#93; //String    or: scala benchmarks.program <runs> <multiplier>
   136:	astore	8
   138:	getstatic	#82; //Field scala/Console$.MODULE$:Lscala/Console$;
   141:	astore	7
   143:	aload	7
   145:	invokevirtual	#85; //Method scala/Console$.out:()Ljava/io/PrintStream;
   148:	aload	8
   150:	invokevirtual	#91; //Method java/io/PrintStream.println:(Ljava/lang/Object;)V
   153:	ldc	#95; //String \n    The benchmark is run <runs> times, forcing a garbage collection between runs. The optional\n    <multiplier> causes the benchmark to be repeated <multiplier> times, each time for <runs>\n    executions.\n      
   155:	astore	10
   157:	getstatic	#82; //Field scala/Console$.MODULE$:Lscala/Console$;
   160:	astore	9
   162:	aload	9
   164:	invokevirtual	#85; //Method scala/Console$.out:()Ljava/io/PrintStream;
   167:	aload	10
   169:	invokevirtual	#91; //Method java/io/PrintStream.println:(Ljava/lang/Object;)V
   172:	return
  LineNumberTable: 
   line 80: 0
   line 81: 6
   line 82: 18
   line 88: 47
   line 83: 49
   line 84: 58
   line 87: 96
   line 88: 107
   line 90: 115
   line 91: 134
   line 92: 153
   line 80: 172

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      173      0    $this       Lscala/testing/Benchmark;
   0      173      1    args       [Ljava/lang/String;
   18      94      4    logFile$1       Ljava/io/OutputStreamWriter;


public static java.lang.String prefix(scala.testing.Benchmark);
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokevirtual	#106; //Method java/lang/Object.getClass:()Ljava/lang/Class;
   4:	invokevirtual	#111; //Method java/lang/Class.getName:()Ljava/lang/String;
   7:	areturn
  LineNumberTable: 
   line 70: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      8      0    $this       Lscala/testing/Benchmark;


public static scala.collection.immutable.List runBenchmark(scala.testing.Benchmark, int);
  Code:
   Stack=4, Locals=2, Args_size=2
   0:	getstatic	#117; //Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
   3:	iconst_1
   4:	iload_1
   5:	iconst_1
   6:	iadd
   7:	invokevirtual	#121; //Method scala/collection/immutable/List$.range:(II)Lscala/collection/Traversable;
   10:	new	#123; //class scala/testing/Benchmark$$anonfun$runBenchmark$1
   13:	dup
   14:	aload_0
   15:	invokespecial	#125; //Method scala/testing/Benchmark$$anonfun$runBenchmark$1."<init>":(Lscala/testing/Benchmark;)V
   18:	getstatic	#117; //Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
   21:	invokevirtual	#129; //Method scala/collection/immutable/List$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
   24:	invokeinterface	#135,  3; //InterfaceMethod scala/collection/TraversableLike.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
   29:	checkcast	#137; //class scala/collection/immutable/List
   32:	areturn
  LineNumberTable: 
   line 55: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      33      0    $this       Lscala/testing/Benchmark;
   0      33      1    noTimes       I


}

