Compiled from "Benchmark.scala"
public abstract class scala.testing.Benchmark$class extends java.lang.Object
  SourceFile: "Benchmark.scala"
  Scala: length = 0x
   
  InnerClass: 
   public final $anonfun$main$1=class scala/testing/Benchmark$$anonfun$main$1 of class scala/testing/Benchmark
   public final $anonfun$runBenchmark$1=class scala/testing/Benchmark$$anonfun$runBenchmark$1 of class scala/testing/Benchmark
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	Benchmark.scala;
Asciz	runBenchmark;
Asciz	(Lscala/testing/Benchmark;I)Lscala/collection/immutable/List;;
Asciz	Code;
Asciz	scala/collection/immutable/List$;
class	scala/collection/immutable/List$
Asciz	MODULE$;
Asciz	Lscala/collection/immutable/List$;;
NameAndType	MODULE$:Lscala/collection/immutable/List$;
Field	scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
Asciz	LineNumberTable;
Asciz	range;
Asciz	(II)Lscala/collection/Traversable;;
NameAndType	range:(II)Lscala/collection/Traversable;
Method	scala/collection/immutable/List$.range:(II)Lscala/collection/Traversable;
Asciz	scala/testing/Benchmark$$anonfun$runBenchmark$1;
class	scala/testing/Benchmark$$anonfun$runBenchmark$1
Asciz	<init>;
Asciz	(Lscala/testing/Benchmark;)V;
NameAndType	"<init>":(Lscala/testing/Benchmark;)V
Method	scala/testing/Benchmark$$anonfun$runBenchmark$1."<init>":(Lscala/testing/Benchmark;)V
Asciz	canBuildFrom;
Asciz	()Lscala/collection/generic/CanBuildFrom;;
NameAndType	canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
Method	scala/collection/immutable/List$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
Asciz	scala/collection/TraversableLike;
class	scala/collection/TraversableLike
Asciz	map;
Asciz	(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;;
NameAndType	map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
InterfaceMethod	scala/collection/TraversableLike.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
Asciz	scala/collection/immutable/List;
class	scala/collection/immutable/List
Asciz	$this;
Asciz	Lscala/testing/Benchmark;;
Asciz	noTimes;
Asciz	I;
Asciz	LocalVariableTable;
Asciz	prefix;
Asciz	(Lscala/testing/Benchmark;)Ljava/lang/String;;
Asciz	java/lang/Object;
class	java/lang/Object
Asciz	getClass;
Asciz	()Ljava/lang/Class;;
NameAndType	getClass:()Ljava/lang/Class;
Method	java/lang/Object.getClass:()Ljava/lang/Class;
Asciz	java/lang/Class;
class	java/lang/Class
Asciz	getName;
Asciz	()Ljava/lang/String;;
NameAndType	getName:()Ljava/lang/String;
Method	java/lang/Class.getName:()Ljava/lang/String;
Asciz	main;
Asciz	(Lscala/testing/Benchmark;[Ljava/lang/String;)V;
Asciz	java/io/OutputStreamWriter;
class	java/io/OutputStreamWriter
Asciz	java/lang/System;
class	java/lang/System
Asciz	out;
Asciz	Ljava/io/PrintStream;;
NameAndType	out:Ljava/io/PrintStream;
Field	java/lang/System.out:Ljava/io/PrintStream;
Asciz	(Ljava/io/OutputStream;)V;
NameAndType	"<init>":(Ljava/io/OutputStream;)V
Method	java/io/OutputStreamWriter."<init>":(Ljava/io/OutputStream;)V
Asciz	scala/Predef$;
class	scala/Predef$
Asciz	Lscala/Predef$;;
NameAndType	MODULE$:Lscala/Predef$;
Field	scala/Predef$.MODULE$:Lscala/Predef$;
Asciz	augmentString;
Asciz	(Ljava/lang/String;)Lscala/collection/immutable/StringOps;;
NameAndType	augmentString:(Ljava/lang/String;)Lscala/collection/immutable/StringOps;
Method	scala/Predef$.augmentString:(Ljava/lang/String;)Lscala/collection/immutable/StringOps;
Asciz	scala/collection/immutable/StringLike;
class	scala/collection/immutable/StringLike
Asciz	toInt;
Asciz	()I;
NameAndType	toInt:()I
InterfaceMethod	scala/collection/immutable/StringLike.toInt:()I
Asciz	scala/testing/Benchmark;
class	scala/testing/Benchmark
Asciz	multiplier_$eq;
Asciz	(I)V;
NameAndType	multiplier_$eq:(I)V
InterfaceMethod	scala/testing/Benchmark.multiplier_$eq:(I)V
NameAndType	prefix:()Ljava/lang/String;
InterfaceMethod	scala/testing/Benchmark.prefix:()Ljava/lang/String;
Asciz	write;
Asciz	(Ljava/lang/String;)V;
NameAndType	write:(Ljava/lang/String;)V
Method	java/io/OutputStreamWriter.write:(Ljava/lang/String;)V
Asciz	(I)Lscala/collection/immutable/List;;
NameAndType	runBenchmark:(I)Lscala/collection/immutable/List;
InterfaceMethod	scala/testing/Benchmark.runBenchmark:(I)Lscala/collection/immutable/List;
Asciz	scala/testing/Benchmark$$anonfun$main$1;
class	scala/testing/Benchmark$$anonfun$main$1
Asciz	(Lscala/testing/Benchmark;Ljava/io/OutputStreamWriter;)V;
NameAndType	"<init>":(Lscala/testing/Benchmark;Ljava/io/OutputStreamWriter;)V
Method	scala/testing/Benchmark$$anonfun$main$1."<init>":(Lscala/testing/Benchmark;Ljava/io/OutputStreamWriter;)V
Asciz	scala/collection/LinearSeqLike;
class	scala/collection/LinearSeqLike
Asciz	foreach;
Asciz	(Lscala/Function1;)V;
NameAndType	foreach:(Lscala/Function1;)V
InterfaceMethod	scala/collection/LinearSeqLike.foreach:(Lscala/Function1;)V
Asciz	scala/compat/Platform$;
class	scala/compat/Platform$
Asciz	Lscala/compat/Platform$;;
NameAndType	MODULE$:Lscala/compat/Platform$;
Field	scala/compat/Platform$.MODULE$:Lscala/compat/Platform$;
Asciz	EOL;
NameAndType	EOL:()Ljava/lang/String;
Method	scala/compat/Platform$.EOL:()Ljava/lang/String;
Asciz	flush;
Asciz	()V;
NameAndType	flush:()V
Method	java/io/OutputStreamWriter.flush:()V
Asciz	Usage: scala benchmarks.program <runs> ;
String	Usage: scala benchmarks.program <runs> 
Asciz	println;
Asciz	(Ljava/lang/Object;)V;
NameAndType	println:(Ljava/lang/Object;)V
Method	scala/Predef$.println:(Ljava/lang/Object;)V
Asciz	   or: scala benchmarks.program <runs> <multiplier>;
String	   or: scala benchmarks.program <runs> <multiplier>
Asciz	\n    The benchmark is run <runs> times, forcing a garbage collection between runs. The optional\n    <multiplier> causes the benchmark to be repeated <multiplier> times, each time for <runs>\n    executions.\n      ;
String	\n    The benchmark is run <runs> times, forcing a garbage collection between runs. The optional\n    <multiplier> causes the benchmark to be repeated <multiplier> times, each time for <runs>\n    executions.\n      
Asciz	args;
Asciz	[Ljava/lang/String;;
Asciz	logFile$1;
Asciz	Ljava/io/OutputStreamWriter;;
Asciz	$init$;
Asciz	Scala;
Asciz	InnerClasses;
Asciz	$anonfun$main$1;
Asciz	$anonfun$runBenchmark$1;
Asciz	scala/testing/Benchmark$class;
class	scala/testing/Benchmark$class

{
public static scala.collection.immutable.List runBenchmark(scala.testing.Benchmark, int);
  Signature: (Lscala/testing/Benchmark;I)Lscala/collection/immutable/List;
  Code:
   Stack=4, Locals=2, Args_size=2
	getstatic	Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
	iconst_1
	iload_1
	iconst_1
	iadd
	invokevirtual	Method scala/collection/immutable/List$.range:(II)Lscala/collection/Traversable;
	new	class scala/testing/Benchmark$$anonfun$runBenchmark$1
	dup
	aload_0
	invokespecial	Method scala/testing/Benchmark$$anonfun$runBenchmark$1."<init>":(Lscala/testing/Benchmark;)V
	getstatic	Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
	invokevirtual	Method scala/collection/immutable/List$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
	invokeinterface	InterfaceMethod scala/collection/TraversableLike.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
	checkcast	class scala/collection/immutable/List
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      33      0    $this       Lscala/testing/Benchmark;
   0      33      1    noTimes       I


public static java.lang.String prefix(scala.testing.Benchmark);
  Signature: (Lscala/testing/Benchmark;)Ljava/lang/String;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokevirtual	Method java/lang/Object.getClass:()Ljava/lang/Class;
	invokevirtual	Method java/lang/Class.getName:()Ljava/lang/String;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      8      0    $this       Lscala/testing/Benchmark;


public static void main(scala.testing.Benchmark, java.lang.String[]);
  Signature: (Lscala/testing/Benchmark;[Ljava/lang/String;)V
  Code:
   Stack=5, Locals=3, Args_size=2
	aload_1
	arraylength
	iconst_0
	if_icmple	l1 // getstatic
	new	class java/io/OutputStreamWriter
	dup
	getstatic	Field java/lang/System.out:Ljava/io/PrintStream;
	invokespecial	Method java/io/OutputStreamWriter."<init>":(Ljava/io/OutputStream;)V
	astore_2
	aload_1
	arraylength
	iconst_1
	if_icmple	l2 // aload_2
	aload_0
	getstatic	Field scala/Predef$.MODULE$:Lscala/Predef$;
	aload_1
	iconst_1
	aaload
	invokevirtual	Method scala/Predef$.augmentString:(Ljava/lang/String;)Lscala/collection/immutable/StringOps;
	invokeinterface	InterfaceMethod scala/collection/immutable/StringLike.toInt:()I
	invokeinterface	InterfaceMethod scala/testing/Benchmark.multiplier_$eq:(I)V
l2	aload_2
	aload_0
	invokeinterface	InterfaceMethod scala/testing/Benchmark.prefix:()Ljava/lang/String;
	invokevirtual	Method java/io/OutputStreamWriter.write:(Ljava/lang/String;)V
	aload_0
	getstatic	Field scala/Predef$.MODULE$:Lscala/Predef$;
	aload_1
	iconst_0
	aaload
	invokevirtual	Method scala/Predef$.augmentString:(Ljava/lang/String;)Lscala/collection/immutable/StringOps;
	invokeinterface	InterfaceMethod scala/collection/immutable/StringLike.toInt:()I
	invokeinterface	InterfaceMethod scala/testing/Benchmark.runBenchmark:(I)Lscala/collection/immutable/List;
	new	class scala/testing/Benchmark$$anonfun$main$1
	dup
	aload_0
	aload_2
	invokespecial	Method scala/testing/Benchmark$$anonfun$main$1."<init>":(Lscala/testing/Benchmark;Ljava/io/OutputStreamWriter;)V
	invokeinterface	InterfaceMethod scala/collection/LinearSeqLike.foreach:(Lscala/Function1;)V
	aload_2
	getstatic	Field scala/compat/Platform$.MODULE$:Lscala/compat/Platform$;
	invokevirtual	Method scala/compat/Platform$.EOL:()Ljava/lang/String;
	invokevirtual	Method java/io/OutputStreamWriter.write:(Ljava/lang/String;)V
	aload_2
	invokevirtual	Method java/io/OutputStreamWriter.flush:()V
	goto	l3 // return
l1	getstatic	Field scala/Predef$.MODULE$:Lscala/Predef$;
	ldc	String Usage: scala benchmarks.program <runs> 
	invokevirtual	Method scala/Predef$.println:(Ljava/lang/Object;)V
	getstatic	Field scala/Predef$.MODULE$:Lscala/Predef$;
	ldc	String    or: scala benchmarks.program <runs> <multiplier>
	invokevirtual	Method scala/Predef$.println:(Ljava/lang/Object;)V
	getstatic	Field scala/Predef$.MODULE$:Lscala/Predef$;
	ldc	String \n    The benchmark is run <runs> times, forcing a garbage collection between runs. The optional\n    <multiplier> causes the benchmark to be repeated <multiplier> times, each time for <runs>\n    executions.\n      
	invokevirtual	Method scala/Predef$.println:(Ljava/lang/Object;)V
l3	return
  Labels:
   	l2 = 43 // aload_2
   	l1 = 104 // getstatic
   	l3 = 128 // return
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      129      0    $this       Lscala/testing/Benchmark;
   0      129      1    args       [Ljava/lang/String;
   17      84      2    logFile$1       Ljava/io/OutputStreamWriter;


public static void $init$(scala.testing.Benchmark);
  Signature: (Lscala/testing/Benchmark;)V
  Code:
   Stack=2, Locals=1, Args_size=1
	aload_0
	iconst_1
	invokeinterface	InterfaceMethod scala/testing/Benchmark.multiplier_$eq:(I)V
	return
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      8      0    $this       Lscala/testing/Benchmark;


}

