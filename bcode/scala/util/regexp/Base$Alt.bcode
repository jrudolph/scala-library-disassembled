Compiled from "Base.scala"
public class scala.util.regexp.Base$Alt extends scala.util.regexp.Base$RegExp implements scala.ScalaObject
  SourceFile: "Base.scala"
  Scala: length = 0x
   
  InnerClass: 
   public #52= #14 of #51; //Alt=class scala/util/regexp/Base$Alt of class scala/util/regexp/Base
   public abstract #53= #18 of #51; //RegExp=class scala/util/regexp/Base$RegExp of class scala/util/regexp/Base
   public final #54= #23 of #14; //$anonfun$1=class scala/util/regexp/Base$Alt$$anonfun$1 of class scala/util/regexp/Base$Alt
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	Base.scala;
const #3 = Asciz	isNullable;
const #4 = Asciz	Z;
const #5 = Asciz	rs;
const #6 = Asciz	Lscala/collection/Seq;;
const #7 = Asciz	Lscala/collection/Seq<Lscala/util/regexp/Base$RegExp;>;;
const #8 = Asciz	Signature;
const #9 = Asciz	<init>;
const #10 = Asciz	(Lscala/util/regexp/Base;Lscala/collection/Seq;)V;
const #11 = Asciz	Code;
const #12 = Asciz	LineNumberTable;
const #13 = Asciz	scala/util/regexp/Base$Alt;
const #14 = class	#13;	//  scala/util/regexp/Base$Alt
const #15 = NameAndType	#5:#6;//  rs:Lscala/collection/Seq;
const #16 = Field	#14.#15;	//  scala/util/regexp/Base$Alt.rs:Lscala/collection/Seq;
const #17 = Asciz	scala/util/regexp/Base$RegExp;
const #18 = class	#17;	//  scala/util/regexp/Base$RegExp
const #19 = Asciz	(Lscala/util/regexp/Base;)V;
const #20 = NameAndType	#9:#19;//  "<init>":(Lscala/util/regexp/Base;)V
const #21 = Method	#18.#20;	//  scala/util/regexp/Base$RegExp."<init>":(Lscala/util/regexp/Base;)V
const #22 = Asciz	scala/util/regexp/Base$Alt$$anonfun$1;
const #23 = class	#22;	//  scala/util/regexp/Base$Alt$$anonfun$1
const #24 = Asciz	(Lscala/util/regexp/Base$Alt;)V;
const #25 = NameAndType	#9:#24;//  "<init>":(Lscala/util/regexp/Base$Alt;)V
const #26 = Method	#23.#25;	//  scala/util/regexp/Base$Alt$$anonfun$1."<init>":(Lscala/util/regexp/Base$Alt;)V
const #27 = Asciz	scala/collection/IterableLike;
const #28 = class	#27;	//  scala/collection/IterableLike
const #29 = Asciz	exists;
const #30 = Asciz	(Lscala/Function1;)Z;
const #31 = NameAndType	#29:#30;//  exists:(Lscala/Function1;)Z
const #32 = InterfaceMethod	#28.#31;	//  scala/collection/IterableLike.exists:(Lscala/Function1;)Z
const #33 = NameAndType	#3:#4;//  isNullable:Z
const #34 = Field	#14.#33;	//  scala/util/regexp/Base$Alt.isNullable:Z
const #35 = Asciz	this;
const #36 = Asciz	Lscala/util/regexp/Base$Alt;;
const #37 = Asciz	$outer;
const #38 = Asciz	Lscala/util/regexp/Base;;
const #39 = Asciz	LocalVariableTable;
const #40 = Asciz	(Lscala/util/regexp/Base;Lscala/collection/Seq<Lscala/util/regexp/Base$RegExp;>;)V;
const #41 = Asciz	scala$util$regexp$Base$Alt$$$outer;
const #42 = Asciz	()Lscala/util/regexp/Base;;
const #43 = NameAndType	#37:#38;//  $outer:Lscala/util/regexp/Base;
const #44 = Field	#18.#43;	//  scala/util/regexp/Base$RegExp.$outer:Lscala/util/regexp/Base;
const #45 = Asciz	()Z;
const #46 = Asciz	()Lscala/collection/Seq;;
const #47 = Asciz	()Lscala/collection/Seq<Lscala/util/regexp/Base$RegExp;>;;
const #48 = Asciz	Scala;
const #49 = Asciz	InnerClasses;
const #50 = Asciz	scala/util/regexp/Base;
const #51 = class	#50;	//  scala/util/regexp/Base
const #52 = Asciz	Alt;
const #53 = Asciz	RegExp;
const #54 = Asciz	$anonfun$1;
const #55 = Asciz	scala/ScalaObject;
const #56 = class	#55;	//  scala/ScalaObject

{
public scala.util.regexp.Base$Alt(scala.util.regexp.Base, scala.collection.Seq);
  Code:
   Stack=5, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_2
   2:	putfield	#16; //Field rs:Lscala/collection/Seq;
   5:	aload_0
   6:	aload_1
   7:	invokespecial	#21; //Method scala/util/regexp/Base$RegExp."<init>":(Lscala/util/regexp/Base;)V
   10:	aload_0
   11:	aload_2
   12:	new	#23; //class scala/util/regexp/Base$Alt$$anonfun$1
   15:	dup
   16:	aload_0
   17:	invokespecial	#26; //Method scala/util/regexp/Base$Alt$$anonfun$1."<init>":(Lscala/util/regexp/Base$Alt;)V
   20:	invokeinterface	#32,  2; //InterfaceMethod scala/collection/IterableLike.exists:(Lscala/Function1;)Z
   25:	putfield	#34; //Field isNullable:Z
   28:	return
  LineNumberTable: 
   line 37: 0
   line 38: 10

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      29      0    this       Lscala/util/regexp/Base$Alt;
   0      29      1    $outer       Lscala/util/regexp/Base;
   0      29      2    rs       Lscala/collection/Seq;

  Signature: length = 0x2
   00 28 

public scala.util.regexp.Base scala$util$regexp$Base$Alt$$$outer();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#44; //Field scala/util/regexp/Base$RegExp.$outer:Lscala/util/regexp/Base;
   4:	areturn
  LineNumberTable: 
   line 37: 0


public final boolean isNullable();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#34; //Field isNullable:Z
   4:	ireturn
  LineNumberTable: 
   line 38: 0


public scala.collection.Seq rs();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#16; //Field rs:Lscala/collection/Seq;
   4:	areturn
  LineNumberTable: 
   line 37: 0

  Signature: length = 0x2
   00 2F 

}

