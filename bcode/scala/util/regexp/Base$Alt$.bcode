Compiled from "Base.scala"
public final class scala.util.regexp.Base$Alt$ extends java.lang.Object implements scala.ScalaObject
  SourceFile: "Base.scala"
  Scala: length = 0x
   
  InnerClass: 
   public #65= #30 of #64; //Alt=class scala/util/regexp/Base$Alt of class scala/util/regexp/Base
   public final #68= #67 of #30; //$anonfun$1=class scala/util/regexp/Base$Alt$$anonfun$1 of class scala/util/regexp/Base$Alt
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	Base.scala;
const #3 = Asciz	Scala;
const #4 = Asciz	$outer;
const #5 = Asciz	Lscala/util/regexp/Base;;
const #6 = Asciz	<init>;
const #7 = Asciz	(Lscala/util/regexp/Base;)V;
const #8 = Asciz	Code;
const #9 = Asciz	LineNumberTable;
const #10 = Asciz	java/lang/NullPointerException;
const #11 = class	#10;	//  java/lang/NullPointerException
const #12 = Asciz	()V;
const #13 = NameAndType	#6:#12;//  "<init>":()V
const #14 = Method	#11.#13;	//  java/lang/NullPointerException."<init>":()V
const #15 = Asciz	scala/util/regexp/Base$Alt$;
const #16 = class	#15;	//  scala/util/regexp/Base$Alt$
const #17 = NameAndType	#4:#5;//  $outer:Lscala/util/regexp/Base;
const #18 = Field	#16.#17;	//  scala/util/regexp/Base$Alt$.$outer:Lscala/util/regexp/Base;
const #19 = Asciz	java/lang/Object;
const #20 = class	#19;	//  java/lang/Object
const #21 = Method	#20.#13;	//  java/lang/Object."<init>":()V
const #22 = Asciz	this;
const #23 = Asciz	Lscala/util/regexp/Base$Alt$;;
const #24 = Asciz	LocalVariableTable;
const #25 = Asciz	unapplySeq;
const #26 = Asciz	(Lscala/util/regexp/Base$Alt;)Lscala/Some;;
const #27 = Asciz	scala/Some;
const #28 = class	#27;	//  scala/Some
const #29 = Asciz	scala/util/regexp/Base$Alt;
const #30 = class	#29;	//  scala/util/regexp/Base$Alt
const #31 = Asciz	rs;
const #32 = Asciz	()Lscala/collection/Seq;;
const #33 = NameAndType	#31:#32;//  rs:()Lscala/collection/Seq;
const #34 = Method	#30.#33;	//  scala/util/regexp/Base$Alt.rs:()Lscala/collection/Seq;
const #35 = Asciz	(Ljava/lang/Object;)V;
const #36 = NameAndType	#6:#35;//  "<init>":(Ljava/lang/Object;)V
const #37 = Method	#28.#36;	//  scala/Some."<init>":(Ljava/lang/Object;)V
const #38 = Asciz	x;
const #39 = Asciz	Lscala/util/regexp/Base$Alt;;
const #40 = Asciz	(Lscala/util/regexp/Base$Alt;)Lscala/Some<Lscala/collection/Seq<Lscala/util/regexp/Base$RegExp;>;>;;
const #41 = Asciz	Signature;
const #42 = Asciz	apply;
const #43 = Asciz	(Lscala/collection/Seq;)Lscala/util/regexp/Base$Alt;;
const #44 = Asciz	scala/collection/SeqLike;
const #45 = class	#44;	//  scala/collection/SeqLike
const #46 = Asciz	size;
const #47 = Asciz	()I;
const #48 = NameAndType	#46:#47;//  size:()I
const #49 = InterfaceMethod	#45.#48;	//  scala/collection/SeqLike.size:()I
const #50 = Asciz	scala/util/regexp/SyntaxError;
const #51 = class	#50;	//  scala/util/regexp/SyntaxError
const #52 = Asciz	need at least 2 branches in Alt;
const #53 = String	#52;	//  need at least 2 branches in Alt
const #54 = Asciz	(Ljava/lang/String;)V;
const #55 = NameAndType	#6:#54;//  "<init>":(Ljava/lang/String;)V
const #56 = Method	#51.#55;	//  scala/util/regexp/SyntaxError."<init>":(Ljava/lang/String;)V
const #57 = Asciz	(Lscala/util/regexp/Base;Lscala/collection/Seq;)V;
const #58 = NameAndType	#6:#57;//  "<init>":(Lscala/util/regexp/Base;Lscala/collection/Seq;)V
const #59 = Method	#30.#58;	//  scala/util/regexp/Base$Alt."<init>":(Lscala/util/regexp/Base;Lscala/collection/Seq;)V
const #60 = Asciz	Lscala/collection/Seq;;
const #61 = Asciz	(Lscala/collection/Seq<Lscala/util/regexp/Base$RegExp;>;)Lscala/util/regexp/Base$Alt;;
const #62 = Asciz	InnerClasses;
const #63 = Asciz	scala/util/regexp/Base;
const #64 = class	#63;	//  scala/util/regexp/Base
const #65 = Asciz	Alt;
const #66 = Asciz	scala/util/regexp/Base$Alt$$anonfun$1;
const #67 = class	#66;	//  scala/util/regexp/Base$Alt$$anonfun$1
const #68 = Asciz	$anonfun$1;
const #69 = Asciz	scala/ScalaObject;
const #70 = class	#69;	//  scala/ScalaObject

{
public scala.util.regexp.Base$Alt$(scala.util.regexp.Base);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_1
   1:	ifnonnull	12
   4:	new	#11; //class java/lang/NullPointerException
   7:	dup
   8:	invokespecial	#14; //Method java/lang/NullPointerException."<init>":()V
   11:	athrow
   12:	aload_0
   13:	aload_1
   14:	putfield	#18; //Field $outer:Lscala/util/regexp/Base;
   17:	aload_0
   18:	invokespecial	#21; //Method java/lang/Object."<init>":()V
   21:	return
  LineNumberTable: 
   line 27: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      22      0    this       Lscala/util/regexp/Base$Alt$;
   0      22      1    $outer       Lscala/util/regexp/Base;


public scala.Some unapplySeq(scala.util.regexp.Base$Alt);
  Code:
   Stack=3, Locals=2, Args_size=2
   0:	new	#28; //class scala/Some
   3:	dup
   4:	aload_1
   5:	invokevirtual	#34; //Method scala/util/regexp/Base$Alt.rs:()Lscala/collection/Seq;
   8:	invokespecial	#37; //Method scala/Some."<init>":(Ljava/lang/Object;)V
   11:	areturn
  LineNumberTable: 
   line 34: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      12      0    this       Lscala/util/regexp/Base$Alt$;
   0      12      1    x       Lscala/util/regexp/Base$Alt;

  Signature: length = 0x2
   00 28 

public scala.util.regexp.Base$Alt apply(scala.collection.Seq);
  Code:
   Stack=4, Locals=2, Args_size=2
   0:	aload_1
   1:	invokeinterface	#49,  1; //InterfaceMethod scala/collection/SeqLike.size:()I
   6:	iconst_2
   7:	if_icmpge	20
   10:	new	#51; //class scala/util/regexp/SyntaxError
   13:	dup
   14:	ldc	#53; //String need at least 2 branches in Alt
   16:	invokespecial	#56; //Method scala/util/regexp/SyntaxError."<init>":(Ljava/lang/String;)V
   19:	athrow
   20:	new	#30; //class scala/util/regexp/Base$Alt
   23:	dup
   24:	aload_0
   25:	getfield	#18; //Field $outer:Lscala/util/regexp/Base;
   28:	aload_1
   29:	invokespecial	#59; //Method scala/util/regexp/Base$Alt."<init>":(Lscala/util/regexp/Base;Lscala/collection/Seq;)V
   32:	areturn
  LineNumberTable: 
   line 30: 0
   line 31: 20
   line 30: 32

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      33      0    this       Lscala/util/regexp/Base$Alt$;
   0      33      1    rs       Lscala/collection/Seq;

  Signature: length = 0x2
   00 3D 

}

