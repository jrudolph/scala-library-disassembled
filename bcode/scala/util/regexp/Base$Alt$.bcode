Compiled from "Base.scala"
public final class scala.util.regexp.Base$Alt$ extends java.lang.Object implements scala.ScalaObject
  SourceFile: "Base.scala"
  Scala: length = 0x
   
  InnerClass: 
   public Alt=class scala/util/regexp/Base$Alt of class scala/util/regexp/Base
   public final $anonfun$1=class scala/util/regexp/Base$Alt$$anonfun$1 of class scala/util/regexp/Base$Alt
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	Base.scala;
Asciz	Scala;
Asciz	$outer;
Asciz	Lscala/util/regexp/Base;;
Asciz	<init>;
Asciz	(Lscala/util/regexp/Base;)V;
Asciz	Code;
Asciz	LineNumberTable;
Asciz	java/lang/NullPointerException;
class	java/lang/NullPointerException
Asciz	()V;
NameAndType	"<init>":()V
Method	java/lang/NullPointerException."<init>":()V
Asciz	scala/util/regexp/Base$Alt$;
class	scala/util/regexp/Base$Alt$
NameAndType	$outer:Lscala/util/regexp/Base;
Field	scala/util/regexp/Base$Alt$.$outer:Lscala/util/regexp/Base;
Asciz	java/lang/Object;
class	java/lang/Object
Method	java/lang/Object."<init>":()V
Asciz	this;
Asciz	Lscala/util/regexp/Base$Alt$;;
Asciz	LocalVariableTable;
Asciz	unapplySeq;
Asciz	(Lscala/util/regexp/Base$Alt;)Lscala/Some;;
Asciz	scala/Some;
class	scala/Some
Asciz	scala/util/regexp/Base$Alt;
class	scala/util/regexp/Base$Alt
Asciz	rs;
Asciz	()Lscala/collection/Seq;;
NameAndType	rs:()Lscala/collection/Seq;
Method	scala/util/regexp/Base$Alt.rs:()Lscala/collection/Seq;
Asciz	(Ljava/lang/Object;)V;
NameAndType	"<init>":(Ljava/lang/Object;)V
Method	scala/Some."<init>":(Ljava/lang/Object;)V
Asciz	x;
Asciz	Lscala/util/regexp/Base$Alt;;
Asciz	(Lscala/util/regexp/Base$Alt;)Lscala/Some<Lscala/collection/Seq<Lscala/util/regexp/Base$RegExp;>;>;;
Asciz	Signature;
Asciz	apply;
Asciz	(Lscala/collection/Seq;)Lscala/util/regexp/Base$Alt;;
Asciz	scala/collection/SeqLike;
class	scala/collection/SeqLike
Asciz	size;
Asciz	()I;
NameAndType	size:()I
InterfaceMethod	scala/collection/SeqLike.size:()I
Asciz	scala/util/regexp/SyntaxError;
class	scala/util/regexp/SyntaxError
Asciz	need at least 2 branches in Alt;
String	need at least 2 branches in Alt
Asciz	(Ljava/lang/String;)V;
NameAndType	"<init>":(Ljava/lang/String;)V
Method	scala/util/regexp/SyntaxError."<init>":(Ljava/lang/String;)V
Asciz	(Lscala/util/regexp/Base;Lscala/collection/Seq;)V;
NameAndType	"<init>":(Lscala/util/regexp/Base;Lscala/collection/Seq;)V
Method	scala/util/regexp/Base$Alt."<init>":(Lscala/util/regexp/Base;Lscala/collection/Seq;)V
Asciz	Lscala/collection/Seq;;
Asciz	(Lscala/collection/Seq<Lscala/util/regexp/Base$RegExp;>;)Lscala/util/regexp/Base$Alt;;
Asciz	InnerClasses;
Asciz	scala/util/regexp/Base;
class	scala/util/regexp/Base
Asciz	Alt;
Asciz	scala/util/regexp/Base$Alt$$anonfun$1;
class	scala/util/regexp/Base$Alt$$anonfun$1
Asciz	$anonfun$1;
Asciz	scala/ScalaObject;
class	scala/ScalaObject

{
private final scala.util.regexp.Base $outer;
  Signature: Lscala/util/regexp/Base;

public scala.util.regexp.Base$Alt$(scala.util.regexp.Base);
  Signature: (Lscala/util/regexp/Base;)V
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_1
	ifnonnull	l1 // aload_0
	new	class java/lang/NullPointerException
	dup
	invokespecial	Method java/lang/NullPointerException."<init>":()V
	athrow
l1	aload_0
	aload_1
	putfield	Field $outer:Lscala/util/regexp/Base;
	aload_0
	invokespecial	Method java/lang/Object."<init>":()V
	return
  Labels:
   	l1 = 12 // aload_0
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      22      0    this       Lscala/util/regexp/Base$Alt$;
   0      22      1    $outer       Lscala/util/regexp/Base;


public scala.Some unapplySeq(scala.util.regexp.Base$Alt);
  Signature: (Lscala/util/regexp/Base$Alt;)Lscala/Some;
  Code:
   Stack=3, Locals=2, Args_size=2
	new	class scala/Some
	dup
	aload_1
	invokevirtual	Method scala/util/regexp/Base$Alt.rs:()Lscala/collection/Seq;
	invokespecial	Method scala/Some."<init>":(Ljava/lang/Object;)V
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      12      0    this       Lscala/util/regexp/Base$Alt$;
   0      12      1    x       Lscala/util/regexp/Base$Alt;

  Signature: length = 0x2
   00 28 

public scala.util.regexp.Base$Alt apply(scala.collection.Seq);
  Signature: (Lscala/collection/Seq;)Lscala/util/regexp/Base$Alt;
  Code:
   Stack=4, Locals=2, Args_size=2
	aload_1
	invokeinterface	InterfaceMethod scala/collection/SeqLike.size:()I
	iconst_2
	if_icmpge	l1 // new
	new	class scala/util/regexp/SyntaxError
	dup
	ldc	String need at least 2 branches in Alt
	invokespecial	Method scala/util/regexp/SyntaxError."<init>":(Ljava/lang/String;)V
	athrow
l1	new	class scala/util/regexp/Base$Alt
	dup
	aload_0
	getfield	Field $outer:Lscala/util/regexp/Base;
	aload_1
	invokespecial	Method scala/util/regexp/Base$Alt."<init>":(Lscala/util/regexp/Base;Lscala/collection/Seq;)V
	areturn
  Labels:
   	l1 = 20 // new
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      33      0    this       Lscala/util/regexp/Base$Alt$;
   0      33      1    rs       Lscala/collection/Seq;

  Signature: length = 0x2
   00 3D 

}

