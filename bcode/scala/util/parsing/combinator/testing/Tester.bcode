Compiled from "Tester.scala"
public abstract class scala.util.parsing.combinator.testing.Tester extends java.lang.Object implements scala.ScalaObject
  SourceFile: "Tester.scala"
  ScalaSig: length = 0x3
   05 00 00 
  RuntimeVisibleAnnotations: length = 0xB
   00 01 00 4F 00 01 00 50 73 00 51 
  InnerClass: 
   public abstract Parser=class scala/util/parsing/combinator/Parsers$Parser of class scala/util/parsing/combinator/Parsers
   public Scanner=class scala/util/parsing/combinator/lexical/Scanners$Scanner of class scala/util/parsing/combinator/lexical/Scanners
   public abstract ParseResult=class scala/util/parsing/combinator/Parsers$ParseResult of class scala/util/parsing/combinator/Parsers
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	Tester.scala;
Asciz	syntactic;
Asciz	()Lscala/util/parsing/combinator/syntactical/TokenParsers;;
Asciz	parser;
Asciz	()Lscala/util/parsing/combinator/Parsers$Parser;;
Asciz	()Lscala/util/parsing/combinator/Parsers$Parser<Ljava/lang/Object;>;;
Asciz	Signature;
Asciz	test;
Asciz	(Ljava/lang/String;)V;
Asciz	Code;
Asciz	scala/Console$;
class	scala/Console$
Asciz	MODULE$;
Asciz	Lscala/Console$;;
NameAndType	MODULE$:Lscala/Console$;
Field	scala/Console$.MODULE$:Lscala/Console$;
Asciz	LineNumberTable;
Asciz	scala/collection/mutable/StringBuilder;
class	scala/collection/mutable/StringBuilder
Asciz	<init>;
Asciz	()V;
NameAndType	"<init>":()V
Method	scala/collection/mutable/StringBuilder."<init>":()V
Asciz	\nin : ;
String	\nin : 
Asciz	append;
Asciz	(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;;
NameAndType	append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
Method	scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
Asciz	toString;
Asciz	()Ljava/lang/String;;
NameAndType	toString:()Ljava/lang/String;
Method	scala/collection/mutable/StringBuilder.toString:()Ljava/lang/String;
Asciz	println;
Asciz	(Ljava/lang/Object;)V;
NameAndType	println:(Ljava/lang/Object;)V
Method	scala/Console$.println:(Ljava/lang/Object;)V
Asciz	scala/util/parsing/combinator/testing/Tester;
class	scala/util/parsing/combinator/testing/Tester
NameAndType	syntactic:()Lscala/util/parsing/combinator/syntactical/TokenParsers;
Method	scala/util/parsing/combinator/testing/Tester.syntactic:()Lscala/util/parsing/combinator/syntactical/TokenParsers;
NameAndType	parser:()Lscala/util/parsing/combinator/Parsers$Parser;
Method	scala/util/parsing/combinator/testing/Tester.parser:()Lscala/util/parsing/combinator/Parsers$Parser;
Asciz	scala/util/parsing/combinator/Parsers;
class	scala/util/parsing/combinator/Parsers
Asciz	phrase;
Asciz	(Lscala/util/parsing/combinator/Parsers$Parser;)Lscala/util/parsing/combinator/Parsers$Parser;;
NameAndType	phrase:(Lscala/util/parsing/combinator/Parsers$Parser;)Lscala/util/parsing/combinator/Parsers$Parser;
InterfaceMethod	scala/util/parsing/combinator/Parsers.phrase:(Lscala/util/parsing/combinator/Parsers$Parser;)Lscala/util/parsing/combinator/Parsers$Parser;
Asciz	scala/util/parsing/combinator/lexical/Scanners$Scanner;
class	scala/util/parsing/combinator/lexical/Scanners$Scanner
Asciz	scala/util/parsing/combinator/syntactical/TokenParsers;
class	scala/util/parsing/combinator/syntactical/TokenParsers
Asciz	lexical;
Asciz	()Lscala/util/parsing/combinator/token/Tokens;;
NameAndType	lexical:()Lscala/util/parsing/combinator/token/Tokens;
InterfaceMethod	scala/util/parsing/combinator/syntactical/TokenParsers.lexical:()Lscala/util/parsing/combinator/token/Tokens;
Asciz	scala/util/parsing/combinator/lexical/Scanners;
class	scala/util/parsing/combinator/lexical/Scanners
Asciz	(Lscala/util/parsing/combinator/lexical/Scanners;Ljava/lang/String;)V;
NameAndType	"<init>":(Lscala/util/parsing/combinator/lexical/Scanners;Ljava/lang/String;)V
Method	scala/util/parsing/combinator/lexical/Scanners$Scanner."<init>":(Lscala/util/parsing/combinator/lexical/Scanners;Ljava/lang/String;)V
Asciz	scala/util/parsing/combinator/Parsers$Parser;
class	scala/util/parsing/combinator/Parsers$Parser
Asciz	apply;
Asciz	(Lscala/util/parsing/input/Reader;)Lscala/util/parsing/combinator/Parsers$ParseResult;;
NameAndType	apply:(Lscala/util/parsing/input/Reader;)Lscala/util/parsing/combinator/Parsers$ParseResult;
Method	scala/util/parsing/combinator/Parsers$Parser.apply:(Lscala/util/parsing/input/Reader;)Lscala/util/parsing/combinator/Parsers$ParseResult;
Asciz	this;
Asciz	Lscala/util/parsing/combinator/testing/Tester;;
Asciz	in;
Asciz	Ljava/lang/String;;
Asciz	LocalVariableTable;
Asciz	java/lang/Object;
class	java/lang/Object
Method	java/lang/Object."<init>":()V
Asciz	ScalaSig;
Asciz	Lscala/reflect/ScalaSignature;;
Asciz	bytes;
Asciz	=3\"\r\t!)H/:\r!a;fgRLgn\t!bY8nE&t\r^8s\t9\"AqCJN\4%QB;uS2TaCgG.Y'\raB\tQi#I\tA\1oO*\t1#kCZBAy%M[3diBqG%D'G.Y(cUGCA$=S:LGO;AaA!9b\t!C:z]R7\r^5d+#CA&\r!!\"A#sKLg.Z7f]RtC*9#B-P;bGRL7-7\n):#+pWt+:tKJb$5\t%LYDnY1m+qCA2$B\tGAMKbL7-7\tQ!!Dk1/:tKJ,A\toejdB B<M]:fe&A!8/:t!\t9b(@\tI\=\tA\"\tQ,7\"a#\nS!B+oSRDQa!A!!!8%ceBAK\tY%\"Qe$WMZ:aa;sS:<'BA&;
Asciz	RuntimeVisibleAnnotations;
Asciz	InnerClasses;
Asciz	Parser;
Asciz	Scanner;
Asciz	scala/util/parsing/combinator/Parsers$ParseResult;
class	scala/util/parsing/combinator/Parsers$ParseResult
Asciz	ParseResult;
Asciz	scala/ScalaObject;
class	scala/ScalaObject

{
public abstract scala.util.parsing.combinator.syntactical.TokenParsers syntactic();
  Signature: ()Lscala/util/parsing/combinator/syntactical/TokenParsers;

public abstract scala.util.parsing.combinator.Parsers$Parser parser();
  Signature: ()Lscala/util/parsing/combinator/Parsers$Parser;
  Signature: length = 0x2
   00 07 

public void test(java.lang.String);
  Signature: (Ljava/lang/String;)V
  Code:
   Stack=6, Locals=2, Args_size=2
	getstatic	Field scala/Console$.MODULE$:Lscala/Console$;
	new	class scala/collection/mutable/StringBuilder
	dup
	invokespecial	Method scala/collection/mutable/StringBuilder."<init>":()V
	ldc	String \nin : 
	invokevirtual	Method scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
	aload_1
	invokevirtual	Method scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
	invokevirtual	Method scala/collection/mutable/StringBuilder.toString:()Ljava/lang/String;
	invokevirtual	Method scala/Console$.println:(Ljava/lang/Object;)V
	getstatic	Field scala/Console$.MODULE$:Lscala/Console$;
	aload_0
	invokevirtual	Method syntactic:()Lscala/util/parsing/combinator/syntactical/TokenParsers;
	aload_0
	invokevirtual	Method parser:()Lscala/util/parsing/combinator/Parsers$Parser;
	invokeinterface	InterfaceMethod scala/util/parsing/combinator/Parsers.phrase:(Lscala/util/parsing/combinator/Parsers$Parser;)Lscala/util/parsing/combinator/Parsers$Parser;
	new	class scala/util/parsing/combinator/lexical/Scanners$Scanner
	dup
	aload_0
	invokevirtual	Method syntactic:()Lscala/util/parsing/combinator/syntactical/TokenParsers;
	invokeinterface	InterfaceMethod scala/util/parsing/combinator/syntactical/TokenParsers.lexical:()Lscala/util/parsing/combinator/token/Tokens;
	checkcast	class scala/util/parsing/combinator/lexical/Scanners
	aload_1
	invokespecial	Method scala/util/parsing/combinator/lexical/Scanners$Scanner."<init>":(Lscala/util/parsing/combinator/lexical/Scanners;Ljava/lang/String;)V
	invokevirtual	Method scala/util/parsing/combinator/Parsers$Parser.apply:(Lscala/util/parsing/input/Reader;)Lscala/util/parsing/combinator/Parsers$ParseResult;
	invokevirtual	Method scala/Console$.println:(Ljava/lang/Object;)V
	return
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      68      0    this       Lscala/util/parsing/combinator/testing/Tester;
   0      68      1    in       Ljava/lang/String;


public scala.util.parsing.combinator.testing.Tester();
  Signature: ()V
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokespecial	Method java/lang/Object."<init>":()V
	return
  Labels:

}

