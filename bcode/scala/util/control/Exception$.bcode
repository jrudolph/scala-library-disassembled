Compiled from "Exception.scala"
public final class scala.util.control.Exception$ extends java.lang.Object implements scala.ScalaObject
  SourceFile: "Exception.scala"
  Scala: length = 0x
   
  InnerClass: 
   public #205= #135 of #204; //By=class scala/util/control/Exception$By of class scala/util/control/Exception
   public #208= #207 of #204; //Try=class scala/util/control/Exception$Try of class scala/util/control/Exception
   public #209= #33 of #204; //Catch=class scala/util/control/Exception$Catch of class scala/util/control/Exception
   public final #210= #92 of #204; //$anon$4=class scala/util/control/Exception$$anon$4 of class scala/util/control/Exception
   public final #211= #112 of #204; //$anon$5=class scala/util/control/Exception$$anon$5 of class scala/util/control/Exception
   public final #212= #28 of #204; //$anon$3=class scala/util/control/Exception$$anon$3 of class scala/util/control/Exception
   public final #213= #198 of #204; //$anon$1=class scala/util/control/Exception$$anon$1 of class scala/util/control/Exception
   public #216= #215 of #204; //Finally=class scala/util/control/Exception$Finally of class scala/util/control/Exception
   public abstract #217= #43 of #204; //Described=class scala/util/control/Exception$Described of class scala/util/control/Exception
   public abstract #220= #219 of #204; //Described$class=class scala/util/control/Exception$Described$class of class scala/util/control/Exception
   public final #221= #146 of #204; //$anonfun$failing$1=class scala/util/control/Exception$$anonfun$failing$1 of class scala/util/control/Exception
   public final #222= #137 of #204; //$anonfun$handling$1=class scala/util/control/Exception$$anonfun$handling$1 of class scala/util/control/Exception
   public final #223= #152 of #204; //$anonfun$ignoring$1=class scala/util/control/Exception$$anonfun$ignoring$1 of class scala/util/control/Exception
   public final #224= #163 of #204; //$anonfun$catching$1=class scala/util/control/Exception$$anonfun$catching$1 of class scala/util/control/Exception
   public final #225= #189 of #204; //$anonfun$allCatch$1=class scala/util/control/Exception$$anonfun$allCatch$1 of class scala/util/control/Exception
   public final #226= #105 of #204; //$anonfun$unwrapping$1=class scala/util/control/Exception$$anonfun$unwrapping$1 of class scala/util/control/Exception
   public final #227= #53 of #204; //$anonfun$scala$util$control$Exception$$wouldMatch$1=class scala/util/control/Exception$$anonfun$scala$util$control$Exception$$wouldMatch$1 of class scala/util/control/Exception
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	Exception.scala;
const #3 = Asciz	Scala;
const #4 = Asciz	MODULE$;
const #5 = Asciz	Lscala/util/control/Exception$;;
const #6 = Asciz	<clinit>;
const #7 = Asciz	()V;
const #8 = Asciz	Code;
const #9 = Asciz	scala/util/control/Exception$;
const #10 = class	#9;	//  scala/util/control/Exception$
const #11 = Asciz	<init>;
const #12 = NameAndType	#11:#7;//  "<init>":()V
const #13 = Method	#10.#12;	//  scala/util/control/Exception$."<init>":()V
const #14 = Asciz	noCatch;
const #15 = Asciz	Lscala/util/control/Exception$Catch;;
const #16 = Asciz	Lscala/util/control/Exception$Catch<Lscala/runtime/Nothing$;>;;
const #17 = Asciz	Signature;
const #18 = Asciz	nothingCatcher;
const #19 = Asciz	Lscala/PartialFunction;;
const #20 = Asciz	Lscala/PartialFunction<Ljava/lang/Throwable;Lscala/runtime/Nothing$;>;;
const #21 = Asciz	LineNumberTable;
const #22 = Asciz	java/lang/Object;
const #23 = class	#22;	//  java/lang/Object
const #24 = Method	#23.#12;	//  java/lang/Object."<init>":()V
const #25 = NameAndType	#4:#5;//  MODULE$:Lscala/util/control/Exception$;
const #26 = Field	#10.#25;	//  scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
const #27 = Asciz	scala/util/control/Exception$$anon$3;
const #28 = class	#27;	//  scala/util/control/Exception$$anon$3
const #29 = Method	#28.#12;	//  scala/util/control/Exception$$anon$3."<init>":()V
const #30 = NameAndType	#18:#19;//  nothingCatcher:Lscala/PartialFunction;
const #31 = Field	#10.#30;	//  scala/util/control/Exception$.nothingCatcher:Lscala/PartialFunction;
const #32 = Asciz	scala/util/control/Exception$Catch;
const #33 = class	#32;	//  scala/util/control/Exception$Catch
const #34 = Asciz	()Lscala/PartialFunction;;
const #35 = NameAndType	#18:#34;//  nothingCatcher:()Lscala/PartialFunction;
const #36 = Method	#10.#35;	//  scala/util/control/Exception$.nothingCatcher:()Lscala/PartialFunction;
const #37 = Asciz	(Lscala/PartialFunction;)V;
const #38 = NameAndType	#11:#37;//  "<init>":(Lscala/PartialFunction;)V
const #39 = Method	#33.#38;	//  scala/util/control/Exception$Catch."<init>":(Lscala/PartialFunction;)V
const #40 = Asciz	<nothing>;
const #41 = String	#40;	//  <nothing>
const #42 = Asciz	scala/util/control/Exception$Described;
const #43 = class	#42;	//  scala/util/control/Exception$Described
const #44 = Asciz	withDesc;
const #45 = Asciz	(Ljava/lang/String;)Lscala/util/control/Exception$Described;;
const #46 = NameAndType	#44:#45;//  withDesc:(Ljava/lang/String;)Lscala/util/control/Exception$Described;
const #47 = InterfaceMethod	#43.#46;	//  scala/util/control/Exception$Described.withDesc:(Ljava/lang/String;)Lscala/util/control/Exception$Described;
const #48 = NameAndType	#14:#15;//  noCatch:Lscala/util/control/Exception$Catch;
const #49 = Field	#10.#48;	//  scala/util/control/Exception$.noCatch:Lscala/util/control/Exception$Catch;
const #50 = Asciz	unwrap$1;
const #51 = Asciz	(Ljava/lang/Throwable;Lscala/collection/Seq;)Ljava/lang/Throwable;;
const #52 = Asciz	scala/util/control/Exception$$anonfun$scala$util$control$Exception$$wouldMatch$1;
const #53 = class	#52;	//  scala/util/control/Exception$$anonfun$scala$util$control$Exception$$wouldMatch$1
const #54 = Asciz	(Ljava/lang/Throwable;)V;
const #55 = NameAndType	#11:#54;//  "<init>":(Ljava/lang/Throwable;)V
const #56 = Method	#53.#55;	//  scala/util/control/Exception$$anonfun$scala$util$control$Exception$$wouldMatch$1."<init>":(Ljava/lang/Throwable;)V
const #57 = Asciz	scala/collection/IterableLike;
const #58 = class	#57;	//  scala/collection/IterableLike
const #59 = Asciz	exists;
const #60 = Asciz	(Lscala/Function1;)Z;
const #61 = NameAndType	#59:#60;//  exists:(Lscala/Function1;)Z
const #62 = InterfaceMethod	#58.#61;	//  scala/collection/IterableLike.exists:(Lscala/Function1;)Z
const #63 = Asciz	java/lang/Throwable;
const #64 = class	#63;	//  java/lang/Throwable
const #65 = Asciz	getCause;
const #66 = Asciz	()Ljava/lang/Throwable;;
const #67 = NameAndType	#65:#66;//  getCause:()Ljava/lang/Throwable;
const #68 = Method	#64.#67;	//  java/lang/Throwable.getCause:()Ljava/lang/Throwable;
const #69 = Asciz	equals;
const #70 = Asciz	(Ljava/lang/Object;)Z;
const #71 = NameAndType	#69:#70;//  equals:(Ljava/lang/Object;)Z
const #72 = Method	#23.#71;	//  java/lang/Object.equals:(Ljava/lang/Object;)Z
const #73 = Asciz	this;
const #74 = Asciz	x;
const #75 = Asciz	Ljava/lang/Throwable;;
const #76 = Asciz	LocalVariableTable;
const #77 = Asciz	fun$1;
const #78 = Asciz	(Lscala/Function1;Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;;
const #79 = Asciz	catching;
const #80 = Asciz	(Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;;
const #81 = NameAndType	#79:#80;//  catching:(Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;
const #82 = Method	#10.#81;	//  scala/util/control/Exception$.catching:(Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;
const #83 = Asciz	withApply;
const #84 = Asciz	(Lscala/Function1;)Lscala/util/control/Exception$Catch;;
const #85 = NameAndType	#83:#84;//  withApply:(Lscala/Function1;)Lscala/util/control/Exception$Catch;
const #86 = Method	#33.#85;	//  scala/util/control/Exception$Catch.withApply:(Lscala/Function1;)Lscala/util/control/Exception$Catch;
const #87 = Asciz	f;
const #88 = Asciz	Lscala/Function1;;
const #89 = Asciz	pfFromExceptions;
const #90 = Asciz	(Lscala/collection/Seq;)Ljava/lang/Object;;
const #91 = Asciz	scala/util/control/Exception$$anon$4;
const #92 = class	#91;	//  scala/util/control/Exception$$anon$4
const #93 = Asciz	(Lscala/collection/Seq;)V;
const #94 = NameAndType	#11:#93;//  "<init>":(Lscala/collection/Seq;)V
const #95 = Method	#92.#94;	//  scala/util/control/Exception$$anon$4."<init>":(Lscala/collection/Seq;)V
const #96 = Asciz	exceptions$1;
const #97 = Asciz	Lscala/collection/Seq;;
const #98 = Asciz	(Lscala/collection/Seq<Ljava/lang/Class<*>;>;)Ljava/lang/Object;;
const #99 = Asciz	scala$util$control$Exception$$wouldMatch;
const #100 = Asciz	(Ljava/lang/Throwable;Lscala/collection/Seq;)Z;
const #101 = Asciz	x$8;
const #102 = Asciz	classes;
const #103 = Asciz	unwrapping;
const #104 = Asciz	scala/util/control/Exception$$anonfun$unwrapping$1;
const #105 = class	#104;	//  scala/util/control/Exception$$anonfun$unwrapping$1
const #106 = Method	#105.#94;	//  scala/util/control/Exception$$anonfun$unwrapping$1."<init>":(Lscala/collection/Seq;)V
const #107 = Asciz	exceptions$3;
const #108 = Asciz	<T:Ljava/lang/Object;>(Lscala/collection/Seq<Ljava/lang/Class<*>;>;)Lscala/util/control/Exception$Catch<TT;>;;
const #109 = Asciz	saving;
const #110 = Asciz	(Ljava/lang/Object;Ljava/lang/Object;Lscala/Function1;)Lscala/util/control/Exception$Catch;;
const #111 = Asciz	scala/util/control/Exception$$anon$5;
const #112 = class	#111;	//  scala/util/control/Exception$$anon$5
const #113 = Asciz	(Ljava/lang/Object;Ljava/lang/Object;Lscala/Function1;)V;
const #114 = NameAndType	#11:#113;//  "<init>":(Ljava/lang/Object;Ljava/lang/Object;Lscala/Function1;)V
const #115 = Method	#112.#114;	//  scala/util/control/Exception$$anon$5."<init>":(Ljava/lang/Object;Ljava/lang/Object;Lscala/Function1;)V
const #116 = Asciz	oldVal$1;
const #117 = Asciz	Ljava/lang/Object;;
const #118 = Asciz	newVal$1;
const #119 = Asciz	setter$1;
const #120 = Asciz	<A:Ljava/lang/Object;>(TA;TA;Lscala/Function1<TA;Ljava/lang/Object;>;)Lscala/util/control/Exception$Catch<Lscala/runtime/Nothing$;>;;
const #121 = Asciz	ultimately;
const #122 = Asciz	(Lscala/Function0;)Lscala/util/control/Exception$Catch;;
const #123 = Asciz	()Lscala/util/control/Exception$Catch;;
const #124 = NameAndType	#14:#123;//  noCatch:()Lscala/util/control/Exception$Catch;
const #125 = Method	#10.#124;	//  scala/util/control/Exception$.noCatch:()Lscala/util/control/Exception$Catch;
const #126 = Asciz	andFinally;
const #127 = NameAndType	#126:#122;//  andFinally:(Lscala/Function0;)Lscala/util/control/Exception$Catch;
const #128 = Method	#33.#127;	//  scala/util/control/Exception$Catch.andFinally:(Lscala/Function0;)Lscala/util/control/Exception$Catch;
const #129 = Asciz	body;
const #130 = Asciz	Lscala/Function0;;
const #131 = Asciz	<T:Ljava/lang/Object;>(Lscala/Function0<Ljava/lang/Object;>;)Lscala/util/control/Exception$Catch<TT;>;;
const #132 = Asciz	handling;
const #133 = Asciz	(Lscala/collection/Seq;)Lscala/util/control/Exception$By;;
const #134 = Asciz	scala/util/control/Exception$By;
const #135 = class	#134;	//  scala/util/control/Exception$By
const #136 = Asciz	scala/util/control/Exception$$anonfun$handling$1;
const #137 = class	#136;	//  scala/util/control/Exception$$anonfun$handling$1
const #138 = Method	#137.#94;	//  scala/util/control/Exception$$anonfun$handling$1."<init>":(Lscala/collection/Seq;)V
const #139 = Asciz	(Lscala/Function1;)V;
const #140 = NameAndType	#11:#139;//  "<init>":(Lscala/Function1;)V
const #141 = Method	#135.#140;	//  scala/util/control/Exception$By."<init>":(Lscala/Function1;)V
const #142 = Asciz	exceptions$2;
const #143 = Asciz	<T:Ljava/lang/Object;>(Lscala/collection/Seq<Ljava/lang/Class<*>;>;)Lscala/util/control/Exception$By<Lscala/Function1<Ljava/lang/Throwable;TT;>;Lscala/util/control/Exception$Catch<TT;>;>;;
const #144 = Asciz	failing;
const #145 = Asciz	scala/util/control/Exception$$anonfun$failing$1;
const #146 = class	#145;	//  scala/util/control/Exception$$anonfun$failing$1
const #147 = Method	#146.#12;	//  scala/util/control/Exception$$anonfun$failing$1."<init>":()V
const #148 = Asciz	exceptions;
const #149 = Asciz	<T:Ljava/lang/Object;>(Lscala/collection/Seq<Ljava/lang/Class<*>;>;)Lscala/util/control/Exception$Catch<Lscala/Option<TT;>;>;;
const #150 = Asciz	ignoring;
const #151 = Asciz	scala/util/control/Exception$$anonfun$ignoring$1;
const #152 = class	#151;	//  scala/util/control/Exception$$anonfun$ignoring$1
const #153 = Method	#152.#12;	//  scala/util/control/Exception$$anonfun$ignoring$1."<init>":()V
const #154 = Asciz	(Lscala/collection/Seq<Ljava/lang/Class<*>;>;)Lscala/util/control/Exception$Catch<Ljava/lang/Object;>;;
const #155 = Asciz	(Lscala/PartialFunction;)Lscala/util/control/Exception$Catch;;
const #156 = Asciz	c;
const #157 = Asciz	<T:Ljava/lang/Object;>(Lscala/PartialFunction<Ljava/lang/Throwable;TT;>;)Lscala/util/control/Exception$Catch<TT;>;;
const #158 = NameAndType	#89:#90;//  pfFromExceptions:(Lscala/collection/Seq;)Ljava/lang/Object;
const #159 = Method	#10.#158;	//  scala/util/control/Exception$.pfFromExceptions:(Lscala/collection/Seq;)Ljava/lang/Object;
const #160 = Asciz	scala/PartialFunction;
const #161 = class	#160;	//  scala/PartialFunction
const #162 = Asciz	scala/util/control/Exception$$anonfun$catching$1;
const #163 = class	#162;	//  scala/util/control/Exception$$anonfun$catching$1
const #164 = Method	#163.#12;	//  scala/util/control/Exception$$anonfun$catching$1."<init>":()V
const #165 = Asciz	scala/collection/Seq$;
const #166 = class	#165;	//  scala/collection/Seq$
const #167 = Asciz	Lscala/collection/Seq$;;
const #168 = NameAndType	#4:#167;//  MODULE$:Lscala/collection/Seq$;
const #169 = Field	#166.#168;	//  scala/collection/Seq$.MODULE$:Lscala/collection/Seq$;
const #170 = Asciz	canBuildFrom;
const #171 = Asciz	()Lscala/collection/generic/CanBuildFrom;;
const #172 = NameAndType	#170:#171;//  canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
const #173 = Method	#166.#172;	//  scala/collection/Seq$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
const #174 = Asciz	scala/collection/TraversableLike;
const #175 = class	#174;	//  scala/collection/TraversableLike
const #176 = Asciz	map;
const #177 = Asciz	(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;;
const #178 = NameAndType	#176:#177;//  map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
const #179 = InterfaceMethod	#175.#178;	//  scala/collection/TraversableLike.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
const #180 = Asciz	, ;
const #181 = String	#180;	//  , 
const #182 = Asciz	mkString;
const #183 = Asciz	(Ljava/lang/String;)Ljava/lang/String;;
const #184 = NameAndType	#182:#183;//  mkString:(Ljava/lang/String;)Ljava/lang/String;
const #185 = InterfaceMethod	#175.#184;	//  scala/collection/TraversableLike.mkString:(Ljava/lang/String;)Ljava/lang/String;
const #186 = Asciz	()Lscala/util/control/Exception$Catch<Lscala/runtime/Nothing$;>;;
const #187 = Asciz	allCatch;
const #188 = Asciz	scala/util/control/Exception$$anonfun$allCatch$1;
const #189 = class	#188;	//  scala/util/control/Exception$$anonfun$allCatch$1
const #190 = Method	#189.#12;	//  scala/util/control/Exception$$anonfun$allCatch$1."<init>":()V
const #191 = Asciz	<everything>;
const #192 = String	#191;	//  <everything>
const #193 = Asciz	<T:Ljava/lang/Object;>()Lscala/util/control/Exception$Catch<TT;>;;
const #194 = Asciz	()Lscala/PartialFunction<Ljava/lang/Throwable;Lscala/runtime/Nothing$;>;;
const #195 = Asciz	fromExceptionCatcher;
const #196 = Asciz	(Lscala/PartialFunction;)Lscala/PartialFunction;;
const #197 = Asciz	scala/util/control/Exception$$anon$1;
const #198 = class	#197;	//  scala/util/control/Exception$$anon$1
const #199 = Method	#198.#38;	//  scala/util/control/Exception$$anon$1."<init>":(Lscala/PartialFunction;)V
const #200 = Asciz	pf$1;
const #201 = Asciz	<T:Ljava/lang/Object;>(Lscala/PartialFunction<Ljava/lang/Exception;TT;>;)Lscala/PartialFunction<Ljava/lang/Throwable;TT;>;;
const #202 = Asciz	InnerClasses;
const #203 = Asciz	scala/util/control/Exception;
const #204 = class	#203;	//  scala/util/control/Exception
const #205 = Asciz	By;
const #206 = Asciz	scala/util/control/Exception$Try;
const #207 = class	#206;	//  scala/util/control/Exception$Try
const #208 = Asciz	Try;
const #209 = Asciz	Catch;
const #210 = Asciz	$anon$4;
const #211 = Asciz	$anon$5;
const #212 = Asciz	$anon$3;
const #213 = Asciz	$anon$1;
const #214 = Asciz	scala/util/control/Exception$Finally;
const #215 = class	#214;	//  scala/util/control/Exception$Finally
const #216 = Asciz	Finally;
const #217 = Asciz	Described;
const #218 = Asciz	scala/util/control/Exception$Described$class;
const #219 = class	#218;	//  scala/util/control/Exception$Described$class
const #220 = Asciz	Described$class;
const #221 = Asciz	$anonfun$failing$1;
const #222 = Asciz	$anonfun$handling$1;
const #223 = Asciz	$anonfun$ignoring$1;
const #224 = Asciz	$anonfun$catching$1;
const #225 = Asciz	$anonfun$allCatch$1;
const #226 = Asciz	$anonfun$unwrapping$1;
const #227 = Asciz	$anonfun$scala$util$control$Exception$$wouldMatch$1;
const #228 = Asciz	scala/ScalaObject;
const #229 = class	#228;	//  scala/ScalaObject

{
public static final scala.util.control.Exception$ MODULE$;

public static {};
  Code:
   Stack=1, Locals=0, Args_size=0
   0:	new	#10; //class scala/util/control/Exception$
   3:	invokespecial	#13; //Method "<init>":()V
   6:	return

public final java.lang.Throwable unwrap$1(java.lang.Throwable, scala.collection.Seq);
  Code:
   Stack=4, Locals=4, Args_size=3
   0:	aload_2
   1:	new	#53; //class scala/util/control/Exception$$anonfun$scala$util$control$Exception$$wouldMatch$1
   4:	dup
   5:	aload_1
   6:	invokespecial	#56; //Method scala/util/control/Exception$$anonfun$scala$util$control$Exception$$wouldMatch$1."<init>":(Ljava/lang/Throwable;)V
   9:	invokeinterface	#62,  2; //InterfaceMethod scala/collection/IterableLike.exists:(Lscala/Function1;)Z
   14:	ifeq	42
   17:	aload_1
   18:	invokevirtual	#68; //Method java/lang/Throwable.getCause:()Ljava/lang/Throwable;
   21:	dup
   22:	astore_3
   23:	ifnull	42
   26:	aload_3
   27:	aconst_null
   28:	invokevirtual	#72; //Method java/lang/Object.equals:(Ljava/lang/Object;)Z
   31:	ifne	42
   34:	aload_1
   35:	invokevirtual	#68; //Method java/lang/Throwable.getCause:()Ljava/lang/Throwable;
   38:	astore_1
   39:	goto	0
   42:	aload_1
   43:	areturn
  LineNumberTable: 
   line 199: 0
   line 200: 42
   line 198: 43

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      44      0    this       Lscala/util/control/Exception$;
   0      44      1    x       Ljava/lang/Throwable;


public final scala.util.control.Exception$Catch fun$1(scala.Function1, scala.collection.Seq);
  Code:
   Stack=2, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_2
   2:	invokevirtual	#82; //Method catching:(Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;
   5:	aload_1
   6:	invokevirtual	#86; //Method scala/util/control/Exception$Catch.withApply:(Lscala/Function1;)Lscala/util/control/Exception$Catch;
   9:	areturn
  LineNumberTable: 
   line 179: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      10      0    this       Lscala/util/control/Exception$;
   0      10      1    f       Lscala/Function1;


public final boolean scala$util$control$Exception$$wouldMatch(java.lang.Throwable, scala.collection.Seq);
  Code:
   Stack=4, Locals=3, Args_size=3
   0:	aload_2
   1:	new	#53; //class scala/util/control/Exception$$anonfun$scala$util$control$Exception$$wouldMatch$1
   4:	dup
   5:	aload_1
   6:	invokespecial	#56; //Method scala/util/control/Exception$$anonfun$scala$util$control$Exception$$wouldMatch$1."<init>":(Ljava/lang/Throwable;)V
   9:	invokeinterface	#62,  2; //InterfaceMethod scala/collection/IterableLike.exists:(Lscala/Function1;)Z
   14:	ireturn
  LineNumberTable: 
   line 207: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      15      0    this       Lscala/util/control/Exception$;
   0      15      1    x$8       Ljava/lang/Throwable;
   0      15      2    classes       Lscala/collection/Seq;


public scala.util.control.Exception$Catch unwrapping(scala.collection.Seq);
  Code:
   Stack=4, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokevirtual	#82; //Method catching:(Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;
   5:	new	#105; //class scala/util/control/Exception$$anonfun$unwrapping$1
   8:	dup
   9:	aload_1
   10:	invokespecial	#106; //Method scala/util/control/Exception$$anonfun$unwrapping$1."<init>":(Lscala/collection/Seq;)V
   13:	invokevirtual	#86; //Method scala/util/control/Exception$Catch.withApply:(Lscala/Function1;)Lscala/util/control/Exception$Catch;
   16:	areturn
  LineNumberTable: 
   line 202: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      17      0    this       Lscala/util/control/Exception$;
   0      17      1    exceptions$3       Lscala/collection/Seq;

  Signature: length = 0x2
   00 6C 

public scala.util.control.Exception$Catch saving(java.lang.Object, java.lang.Object, scala.Function1);
  Code:
   Stack=5, Locals=4, Args_size=4
   0:	new	#112; //class scala/util/control/Exception$$anon$5
   3:	dup
   4:	aload_1
   5:	aload_2
   6:	aload_3
   7:	invokespecial	#115; //Method scala/util/control/Exception$$anon$5."<init>":(Ljava/lang/Object;Ljava/lang/Object;Lscala/Function1;)V
   10:	areturn
  LineNumberTable: 
   line 188: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/util/control/Exception$;
   0      11      1    oldVal$1       Ljava/lang/Object;
   0      11      2    newVal$1       Ljava/lang/Object;
   0      11      3    setter$1       Lscala/Function1;

  Signature: length = 0x2
   00 78 

public scala.util.control.Exception$Catch ultimately(scala.Function0);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	invokevirtual	#125; //Method noCatch:()Lscala/util/control/Exception$Catch;
   4:	aload_1
   5:	invokevirtual	#128; //Method scala/util/control/Exception$Catch.andFinally:(Lscala/Function0;)Lscala/util/control/Exception$Catch;
   8:	areturn
  LineNumberTable: 
   line 184: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      9      0    this       Lscala/util/control/Exception$;
   0      9      1    body       Lscala/Function0;

  Signature: length = 0x2
   00 FFFFFF83 

public scala.util.control.Exception$By handling(scala.collection.Seq);
  Code:
   Stack=5, Locals=2, Args_size=2
   0:	new	#135; //class scala/util/control/Exception$By
   3:	dup
   4:	new	#137; //class scala/util/control/Exception$$anonfun$handling$1
   7:	dup
   8:	aload_1
   9:	invokespecial	#138; //Method scala/util/control/Exception$$anonfun$handling$1."<init>":(Lscala/collection/Seq;)V
   12:	invokespecial	#141; //Method scala/util/control/Exception$By."<init>":(Lscala/Function1;)V
   15:	areturn
  LineNumberTable: 
   line 180: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      16      0    this       Lscala/util/control/Exception$;
   0      16      1    exceptions$2       Lscala/collection/Seq;

  Signature: length = 0x2
   00 FFFFFF8F 

public scala.util.control.Exception$Catch failing(scala.collection.Seq);
  Code:
   Stack=3, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokevirtual	#82; //Method catching:(Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;
   5:	new	#146; //class scala/util/control/Exception$$anonfun$failing$1
   8:	dup
   9:	invokespecial	#147; //Method scala/util/control/Exception$$anonfun$failing$1."<init>":()V
   12:	invokevirtual	#86; //Method scala/util/control/Exception$Catch.withApply:(Lscala/Function1;)Lscala/util/control/Exception$Catch;
   15:	areturn
  LineNumberTable: 
   line 169: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      16      0    this       Lscala/util/control/Exception$;
   0      16      1    exceptions       Lscala/collection/Seq;

  Signature: length = 0x2
   00 FFFFFF95 

public scala.util.control.Exception$Catch ignoring(scala.collection.Seq);
  Code:
   Stack=3, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokevirtual	#82; //Method catching:(Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;
   5:	new	#152; //class scala/util/control/Exception$$anonfun$ignoring$1
   8:	dup
   9:	invokespecial	#153; //Method scala/util/control/Exception$$anonfun$ignoring$1."<init>":()V
   12:	invokevirtual	#86; //Method scala/util/control/Exception$Catch.withApply:(Lscala/Function1;)Lscala/util/control/Exception$Catch;
   15:	areturn
  LineNumberTable: 
   line 165: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      16      0    this       Lscala/util/control/Exception$;
   0      16      1    exceptions       Lscala/collection/Seq;

  Signature: length = 0x2
   00 FFFFFF9A 

public scala.util.control.Exception$Catch catching(scala.PartialFunction);
  Code:
   Stack=3, Locals=2, Args_size=2
   0:	new	#33; //class scala/util/control/Exception$Catch
   3:	dup
   4:	aload_1
   5:	invokespecial	#39; //Method scala/util/control/Exception$Catch."<init>":(Lscala/PartialFunction;)V
   8:	areturn
  LineNumberTable: 
   line 161: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      9      0    this       Lscala/util/control/Exception$;
   0      9      1    c       Lscala/PartialFunction;

  Signature: length = 0x2
   00 FFFFFF9D 

public scala.util.control.Exception$Catch catching(scala.collection.Seq);
  Code:
   Stack=4, Locals=2, Args_size=2
   0:	new	#33; //class scala/util/control/Exception$Catch
   3:	dup
   4:	aload_0
   5:	aload_1
   6:	invokespecial	#159; //Method pfFromExceptions:(Lscala/collection/Seq;)Ljava/lang/Object;
   9:	checkcast	#161; //class scala/PartialFunction
   12:	invokespecial	#39; //Method scala/util/control/Exception$Catch."<init>":(Lscala/PartialFunction;)V
   15:	aload_1
   16:	new	#163; //class scala/util/control/Exception$$anonfun$catching$1
   19:	dup
   20:	invokespecial	#164; //Method scala/util/control/Exception$$anonfun$catching$1."<init>":()V
   23:	getstatic	#169; //Field scala/collection/Seq$.MODULE$:Lscala/collection/Seq$;
   26:	invokevirtual	#173; //Method scala/collection/Seq$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
   29:	invokeinterface	#179,  3; //InterfaceMethod scala/collection/TraversableLike.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
   34:	checkcast	#175; //class scala/collection/TraversableLike
   37:	ldc	#181; //String , 
   39:	invokeinterface	#185,  2; //InterfaceMethod scala/collection/TraversableLike.mkString:(Ljava/lang/String;)Ljava/lang/String;
   44:	invokeinterface	#47,  2; //InterfaceMethod scala/util/control/Exception$Described.withDesc:(Ljava/lang/String;)Lscala/util/control/Exception$Described;
   49:	checkcast	#33; //class scala/util/control/Exception$Catch
   52:	areturn
  LineNumberTable: 
   line 160: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      53      0    this       Lscala/util/control/Exception$;
   0      53      1    exceptions       Lscala/collection/Seq;

  Signature: length = 0x2
   00 6C 

public final scala.util.control.Exception$Catch noCatch();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#49; //Field noCatch:Lscala/util/control/Exception$Catch;
   4:	areturn
  LineNumberTable: 
   line 152: 0

  Signature: length = 0x2
   00 FFFFFFBA 

public final scala.util.control.Exception$Catch allCatch();
  Code:
   Stack=4, Locals=1, Args_size=1
   0:	new	#33; //class scala/util/control/Exception$Catch
   3:	dup
   4:	new	#189; //class scala/util/control/Exception$$anonfun$allCatch$1
   7:	dup
   8:	invokespecial	#190; //Method scala/util/control/Exception$$anonfun$allCatch$1."<init>":()V
   11:	invokespecial	#39; //Method scala/util/control/Exception$Catch."<init>":(Lscala/PartialFunction;)V
   14:	ldc	#192; //String <everything>
   16:	invokeinterface	#47,  2; //InterfaceMethod scala/util/control/Exception$Described.withDesc:(Ljava/lang/String;)Lscala/util/control/Exception$Described;
   21:	checkcast	#33; //class scala/util/control/Exception$Catch
   24:	areturn
  LineNumberTable: 
   line 149: 0

  Signature: length = 0x2
   00 FFFFFFC1 

public final scala.PartialFunction nothingCatcher();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#31; //Field nothingCatcher:Lscala/PartialFunction;
   4:	areturn
  LineNumberTable: 
   line 142: 0

  Signature: length = 0x2
   00 FFFFFFC2 

public scala.PartialFunction fromExceptionCatcher(scala.PartialFunction);
  Code:
   Stack=3, Locals=2, Args_size=2
   0:	new	#198; //class scala/util/control/Exception$$anon$1
   3:	dup
   4:	aload_1
   5:	invokespecial	#199; //Method scala/util/control/Exception$$anon$1."<init>":(Lscala/PartialFunction;)V
   8:	areturn
  LineNumberTable: 
   line 33: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      9      0    this       Lscala/util/control/Exception$;
   0      9      1    pf$1       Lscala/PartialFunction;

  Signature: length = 0x2
   00 FFFFFFC9 

}

