Compiled from "Exception.scala"
public final class scala.util.control.Exception$ extends java.lang.Object implements scala.ScalaObject
  SourceFile: "Exception.scala"
  Scala: length = 0x
   
  InnerClass: 
   public By=class scala/util/control/Exception$By of class scala/util/control/Exception
   public Try=class scala/util/control/Exception$Try of class scala/util/control/Exception
   public Catch=class scala/util/control/Exception$Catch of class scala/util/control/Exception
   public final $anon$4=class scala/util/control/Exception$$anon$4 of class scala/util/control/Exception
   public final $anon$5=class scala/util/control/Exception$$anon$5 of class scala/util/control/Exception
   public final $anon$3=class scala/util/control/Exception$$anon$3 of class scala/util/control/Exception
   public final $anon$1=class scala/util/control/Exception$$anon$1 of class scala/util/control/Exception
   public Finally=class scala/util/control/Exception$Finally of class scala/util/control/Exception
   public abstract Described=class scala/util/control/Exception$Described of class scala/util/control/Exception
   public abstract Described$class=class scala/util/control/Exception$Described$class of class scala/util/control/Exception
   public final $anonfun$failing$1=class scala/util/control/Exception$$anonfun$failing$1 of class scala/util/control/Exception
   public final $anonfun$handling$1=class scala/util/control/Exception$$anonfun$handling$1 of class scala/util/control/Exception
   public final $anonfun$ignoring$1=class scala/util/control/Exception$$anonfun$ignoring$1 of class scala/util/control/Exception
   public final $anonfun$catching$1=class scala/util/control/Exception$$anonfun$catching$1 of class scala/util/control/Exception
   public final $anonfun$allCatch$1=class scala/util/control/Exception$$anonfun$allCatch$1 of class scala/util/control/Exception
   public final $anonfun$unwrapping$1=class scala/util/control/Exception$$anonfun$unwrapping$1 of class scala/util/control/Exception
   public final $anonfun$scala$util$control$Exception$$wouldMatch$1=class scala/util/control/Exception$$anonfun$scala$util$control$Exception$$wouldMatch$1 of class scala/util/control/Exception
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	Exception.scala;
Asciz	Scala;
Asciz	MODULE$;
Asciz	Lscala/util/control/Exception$;;
Asciz	<clinit>;
Asciz	()V;
Asciz	Code;
Asciz	scala/util/control/Exception$;
class	scala/util/control/Exception$
Asciz	<init>;
NameAndType	"<init>":()V
Method	scala/util/control/Exception$."<init>":()V
Asciz	noCatch;
Asciz	Lscala/util/control/Exception$Catch;;
Asciz	Lscala/util/control/Exception$Catch<Lscala/runtime/Nothing$;>;;
Asciz	Signature;
Asciz	nothingCatcher;
Asciz	Lscala/PartialFunction;;
Asciz	Lscala/PartialFunction<Ljava/lang/Throwable;Lscala/runtime/Nothing$;>;;
Asciz	LineNumberTable;
Asciz	java/lang/Object;
class	java/lang/Object
Method	java/lang/Object."<init>":()V
NameAndType	MODULE$:Lscala/util/control/Exception$;
Field	scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
Asciz	scala/util/control/Exception$$anon$3;
class	scala/util/control/Exception$$anon$3
Method	scala/util/control/Exception$$anon$3."<init>":()V
NameAndType	nothingCatcher:Lscala/PartialFunction;
Field	scala/util/control/Exception$.nothingCatcher:Lscala/PartialFunction;
Asciz	scala/util/control/Exception$Catch;
class	scala/util/control/Exception$Catch
Asciz	()Lscala/PartialFunction;;
NameAndType	nothingCatcher:()Lscala/PartialFunction;
Method	scala/util/control/Exception$.nothingCatcher:()Lscala/PartialFunction;
Asciz	(Lscala/PartialFunction;)V;
NameAndType	"<init>":(Lscala/PartialFunction;)V
Method	scala/util/control/Exception$Catch."<init>":(Lscala/PartialFunction;)V
Asciz	<nothing>;
String	<nothing>
Asciz	scala/util/control/Exception$Described;
class	scala/util/control/Exception$Described
Asciz	withDesc;
Asciz	(Ljava/lang/String;)Lscala/util/control/Exception$Described;;
NameAndType	withDesc:(Ljava/lang/String;)Lscala/util/control/Exception$Described;
InterfaceMethod	scala/util/control/Exception$Described.withDesc:(Ljava/lang/String;)Lscala/util/control/Exception$Described;
NameAndType	noCatch:Lscala/util/control/Exception$Catch;
Field	scala/util/control/Exception$.noCatch:Lscala/util/control/Exception$Catch;
Asciz	unwrap$1;
Asciz	(Ljava/lang/Throwable;Lscala/collection/Seq;)Ljava/lang/Throwable;;
Asciz	scala/util/control/Exception$$anonfun$scala$util$control$Exception$$wouldMatch$1;
class	scala/util/control/Exception$$anonfun$scala$util$control$Exception$$wouldMatch$1
Asciz	(Ljava/lang/Throwable;)V;
NameAndType	"<init>":(Ljava/lang/Throwable;)V
Method	scala/util/control/Exception$$anonfun$scala$util$control$Exception$$wouldMatch$1."<init>":(Ljava/lang/Throwable;)V
Asciz	scala/collection/IterableLike;
class	scala/collection/IterableLike
Asciz	exists;
Asciz	(Lscala/Function1;)Z;
NameAndType	exists:(Lscala/Function1;)Z
InterfaceMethod	scala/collection/IterableLike.exists:(Lscala/Function1;)Z
Asciz	java/lang/Throwable;
class	java/lang/Throwable
Asciz	getCause;
Asciz	()Ljava/lang/Throwable;;
NameAndType	getCause:()Ljava/lang/Throwable;
Method	java/lang/Throwable.getCause:()Ljava/lang/Throwable;
Asciz	equals;
Asciz	(Ljava/lang/Object;)Z;
NameAndType	equals:(Ljava/lang/Object;)Z
Method	java/lang/Object.equals:(Ljava/lang/Object;)Z
Asciz	this;
Asciz	x;
Asciz	Ljava/lang/Throwable;;
Asciz	LocalVariableTable;
Asciz	fun$1;
Asciz	(Lscala/Function1;Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;;
Asciz	catching;
Asciz	(Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;;
NameAndType	catching:(Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;
Method	scala/util/control/Exception$.catching:(Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;
Asciz	withApply;
Asciz	(Lscala/Function1;)Lscala/util/control/Exception$Catch;;
NameAndType	withApply:(Lscala/Function1;)Lscala/util/control/Exception$Catch;
Method	scala/util/control/Exception$Catch.withApply:(Lscala/Function1;)Lscala/util/control/Exception$Catch;
Asciz	f;
Asciz	Lscala/Function1;;
Asciz	pfFromExceptions;
Asciz	(Lscala/collection/Seq;)Lscala/PartialFunction;;
Asciz	scala/util/control/Exception$$anon$4;
class	scala/util/control/Exception$$anon$4
Asciz	(Lscala/collection/Seq;)V;
NameAndType	"<init>":(Lscala/collection/Seq;)V
Method	scala/util/control/Exception$$anon$4."<init>":(Lscala/collection/Seq;)V
Asciz	exceptions$1;
Asciz	Lscala/collection/Seq;;
Asciz	(Lscala/collection/Seq<Ljava/lang/Class<*>;>;)Ljava/lang/Object;;
Asciz	scala$util$control$Exception$$wouldMatch;
Asciz	(Ljava/lang/Throwable;Lscala/collection/Seq;)Z;
Asciz	x$8;
Asciz	classes;
Asciz	unwrapping;
Asciz	scala/util/control/Exception$$anonfun$unwrapping$1;
class	scala/util/control/Exception$$anonfun$unwrapping$1
Method	scala/util/control/Exception$$anonfun$unwrapping$1."<init>":(Lscala/collection/Seq;)V
Asciz	exceptions$3;
Asciz	<T:Ljava/lang/Object;>(Lscala/collection/Seq<Ljava/lang/Class<*>;>;)Lscala/util/control/Exception$Catch<TT;>;;
Asciz	saving;
Asciz	(Ljava/lang/Object;Ljava/lang/Object;Lscala/Function1;)Lscala/util/control/Exception$Catch;;
Asciz	scala/util/control/Exception$$anon$5;
class	scala/util/control/Exception$$anon$5
Asciz	(Ljava/lang/Object;Ljava/lang/Object;Lscala/Function1;)V;
NameAndType	"<init>":(Ljava/lang/Object;Ljava/lang/Object;Lscala/Function1;)V
Method	scala/util/control/Exception$$anon$5."<init>":(Ljava/lang/Object;Ljava/lang/Object;Lscala/Function1;)V
Asciz	oldVal$1;
Asciz	Ljava/lang/Object;;
Asciz	newVal$1;
Asciz	setter$1;
Asciz	<A:Ljava/lang/Object;>(TA;TA;Lscala/Function1<TA;Ljava/lang/Object;>;)Lscala/util/control/Exception$Catch<Lscala/runtime/Nothing$;>;;
Asciz	ultimately;
Asciz	(Lscala/Function0;)Lscala/util/control/Exception$Catch;;
Asciz	()Lscala/util/control/Exception$Catch;;
NameAndType	noCatch:()Lscala/util/control/Exception$Catch;
Method	scala/util/control/Exception$.noCatch:()Lscala/util/control/Exception$Catch;
Asciz	andFinally;
NameAndType	andFinally:(Lscala/Function0;)Lscala/util/control/Exception$Catch;
Method	scala/util/control/Exception$Catch.andFinally:(Lscala/Function0;)Lscala/util/control/Exception$Catch;
Asciz	body;
Asciz	Lscala/Function0;;
Asciz	<T:Ljava/lang/Object;>(Lscala/Function0<Ljava/lang/Object;>;)Lscala/util/control/Exception$Catch<TT;>;;
Asciz	handling;
Asciz	(Lscala/collection/Seq;)Lscala/util/control/Exception$By;;
Asciz	scala/util/control/Exception$By;
class	scala/util/control/Exception$By
Asciz	scala/util/control/Exception$$anonfun$handling$1;
class	scala/util/control/Exception$$anonfun$handling$1
Method	scala/util/control/Exception$$anonfun$handling$1."<init>":(Lscala/collection/Seq;)V
Asciz	(Lscala/Function1;)V;
NameAndType	"<init>":(Lscala/Function1;)V
Method	scala/util/control/Exception$By."<init>":(Lscala/Function1;)V
Asciz	exceptions$2;
Asciz	<T:Ljava/lang/Object;>(Lscala/collection/Seq<Ljava/lang/Class<*>;>;)Lscala/util/control/Exception$By<Lscala/Function1<Ljava/lang/Throwable;TT;>;Lscala/util/control/Exception$Catch<TT;>;>;;
Asciz	failing;
Asciz	scala/util/control/Exception$$anonfun$failing$1;
class	scala/util/control/Exception$$anonfun$failing$1
Method	scala/util/control/Exception$$anonfun$failing$1."<init>":()V
Asciz	exceptions;
Asciz	<T:Ljava/lang/Object;>(Lscala/collection/Seq<Ljava/lang/Class<*>;>;)Lscala/util/control/Exception$Catch<Lscala/Option<TT;>;>;;
Asciz	ignoring;
Asciz	scala/util/control/Exception$$anonfun$ignoring$1;
class	scala/util/control/Exception$$anonfun$ignoring$1
Method	scala/util/control/Exception$$anonfun$ignoring$1."<init>":()V
Asciz	(Lscala/collection/Seq<Ljava/lang/Class<*>;>;)Lscala/util/control/Exception$Catch<Ljava/lang/Object;>;;
Asciz	(Lscala/PartialFunction;)Lscala/util/control/Exception$Catch;;
Asciz	c;
Asciz	<T:Ljava/lang/Object;>(Lscala/PartialFunction<Ljava/lang/Throwable;TT;>;)Lscala/util/control/Exception$Catch<TT;>;;
NameAndType	pfFromExceptions:(Lscala/collection/Seq;)Lscala/PartialFunction;
Method	scala/util/control/Exception$.pfFromExceptions:(Lscala/collection/Seq;)Lscala/PartialFunction;
Asciz	scala/util/control/Exception$$anonfun$catching$1;
class	scala/util/control/Exception$$anonfun$catching$1
Method	scala/util/control/Exception$$anonfun$catching$1."<init>":()V
Asciz	scala/collection/Seq$;
class	scala/collection/Seq$
Asciz	Lscala/collection/Seq$;;
NameAndType	MODULE$:Lscala/collection/Seq$;
Field	scala/collection/Seq$.MODULE$:Lscala/collection/Seq$;
Asciz	canBuildFrom;
Asciz	()Lscala/collection/generic/CanBuildFrom;;
NameAndType	canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
Method	scala/collection/Seq$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
Asciz	scala/collection/TraversableLike;
class	scala/collection/TraversableLike
Asciz	map;
Asciz	(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;;
NameAndType	map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
InterfaceMethod	scala/collection/TraversableLike.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
Asciz	, ;
String	, 
Asciz	mkString;
Asciz	(Ljava/lang/String;)Ljava/lang/String;;
NameAndType	mkString:(Ljava/lang/String;)Ljava/lang/String;
InterfaceMethod	scala/collection/TraversableLike.mkString:(Ljava/lang/String;)Ljava/lang/String;
Asciz	()Lscala/util/control/Exception$Catch<Lscala/runtime/Nothing$;>;;
Asciz	allCatch;
Asciz	scala/util/control/Exception$$anonfun$allCatch$1;
class	scala/util/control/Exception$$anonfun$allCatch$1
Method	scala/util/control/Exception$$anonfun$allCatch$1."<init>":()V
Asciz	<everything>;
String	<everything>
Asciz	<T:Ljava/lang/Object;>()Lscala/util/control/Exception$Catch<TT;>;;
Asciz	()Lscala/PartialFunction<Ljava/lang/Throwable;Lscala/runtime/Nothing$;>;;
Asciz	fromExceptionCatcher;
Asciz	(Lscala/PartialFunction;)Lscala/PartialFunction;;
Asciz	scala/util/control/Exception$$anon$1;
class	scala/util/control/Exception$$anon$1
Method	scala/util/control/Exception$$anon$1."<init>":(Lscala/PartialFunction;)V
Asciz	pf$1;
Asciz	<T:Ljava/lang/Object;>(Lscala/PartialFunction<Ljava/lang/Exception;TT;>;)Lscala/PartialFunction<Ljava/lang/Throwable;TT;>;;
Asciz	InnerClasses;
Asciz	scala/util/control/Exception;
class	scala/util/control/Exception
Asciz	By;
Asciz	scala/util/control/Exception$Try;
class	scala/util/control/Exception$Try
Asciz	Try;
Asciz	Catch;
Asciz	$anon$4;
Asciz	$anon$5;
Asciz	$anon$3;
Asciz	$anon$1;
Asciz	scala/util/control/Exception$Finally;
class	scala/util/control/Exception$Finally
Asciz	Finally;
Asciz	Described;
Asciz	scala/util/control/Exception$Described$class;
class	scala/util/control/Exception$Described$class
Asciz	Described$class;
Asciz	$anonfun$failing$1;
Asciz	$anonfun$handling$1;
Asciz	$anonfun$ignoring$1;
Asciz	$anonfun$catching$1;
Asciz	$anonfun$allCatch$1;
Asciz	$anonfun$unwrapping$1;
Asciz	$anonfun$scala$util$control$Exception$$wouldMatch$1;
Asciz	scala/ScalaObject;
class	scala/ScalaObject

{
public static final scala.util.control.Exception$ MODULE$;
  Signature: Lscala/util/control/Exception$;

private final scala.util.control.Exception$Catch noCatch;
  Signature: Lscala/util/control/Exception$Catch;
  Signature: length = 0x2
   00 10 

private final scala.PartialFunction nothingCatcher;
  Signature: Lscala/PartialFunction;
  Signature: length = 0x2
   00 14 

public static {};
  Signature: ()V
  Code:
   Stack=1, Locals=0, Args_size=0
	new	class scala/util/control/Exception$
	invokespecial	Method "<init>":()V
	return
  Labels:

private scala.util.control.Exception$();
  Signature: ()V
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	invokespecial	Method java/lang/Object."<init>":()V
	aload_0
	putstatic	Field MODULE$:Lscala/util/control/Exception$;
	aload_0
	new	class scala/util/control/Exception$$anon$3
	dup
	invokespecial	Method scala/util/control/Exception$$anon$3."<init>":()V
	putfield	Field nothingCatcher:Lscala/PartialFunction;
	aload_0
	new	class scala/util/control/Exception$Catch
	dup
	aload_0
	invokevirtual	Method nothingCatcher:()Lscala/PartialFunction;
	invokespecial	Method scala/util/control/Exception$Catch."<init>":(Lscala/PartialFunction;)V
	ldc	String <nothing>
	invokeinterface	InterfaceMethod scala/util/control/Exception$Described.withDesc:(Ljava/lang/String;)Lscala/util/control/Exception$Described;
	checkcast	class scala/util/control/Exception$Catch
	putfield	Field noCatch:Lscala/util/control/Exception$Catch;
	return
  Labels:

public final java.lang.Throwable unwrap$1(java.lang.Throwable, scala.collection.Seq);
  Signature: (Ljava/lang/Throwable;Lscala/collection/Seq;)Ljava/lang/Throwable;
  Code:
   Stack=4, Locals=4, Args_size=3
l2	aload_2
	new	class scala/util/control/Exception$$anonfun$scala$util$control$Exception$$wouldMatch$1
	dup
	aload_1
	invokespecial	Method scala/util/control/Exception$$anonfun$scala$util$control$Exception$$wouldMatch$1."<init>":(Ljava/lang/Throwable;)V
	invokeinterface	InterfaceMethod scala/collection/IterableLike.exists:(Lscala/Function1;)Z
	ifeq	l1 // aload_1
	aload_1
	invokevirtual	Method java/lang/Throwable.getCause:()Ljava/lang/Throwable;
	dup
	astore_3
	ifnull	l1 // aload_1
	aload_3
	aconst_null
	invokevirtual	Method java/lang/Object.equals:(Ljava/lang/Object;)Z
	ifne	l1 // aload_1
	aload_1
	invokevirtual	Method java/lang/Throwable.getCause:()Ljava/lang/Throwable;
	astore_1
	goto	l2 // aload_2
l1	aload_1
	areturn
  Labels:
   	l2 = 0 // aload_2
   	l1 = 42 // aload_1
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      44      0    this       Lscala/util/control/Exception$;
   0      44      1    x       Ljava/lang/Throwable;


public final scala.util.control.Exception$Catch fun$1(scala.Function1, scala.collection.Seq);
  Signature: (Lscala/Function1;Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;
  Code:
   Stack=2, Locals=3, Args_size=3
	aload_0
	aload_2
	invokevirtual	Method catching:(Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;
	aload_1
	invokevirtual	Method scala/util/control/Exception$Catch.withApply:(Lscala/Function1;)Lscala/util/control/Exception$Catch;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      10      0    this       Lscala/util/control/Exception$;
   0      10      1    f       Lscala/Function1;


private scala.PartialFunction pfFromExceptions(scala.collection.Seq);
  Signature: (Lscala/collection/Seq;)Lscala/PartialFunction;
  Code:
   Stack=3, Locals=2, Args_size=2
	new	class scala/util/control/Exception$$anon$4
	dup
	aload_1
	invokespecial	Method scala/util/control/Exception$$anon$4."<init>":(Lscala/collection/Seq;)V
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      9      0    this       Lscala/util/control/Exception$;
   0      9      1    exceptions$1       Lscala/collection/Seq;

  Signature: length = 0x2
   00 62 

public final boolean scala$util$control$Exception$$wouldMatch(java.lang.Throwable, scala.collection.Seq);
  Signature: (Ljava/lang/Throwable;Lscala/collection/Seq;)Z
  Code:
   Stack=4, Locals=3, Args_size=3
	aload_2
	new	class scala/util/control/Exception$$anonfun$scala$util$control$Exception$$wouldMatch$1
	dup
	aload_1
	invokespecial	Method scala/util/control/Exception$$anonfun$scala$util$control$Exception$$wouldMatch$1."<init>":(Ljava/lang/Throwable;)V
	invokeinterface	InterfaceMethod scala/collection/IterableLike.exists:(Lscala/Function1;)Z
	ireturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      15      0    this       Lscala/util/control/Exception$;
   0      15      1    x$8       Ljava/lang/Throwable;
   0      15      2    classes       Lscala/collection/Seq;


public scala.util.control.Exception$Catch unwrapping(scala.collection.Seq);
  Signature: (Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;
  Code:
   Stack=4, Locals=2, Args_size=2
	aload_0
	aload_1
	invokevirtual	Method catching:(Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;
	new	class scala/util/control/Exception$$anonfun$unwrapping$1
	dup
	aload_1
	invokespecial	Method scala/util/control/Exception$$anonfun$unwrapping$1."<init>":(Lscala/collection/Seq;)V
	invokevirtual	Method scala/util/control/Exception$Catch.withApply:(Lscala/Function1;)Lscala/util/control/Exception$Catch;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      17      0    this       Lscala/util/control/Exception$;
   0      17      1    exceptions$3       Lscala/collection/Seq;

  Signature: length = 0x2
   00 6C 

public scala.util.control.Exception$Catch saving(java.lang.Object, java.lang.Object, scala.Function1);
  Signature: (Ljava/lang/Object;Ljava/lang/Object;Lscala/Function1;)Lscala/util/control/Exception$Catch;
  Code:
   Stack=5, Locals=4, Args_size=4
	new	class scala/util/control/Exception$$anon$5
	dup
	aload_1
	aload_2
	aload_3
	invokespecial	Method scala/util/control/Exception$$anon$5."<init>":(Ljava/lang/Object;Ljava/lang/Object;Lscala/Function1;)V
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/util/control/Exception$;
   0      11      1    oldVal$1       Ljava/lang/Object;
   0      11      2    newVal$1       Ljava/lang/Object;
   0      11      3    setter$1       Lscala/Function1;

  Signature: length = 0x2
   00 78 

public scala.util.control.Exception$Catch ultimately(scala.Function0);
  Signature: (Lscala/Function0;)Lscala/util/control/Exception$Catch;
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	invokevirtual	Method noCatch:()Lscala/util/control/Exception$Catch;
	aload_1
	invokevirtual	Method scala/util/control/Exception$Catch.andFinally:(Lscala/Function0;)Lscala/util/control/Exception$Catch;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      9      0    this       Lscala/util/control/Exception$;
   0      9      1    body       Lscala/Function0;

  Signature: length = 0x2
   00 FFFFFF83 

public scala.util.control.Exception$By handling(scala.collection.Seq);
  Signature: (Lscala/collection/Seq;)Lscala/util/control/Exception$By;
  Code:
   Stack=5, Locals=2, Args_size=2
	new	class scala/util/control/Exception$By
	dup
	new	class scala/util/control/Exception$$anonfun$handling$1
	dup
	aload_1
	invokespecial	Method scala/util/control/Exception$$anonfun$handling$1."<init>":(Lscala/collection/Seq;)V
	invokespecial	Method scala/util/control/Exception$By."<init>":(Lscala/Function1;)V
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      16      0    this       Lscala/util/control/Exception$;
   0      16      1    exceptions$2       Lscala/collection/Seq;

  Signature: length = 0x2
   00 FFFFFF8F 

public scala.util.control.Exception$Catch failing(scala.collection.Seq);
  Signature: (Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;
  Code:
   Stack=3, Locals=2, Args_size=2
	aload_0
	aload_1
	invokevirtual	Method catching:(Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;
	new	class scala/util/control/Exception$$anonfun$failing$1
	dup
	invokespecial	Method scala/util/control/Exception$$anonfun$failing$1."<init>":()V
	invokevirtual	Method scala/util/control/Exception$Catch.withApply:(Lscala/Function1;)Lscala/util/control/Exception$Catch;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      16      0    this       Lscala/util/control/Exception$;
   0      16      1    exceptions       Lscala/collection/Seq;

  Signature: length = 0x2
   00 FFFFFF95 

public scala.util.control.Exception$Catch ignoring(scala.collection.Seq);
  Signature: (Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;
  Code:
   Stack=3, Locals=2, Args_size=2
	aload_0
	aload_1
	invokevirtual	Method catching:(Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;
	new	class scala/util/control/Exception$$anonfun$ignoring$1
	dup
	invokespecial	Method scala/util/control/Exception$$anonfun$ignoring$1."<init>":()V
	invokevirtual	Method scala/util/control/Exception$Catch.withApply:(Lscala/Function1;)Lscala/util/control/Exception$Catch;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      16      0    this       Lscala/util/control/Exception$;
   0      16      1    exceptions       Lscala/collection/Seq;

  Signature: length = 0x2
   00 FFFFFF9A 

public scala.util.control.Exception$Catch catching(scala.PartialFunction);
  Signature: (Lscala/PartialFunction;)Lscala/util/control/Exception$Catch;
  Code:
   Stack=3, Locals=2, Args_size=2
	new	class scala/util/control/Exception$Catch
	dup
	aload_1
	invokespecial	Method scala/util/control/Exception$Catch."<init>":(Lscala/PartialFunction;)V
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      9      0    this       Lscala/util/control/Exception$;
   0      9      1    c       Lscala/PartialFunction;

  Signature: length = 0x2
   00 FFFFFF9D 

public scala.util.control.Exception$Catch catching(scala.collection.Seq);
  Signature: (Lscala/collection/Seq;)Lscala/util/control/Exception$Catch;
  Code:
   Stack=4, Locals=2, Args_size=2
	new	class scala/util/control/Exception$Catch
	dup
	aload_0
	aload_1
	invokespecial	Method pfFromExceptions:(Lscala/collection/Seq;)Lscala/PartialFunction;
	invokespecial	Method scala/util/control/Exception$Catch."<init>":(Lscala/PartialFunction;)V
	aload_1
	new	class scala/util/control/Exception$$anonfun$catching$1
	dup
	invokespecial	Method scala/util/control/Exception$$anonfun$catching$1."<init>":()V
	getstatic	Field scala/collection/Seq$.MODULE$:Lscala/collection/Seq$;
	invokevirtual	Method scala/collection/Seq$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
	invokeinterface	InterfaceMethod scala/collection/TraversableLike.map:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
	checkcast	class scala/collection/TraversableLike
	ldc	String , 
	invokeinterface	InterfaceMethod scala/collection/TraversableLike.mkString:(Ljava/lang/String;)Ljava/lang/String;
	invokeinterface	InterfaceMethod scala/util/control/Exception$Described.withDesc:(Ljava/lang/String;)Lscala/util/control/Exception$Described;
	checkcast	class scala/util/control/Exception$Catch
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      50      0    this       Lscala/util/control/Exception$;
   0      50      1    exceptions       Lscala/collection/Seq;

  Signature: length = 0x2
   00 6C 

public final scala.util.control.Exception$Catch noCatch();
  Signature: ()Lscala/util/control/Exception$Catch;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field noCatch:Lscala/util/control/Exception$Catch;
	areturn
  Labels:
  Signature: length = 0x2
   00 FFFFFFB8 

public final scala.util.control.Exception$Catch allCatch();
  Signature: ()Lscala/util/control/Exception$Catch;
  Code:
   Stack=4, Locals=1, Args_size=1
	new	class scala/util/control/Exception$Catch
	dup
	new	class scala/util/control/Exception$$anonfun$allCatch$1
	dup
	invokespecial	Method scala/util/control/Exception$$anonfun$allCatch$1."<init>":()V
	invokespecial	Method scala/util/control/Exception$Catch."<init>":(Lscala/PartialFunction;)V
	ldc	String <everything>
	invokeinterface	InterfaceMethod scala/util/control/Exception$Described.withDesc:(Ljava/lang/String;)Lscala/util/control/Exception$Described;
	checkcast	class scala/util/control/Exception$Catch
	areturn
  Labels:
  Signature: length = 0x2
   00 FFFFFFBF 

public final scala.PartialFunction nothingCatcher();
  Signature: ()Lscala/PartialFunction;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field nothingCatcher:Lscala/PartialFunction;
	areturn
  Labels:
  Signature: length = 0x2
   00 FFFFFFC0 

public scala.PartialFunction fromExceptionCatcher(scala.PartialFunction);
  Signature: (Lscala/PartialFunction;)Lscala/PartialFunction;
  Code:
   Stack=3, Locals=2, Args_size=2
	new	class scala/util/control/Exception$$anon$1
	dup
	aload_1
	invokespecial	Method scala/util/control/Exception$$anon$1."<init>":(Lscala/PartialFunction;)V
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      9      0    this       Lscala/util/control/Exception$;
   0      9      1    pf$1       Lscala/PartialFunction;

  Signature: length = 0x2
   00 FFFFFFC7 

}

