Compiled from "Exception.scala"
public class scala.util.control.Exception$Try extends java.lang.Object implements scala.ScalaObject
  SourceFile: "Exception.scala"
  Scala: length = 0x
   
  Signature: length = 0x2
   00 73 
  InnerClass: 
   public Try=class scala/util/control/Exception$Try of class scala/util/control/Exception
   public Catch=class scala/util/control/Exception$Catch of class scala/util/control/Exception
   public abstract Described=class scala/util/control/Exception$Described of class scala/util/control/Exception
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	Exception.scala;
Asciz	body;
Asciz	Lscala/Function0;;
Asciz	Lscala/Function0<TT;>;;
Asciz	Signature;
Asciz	catcher;
Asciz	Lscala/util/control/Exception$Catch;;
Asciz	Lscala/util/control/Exception$Catch<TT;>;;
Asciz	()Lscala/util/control/Exception$Catch;;
Asciz	Code;
Asciz	LineNumberTable;
Asciz	scala/util/control/Exception$Try;
class	scala/util/control/Exception$Try
NameAndType	catcher:Lscala/util/control/Exception$Catch;
Field	scala/util/control/Exception$Try.catcher:Lscala/util/control/Exception$Catch;
Asciz	()Lscala/util/control/Exception$Catch<TT;>;;
Asciz	apply;
Asciz	()Ljava/lang/Object;;
NameAndType	catcher:()Lscala/util/control/Exception$Catch;
Method	scala/util/control/Exception$Try.catcher:()Lscala/util/control/Exception$Catch;
NameAndType	body:Lscala/Function0;
Field	scala/util/control/Exception$Try.body:Lscala/Function0;
Asciz	scala/util/control/Exception$Catch;
class	scala/util/control/Exception$Catch
Asciz	(Lscala/Function0;)Ljava/lang/Object;;
NameAndType	apply:(Lscala/Function0;)Ljava/lang/Object;
Method	scala/util/control/Exception$Catch.apply:(Lscala/Function0;)Ljava/lang/Object;
Asciz	()TT;;
Asciz	this;
Asciz	Lscala/util/control/Exception$Try;;
Asciz	other;
Asciz	LocalVariableTable;
Asciz	<U:Ljava/lang/Object;>(Lscala/Function0<TU;>;)TU;;
Asciz	opt;
Asciz	()Lscala/Option;;
Asciz	(Lscala/Function0;)Lscala/Option;;
NameAndType	opt:(Lscala/Function0;)Lscala/Option;
Method	scala/util/control/Exception$Catch.opt:(Lscala/Function0;)Lscala/Option;
Asciz	()Lscala/Option<TT;>;;
Asciz	<U:Ljava/lang/Object;>(Lscala/Function0<TU;>;)Lscala/Option<TU;>;;
Asciz	either;
Asciz	()Lscala/Either;;
Asciz	(Lscala/Function0;)Lscala/Either;;
NameAndType	either:(Lscala/Function0;)Lscala/Either;
Method	scala/util/control/Exception$Catch.either:(Lscala/Function0;)Lscala/Either;
Asciz	()Lscala/Either<Ljava/lang/Throwable;TT;>;;
Asciz	<U:Ljava/lang/Object;>(Lscala/Function0<TU;>;)Lscala/Either<Ljava/lang/Throwable;TU;>;;
Asciz	tryInstead;
Asciz	(Lscala/Function0;)Lscala/util/control/Exception$Try;;
Asciz	<init>;
Asciz	(Lscala/Function0;Lscala/util/control/Exception$Catch;)V;
NameAndType	"<init>":(Lscala/Function0;Lscala/util/control/Exception$Catch;)V
Method	scala/util/control/Exception$Try."<init>":(Lscala/Function0;Lscala/util/control/Exception$Catch;)V
Asciz	<U:Ljava/lang/Object;>(Lscala/Function0<TU;>;)Lscala/util/control/Exception$Try<TU;>;;
Asciz	or;
Asciz	(Lscala/PartialFunction;)Lscala/util/control/Exception$Try;;
Asciz	(Lscala/PartialFunction;)Lscala/util/control/Exception$Catch;;
NameAndType	or:(Lscala/PartialFunction;)Lscala/util/control/Exception$Catch;
Method	scala/util/control/Exception$Catch.or:(Lscala/PartialFunction;)Lscala/util/control/Exception$Catch;
Asciz	pf;
Asciz	Lscala/PartialFunction;;
Asciz	<U:Ljava/lang/Object;>(Lscala/PartialFunction<Ljava/lang/Throwable;TU;>;)Lscala/util/control/Exception$Try<TU;>;;
Asciz	andFinally;
Asciz	(Lscala/Function0;)Lscala/util/control/Exception$Catch;;
NameAndType	andFinally:(Lscala/Function0;)Lscala/util/control/Exception$Catch;
Method	scala/util/control/Exception$Catch.andFinally:(Lscala/Function0;)Lscala/util/control/Exception$Catch;
Asciz	fin;
Asciz	(Lscala/Function0<Ljava/lang/Object;>;)Lscala/util/control/Exception$Try<TT;>;;
Asciz	toString;
Asciz	()Ljava/lang/String;;
Asciz	scala/collection/immutable/List$;
class	scala/collection/immutable/List$
Asciz	MODULE$;
Asciz	Lscala/collection/immutable/List$;;
NameAndType	MODULE$:Lscala/collection/immutable/List$;
Field	scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
Asciz	scala/Predef$;
class	scala/Predef$
Asciz	Lscala/Predef$;;
NameAndType	MODULE$:Lscala/Predef$;
Field	scala/Predef$.MODULE$:Lscala/Predef$;
Asciz	java/lang/String;
class	java/lang/String
Asciz	Try(<body>);
String	Try(<body>)
Asciz	scala/util/control/Exception$Described;
class	scala/util/control/Exception$Described
NameAndType	toString:()Ljava/lang/String;
InterfaceMethod	scala/util/control/Exception$Described.toString:()Ljava/lang/String;
Asciz	[Ljava/lang/Object;;
class	"[Ljava/lang/Object;"
Asciz	wrapRefArray;
Asciz	([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;;
NameAndType	wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
Method	scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
Asciz	(Lscala/collection/Seq;)Lscala/collection/immutable/List;;
NameAndType	apply:(Lscala/collection/Seq;)Lscala/collection/immutable/List;
Method	scala/collection/immutable/List$.apply:(Lscala/collection/Seq;)Lscala/collection/immutable/List;
Asciz	 ;
String	 
Asciz	scala/collection/TraversableOnce;
class	scala/collection/TraversableOnce
Asciz	mkString;
Asciz	(Ljava/lang/String;)Ljava/lang/String;;
NameAndType	mkString:(Ljava/lang/String;)Ljava/lang/String;
InterfaceMethod	scala/collection/TraversableOnce.mkString:(Ljava/lang/String;)Ljava/lang/String;
Asciz	java/lang/Object;
class	java/lang/Object
Asciz	()V;
NameAndType	"<init>":()V
Method	java/lang/Object."<init>":()V
Asciz	(Lscala/Function0<TT;>;Lscala/util/control/Exception$Catch<TT;>;)V;
Asciz	Scala;
Asciz	<T:Ljava/lang/Object;>Ljava/lang/Object;Lscala/ScalaObject;;
Asciz	InnerClasses;
Asciz	scala/util/control/Exception;
class	scala/util/control/Exception
Asciz	Try;
Asciz	Catch;
Asciz	Described;
Asciz	scala/ScalaObject;
class	scala/ScalaObject

{
private final scala.Function0 body;
  Signature: Lscala/Function0;
  Signature: length = 0x2
   00 05 

private final scala.util.control.Exception$Catch catcher;
  Signature: Lscala/util/control/Exception$Catch;
  Signature: length = 0x2
   00 09 

public scala.util.control.Exception$Catch catcher();
  Signature: ()Lscala/util/control/Exception$Catch;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field catcher:Lscala/util/control/Exception$Catch;
	areturn
  Labels:
  Signature: length = 0x2
   00 11 

public java.lang.Object apply();
  Signature: ()Ljava/lang/Object;
  Code:
   Stack=2, Locals=1, Args_size=1
	aload_0
	invokevirtual	Method catcher:()Lscala/util/control/Exception$Catch;
	aload_0
	getfield	Field body:Lscala/Function0;
	invokevirtual	Method scala/util/control/Exception$Catch.apply:(Lscala/Function0;)Ljava/lang/Object;
	areturn
  Labels:
  Signature: length = 0x2
   00 1D 

public java.lang.Object apply(scala.Function0);
  Signature: (Lscala/Function0;)Ljava/lang/Object;
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	invokevirtual	Method catcher:()Lscala/util/control/Exception$Catch;
	aload_1
	invokevirtual	Method scala/util/control/Exception$Catch.apply:(Lscala/Function0;)Ljava/lang/Object;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      9      0    this       Lscala/util/control/Exception$Try;
   0      9      1    other       Lscala/Function0;

  Signature: length = 0x2
   00 22 

public scala.Option opt();
  Signature: ()Lscala/Option;
  Code:
   Stack=2, Locals=1, Args_size=1
	aload_0
	invokevirtual	Method catcher:()Lscala/util/control/Exception$Catch;
	aload_0
	getfield	Field body:Lscala/Function0;
	invokevirtual	Method scala/util/control/Exception$Catch.opt:(Lscala/Function0;)Lscala/Option;
	areturn
  Labels:
  Signature: length = 0x2
   00 28 

public scala.Option opt(scala.Function0);
  Signature: (Lscala/Function0;)Lscala/Option;
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	invokevirtual	Method catcher:()Lscala/util/control/Exception$Catch;
	aload_1
	invokevirtual	Method scala/util/control/Exception$Catch.opt:(Lscala/Function0;)Lscala/Option;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      9      0    this       Lscala/util/control/Exception$Try;
   0      9      1    other       Lscala/Function0;

  Signature: length = 0x2
   00 29 

public scala.Either either();
  Signature: ()Lscala/Either;
  Code:
   Stack=2, Locals=1, Args_size=1
	aload_0
	invokevirtual	Method catcher:()Lscala/util/control/Exception$Catch;
	aload_0
	getfield	Field body:Lscala/Function0;
	invokevirtual	Method scala/util/control/Exception$Catch.either:(Lscala/Function0;)Lscala/Either;
	areturn
  Labels:
  Signature: length = 0x2
   00 2F 

public scala.Either either(scala.Function0);
  Signature: (Lscala/Function0;)Lscala/Either;
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	invokevirtual	Method catcher:()Lscala/util/control/Exception$Catch;
	aload_1
	invokevirtual	Method scala/util/control/Exception$Catch.either:(Lscala/Function0;)Lscala/Either;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      9      0    this       Lscala/util/control/Exception$Try;
   0      9      1    other       Lscala/Function0;

  Signature: length = 0x2
   00 30 

public scala.util.control.Exception$Try tryInstead(scala.Function0);
  Signature: (Lscala/Function0;)Lscala/util/control/Exception$Try;
  Code:
   Stack=4, Locals=2, Args_size=2
	new	class scala/util/control/Exception$Try
	dup
	aload_1
	aload_0
	invokevirtual	Method catcher:()Lscala/util/control/Exception$Catch;
	invokespecial	Method "<init>":(Lscala/Function0;Lscala/util/control/Exception$Catch;)V
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      13      0    this       Lscala/util/control/Exception$Try;
   0      13      1    other       Lscala/Function0;

  Signature: length = 0x2
   00 37 

public scala.util.control.Exception$Try or(scala.PartialFunction);
  Signature: (Lscala/PartialFunction;)Lscala/util/control/Exception$Try;
  Code:
   Stack=5, Locals=2, Args_size=2
	new	class scala/util/control/Exception$Try
	dup
	aload_0
	getfield	Field body:Lscala/Function0;
	aload_0
	invokevirtual	Method catcher:()Lscala/util/control/Exception$Catch;
	aload_1
	invokevirtual	Method scala/util/control/Exception$Catch.or:(Lscala/PartialFunction;)Lscala/util/control/Exception$Catch;
	invokespecial	Method "<init>":(Lscala/Function0;Lscala/util/control/Exception$Catch;)V
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      20      0    this       Lscala/util/control/Exception$Try;
   0      20      1    pf       Lscala/PartialFunction;

  Signature: length = 0x2
   00 3F 

public scala.util.control.Exception$Try andFinally(scala.Function0);
  Signature: (Lscala/Function0;)Lscala/util/control/Exception$Try;
  Code:
   Stack=5, Locals=2, Args_size=2
	new	class scala/util/control/Exception$Try
	dup
	aload_0
	getfield	Field body:Lscala/Function0;
	aload_0
	invokevirtual	Method catcher:()Lscala/util/control/Exception$Catch;
	aload_1
	invokevirtual	Method scala/util/control/Exception$Catch.andFinally:(Lscala/Function0;)Lscala/util/control/Exception$Catch;
	invokespecial	Method "<init>":(Lscala/Function0;Lscala/util/control/Exception$Catch;)V
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      20      0    this       Lscala/util/control/Exception$Try;
   0      20      1    fin       Lscala/Function0;

  Signature: length = 0x2
   00 45 

public java.lang.String toString();
  Signature: ()Ljava/lang/String;
  Code:
   Stack=6, Locals=1, Args_size=1
	getstatic	Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
	getstatic	Field scala/Predef$.MODULE$:Lscala/Predef$;
	iconst_2
	anewarray	class java/lang/String
	dup
	iconst_0
	ldc	String Try(<body>)
	aastore
	dup
	iconst_1
	aload_0
	invokevirtual	Method catcher:()Lscala/util/control/Exception$Catch;
	invokeinterface	InterfaceMethod scala/util/control/Exception$Described.toString:()Ljava/lang/String;
	aastore
	checkcast	class "[Ljava/lang/Object;"
	invokevirtual	Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
	invokevirtual	Method scala/collection/immutable/List$.apply:(Lscala/collection/Seq;)Lscala/collection/immutable/List;
	ldc	String  
	invokeinterface	InterfaceMethod scala/collection/TraversableOnce.mkString:(Ljava/lang/String;)Ljava/lang/String;
	areturn
  Labels:

public scala.util.control.Exception$Try(scala.Function0, scala.util.control.Exception$Catch);
  Signature: (Lscala/Function0;Lscala/util/control/Exception$Catch;)V
  Code:
   Stack=2, Locals=3, Args_size=3
	aload_0
	aload_1
	putfield	Field body:Lscala/Function0;
	aload_0
	aload_2
	putfield	Field catcher:Lscala/util/control/Exception$Catch;
	aload_0
	invokespecial	Method java/lang/Object."<init>":()V
	return
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      15      0    this       Lscala/util/control/Exception$Try;
   0      15      1    body       Lscala/Function0;
   0      15      2    catcher       Lscala/util/control/Exception$Catch;

  Signature: length = 0x2
   00 71 

}

