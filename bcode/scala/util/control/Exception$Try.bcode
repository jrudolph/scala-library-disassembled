Compiled from "Exception.scala"
public class scala.util.control.Exception$Try extends java.lang.Object implements scala.ScalaObject
  SourceFile: "Exception.scala"
  Signature: length = 0x2
   00 70 
  Scala: length = 0x
   
  InnerClass: 
   public #117= #15 of #116; //Try=class scala/util/control/Exception$Try of class scala/util/control/Exception
   public #118= #72 of #116; //Catch=class scala/util/control/Exception$Catch of class scala/util/control/Exception
   public abstract #119= #50 of #116; //Described=class scala/util/control/Exception$Described of class scala/util/control/Exception
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	Exception.scala;
const #3 = Asciz	catcher;
const #4 = Asciz	Lscala/util/control/Exception$Catch;;
const #5 = Asciz	Lscala/util/control/Exception$Catch<TT;>;;
const #6 = Asciz	Signature;
const #7 = Asciz	body;
const #8 = Asciz	Lscala/Function0;;
const #9 = Asciz	Lscala/Function0<TT;>;;
const #10 = Asciz	<init>;
const #11 = Asciz	(Lscala/Function0;Lscala/util/control/Exception$Catch;)V;
const #12 = Asciz	Code;
const #13 = Asciz	LineNumberTable;
const #14 = Asciz	scala/util/control/Exception$Try;
const #15 = class	#14;	//  scala/util/control/Exception$Try
const #16 = NameAndType	#7:#8;//  body:Lscala/Function0;
const #17 = Field	#15.#16;	//  scala/util/control/Exception$Try.body:Lscala/Function0;
const #18 = NameAndType	#3:#4;//  catcher:Lscala/util/control/Exception$Catch;
const #19 = Field	#15.#18;	//  scala/util/control/Exception$Try.catcher:Lscala/util/control/Exception$Catch;
const #20 = Asciz	java/lang/Object;
const #21 = class	#20;	//  java/lang/Object
const #22 = Asciz	()V;
const #23 = NameAndType	#10:#22;//  "<init>":()V
const #24 = Method	#21.#23;	//  java/lang/Object."<init>":()V
const #25 = Asciz	this;
const #26 = Asciz	Lscala/util/control/Exception$Try;;
const #27 = Asciz	LocalVariableTable;
const #28 = Asciz	(Lscala/Function0<TT;>;Lscala/util/control/Exception$Catch<TT;>;)V;
const #29 = Asciz	toString;
const #30 = Asciz	()Ljava/lang/String;;
const #31 = Asciz	scala/collection/immutable/List$;
const #32 = class	#31;	//  scala/collection/immutable/List$
const #33 = Asciz	MODULE$;
const #34 = Asciz	Lscala/collection/immutable/List$;;
const #35 = NameAndType	#33:#34;//  MODULE$:Lscala/collection/immutable/List$;
const #36 = Field	#32.#35;	//  scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
const #37 = Asciz	scala/runtime/ScalaRunTime$;
const #38 = class	#37;	//  scala/runtime/ScalaRunTime$
const #39 = Asciz	Lscala/runtime/ScalaRunTime$;;
const #40 = NameAndType	#33:#39;//  MODULE$:Lscala/runtime/ScalaRunTime$;
const #41 = Field	#38.#40;	//  scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
const #42 = Asciz	java/lang/String;
const #43 = class	#42;	//  java/lang/String
const #44 = Asciz	Try(<body>);
const #45 = String	#44;	//  Try(<body>)
const #46 = Asciz	()Lscala/util/control/Exception$Catch;;
const #47 = NameAndType	#3:#46;//  catcher:()Lscala/util/control/Exception$Catch;
const #48 = Method	#15.#47;	//  scala/util/control/Exception$Try.catcher:()Lscala/util/control/Exception$Catch;
const #49 = Asciz	scala/util/control/Exception$Described;
const #50 = class	#49;	//  scala/util/control/Exception$Described
const #51 = NameAndType	#29:#30;//  toString:()Ljava/lang/String;
const #52 = InterfaceMethod	#50.#51;	//  scala/util/control/Exception$Described.toString:()Ljava/lang/String;
const #53 = Asciz	boxArray;
const #54 = Asciz	(Ljava/lang/Object;)Lscala/runtime/BoxedArray;;
const #55 = NameAndType	#53:#54;//  boxArray:(Ljava/lang/Object;)Lscala/runtime/BoxedArray;
const #56 = Method	#38.#55;	//  scala/runtime/ScalaRunTime$.boxArray:(Ljava/lang/Object;)Lscala/runtime/BoxedArray;
const #57 = Asciz	apply;
const #58 = Asciz	(Lscala/collection/Sequence;)Lscala/collection/immutable/List;;
const #59 = NameAndType	#57:#58;//  apply:(Lscala/collection/Sequence;)Lscala/collection/immutable/List;
const #60 = Method	#32.#59;	//  scala/collection/immutable/List$.apply:(Lscala/collection/Sequence;)Lscala/collection/immutable/List;
const #61 = Asciz	 ;
const #62 = String	#61;	//   
const #63 = Asciz	scala/collection/generic/TraversableTemplate;
const #64 = class	#63;	//  scala/collection/generic/TraversableTemplate
const #65 = Asciz	mkString;
const #66 = Asciz	(Ljava/lang/String;)Ljava/lang/String;;
const #67 = NameAndType	#65:#66;//  mkString:(Ljava/lang/String;)Ljava/lang/String;
const #68 = InterfaceMethod	#64.#67;	//  scala/collection/generic/TraversableTemplate.mkString:(Ljava/lang/String;)Ljava/lang/String;
const #69 = Asciz	andFinally;
const #70 = Asciz	(Lscala/Function0;)Lscala/util/control/Exception$Try;;
const #71 = Asciz	scala/util/control/Exception$Catch;
const #72 = class	#71;	//  scala/util/control/Exception$Catch
const #73 = Asciz	(Lscala/Function0;)Lscala/util/control/Exception$Catch;;
const #74 = NameAndType	#69:#73;//  andFinally:(Lscala/Function0;)Lscala/util/control/Exception$Catch;
const #75 = Method	#72.#74;	//  scala/util/control/Exception$Catch.andFinally:(Lscala/Function0;)Lscala/util/control/Exception$Catch;
const #76 = NameAndType	#10:#11;//  "<init>":(Lscala/Function0;Lscala/util/control/Exception$Catch;)V
const #77 = Method	#15.#76;	//  scala/util/control/Exception$Try."<init>":(Lscala/Function0;Lscala/util/control/Exception$Catch;)V
const #78 = Asciz	fin;
const #79 = Asciz	(Lscala/Function0<Ljava/lang/Object;>;)Lscala/util/control/Exception$Try<TT;>;;
const #80 = Asciz	or;
const #81 = Asciz	(Lscala/PartialFunction;)Lscala/util/control/Exception$Try;;
const #82 = Asciz	(Lscala/PartialFunction;)Lscala/util/control/Exception$Catch;;
const #83 = NameAndType	#80:#82;//  or:(Lscala/PartialFunction;)Lscala/util/control/Exception$Catch;
const #84 = Method	#72.#83;	//  scala/util/control/Exception$Catch.or:(Lscala/PartialFunction;)Lscala/util/control/Exception$Catch;
const #85 = Asciz	pf;
const #86 = Asciz	Lscala/PartialFunction;;
const #87 = Asciz	<U:Ljava/lang/Object;>(Lscala/PartialFunction<Ljava/lang/Throwable;TU;>;)Lscala/util/control/Exception$Try<TU;>;;
const #88 = Asciz	tryInstead;
const #89 = Asciz	other;
const #90 = Asciz	<U:Ljava/lang/Object;>(Lscala/Function0<TU;>;)Lscala/util/control/Exception$Try<TU;>;;
const #91 = Asciz	either;
const #92 = Asciz	(Lscala/Function0;)Lscala/Either;;
const #93 = NameAndType	#91:#92;//  either:(Lscala/Function0;)Lscala/Either;
const #94 = Method	#72.#93;	//  scala/util/control/Exception$Catch.either:(Lscala/Function0;)Lscala/Either;
const #95 = Asciz	<U:Ljava/lang/Object;>(Lscala/Function0<TU;>;)Lscala/Either<Ljava/lang/Throwable;TU;>;;
const #96 = Asciz	()Lscala/Either;;
const #97 = Asciz	()Lscala/Either<Ljava/lang/Throwable;TT;>;;
const #98 = Asciz	opt;
const #99 = Asciz	(Lscala/Function0;)Lscala/Option;;
const #100 = NameAndType	#98:#99;//  opt:(Lscala/Function0;)Lscala/Option;
const #101 = Method	#72.#100;	//  scala/util/control/Exception$Catch.opt:(Lscala/Function0;)Lscala/Option;
const #102 = Asciz	<U:Ljava/lang/Object;>(Lscala/Function0<TU;>;)Lscala/Option<TU;>;;
const #103 = Asciz	()Lscala/Option;;
const #104 = Asciz	()Lscala/Option<TT;>;;
const #105 = Asciz	(Lscala/Function0;)Ljava/lang/Object;;
const #106 = NameAndType	#57:#105;//  apply:(Lscala/Function0;)Ljava/lang/Object;
const #107 = Method	#72.#106;	//  scala/util/control/Exception$Catch.apply:(Lscala/Function0;)Ljava/lang/Object;
const #108 = Asciz	<U:Ljava/lang/Object;>(Lscala/Function0<TU;>;)TU;;
const #109 = Asciz	()Ljava/lang/Object;;
const #110 = Asciz	()TT;;
const #111 = Asciz	()Lscala/util/control/Exception$Catch<TT;>;;
const #112 = Asciz	<T:Ljava/lang/Object;>Ljava/lang/Object;Lscala/ScalaObject;;
const #113 = Asciz	Scala;
const #114 = Asciz	InnerClasses;
const #115 = Asciz	scala/util/control/Exception;
const #116 = class	#115;	//  scala/util/control/Exception
const #117 = Asciz	Try;
const #118 = Asciz	Catch;
const #119 = Asciz	Described;
const #120 = Asciz	scala/ScalaObject;
const #121 = class	#120;	//  scala/ScalaObject

{
public scala.util.control.Exception$Try(scala.Function0, scala.util.control.Exception$Catch);
  Code:
   Stack=2, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	putfield	#17; //Field body:Lscala/Function0;
   5:	aload_0
   6:	aload_2
   7:	putfield	#19; //Field catcher:Lscala/util/control/Exception$Catch;
   10:	aload_0
   11:	invokespecial	#24; //Method java/lang/Object."<init>":()V
   14:	return
  LineNumberTable: 
   line 115: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      15      0    this       Lscala/util/control/Exception$Try;
   0      15      1    body       Lscala/Function0;
   0      15      2    catcher       Lscala/util/control/Exception$Catch;

  Signature: length = 0x2
   00 1C 

public java.lang.String toString();
  Code:
   Stack=6, Locals=1, Args_size=1
   0:	getstatic	#36; //Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
   3:	getstatic	#41; //Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
   6:	iconst_2
   7:	anewarray	#43; //class java/lang/String
   10:	dup
   11:	iconst_0
   12:	ldc	#45; //String Try(<body>)
   14:	aastore
   15:	dup
   16:	iconst_1
   17:	aload_0
   18:	invokevirtual	#48; //Method catcher:()Lscala/util/control/Exception$Catch;
   21:	invokeinterface	#52,  1; //InterfaceMethod scala/util/control/Exception$Described.toString:()Ljava/lang/String;
   26:	aastore
   27:	invokevirtual	#56; //Method scala/runtime/ScalaRunTime$.boxArray:(Ljava/lang/Object;)Lscala/runtime/BoxedArray;
   30:	invokevirtual	#60; //Method scala/collection/immutable/List$.apply:(Lscala/collection/Sequence;)Lscala/collection/immutable/List;
   33:	ldc	#62; //String  
   35:	invokeinterface	#68,  2; //InterfaceMethod scala/collection/generic/TraversableTemplate.mkString:(Ljava/lang/String;)Ljava/lang/String;
   40:	areturn
  LineNumberTable: 
   line 137: 0


public scala.util.control.Exception$Try andFinally(scala.Function0);
  Code:
   Stack=5, Locals=2, Args_size=2
   0:	new	#15; //class scala/util/control/Exception$Try
   3:	dup
   4:	aload_0
   5:	getfield	#17; //Field body:Lscala/Function0;
   8:	aload_0
   9:	invokevirtual	#48; //Method catcher:()Lscala/util/control/Exception$Catch;
   12:	aload_1
   13:	invokevirtual	#75; //Method scala/util/control/Exception$Catch.andFinally:(Lscala/Function0;)Lscala/util/control/Exception$Catch;
   16:	invokespecial	#77; //Method "<init>":(Lscala/Function0;Lscala/util/control/Exception$Catch;)V
   19:	areturn
  LineNumberTable: 
   line 135: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      20      0    this       Lscala/util/control/Exception$Try;
   0      20      1    fin       Lscala/Function0;

  Signature: length = 0x2
   00 4F 

public scala.util.control.Exception$Try or(scala.PartialFunction);
  Code:
   Stack=5, Locals=2, Args_size=2
   0:	new	#15; //class scala/util/control/Exception$Try
   3:	dup
   4:	aload_0
   5:	getfield	#17; //Field body:Lscala/Function0;
   8:	aload_0
   9:	invokevirtual	#48; //Method catcher:()Lscala/util/control/Exception$Catch;
   12:	aload_1
   13:	invokevirtual	#84; //Method scala/util/control/Exception$Catch.or:(Lscala/PartialFunction;)Lscala/util/control/Exception$Catch;
   16:	invokespecial	#77; //Method "<init>":(Lscala/Function0;Lscala/util/control/Exception$Catch;)V
   19:	areturn
  LineNumberTable: 
   line 132: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      20      0    this       Lscala/util/control/Exception$Try;
   0      20      1    pf       Lscala/PartialFunction;

  Signature: length = 0x2
   00 57 

public scala.util.control.Exception$Try tryInstead(scala.Function0);
  Code:
   Stack=4, Locals=2, Args_size=2
   0:	new	#15; //class scala/util/control/Exception$Try
   3:	dup
   4:	aload_1
   5:	aload_0
   6:	invokevirtual	#48; //Method catcher:()Lscala/util/control/Exception$Catch;
   9:	invokespecial	#77; //Method "<init>":(Lscala/Function0;Lscala/util/control/Exception$Catch;)V
   12:	areturn
  LineNumberTable: 
   line 129: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      13      0    this       Lscala/util/control/Exception$Try;
   0      13      1    other       Lscala/Function0;

  Signature: length = 0x2
   00 5A 

public scala.Either either(scala.Function0);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	invokevirtual	#48; //Method catcher:()Lscala/util/control/Exception$Catch;
   4:	aload_1
   5:	invokevirtual	#94; //Method scala/util/control/Exception$Catch.either:(Lscala/Function0;)Lscala/Either;
   8:	areturn
  LineNumberTable: 
   line 126: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      9      0    this       Lscala/util/control/Exception$Try;
   0      9      1    other       Lscala/Function0;

  Signature: length = 0x2
   00 5F 

public scala.Either either();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	aload_0
   1:	invokevirtual	#48; //Method catcher:()Lscala/util/control/Exception$Catch;
   4:	aload_0
   5:	getfield	#17; //Field body:Lscala/Function0;
   8:	invokevirtual	#94; //Method scala/util/control/Exception$Catch.either:(Lscala/Function0;)Lscala/Either;
   11:	areturn
  LineNumberTable: 
   line 125: 0

  Signature: length = 0x2
   00 61 

public scala.Option opt(scala.Function0);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	invokevirtual	#48; //Method catcher:()Lscala/util/control/Exception$Catch;
   4:	aload_1
   5:	invokevirtual	#101; //Method scala/util/control/Exception$Catch.opt:(Lscala/Function0;)Lscala/Option;
   8:	areturn
  LineNumberTable: 
   line 122: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      9      0    this       Lscala/util/control/Exception$Try;
   0      9      1    other       Lscala/Function0;

  Signature: length = 0x2
   00 66 

public scala.Option opt();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	aload_0
   1:	invokevirtual	#48; //Method catcher:()Lscala/util/control/Exception$Catch;
   4:	aload_0
   5:	getfield	#17; //Field body:Lscala/Function0;
   8:	invokevirtual	#101; //Method scala/util/control/Exception$Catch.opt:(Lscala/Function0;)Lscala/Option;
   11:	areturn
  LineNumberTable: 
   line 121: 0

  Signature: length = 0x2
   00 68 

public java.lang.Object apply(scala.Function0);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	invokevirtual	#48; //Method catcher:()Lscala/util/control/Exception$Catch;
   4:	aload_1
   5:	invokevirtual	#107; //Method scala/util/control/Exception$Catch.apply:(Lscala/Function0;)Ljava/lang/Object;
   8:	areturn
  LineNumberTable: 
   line 118: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      9      0    this       Lscala/util/control/Exception$Try;
   0      9      1    other       Lscala/Function0;

  Signature: length = 0x2
   00 6C 

public java.lang.Object apply();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	aload_0
   1:	invokevirtual	#48; //Method catcher:()Lscala/util/control/Exception$Catch;
   4:	aload_0
   5:	getfield	#17; //Field body:Lscala/Function0;
   8:	invokevirtual	#107; //Method scala/util/control/Exception$Catch.apply:(Lscala/Function0;)Ljava/lang/Object;
   11:	areturn
  LineNumberTable: 
   line 117: 0

  Signature: length = 0x2
   00 6E 

public scala.util.control.Exception$Catch catcher();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#19; //Field catcher:Lscala/util/control/Exception$Catch;
   4:	areturn
  LineNumberTable: 
   line 115: 0

  Signature: length = 0x2
   00 6F 

}

