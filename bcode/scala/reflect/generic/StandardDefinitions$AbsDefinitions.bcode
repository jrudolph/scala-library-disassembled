Compiled from "StandardDefinitions.scala"
public abstract class scala.reflect.generic.StandardDefinitions$AbsDefinitions extends java.lang.Object implements scala.ScalaObject
  SourceFile: "StandardDefinitions.scala"
  Scala: length = 0x
   
  InnerClass: 
   public abstract AbsType=class scala/reflect/generic/Types$AbsType of class scala/reflect/generic/Types
   public abstract AbsSymbol=class scala/reflect/generic/Symbols$AbsSymbol of class scala/reflect/generic/Symbols
   public abstract AbsDefinitions=class scala/reflect/generic/StandardDefinitions$AbsDefinitions of class scala/reflect/generic/StandardDefinitions
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	StandardDefinitions.scala;
Asciz	$outer;
Asciz	Lscala/reflect/generic/Universe;;
Asciz	RootPackage;
Asciz	()Lscala/reflect/generic/Symbols$AbsSymbol;;
Asciz	RootClass;
Asciz	EmptyPackage;
Asciz	EmptyPackageClass;
Asciz	ScalaPackage;
Asciz	ScalaPackageClass;
Asciz	AnyClass;
Asciz	AnyValClass;
Asciz	AnyRefClass;
Asciz	ObjectClass;
Asciz	NullClass;
Asciz	NothingClass;
Asciz	UnitClass;
Asciz	ByteClass;
Asciz	ShortClass;
Asciz	CharClass;
Asciz	IntClass;
Asciz	LongClass;
Asciz	FloatClass;
Asciz	DoubleClass;
Asciz	BooleanClass;
Asciz	SymbolClass;
Asciz	StringClass;
Asciz	ClassClass;
Asciz	PredefModule;
Asciz	ClassType;
Asciz	(Lscala/reflect/generic/Types$AbsType;)Lscala/reflect/generic/Types$AbsType;;
Asciz	signature;
Asciz	(Lscala/reflect/generic/Types$AbsType;)Ljava/lang/String;;
Asciz	isValueClass;
Asciz	(Lscala/reflect/generic/Symbols$AbsSymbol;)Z;
Asciz	isNumericValueClass;
Asciz	scala$reflect$generic$StandardDefinitions$AbsDefinitions$$$outer;
Asciz	()Lscala/reflect/generic/Universe;;
Asciz	Code;
Asciz	LineNumberTable;
Asciz	scala/reflect/generic/StandardDefinitions$AbsDefinitions;
class	scala/reflect/generic/StandardDefinitions$AbsDefinitions
NameAndType	$outer:Lscala/reflect/generic/Universe;
Field	scala/reflect/generic/StandardDefinitions$AbsDefinitions.$outer:Lscala/reflect/generic/Universe;
Asciz	<init>;
Asciz	(Lscala/reflect/generic/Universe;)V;
Asciz	java/lang/NullPointerException;
class	java/lang/NullPointerException
Asciz	()V;
NameAndType	"<init>":()V
Method	java/lang/NullPointerException."<init>":()V
Asciz	java/lang/Object;
class	java/lang/Object
Method	java/lang/Object."<init>":()V
Asciz	this;
Asciz	Lscala/reflect/generic/StandardDefinitions$AbsDefinitions;;
Asciz	LocalVariableTable;
Asciz	Scala;
Asciz	InnerClasses;
Asciz	scala/reflect/generic/Types$AbsType;
class	scala/reflect/generic/Types$AbsType
Asciz	scala/reflect/generic/Types;
class	scala/reflect/generic/Types
Asciz	AbsType;
Asciz	scala/reflect/generic/Symbols$AbsSymbol;
class	scala/reflect/generic/Symbols$AbsSymbol
Asciz	scala/reflect/generic/Symbols;
class	scala/reflect/generic/Symbols
Asciz	AbsSymbol;
Asciz	scala/reflect/generic/StandardDefinitions;
class	scala/reflect/generic/StandardDefinitions
Asciz	AbsDefinitions;
Asciz	scala/ScalaObject;
class	scala/ScalaObject

{
public final scala.reflect.generic.Universe $outer;
  Signature: Lscala/reflect/generic/Universe;

public abstract scala.reflect.generic.Symbols$AbsSymbol RootPackage();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;

public abstract scala.reflect.generic.Symbols$AbsSymbol RootClass();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;

public abstract scala.reflect.generic.Symbols$AbsSymbol EmptyPackage();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;

public abstract scala.reflect.generic.Symbols$AbsSymbol EmptyPackageClass();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;

public abstract scala.reflect.generic.Symbols$AbsSymbol ScalaPackage();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;

public abstract scala.reflect.generic.Symbols$AbsSymbol ScalaPackageClass();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;

public abstract scala.reflect.generic.Symbols$AbsSymbol AnyClass();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;

public abstract scala.reflect.generic.Symbols$AbsSymbol AnyValClass();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;

public abstract scala.reflect.generic.Symbols$AbsSymbol AnyRefClass();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;

public abstract scala.reflect.generic.Symbols$AbsSymbol ObjectClass();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;

public abstract scala.reflect.generic.Symbols$AbsSymbol NullClass();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;

public abstract scala.reflect.generic.Symbols$AbsSymbol NothingClass();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;

public abstract scala.reflect.generic.Symbols$AbsSymbol UnitClass();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;

public abstract scala.reflect.generic.Symbols$AbsSymbol ByteClass();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;

public abstract scala.reflect.generic.Symbols$AbsSymbol ShortClass();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;

public abstract scala.reflect.generic.Symbols$AbsSymbol CharClass();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;

public abstract scala.reflect.generic.Symbols$AbsSymbol IntClass();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;

public abstract scala.reflect.generic.Symbols$AbsSymbol LongClass();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;

public abstract scala.reflect.generic.Symbols$AbsSymbol FloatClass();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;

public abstract scala.reflect.generic.Symbols$AbsSymbol DoubleClass();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;

public abstract scala.reflect.generic.Symbols$AbsSymbol BooleanClass();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;

public abstract scala.reflect.generic.Symbols$AbsSymbol SymbolClass();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;

public abstract scala.reflect.generic.Symbols$AbsSymbol StringClass();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;

public abstract scala.reflect.generic.Symbols$AbsSymbol ClassClass();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;

public abstract scala.reflect.generic.Symbols$AbsSymbol PredefModule();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;

public abstract scala.reflect.generic.Types$AbsType ClassType(scala.reflect.generic.Types$AbsType);
  Signature: (Lscala/reflect/generic/Types$AbsType;)Lscala/reflect/generic/Types$AbsType;

public abstract java.lang.String signature(scala.reflect.generic.Types$AbsType);
  Signature: (Lscala/reflect/generic/Types$AbsType;)Ljava/lang/String;

public abstract boolean isValueClass(scala.reflect.generic.Symbols$AbsSymbol);
  Signature: (Lscala/reflect/generic/Symbols$AbsSymbol;)Z

public abstract boolean isNumericValueClass(scala.reflect.generic.Symbols$AbsSymbol);
  Signature: (Lscala/reflect/generic/Symbols$AbsSymbol;)Z

public scala.reflect.generic.Universe scala$reflect$generic$StandardDefinitions$AbsDefinitions$$$outer();
  Signature: ()Lscala/reflect/generic/Universe;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field $outer:Lscala/reflect/generic/Universe;
	areturn
  Labels:

public scala.reflect.generic.StandardDefinitions$AbsDefinitions(scala.reflect.generic.Universe);
  Signature: (Lscala/reflect/generic/Universe;)V
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_1
	ifnonnull	l1 // aload_0
	new	class java/lang/NullPointerException
	dup
	invokespecial	Method java/lang/NullPointerException."<init>":()V
	athrow
l1	aload_0
	aload_1
	putfield	Field $outer:Lscala/reflect/generic/Universe;
	aload_0
	invokespecial	Method java/lang/Object."<init>":()V
	return
  Labels:
   	l1 = 12 // aload_0
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      22      0    this       Lscala/reflect/generic/StandardDefinitions$AbsDefinitions;
   0      22      1    $outer       Lscala/reflect/generic/Universe;


}

