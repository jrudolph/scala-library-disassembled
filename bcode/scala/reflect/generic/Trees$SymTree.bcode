Compiled from "Trees.scala"
public interface scala.reflect.generic.Trees$SymTree extends scala.ScalaObject
  SourceFile: "Trees.scala"
  Scala: length = 0x
   
  InnerClass: 
   public abstract SymTree=class scala/reflect/generic/Trees$SymTree of class scala/reflect/generic/Trees
   public abstract AbsSymbol=class scala/reflect/generic/Symbols$AbsSymbol of class scala/reflect/generic/Symbols
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	Trees.scala;
Asciz	hasSymbol;
Asciz	()Z;
Asciz	symbol;
Asciz	()Lscala/reflect/generic/Symbols$AbsSymbol;;
Asciz	symbol_$eq;
Asciz	(Lscala/reflect/generic/Symbols$AbsSymbol;)V;
Asciz	scala$reflect$generic$Trees$SymTree$$$outer;
Asciz	()Lscala/reflect/generic/Trees;;
Asciz	Scala;
Asciz	InnerClasses;
Asciz	scala/reflect/generic/Trees$SymTree;
class	scala/reflect/generic/Trees$SymTree
Asciz	scala/reflect/generic/Trees;
class	scala/reflect/generic/Trees
Asciz	SymTree;
Asciz	scala/reflect/generic/Symbols$AbsSymbol;
class	scala/reflect/generic/Symbols$AbsSymbol
Asciz	scala/reflect/generic/Symbols;
class	scala/reflect/generic/Symbols
Asciz	AbsSymbol;
Asciz	java/lang/Object;
class	java/lang/Object
Asciz	scala/ScalaObject;
class	scala/ScalaObject

{
public abstract boolean hasSymbol();
  Signature: ()Z

public abstract scala.reflect.generic.Symbols$AbsSymbol symbol();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;

public abstract void symbol_$eq(scala.reflect.generic.Symbols$AbsSymbol);
  Signature: (Lscala/reflect/generic/Symbols$AbsSymbol;)V

public abstract scala.reflect.generic.Trees scala$reflect$generic$Trees$SymTree$$$outer();
  Signature: ()Lscala/reflect/generic/Trees;

}

