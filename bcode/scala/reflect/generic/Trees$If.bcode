Compiled from "Trees.scala"
public class scala.reflect.generic.Trees$If extends scala.reflect.generic.Trees$Tree implements scala.reflect.generic.Trees$TermTree,scala.ScalaObject,scala.Product,java.io.Serializable
  SourceFile: "Trees.scala"
  Scala: length = 0x
   
  InnerClass: 
   public If=class scala/reflect/generic/Trees$If of class scala/reflect/generic/Trees
   public abstract Tree=class scala/reflect/generic/Trees$Tree of class scala/reflect/generic/Trees
   public abstract TermTree=class scala/reflect/generic/Trees$TermTree of class scala/reflect/generic/Trees
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	Trees.scala;
Asciz	cond;
Asciz	Lscala/reflect/generic/Trees$Tree;;
Asciz	thenp;
Asciz	elsep;
Asciz	copy$default$3;
Asciz	()Lscala/reflect/generic/Trees$Tree;;
Asciz	Code;
Asciz	LineNumberTable;
Asciz	scala/reflect/generic/Trees$If;
class	scala/reflect/generic/Trees$If
NameAndType	elsep:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$If.elsep:()Lscala/reflect/generic/Trees$Tree;
Asciz	copy$default$2;
NameAndType	thenp:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$If.thenp:()Lscala/reflect/generic/Trees$Tree;
Asciz	copy$default$1;
NameAndType	cond:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$If.cond:()Lscala/reflect/generic/Trees$Tree;
NameAndType	cond:Lscala/reflect/generic/Trees$Tree;
Field	scala/reflect/generic/Trees$If.cond:Lscala/reflect/generic/Trees$Tree;
NameAndType	thenp:Lscala/reflect/generic/Trees$Tree;
Field	scala/reflect/generic/Trees$If.thenp:Lscala/reflect/generic/Trees$Tree;
NameAndType	elsep:Lscala/reflect/generic/Trees$Tree;
Field	scala/reflect/generic/Trees$If.elsep:Lscala/reflect/generic/Trees$Tree;
Asciz	copy;
Asciz	(Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)Lscala/reflect/generic/Trees$If;;
Asciz	scala$reflect$generic$Trees$If$$$outer;
Asciz	()Lscala/reflect/generic/Universe;;
NameAndType	scala$reflect$generic$Trees$If$$$outer:()Lscala/reflect/generic/Universe;
Method	scala/reflect/generic/Trees$If.scala$reflect$generic$Trees$If$$$outer:()Lscala/reflect/generic/Universe;
Asciz	<init>;
Asciz	(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V;
NameAndType	"<init>":(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V
Method	scala/reflect/generic/Trees$If."<init>":(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V
Asciz	this;
Asciz	Lscala/reflect/generic/Trees$If;;
Asciz	LocalVariableTable;
Asciz	productPrefix;
Asciz	()Ljava/lang/String;;
Asciz	If;
String	If
Asciz	productArity;
Asciz	()I;
Asciz	productElement;
Asciz	(I)Ljava/lang/Object;;
Asciz	java/lang/IndexOutOfBoundsException;
class	java/lang/IndexOutOfBoundsException
Asciz	scala/runtime/BoxesRunTime;
class	scala/runtime/BoxesRunTime
Asciz	boxToInteger;
Asciz	(I)Ljava/lang/Integer;;
NameAndType	boxToInteger:(I)Ljava/lang/Integer;
Method	scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
Asciz	java/lang/Object;
class	java/lang/Object
Asciz	toString;
NameAndType	toString:()Ljava/lang/String;
Method	java/lang/Object.toString:()Ljava/lang/String;
Asciz	(Ljava/lang/String;)V;
NameAndType	"<init>":(Ljava/lang/String;)V
Method	java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
Asciz	canEqual;
Asciz	(Ljava/lang/Object;)Z;
Asciz	scala/reflect/generic/Trees$Tree;
class	scala/reflect/generic/Trees$Tree
Asciz	$outer;
Asciz	Lscala/reflect/generic/Universe;;
NameAndType	$outer:Lscala/reflect/generic/Universe;
Field	scala/reflect/generic/Trees$Tree.$outer:Lscala/reflect/generic/Universe;
Asciz	(Lscala/reflect/generic/Universe;)V;
NameAndType	"<init>":(Lscala/reflect/generic/Universe;)V
Method	scala/reflect/generic/Trees$Tree."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	Scala;
Asciz	InnerClasses;
Asciz	scala/reflect/generic/Trees;
class	scala/reflect/generic/Trees
Asciz	Tree;
Asciz	scala/reflect/generic/Trees$TermTree;
class	scala/reflect/generic/Trees$TermTree
Asciz	TermTree;
Asciz	scala/ScalaObject;
class	scala/ScalaObject
Asciz	scala/Product;
class	scala/Product
Asciz	java/io/Serializable;
class	java/io/Serializable

{
private final scala.reflect.generic.Trees$Tree cond;
  Signature: Lscala/reflect/generic/Trees$Tree;

private final scala.reflect.generic.Trees$Tree thenp;
  Signature: Lscala/reflect/generic/Trees$Tree;

private final scala.reflect.generic.Trees$Tree elsep;
  Signature: Lscala/reflect/generic/Trees$Tree;

public scala.reflect.generic.Trees$Tree copy$default$3();
  Signature: ()Lscala/reflect/generic/Trees$Tree;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokevirtual	Method elsep:()Lscala/reflect/generic/Trees$Tree;
	areturn
  Labels:

public scala.reflect.generic.Trees$Tree copy$default$2();
  Signature: ()Lscala/reflect/generic/Trees$Tree;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokevirtual	Method thenp:()Lscala/reflect/generic/Trees$Tree;
	areturn
  Labels:

public scala.reflect.generic.Trees$Tree copy$default$1();
  Signature: ()Lscala/reflect/generic/Trees$Tree;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokevirtual	Method cond:()Lscala/reflect/generic/Trees$Tree;
	areturn
  Labels:

public scala.reflect.generic.Trees$Tree cond();
  Signature: ()Lscala/reflect/generic/Trees$Tree;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field cond:Lscala/reflect/generic/Trees$Tree;
	areturn
  Labels:

public scala.reflect.generic.Trees$Tree thenp();
  Signature: ()Lscala/reflect/generic/Trees$Tree;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field thenp:Lscala/reflect/generic/Trees$Tree;
	areturn
  Labels:

public scala.reflect.generic.Trees$Tree elsep();
  Signature: ()Lscala/reflect/generic/Trees$Tree;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field elsep:Lscala/reflect/generic/Trees$Tree;
	areturn
  Labels:

public scala.reflect.generic.Trees$If copy(scala.reflect.generic.Trees$Tree, scala.reflect.generic.Trees$Tree, scala.reflect.generic.Trees$Tree);
  Signature: (Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)Lscala/reflect/generic/Trees$If;
  Code:
   Stack=6, Locals=4, Args_size=4
	new	class scala/reflect/generic/Trees$If
	dup
	aload_0
	invokevirtual	Method scala$reflect$generic$Trees$If$$$outer:()Lscala/reflect/generic/Universe;
	aload_1
	aload_2
	aload_3
	invokespecial	Method "<init>":(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      15      0    this       Lscala/reflect/generic/Trees$If;
   0      15      1    cond       Lscala/reflect/generic/Trees$Tree;
   0      15      2    thenp       Lscala/reflect/generic/Trees$Tree;
   0      15      3    elsep       Lscala/reflect/generic/Trees$Tree;


public java.lang.String productPrefix();
  Signature: ()Ljava/lang/String;
  Code:
   Stack=1, Locals=1, Args_size=1
	ldc	String If
	areturn
  Labels:

public int productArity();
  Signature: ()I
  Code:
   Stack=1, Locals=1, Args_size=1
	iconst_3
	ireturn
  Labels:

public java.lang.Object productElement(int);
  Signature: (I)Ljava/lang/Object;
  Code:
   Stack=3, Locals=2, Args_size=2
	iload_1
	tableswitch{ //0 to 2
		0: 57;
		1: 50;
		2: 43;
		default: 28 }
	new	class java/lang/IndexOutOfBoundsException
	dup
	iload_1
	invokestatic	Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
	invokevirtual	Method java/lang/Object.toString:()Ljava/lang/String;
	invokespecial	Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
	athrow
	aload_0
	invokevirtual	Method elsep:()Lscala/reflect/generic/Trees$Tree;
	goto	l1 // areturn
	aload_0
	invokevirtual	Method thenp:()Lscala/reflect/generic/Trees$Tree;
	goto	l1 // areturn
	aload_0
	invokevirtual	Method cond:()Lscala/reflect/generic/Trees$Tree;
l1	areturn
  Labels:
   	l1 = 61 // areturn

public boolean canEqual(java.lang.Object);
  Signature: (Ljava/lang/Object;)Z
  Code:
   Stack=1, Locals=2, Args_size=2
	aload_1
	instanceof	class scala/reflect/generic/Trees$If
	ireturn
  Labels:

public scala.reflect.generic.Universe scala$reflect$generic$Trees$If$$$outer();
  Signature: ()Lscala/reflect/generic/Universe;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field scala/reflect/generic/Trees$Tree.$outer:Lscala/reflect/generic/Universe;
	areturn
  Labels:

public scala.reflect.generic.Trees$If(scala.reflect.generic.Universe, scala.reflect.generic.Trees$Tree, scala.reflect.generic.Trees$Tree, scala.reflect.generic.Trees$Tree);
  Signature: (Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V
  Code:
   Stack=2, Locals=5, Args_size=5
	aload_0
	aload_2
	putfield	Field cond:Lscala/reflect/generic/Trees$Tree;
	aload_0
	aload_3
	putfield	Field thenp:Lscala/reflect/generic/Trees$Tree;
	aload_0
	aload	4
	putfield	Field elsep:Lscala/reflect/generic/Trees$Tree;
	aload_0
	aload_1
	invokespecial	Method scala/reflect/generic/Trees$Tree."<init>":(Lscala/reflect/generic/Universe;)V
	return
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      22      0    this       Lscala/reflect/generic/Trees$If;
   0      22      1    $outer       Lscala/reflect/generic/Universe;
   0      22      2    cond       Lscala/reflect/generic/Trees$Tree;
   0      22      3    thenp       Lscala/reflect/generic/Trees$Tree;
   0      22      4    elsep       Lscala/reflect/generic/Trees$Tree;


}

