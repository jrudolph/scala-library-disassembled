Compiled from "Trees.scala"
public class scala.reflect.generic.Trees$SelectFromTypeTree extends scala.reflect.generic.Trees$Tree implements scala.reflect.generic.Trees$TypTree,scala.reflect.generic.Trees$RefTree,scala.ScalaObject,scala.Product,java.io.Serializable
  SourceFile: "Trees.scala"
  Scala: length = 0x
   
  InnerClass: 
   public abstract Tree=class scala/reflect/generic/Trees$Tree of class scala/reflect/generic/Trees
   public abstract SymTree=class scala/reflect/generic/Trees$SymTree of class scala/reflect/generic/Trees
   public abstract RefTree=class scala/reflect/generic/Trees$RefTree of class scala/reflect/generic/Trees
   public abstract TypTree=class scala/reflect/generic/Trees$TypTree of class scala/reflect/generic/Trees
   public abstract AbsSymbol=class scala/reflect/generic/Symbols$AbsSymbol of class scala/reflect/generic/Symbols
   public SelectFromTypeTree=class scala/reflect/generic/Trees$SelectFromTypeTree of class scala/reflect/generic/Trees
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	Trees.scala;
Asciz	symbol;
Asciz	Lscala/reflect/generic/Symbols$AbsSymbol;;
Asciz	name;
Asciz	Ljava/lang/Object;;
Asciz	qualifier;
Asciz	Lscala/reflect/generic/Trees$Tree;;
Asciz	()Lscala/reflect/generic/Symbols$AbsSymbol;;
Asciz	Code;
Asciz	LineNumberTable;
Asciz	scala/reflect/generic/Trees$SelectFromTypeTree;
class	scala/reflect/generic/Trees$SelectFromTypeTree
NameAndType	symbol:Lscala/reflect/generic/Symbols$AbsSymbol;
Field	scala/reflect/generic/Trees$SelectFromTypeTree.symbol:Lscala/reflect/generic/Symbols$AbsSymbol;
Asciz	symbol_$eq;
Asciz	(Lscala/reflect/generic/Symbols$AbsSymbol;)V;
Asciz	hasSymbol;
Asciz	()Z;
Asciz	scala/reflect/generic/Trees$SymTree$class;
class	scala/reflect/generic/Trees$SymTree$class
Asciz	(Lscala/reflect/generic/Trees$SymTree;)Z;
NameAndType	hasSymbol:(Lscala/reflect/generic/Trees$SymTree;)Z
Method	scala/reflect/generic/Trees$SymTree$class.hasSymbol:(Lscala/reflect/generic/Trees$SymTree;)Z
Asciz	copy$default$2;
Asciz	()Ljava/lang/Object;;
NameAndType	name:()Ljava/lang/Object;
Method	scala/reflect/generic/Trees$SelectFromTypeTree.name:()Ljava/lang/Object;
Asciz	copy$default$1;
Asciz	()Lscala/reflect/generic/Trees$Tree;;
NameAndType	qualifier:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$SelectFromTypeTree.qualifier:()Lscala/reflect/generic/Trees$Tree;
NameAndType	qualifier:Lscala/reflect/generic/Trees$Tree;
Field	scala/reflect/generic/Trees$SelectFromTypeTree.qualifier:Lscala/reflect/generic/Trees$Tree;
NameAndType	name:Ljava/lang/Object;
Field	scala/reflect/generic/Trees$SelectFromTypeTree.name:Ljava/lang/Object;
Asciz	copy;
Asciz	(Lscala/reflect/generic/Trees$Tree;Ljava/lang/Object;)Lscala/reflect/generic/Trees$SelectFromTypeTree;;
Asciz	scala$reflect$generic$Trees$SelectFromTypeTree$$$outer;
Asciz	()Lscala/reflect/generic/Universe;;
NameAndType	scala$reflect$generic$Trees$SelectFromTypeTree$$$outer:()Lscala/reflect/generic/Universe;
Method	scala/reflect/generic/Trees$SelectFromTypeTree.scala$reflect$generic$Trees$SelectFromTypeTree$$$outer:()Lscala/reflect/generic/Universe;
Asciz	<init>;
Asciz	(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Ljava/lang/Object;)V;
NameAndType	"<init>":(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Ljava/lang/Object;)V
Method	scala/reflect/generic/Trees$SelectFromTypeTree."<init>":(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Ljava/lang/Object;)V
Asciz	this;
Asciz	Lscala/reflect/generic/Trees$SelectFromTypeTree;;
Asciz	LocalVariableTable;
Asciz	productPrefix;
Asciz	()Ljava/lang/String;;
Asciz	SelectFromTypeTree;
String	SelectFromTypeTree
Asciz	productArity;
Asciz	()I;
Asciz	productElement;
Asciz	(I)Ljava/lang/Object;;
Asciz	java/lang/IndexOutOfBoundsException;
class	java/lang/IndexOutOfBoundsException
Asciz	scala/runtime/BoxesRunTime;
class	scala/runtime/BoxesRunTime
Asciz	boxToInteger;
Asciz	(I)Ljava/lang/Integer;;
NameAndType	boxToInteger:(I)Ljava/lang/Integer;
Method	scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
Asciz	java/lang/Object;
class	java/lang/Object
Asciz	toString;
NameAndType	toString:()Ljava/lang/String;
Method	java/lang/Object.toString:()Ljava/lang/String;
Asciz	(Ljava/lang/String;)V;
NameAndType	"<init>":(Ljava/lang/String;)V
Method	java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
Asciz	productElementName;
Asciz	(I)Ljava/lang/String;;
String	name
String	qualifier
Asciz	canEqual;
Asciz	(Ljava/lang/Object;)Z;
Asciz	scala/reflect/generic/Trees$Tree;
class	scala/reflect/generic/Trees$Tree
Asciz	$outer;
Asciz	Lscala/reflect/generic/Universe;;
NameAndType	$outer:Lscala/reflect/generic/Universe;
Field	scala/reflect/generic/Trees$Tree.$outer:Lscala/reflect/generic/Universe;
Asciz	scala$reflect$generic$Trees$SymTree$$$outer;
Asciz	()Lscala/reflect/generic/Trees;;
Asciz	(Lscala/reflect/generic/Universe;)V;
NameAndType	"<init>":(Lscala/reflect/generic/Universe;)V
Method	scala/reflect/generic/Trees$Tree."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	$init$;
Asciz	(Lscala/reflect/generic/Trees$SymTree;)V;
NameAndType	$init$:(Lscala/reflect/generic/Trees$SymTree;)V
Method	scala/reflect/generic/Trees$SymTree$class.$init$:(Lscala/reflect/generic/Trees$SymTree;)V
Asciz	Scala;
Asciz	InnerClasses;
Asciz	scala/reflect/generic/Trees;
class	scala/reflect/generic/Trees
Asciz	Tree;
Asciz	scala/reflect/generic/Trees$SymTree;
class	scala/reflect/generic/Trees$SymTree
Asciz	SymTree;
Asciz	scala/reflect/generic/Trees$RefTree;
class	scala/reflect/generic/Trees$RefTree
Asciz	RefTree;
Asciz	scala/reflect/generic/Trees$TypTree;
class	scala/reflect/generic/Trees$TypTree
Asciz	TypTree;
Asciz	scala/reflect/generic/Symbols$AbsSymbol;
class	scala/reflect/generic/Symbols$AbsSymbol
Asciz	scala/reflect/generic/Symbols;
class	scala/reflect/generic/Symbols
Asciz	AbsSymbol;
Asciz	scala/ScalaObject;
class	scala/ScalaObject
Asciz	scala/Product;
class	scala/Product
Asciz	java/io/Serializable;
class	java/io/Serializable

{
private scala.reflect.generic.Symbols$AbsSymbol symbol;
  Signature: Lscala/reflect/generic/Symbols$AbsSymbol;

private final java.lang.Object name;
  Signature: Ljava/lang/Object;

private final scala.reflect.generic.Trees$Tree qualifier;
  Signature: Lscala/reflect/generic/Trees$Tree;

public scala.reflect.generic.Symbols$AbsSymbol symbol();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field symbol:Lscala/reflect/generic/Symbols$AbsSymbol;
	areturn
  Labels:

public void symbol_$eq(scala.reflect.generic.Symbols$AbsSymbol);
  Signature: (Lscala/reflect/generic/Symbols$AbsSymbol;)V
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	putfield	Field symbol:Lscala/reflect/generic/Symbols$AbsSymbol;
	return
  Labels:

public boolean hasSymbol();
  Signature: ()Z
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/reflect/generic/Trees$SymTree$class.hasSymbol:(Lscala/reflect/generic/Trees$SymTree;)Z
	ireturn
  Labels:

public java.lang.Object copy$default$2();
  Signature: ()Ljava/lang/Object;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokevirtual	Method name:()Ljava/lang/Object;
	areturn
  Labels:

public scala.reflect.generic.Trees$Tree copy$default$1();
  Signature: ()Lscala/reflect/generic/Trees$Tree;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokevirtual	Method qualifier:()Lscala/reflect/generic/Trees$Tree;
	areturn
  Labels:

public scala.reflect.generic.Trees$Tree qualifier();
  Signature: ()Lscala/reflect/generic/Trees$Tree;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field qualifier:Lscala/reflect/generic/Trees$Tree;
	areturn
  Labels:

public java.lang.Object name();
  Signature: ()Ljava/lang/Object;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field name:Ljava/lang/Object;
	areturn
  Labels:

public scala.reflect.generic.Trees$SelectFromTypeTree copy(scala.reflect.generic.Trees$Tree, java.lang.Object);
  Signature: (Lscala/reflect/generic/Trees$Tree;Ljava/lang/Object;)Lscala/reflect/generic/Trees$SelectFromTypeTree;
  Code:
   Stack=5, Locals=3, Args_size=3
	new	class scala/reflect/generic/Trees$SelectFromTypeTree
	dup
	aload_0
	invokevirtual	Method scala$reflect$generic$Trees$SelectFromTypeTree$$$outer:()Lscala/reflect/generic/Universe;
	aload_1
	aload_2
	invokespecial	Method "<init>":(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Ljava/lang/Object;)V
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      14      0    this       Lscala/reflect/generic/Trees$SelectFromTypeTree;
   0      14      1    qualifier       Lscala/reflect/generic/Trees$Tree;
   0      14      2    name       Ljava/lang/Object;


public java.lang.String productPrefix();
  Signature: ()Ljava/lang/String;
  Code:
   Stack=1, Locals=1, Args_size=1
	ldc	String SelectFromTypeTree
	areturn
  Labels:

public int productArity();
  Signature: ()I
  Code:
   Stack=1, Locals=1, Args_size=1
	iconst_2
	ireturn
  Labels:

public java.lang.Object productElement(int);
  Signature: (I)Ljava/lang/Object;
  Code:
   Stack=3, Locals=2, Args_size=2
	iload_1
	tableswitch{ //0 to 1
		0: 46;
		1: 39;
		default: 24 }
	new	class java/lang/IndexOutOfBoundsException
	dup
	iload_1
	invokestatic	Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
	invokevirtual	Method java/lang/Object.toString:()Ljava/lang/String;
	invokespecial	Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
	athrow
	aload_0
	invokevirtual	Method name:()Ljava/lang/Object;
	goto	l1 // areturn
	aload_0
	invokevirtual	Method qualifier:()Lscala/reflect/generic/Trees$Tree;
l1	areturn
  Labels:
   	l1 = 50 // areturn

public java.lang.String productElementName(int);
  Signature: (I)Ljava/lang/String;
  Code:
   Stack=3, Locals=2, Args_size=2
	iload_1
	tableswitch{ //0 to 1
		0: 44;
		1: 39;
		default: 24 }
	new	class java/lang/IndexOutOfBoundsException
	dup
	iload_1
	invokestatic	Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
	invokevirtual	Method java/lang/Object.toString:()Ljava/lang/String;
	invokespecial	Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
	athrow
	ldc	String name
	goto	l1 // areturn
	ldc	String qualifier
l1	areturn
  Labels:
   	l1 = 46 // areturn

public boolean canEqual(java.lang.Object);
  Signature: (Ljava/lang/Object;)Z
  Code:
   Stack=1, Locals=2, Args_size=2
	aload_1
	instanceof	class scala/reflect/generic/Trees$SelectFromTypeTree
	ireturn
  Labels:

public scala.reflect.generic.Universe scala$reflect$generic$Trees$SelectFromTypeTree$$$outer();
  Signature: ()Lscala/reflect/generic/Universe;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field scala/reflect/generic/Trees$Tree.$outer:Lscala/reflect/generic/Universe;
	areturn
  Labels:

public scala.reflect.generic.Trees scala$reflect$generic$Trees$SymTree$$$outer();
  Signature: ()Lscala/reflect/generic/Trees;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokevirtual	Method scala$reflect$generic$Trees$SelectFromTypeTree$$$outer:()Lscala/reflect/generic/Universe;
	areturn
  Labels:

public scala.reflect.generic.Trees$SelectFromTypeTree(scala.reflect.generic.Universe, scala.reflect.generic.Trees$Tree, java.lang.Object);
  Signature: (Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Ljava/lang/Object;)V
  Code:
   Stack=2, Locals=4, Args_size=4
	aload_0
	aload_2
	putfield	Field qualifier:Lscala/reflect/generic/Trees$Tree;
	aload_0
	aload_3
	putfield	Field name:Ljava/lang/Object;
	aload_0
	aload_1
	invokespecial	Method scala/reflect/generic/Trees$Tree."<init>":(Lscala/reflect/generic/Universe;)V
	aload_0
	invokestatic	Method scala/reflect/generic/Trees$SymTree$class.$init$:(Lscala/reflect/generic/Trees$SymTree;)V
	return
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      20      0    this       Lscala/reflect/generic/Trees$SelectFromTypeTree;
   0      20      1    $outer       Lscala/reflect/generic/Universe;
   0      20      2    qualifier       Lscala/reflect/generic/Trees$Tree;
   0      20      3    name       Ljava/lang/Object;


}

