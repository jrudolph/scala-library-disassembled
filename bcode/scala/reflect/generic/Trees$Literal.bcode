Compiled from "Trees.scala"
public class scala.reflect.generic.Trees$Literal extends scala.reflect.generic.Trees$Tree implements scala.reflect.generic.Trees$TermTree,scala.ScalaObject,scala.Product,java.io.Serializable
  SourceFile: "Trees.scala"
  Scala: length = 0x
   
  InnerClass: 
   public abstract Tree=class scala/reflect/generic/Trees$Tree of class scala/reflect/generic/Trees
   public Literal=class scala/reflect/generic/Trees$Literal of class scala/reflect/generic/Trees
   public abstract TermTree=class scala/reflect/generic/Trees$TermTree of class scala/reflect/generic/Trees
   public Constant=class scala/reflect/generic/Constants$Constant of class scala/reflect/generic/Constants
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	Trees.scala;
Asciz	value;
Asciz	Lscala/reflect/generic/Constants$Constant;;
Asciz	copy$default$1;
Asciz	()Lscala/reflect/generic/Constants$Constant;;
Asciz	Code;
Asciz	LineNumberTable;
Asciz	scala/reflect/generic/Trees$Literal;
class	scala/reflect/generic/Trees$Literal
NameAndType	value:()Lscala/reflect/generic/Constants$Constant;
Method	scala/reflect/generic/Trees$Literal.value:()Lscala/reflect/generic/Constants$Constant;
NameAndType	value:Lscala/reflect/generic/Constants$Constant;
Field	scala/reflect/generic/Trees$Literal.value:Lscala/reflect/generic/Constants$Constant;
Asciz	copy;
Asciz	(Lscala/reflect/generic/Constants$Constant;)Lscala/reflect/generic/Trees$Literal;;
Asciz	scala$reflect$generic$Trees$Literal$$$outer;
Asciz	()Lscala/reflect/generic/Universe;;
NameAndType	scala$reflect$generic$Trees$Literal$$$outer:()Lscala/reflect/generic/Universe;
Method	scala/reflect/generic/Trees$Literal.scala$reflect$generic$Trees$Literal$$$outer:()Lscala/reflect/generic/Universe;
Asciz	<init>;
Asciz	(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Constants$Constant;)V;
NameAndType	"<init>":(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Constants$Constant;)V
Method	scala/reflect/generic/Trees$Literal."<init>":(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Constants$Constant;)V
Asciz	this;
Asciz	Lscala/reflect/generic/Trees$Literal;;
Asciz	LocalVariableTable;
Asciz	productPrefix;
Asciz	()Ljava/lang/String;;
Asciz	Literal;
String	Literal
Asciz	productArity;
Asciz	()I;
Asciz	productElement;
Asciz	(I)Ljava/lang/Object;;
Asciz	java/lang/IndexOutOfBoundsException;
class	java/lang/IndexOutOfBoundsException
Asciz	scala/runtime/BoxesRunTime;
class	scala/runtime/BoxesRunTime
Asciz	boxToInteger;
Asciz	(I)Ljava/lang/Integer;;
NameAndType	boxToInteger:(I)Ljava/lang/Integer;
Method	scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
Asciz	java/lang/Object;
class	java/lang/Object
Asciz	toString;
NameAndType	toString:()Ljava/lang/String;
Method	java/lang/Object.toString:()Ljava/lang/String;
Asciz	(Ljava/lang/String;)V;
NameAndType	"<init>":(Ljava/lang/String;)V
Method	java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
Asciz	canEqual;
Asciz	(Ljava/lang/Object;)Z;
Asciz	scala/reflect/generic/Trees$Tree;
class	scala/reflect/generic/Trees$Tree
Asciz	$outer;
Asciz	Lscala/reflect/generic/Universe;;
NameAndType	$outer:Lscala/reflect/generic/Universe;
Field	scala/reflect/generic/Trees$Tree.$outer:Lscala/reflect/generic/Universe;
Asciz	(Lscala/reflect/generic/Universe;)V;
NameAndType	"<init>":(Lscala/reflect/generic/Universe;)V
Method	scala/reflect/generic/Trees$Tree."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	scala/Predef$;
class	scala/Predef$
Asciz	MODULE$;
Asciz	Lscala/Predef$;;
NameAndType	MODULE$:Lscala/Predef$;
Field	scala/Predef$.MODULE$:Lscala/Predef$;
Asciz	assert;
Asciz	(Z)V;
NameAndType	assert:(Z)V
Method	scala/Predef$.assert:(Z)V
Asciz	Scala;
Asciz	InnerClasses;
Asciz	scala/reflect/generic/Trees;
class	scala/reflect/generic/Trees
Asciz	Tree;
Asciz	scala/reflect/generic/Trees$TermTree;
class	scala/reflect/generic/Trees$TermTree
Asciz	TermTree;
Asciz	scala/reflect/generic/Constants$Constant;
class	scala/reflect/generic/Constants$Constant
Asciz	scala/reflect/generic/Constants;
class	scala/reflect/generic/Constants
Asciz	Constant;
Asciz	scala/ScalaObject;
class	scala/ScalaObject
Asciz	scala/Product;
class	scala/Product
Asciz	java/io/Serializable;
class	java/io/Serializable

{
private final scala.reflect.generic.Constants$Constant value;
  Signature: Lscala/reflect/generic/Constants$Constant;

public scala.reflect.generic.Constants$Constant copy$default$1();
  Signature: ()Lscala/reflect/generic/Constants$Constant;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokevirtual	Method value:()Lscala/reflect/generic/Constants$Constant;
	areturn
  Labels:

public scala.reflect.generic.Constants$Constant value();
  Signature: ()Lscala/reflect/generic/Constants$Constant;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field value:Lscala/reflect/generic/Constants$Constant;
	areturn
  Labels:

public scala.reflect.generic.Trees$Literal copy(scala.reflect.generic.Constants$Constant);
  Signature: (Lscala/reflect/generic/Constants$Constant;)Lscala/reflect/generic/Trees$Literal;
  Code:
   Stack=4, Locals=2, Args_size=2
	new	class scala/reflect/generic/Trees$Literal
	dup
	aload_0
	invokevirtual	Method scala$reflect$generic$Trees$Literal$$$outer:()Lscala/reflect/generic/Universe;
	aload_1
	invokespecial	Method "<init>":(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Constants$Constant;)V
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      13      0    this       Lscala/reflect/generic/Trees$Literal;
   0      13      1    value       Lscala/reflect/generic/Constants$Constant;


public java.lang.String productPrefix();
  Signature: ()Ljava/lang/String;
  Code:
   Stack=1, Locals=1, Args_size=1
	ldc	String Literal
	areturn
  Labels:

public int productArity();
  Signature: ()I
  Code:
   Stack=1, Locals=1, Args_size=1
	iconst_1
	ireturn
  Labels:

public java.lang.Object productElement(int);
  Signature: (I)Ljava/lang/Object;
  Code:
   Stack=3, Locals=2, Args_size=2
	iload_1
	iconst_0
	if_icmpne	l1 // new
	aload_0
	invokevirtual	Method value:()Lscala/reflect/generic/Constants$Constant;
	areturn
l1	new	class java/lang/IndexOutOfBoundsException
	dup
	iload_1
	invokestatic	Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
	invokevirtual	Method java/lang/Object.toString:()Ljava/lang/String;
	invokespecial	Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
	athrow
  Labels:
   	l1 = 10 // new

public boolean canEqual(java.lang.Object);
  Signature: (Ljava/lang/Object;)Z
  Code:
   Stack=1, Locals=2, Args_size=2
	aload_1
	instanceof	class scala/reflect/generic/Trees$Literal
	ireturn
  Labels:

public scala.reflect.generic.Universe scala$reflect$generic$Trees$Literal$$$outer();
  Signature: ()Lscala/reflect/generic/Universe;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field scala/reflect/generic/Trees$Tree.$outer:Lscala/reflect/generic/Universe;
	areturn
  Labels:

public scala.reflect.generic.Trees$Literal(scala.reflect.generic.Universe, scala.reflect.generic.Constants$Constant);
  Signature: (Lscala/reflect/generic/Universe;Lscala/reflect/generic/Constants$Constant;)V
  Code:
   Stack=2, Locals=3, Args_size=3
	aload_0
	aload_2
	putfield	Field value:Lscala/reflect/generic/Constants$Constant;
	aload_0
	aload_1
	invokespecial	Method scala/reflect/generic/Trees$Tree."<init>":(Lscala/reflect/generic/Universe;)V
	getstatic	Field scala/Predef$.MODULE$:Lscala/Predef$;
	aload_2
	ifnull	l1 // iconst_0
	iconst_1
	goto	l2 // invokevirtual
l1	iconst_0
l2	invokevirtual	Method scala/Predef$.assert:(Z)V
	return
  Labels:
   	l1 = 21 // iconst_0
   	l2 = 22 // invokevirtual
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      26      0    this       Lscala/reflect/generic/Trees$Literal;
   0      26      1    $outer       Lscala/reflect/generic/Universe;
   0      26      2    value       Lscala/reflect/generic/Constants$Constant;


}

