Compiled from "Types.scala"
public interface scala.reflect.generic.Types$AbsLazyType extends scala.ScalaObject
  SourceFile: "Types.scala"
  Scala: length = 0x
   
  InnerClass: 
   public abstract AbsSymbol=class scala/reflect/generic/Symbols$AbsSymbol of class scala/reflect/generic/Symbols
   public abstract AbsLazyType=class scala/reflect/generic/Types$AbsLazyType of class scala/reflect/generic/Types
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	Types.scala;
Asciz	isComplete;
Asciz	()Z;
Asciz	complete;
Asciz	(Lscala/reflect/generic/Symbols$AbsSymbol;)V;
Asciz	safeToString;
Asciz	()Ljava/lang/String;;
Asciz	scala$reflect$generic$Types$AbsLazyType$$$outer;
Asciz	()Lscala/reflect/generic/Types;;
Asciz	Scala;
Asciz	InnerClasses;
Asciz	scala/reflect/generic/Symbols$AbsSymbol;
class	scala/reflect/generic/Symbols$AbsSymbol
Asciz	scala/reflect/generic/Symbols;
class	scala/reflect/generic/Symbols
Asciz	AbsSymbol;
Asciz	scala/reflect/generic/Types$AbsLazyType;
class	scala/reflect/generic/Types$AbsLazyType
Asciz	scala/reflect/generic/Types;
class	scala/reflect/generic/Types
Asciz	AbsLazyType;
Asciz	java/lang/Object;
class	java/lang/Object
Asciz	scala/ScalaObject;
class	scala/ScalaObject

{
public abstract boolean isComplete();
  Signature: ()Z

public abstract void complete(scala.reflect.generic.Symbols$AbsSymbol);
  Signature: (Lscala/reflect/generic/Symbols$AbsSymbol;)V

public abstract java.lang.String safeToString();
  Signature: ()Ljava/lang/String;

public abstract scala.reflect.generic.Types scala$reflect$generic$Types$AbsLazyType$$$outer();
  Signature: ()Lscala/reflect/generic/Types;

}

