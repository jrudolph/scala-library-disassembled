Compiled from "Trees.scala"
public abstract class scala.reflect.generic.Trees$AbsTypeTree extends scala.reflect.generic.Trees$Tree implements scala.reflect.generic.Trees$TypTree,scala.ScalaObject
  SourceFile: "Trees.scala"
  Scala: length = 0x
   
  InnerClass: 
   public abstract Tree=class scala/reflect/generic/Trees$Tree of class scala/reflect/generic/Trees
   public abstract AbsType=class scala/reflect/generic/Types$AbsType of class scala/reflect/generic/Types
   public abstract TypTree=class scala/reflect/generic/Trees$TypTree of class scala/reflect/generic/Trees
   public abstract AbsSymbol=class scala/reflect/generic/Symbols$AbsSymbol of class scala/reflect/generic/Symbols
   public abstract AbsTypeTree=class scala/reflect/generic/Trees$AbsTypeTree of class scala/reflect/generic/Trees
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	Trees.scala;
Asciz	symbol;
Asciz	()Lscala/reflect/generic/Symbols$AbsSymbol;;
Asciz	Code;
Asciz	LineNumberTable;
Asciz	scala/reflect/generic/Trees$AbsTypeTree;
class	scala/reflect/generic/Trees$AbsTypeTree
Asciz	tpe;
Asciz	()Lscala/reflect/generic/Types$AbsType;;
NameAndType	tpe:()Lscala/reflect/generic/Types$AbsType;
Method	scala/reflect/generic/Trees$AbsTypeTree.tpe:()Lscala/reflect/generic/Types$AbsType;
Asciz	java/lang/Object;
class	java/lang/Object
Asciz	equals;
Asciz	(Ljava/lang/Object;)Z;
NameAndType	equals:(Ljava/lang/Object;)Z
Method	java/lang/Object.equals:(Ljava/lang/Object;)Z
Asciz	scala/reflect/generic/Types$AbsType;
class	scala/reflect/generic/Types$AbsType
Asciz	typeSymbol;
NameAndType	typeSymbol:()Lscala/reflect/generic/Symbols$AbsSymbol;
Method	scala/reflect/generic/Types$AbsType.typeSymbol:()Lscala/reflect/generic/Symbols$AbsSymbol;
Asciz	isEmpty;
Asciz	()Z;
Asciz	scala$reflect$generic$Trees$AbsTypeTree$$$outer;
Asciz	()Lscala/reflect/generic/Universe;;
NameAndType	scala$reflect$generic$Trees$AbsTypeTree$$$outer:()Lscala/reflect/generic/Universe;
Method	scala/reflect/generic/Trees$AbsTypeTree.scala$reflect$generic$Trees$AbsTypeTree$$$outer:()Lscala/reflect/generic/Universe;
Asciz	scala/reflect/generic/Types;
class	scala/reflect/generic/Types
Asciz	NoType;
NameAndType	NoType:()Lscala/reflect/generic/Types$AbsType;
InterfaceMethod	scala/reflect/generic/Types.NoType:()Lscala/reflect/generic/Types$AbsType;
Asciz	scala/reflect/generic/Trees$Tree;
class	scala/reflect/generic/Trees$Tree
Asciz	$outer;
Asciz	Lscala/reflect/generic/Universe;;
NameAndType	$outer:Lscala/reflect/generic/Universe;
Field	scala/reflect/generic/Trees$Tree.$outer:Lscala/reflect/generic/Universe;
Asciz	<init>;
Asciz	(Lscala/reflect/generic/Universe;)V;
NameAndType	"<init>":(Lscala/reflect/generic/Universe;)V
Method	scala/reflect/generic/Trees$Tree."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	this;
Asciz	Lscala/reflect/generic/Trees$AbsTypeTree;;
Asciz	LocalVariableTable;
Asciz	Scala;
Asciz	InnerClasses;
Asciz	scala/reflect/generic/Trees;
class	scala/reflect/generic/Trees
Asciz	Tree;
Asciz	AbsType;
Asciz	scala/reflect/generic/Trees$TypTree;
class	scala/reflect/generic/Trees$TypTree
Asciz	TypTree;
Asciz	scala/reflect/generic/Symbols$AbsSymbol;
class	scala/reflect/generic/Symbols$AbsSymbol
Asciz	scala/reflect/generic/Symbols;
class	scala/reflect/generic/Symbols
Asciz	AbsSymbol;
Asciz	AbsTypeTree;
Asciz	scala/ScalaObject;
class	scala/ScalaObject

{
public scala.reflect.generic.Symbols$AbsSymbol symbol();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;
  Code:
   Stack=2, Locals=2, Args_size=1
	aload_0
	invokevirtual	Method tpe:()Lscala/reflect/generic/Types$AbsType;
	dup
	astore_1
	ifnull	l1 // aconst_null
	aload_1
	aconst_null
	invokevirtual	Method java/lang/Object.equals:(Ljava/lang/Object;)Z
	ifeq	l2 // aload_0
l1	aconst_null
	goto	l3 // areturn
l2	aload_0
	invokevirtual	Method tpe:()Lscala/reflect/generic/Types$AbsType;
	invokevirtual	Method scala/reflect/generic/Types$AbsType.typeSymbol:()Lscala/reflect/generic/Symbols$AbsSymbol;
l3	areturn
  Labels:
   	l1 = 17 // aconst_null
   	l2 = 21 // aload_0
   	l3 = 28 // areturn

public boolean isEmpty();
  Signature: ()Z
  Code:
   Stack=2, Locals=2, Args_size=1
	aload_0
	invokevirtual	Method tpe:()Lscala/reflect/generic/Types$AbsType;
	ifnull	l1 // iconst_1
	aload_0
	invokevirtual	Method tpe:()Lscala/reflect/generic/Types$AbsType;
	aload_0
	invokevirtual	Method scala$reflect$generic$Trees$AbsTypeTree$$$outer:()Lscala/reflect/generic/Universe;
	invokeinterface	InterfaceMethod scala/reflect/generic/Types.NoType:()Lscala/reflect/generic/Types$AbsType;
	astore_1
	dup
	ifnonnull	l2 // aload_1
	pop
	aload_1
	ifnull	l1 // iconst_1
	goto	l3 // iconst_0
l2	aload_1
	invokevirtual	Method java/lang/Object.equals:(Ljava/lang/Object;)Z
	ifeq	l3 // iconst_0
l1	iconst_1
	goto	l4 // ireturn
l3	iconst_0
l4	ireturn
  Labels:
   	l2 = 33 // aload_1
   	l1 = 40 // iconst_1
   	l3 = 44 // iconst_0
   	l4 = 45 // ireturn

public scala.reflect.generic.Universe scala$reflect$generic$Trees$AbsTypeTree$$$outer();
  Signature: ()Lscala/reflect/generic/Universe;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field scala/reflect/generic/Trees$Tree.$outer:Lscala/reflect/generic/Universe;
	areturn
  Labels:

public scala.reflect.generic.Trees$AbsTypeTree(scala.reflect.generic.Universe);
  Signature: (Lscala/reflect/generic/Universe;)V
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	invokespecial	Method scala/reflect/generic/Trees$Tree."<init>":(Lscala/reflect/generic/Universe;)V
	return
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/reflect/generic/Trees$AbsTypeTree;
   0      6      1    $outer       Lscala/reflect/generic/Universe;


}

