Compiled from "Trees.scala"
public abstract class scala.reflect.generic.Trees$SymTree$class extends java.lang.Object
  SourceFile: "Trees.scala"
  Scala: length = 0x
   
  InnerClass: 
   public abstract SymTree=class scala/reflect/generic/Trees$SymTree of class scala/reflect/generic/Trees
   public abstract AbsSymbol=class scala/reflect/generic/Symbols$AbsSymbol of class scala/reflect/generic/Symbols
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	Trees.scala;
Asciz	hasSymbol;
Asciz	(Lscala/reflect/generic/Trees$SymTree;)Z;
Asciz	Code;
Asciz	LineNumberTable;
Asciz	$this;
Asciz	Lscala/reflect/generic/Trees$SymTree;;
Asciz	LocalVariableTable;
Asciz	$init$;
Asciz	(Lscala/reflect/generic/Trees$SymTree;)V;
Asciz	scala/reflect/generic/Trees$SymTree;
class	scala/reflect/generic/Trees$SymTree
Asciz	scala$reflect$generic$Trees$SymTree$$$outer;
Asciz	()Lscala/reflect/generic/Trees;;
NameAndType	scala$reflect$generic$Trees$SymTree$$$outer:()Lscala/reflect/generic/Trees;
InterfaceMethod	scala/reflect/generic/Trees$SymTree.scala$reflect$generic$Trees$SymTree$$$outer:()Lscala/reflect/generic/Trees;
Asciz	scala/reflect/generic/Symbols;
class	scala/reflect/generic/Symbols
Asciz	NoSymbol;
Asciz	()Lscala/reflect/generic/Symbols$AbsSymbol;;
NameAndType	NoSymbol:()Lscala/reflect/generic/Symbols$AbsSymbol;
InterfaceMethod	scala/reflect/generic/Symbols.NoSymbol:()Lscala/reflect/generic/Symbols$AbsSymbol;
Asciz	symbol_$eq;
Asciz	(Lscala/reflect/generic/Symbols$AbsSymbol;)V;
NameAndType	symbol_$eq:(Lscala/reflect/generic/Symbols$AbsSymbol;)V
InterfaceMethod	scala/reflect/generic/Trees$SymTree.symbol_$eq:(Lscala/reflect/generic/Symbols$AbsSymbol;)V
Asciz	Scala;
Asciz	InnerClasses;
Asciz	scala/reflect/generic/Trees;
class	scala/reflect/generic/Trees
Asciz	SymTree;
Asciz	scala/reflect/generic/Symbols$AbsSymbol;
class	scala/reflect/generic/Symbols$AbsSymbol
Asciz	AbsSymbol;
Asciz	scala/reflect/generic/Trees$SymTree$class;
class	scala/reflect/generic/Trees$SymTree$class
Asciz	java/lang/Object;
class	java/lang/Object

{
public static boolean hasSymbol(scala.reflect.generic.Trees$SymTree);
  Signature: (Lscala/reflect/generic/Trees$SymTree;)Z
  Code:
   Stack=1, Locals=1, Args_size=1
	iconst_1
	ireturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      2      0    $this       Lscala/reflect/generic/Trees$SymTree;


public static void $init$(scala.reflect.generic.Trees$SymTree);
  Signature: (Lscala/reflect/generic/Trees$SymTree;)V
  Code:
   Stack=2, Locals=1, Args_size=1
	aload_0
	aload_0
	invokeinterface	InterfaceMethod scala/reflect/generic/Trees$SymTree.scala$reflect$generic$Trees$SymTree$$$outer:()Lscala/reflect/generic/Trees;
	checkcast	class scala/reflect/generic/Symbols
	invokeinterface	InterfaceMethod scala/reflect/generic/Symbols.NoSymbol:()Lscala/reflect/generic/Symbols$AbsSymbol;
	invokeinterface	InterfaceMethod scala/reflect/generic/Trees$SymTree.symbol_$eq:(Lscala/reflect/generic/Symbols$AbsSymbol;)V
	return
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      21      0    $this       Lscala/reflect/generic/Trees$SymTree;


}

