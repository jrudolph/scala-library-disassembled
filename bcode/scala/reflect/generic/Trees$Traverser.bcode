Compiled from "Trees.scala"
public class scala.reflect.generic.Trees$Traverser extends java.lang.Object implements scala.ScalaObject
  SourceFile: "Trees.scala"
  Scala: length = 0x
   
  InnerClass: 
   public If=class scala/reflect/generic/Trees$If of class scala/reflect/generic/Trees
   public New=class scala/reflect/generic/Trees$New of class scala/reflect/generic/Trees
   public Try=class scala/reflect/generic/Trees$Try of class scala/reflect/generic/Trees
   public This=class scala/reflect/generic/Trees$This of class scala/reflect/generic/Trees
   public Bind=class scala/reflect/generic/Trees$Bind of class scala/reflect/generic/Trees
   public Star=class scala/reflect/generic/Trees$Star of class scala/reflect/generic/Trees
   public abstract Tree=class scala/reflect/generic/Trees$Tree of class scala/reflect/generic/Trees
   public Ident=class scala/reflect/generic/Trees$Ident of class scala/reflect/generic/Trees
   public Super=class scala/reflect/generic/Trees$Super of class scala/reflect/generic/Trees
   public Throw=class scala/reflect/generic/Trees$Throw of class scala/reflect/generic/Trees
   public Apply=class scala/reflect/generic/Trees$Apply of class scala/reflect/generic/Trees
   public Typed=class scala/reflect/generic/Trees$Typed of class scala/reflect/generic/Trees
   public Match=class scala/reflect/generic/Trees$Match of class scala/reflect/generic/Trees
   public Block=class scala/reflect/generic/Trees$Block of class scala/reflect/generic/Trees
   public Select=class scala/reflect/generic/Trees$Select of class scala/reflect/generic/Trees
   public Return=class scala/reflect/generic/Trees$Return of class scala/reflect/generic/Trees
   public Import=class scala/reflect/generic/Trees$Import of class scala/reflect/generic/Trees
   public Assign=class scala/reflect/generic/Trees$Assign of class scala/reflect/generic/Trees
   public DefDef=class scala/reflect/generic/Trees$DefDef of class scala/reflect/generic/Trees
   public ValDef=class scala/reflect/generic/Trees$ValDef of class scala/reflect/generic/Trees
   public Literal=class scala/reflect/generic/Trees$Literal of class scala/reflect/generic/Trees
   public abstract RefTree=class scala/reflect/generic/Trees$RefTree of class scala/reflect/generic/Trees
   public UnApply=class scala/reflect/generic/Trees$UnApply of class scala/reflect/generic/Trees
   public CaseDef=class scala/reflect/generic/Trees$CaseDef of class scala/reflect/generic/Trees
   public TypeDef=class scala/reflect/generic/Trees$TypeDef of class scala/reflect/generic/Trees
   public Function=class scala/reflect/generic/Trees$Function of class scala/reflect/generic/Trees
   public LabelDef=class scala/reflect/generic/Trees$LabelDef of class scala/reflect/generic/Trees
   public Template=class scala/reflect/generic/Trees$Template of class scala/reflect/generic/Trees
   public ClassDef=class scala/reflect/generic/Trees$ClassDef of class scala/reflect/generic/Trees
   public TypeApply=class scala/reflect/generic/Trees$TypeApply of class scala/reflect/generic/Trees
   public Annotated=class scala/reflect/generic/Trees$Annotated of class scala/reflect/generic/Trees
   public ModuleDef=class scala/reflect/generic/Trees$ModuleDef of class scala/reflect/generic/Trees
   public Modifiers=class scala/reflect/generic/Trees$Modifiers of class scala/reflect/generic/Trees
   public Traverser=class scala/reflect/generic/Trees$Traverser of class scala/reflect/generic/Trees
   public ArrayValue=class scala/reflect/generic/Trees$ArrayValue of class scala/reflect/generic/Trees
   public PackageDef=class scala/reflect/generic/Trees$PackageDef of class scala/reflect/generic/Trees
   public abstract AbsTypeTree=class scala/reflect/generic/Trees$AbsTypeTree of class scala/reflect/generic/Trees
   public Alternative=class scala/reflect/generic/Trees$Alternative of class scala/reflect/generic/Trees
   public abstract AbsSymbol=class scala/reflect/generic/Symbols$AbsSymbol of class scala/reflect/generic/Symbols
   public ApplyDynamic=class scala/reflect/generic/Trees$ApplyDynamic of class scala/reflect/generic/Trees
   public TypeBoundsTree=class scala/reflect/generic/Trees$TypeBoundsTree of class scala/reflect/generic/Trees
   public SelectFromArray=class scala/reflect/generic/Trees$SelectFromArray of class scala/reflect/generic/Trees
   public AppliedTypeTree=class scala/reflect/generic/Trees$AppliedTypeTree of class scala/reflect/generic/Trees
   public CompoundTypeTree=class scala/reflect/generic/Trees$CompoundTypeTree of class scala/reflect/generic/Trees
   public SingletonTypeTree=class scala/reflect/generic/Trees$SingletonTypeTree of class scala/reflect/generic/Trees
   public abstract TypeTreeExtractor=class scala/reflect/generic/Trees$TypeTreeExtractor of class scala/reflect/generic/Trees
   public SelectFromTypeTree=class scala/reflect/generic/Trees$SelectFromTypeTree of class scala/reflect/generic/Trees
   public ExistentialTypeTree=class scala/reflect/generic/Trees$ExistentialTypeTree of class scala/reflect/generic/Trees
   public abstract AbsDefinitions=class scala/reflect/generic/StandardDefinitions$AbsDefinitions of class scala/reflect/generic/StandardDefinitions
   public final $anonfun$traverse$7=class scala/reflect/generic/Trees$Traverser$$anonfun$traverse$7 of class scala/reflect/generic/Trees$Traverser
   public final $anonfun$traverse$6=class scala/reflect/generic/Trees$Traverser$$anonfun$traverse$6 of class scala/reflect/generic/Trees$Traverser
   public final $anonfun$traverse$5=class scala/reflect/generic/Trees$Traverser$$anonfun$traverse$5 of class scala/reflect/generic/Trees$Traverser
   public final $anonfun$traverse$4=class scala/reflect/generic/Trees$Traverser$$anonfun$traverse$4 of class scala/reflect/generic/Trees$Traverser
   public final $anonfun$traverse$3=class scala/reflect/generic/Trees$Traverser$$anonfun$traverse$3 of class scala/reflect/generic/Trees$Traverser
   public final $anonfun$traverse$2=class scala/reflect/generic/Trees$Traverser$$anonfun$traverse$2 of class scala/reflect/generic/Trees$Traverser
   public final $anonfun$traverse$1=class scala/reflect/generic/Trees$Traverser$$anonfun$traverse$1 of class scala/reflect/generic/Trees$Traverser
   public final $anonfun$traverseStats$1=class scala/reflect/generic/Trees$Traverser$$anonfun$traverseStats$1 of class scala/reflect/generic/Trees$Traverser
   public final $anonfun$traverseTrees$1=class scala/reflect/generic/Trees$Traverser$$anonfun$traverseTrees$1 of class scala/reflect/generic/Trees$Traverser
   public final $anonfun$traverseTreess$1=class scala/reflect/generic/Trees$Traverser$$anonfun$traverseTreess$1 of class scala/reflect/generic/Trees$Traverser
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	Trees.scala;
Asciz	$outer;
Asciz	Lscala/reflect/generic/Universe;;
Asciz	currentOwner;
Asciz	Lscala/reflect/generic/Symbols$AbsSymbol;;
Asciz	()Lscala/reflect/generic/Symbols$AbsSymbol;;
Asciz	Code;
Asciz	LineNumberTable;
Asciz	scala/reflect/generic/Trees$Traverser;
class	scala/reflect/generic/Trees$Traverser
NameAndType	currentOwner:Lscala/reflect/generic/Symbols$AbsSymbol;
Field	scala/reflect/generic/Trees$Traverser.currentOwner:Lscala/reflect/generic/Symbols$AbsSymbol;
Asciz	currentOwner_$eq;
Asciz	(Lscala/reflect/generic/Symbols$AbsSymbol;)V;
Asciz	traverse;
Asciz	(Lscala/reflect/generic/Trees$Tree;)V;
Asciz	scala$reflect$generic$Trees$Traverser$$$outer;
Asciz	()Lscala/reflect/generic/Universe;;
NameAndType	scala$reflect$generic$Trees$Traverser$$$outer:()Lscala/reflect/generic/Universe;
Method	scala/reflect/generic/Trees$Traverser.scala$reflect$generic$Trees$Traverser$$$outer:()Lscala/reflect/generic/Universe;
Asciz	scala/reflect/generic/Trees;
class	scala/reflect/generic/Trees
Asciz	EmptyTree;
Asciz	()Lscala/reflect/generic/Trees$EmptyTree$;;
NameAndType	EmptyTree:()Lscala/reflect/generic/Trees$EmptyTree$;
InterfaceMethod	scala/reflect/generic/Trees.EmptyTree:()Lscala/reflect/generic/Trees$EmptyTree$;
Asciz	java/lang/Object;
class	java/lang/Object
Asciz	equals;
Asciz	(Ljava/lang/Object;)Z;
NameAndType	equals:(Ljava/lang/Object;)Z
Method	java/lang/Object.equals:(Ljava/lang/Object;)Z
Asciz	scala/reflect/generic/Trees$PackageDef;
class	scala/reflect/generic/Trees$PackageDef
Asciz	stats;
Asciz	()Lscala/collection/immutable/List;;
NameAndType	stats:()Lscala/collection/immutable/List;
Method	scala/reflect/generic/Trees$PackageDef.stats:()Lscala/collection/immutable/List;
Asciz	pid;
Asciz	()Lscala/reflect/generic/Trees$RefTree;;
NameAndType	pid:()Lscala/reflect/generic/Trees$RefTree;
Method	scala/reflect/generic/Trees$PackageDef.pid:()Lscala/reflect/generic/Trees$RefTree;
Asciz	scala/reflect/generic/Trees$Tree;
class	scala/reflect/generic/Trees$Tree
NameAndType	traverse:(Lscala/reflect/generic/Trees$Tree;)V
Method	scala/reflect/generic/Trees$Traverser.traverse:(Lscala/reflect/generic/Trees$Tree;)V
Asciz	symbol;
NameAndType	symbol:()Lscala/reflect/generic/Symbols$AbsSymbol;
Method	scala/reflect/generic/Trees$Tree.symbol:()Lscala/reflect/generic/Symbols$AbsSymbol;
Asciz	scala/reflect/generic/Symbols$AbsSymbol;
class	scala/reflect/generic/Symbols$AbsSymbol
Asciz	moduleClass;
NameAndType	moduleClass:()Lscala/reflect/generic/Symbols$AbsSymbol;
Method	scala/reflect/generic/Symbols$AbsSymbol.moduleClass:()Lscala/reflect/generic/Symbols$AbsSymbol;
Asciz	scala/reflect/generic/Trees$Traverser$$anonfun$traverse$1;
class	scala/reflect/generic/Trees$Traverser$$anonfun$traverse$1
Asciz	<init>;
Asciz	(Lscala/reflect/generic/Trees$Traverser;Lscala/collection/immutable/List;)V;
NameAndType	"<init>":(Lscala/reflect/generic/Trees$Traverser;Lscala/collection/immutable/List;)V
Method	scala/reflect/generic/Trees$Traverser$$anonfun$traverse$1."<init>":(Lscala/reflect/generic/Trees$Traverser;Lscala/collection/immutable/List;)V
Asciz	atOwner;
Asciz	(Lscala/reflect/generic/Symbols$AbsSymbol;Lscala/Function0;)V;
NameAndType	atOwner:(Lscala/reflect/generic/Symbols$AbsSymbol;Lscala/Function0;)V
Method	scala/reflect/generic/Trees$Traverser.atOwner:(Lscala/reflect/generic/Symbols$AbsSymbol;Lscala/Function0;)V
Asciz	scala/reflect/generic/Trees$ClassDef;
class	scala/reflect/generic/Trees$ClassDef
Asciz	mods;
Asciz	()Lscala/reflect/generic/Trees$Modifiers;;
NameAndType	mods:()Lscala/reflect/generic/Trees$Modifiers;
Method	scala/reflect/generic/Trees$ClassDef.mods:()Lscala/reflect/generic/Trees$Modifiers;
Asciz	tparams;
NameAndType	tparams:()Lscala/collection/immutable/List;
Method	scala/reflect/generic/Trees$ClassDef.tparams:()Lscala/collection/immutable/List;
Asciz	impl;
Asciz	()Lscala/reflect/generic/Trees$Template;;
NameAndType	impl:()Lscala/reflect/generic/Trees$Template;
Method	scala/reflect/generic/Trees$ClassDef.impl:()Lscala/reflect/generic/Trees$Template;
Asciz	scala/reflect/generic/Trees$Traverser$$anonfun$traverse$2;
class	scala/reflect/generic/Trees$Traverser$$anonfun$traverse$2
Asciz	(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Trees$Modifiers;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Template;)V;
NameAndType	"<init>":(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Trees$Modifiers;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Template;)V
Method	scala/reflect/generic/Trees$Traverser$$anonfun$traverse$2."<init>":(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Trees$Modifiers;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Template;)V
Asciz	scala/reflect/generic/Trees$ModuleDef;
class	scala/reflect/generic/Trees$ModuleDef
Method	scala/reflect/generic/Trees$ModuleDef.mods:()Lscala/reflect/generic/Trees$Modifiers;
Method	scala/reflect/generic/Trees$ModuleDef.impl:()Lscala/reflect/generic/Trees$Template;
Asciz	scala/reflect/generic/Trees$Traverser$$anonfun$traverse$3;
class	scala/reflect/generic/Trees$Traverser$$anonfun$traverse$3
Asciz	(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Trees$Modifiers;Lscala/reflect/generic/Trees$Template;)V;
NameAndType	"<init>":(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Trees$Modifiers;Lscala/reflect/generic/Trees$Template;)V
Method	scala/reflect/generic/Trees$Traverser$$anonfun$traverse$3."<init>":(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Trees$Modifiers;Lscala/reflect/generic/Trees$Template;)V
Asciz	scala/reflect/generic/Trees$ValDef;
class	scala/reflect/generic/Trees$ValDef
Method	scala/reflect/generic/Trees$ValDef.mods:()Lscala/reflect/generic/Trees$Modifiers;
Asciz	tpt;
Asciz	()Lscala/reflect/generic/Trees$Tree;;
NameAndType	tpt:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$ValDef.tpt:()Lscala/reflect/generic/Trees$Tree;
Asciz	rhs;
NameAndType	rhs:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$ValDef.rhs:()Lscala/reflect/generic/Trees$Tree;
Asciz	scala/reflect/generic/Trees$Traverser$$anonfun$traverse$4;
class	scala/reflect/generic/Trees$Traverser$$anonfun$traverse$4
Asciz	(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Trees$Modifiers;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V;
NameAndType	"<init>":(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Trees$Modifiers;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V
Method	scala/reflect/generic/Trees$Traverser$$anonfun$traverse$4."<init>":(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Trees$Modifiers;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V
Asciz	scala/reflect/generic/Trees$DefDef;
class	scala/reflect/generic/Trees$DefDef
Method	scala/reflect/generic/Trees$DefDef.mods:()Lscala/reflect/generic/Trees$Modifiers;
Method	scala/reflect/generic/Trees$DefDef.tparams:()Lscala/collection/immutable/List;
Asciz	vparamss;
NameAndType	vparamss:()Lscala/collection/immutable/List;
Method	scala/reflect/generic/Trees$DefDef.vparamss:()Lscala/collection/immutable/List;
Method	scala/reflect/generic/Trees$DefDef.tpt:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$DefDef.rhs:()Lscala/reflect/generic/Trees$Tree;
Asciz	scala/reflect/generic/Trees$Traverser$$anonfun$traverse$5;
class	scala/reflect/generic/Trees$Traverser$$anonfun$traverse$5
Asciz	(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Trees$Modifiers;Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V;
NameAndType	"<init>":(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Trees$Modifiers;Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V
Method	scala/reflect/generic/Trees$Traverser$$anonfun$traverse$5."<init>":(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Trees$Modifiers;Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V
Asciz	scala/reflect/generic/Trees$TypeDef;
class	scala/reflect/generic/Trees$TypeDef
Method	scala/reflect/generic/Trees$TypeDef.mods:()Lscala/reflect/generic/Trees$Modifiers;
Method	scala/reflect/generic/Trees$TypeDef.tparams:()Lscala/collection/immutable/List;
Method	scala/reflect/generic/Trees$TypeDef.rhs:()Lscala/reflect/generic/Trees$Tree;
Asciz	scala/reflect/generic/Trees$Traverser$$anonfun$traverse$6;
class	scala/reflect/generic/Trees$Traverser$$anonfun$traverse$6
Asciz	(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Trees$Modifiers;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Tree;)V;
NameAndType	"<init>":(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Trees$Modifiers;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Tree;)V
Method	scala/reflect/generic/Trees$Traverser$$anonfun$traverse$6."<init>":(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Trees$Modifiers;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Tree;)V
Asciz	scala/reflect/generic/Trees$LabelDef;
class	scala/reflect/generic/Trees$LabelDef
Asciz	params;
NameAndType	params:()Lscala/collection/immutable/List;
Method	scala/reflect/generic/Trees$LabelDef.params:()Lscala/collection/immutable/List;
Asciz	traverseTrees;
Asciz	(Lscala/collection/immutable/List;)V;
NameAndType	traverseTrees:(Lscala/collection/immutable/List;)V
Method	scala/reflect/generic/Trees$Traverser.traverseTrees:(Lscala/collection/immutable/List;)V
Method	scala/reflect/generic/Trees$LabelDef.rhs:()Lscala/reflect/generic/Trees$Tree;
Asciz	scala/reflect/generic/Trees$Import;
class	scala/reflect/generic/Trees$Import
Asciz	expr;
NameAndType	expr:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$Import.expr:()Lscala/reflect/generic/Trees$Tree;
Asciz	scala/reflect/generic/Trees$Annotated;
class	scala/reflect/generic/Trees$Annotated
Asciz	annot;
NameAndType	annot:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$Annotated.annot:()Lscala/reflect/generic/Trees$Tree;
Asciz	arg;
NameAndType	arg:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$Annotated.arg:()Lscala/reflect/generic/Trees$Tree;
Asciz	scala/reflect/generic/Trees$Template;
class	scala/reflect/generic/Trees$Template
Asciz	self;
Asciz	()Lscala/reflect/generic/Trees$ValDef;;
NameAndType	self:()Lscala/reflect/generic/Trees$ValDef;
Method	scala/reflect/generic/Trees$Template.self:()Lscala/reflect/generic/Trees$ValDef;
Asciz	parents;
NameAndType	parents:()Lscala/collection/immutable/List;
Method	scala/reflect/generic/Trees$Template.parents:()Lscala/collection/immutable/List;
Asciz	isEmpty;
Asciz	()Z;
NameAndType	isEmpty:()Z
Method	scala/reflect/generic/Trees$ValDef.isEmpty:()Z
Asciz	body;
NameAndType	body:()Lscala/collection/immutable/List;
Method	scala/reflect/generic/Trees$Template.body:()Lscala/collection/immutable/List;
Asciz	traverseStats;
Asciz	(Lscala/collection/immutable/List;Lscala/reflect/generic/Symbols$AbsSymbol;)V;
NameAndType	traverseStats:(Lscala/collection/immutable/List;Lscala/reflect/generic/Symbols$AbsSymbol;)V
Method	scala/reflect/generic/Trees$Traverser.traverseStats:(Lscala/collection/immutable/List;Lscala/reflect/generic/Symbols$AbsSymbol;)V
Asciz	scala/reflect/generic/Trees$Block;
class	scala/reflect/generic/Trees$Block
Method	scala/reflect/generic/Trees$Block.stats:()Lscala/collection/immutable/List;
Method	scala/reflect/generic/Trees$Block.expr:()Lscala/reflect/generic/Trees$Tree;
Asciz	scala/reflect/generic/Trees$CaseDef;
class	scala/reflect/generic/Trees$CaseDef
Asciz	pat;
NameAndType	pat:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$CaseDef.pat:()Lscala/reflect/generic/Trees$Tree;
Asciz	guard;
NameAndType	guard:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$CaseDef.guard:()Lscala/reflect/generic/Trees$Tree;
NameAndType	body:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$CaseDef.body:()Lscala/reflect/generic/Trees$Tree;
Asciz	scala/reflect/generic/Trees$Alternative;
class	scala/reflect/generic/Trees$Alternative
Asciz	trees;
NameAndType	trees:()Lscala/collection/immutable/List;
Method	scala/reflect/generic/Trees$Alternative.trees:()Lscala/collection/immutable/List;
Asciz	scala/reflect/generic/Trees$Star;
class	scala/reflect/generic/Trees$Star
Asciz	elem;
NameAndType	elem:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$Star.elem:()Lscala/reflect/generic/Trees$Tree;
Asciz	scala/reflect/generic/Trees$Bind;
class	scala/reflect/generic/Trees$Bind
Method	scala/reflect/generic/Trees$Bind.body:()Lscala/reflect/generic/Trees$Tree;
Asciz	scala/reflect/generic/Trees$UnApply;
class	scala/reflect/generic/Trees$UnApply
Asciz	fun;
NameAndType	fun:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$UnApply.fun:()Lscala/reflect/generic/Trees$Tree;
Asciz	args;
NameAndType	args:()Lscala/collection/immutable/List;
Method	scala/reflect/generic/Trees$UnApply.args:()Lscala/collection/immutable/List;
Asciz	scala/reflect/generic/Trees$ArrayValue;
class	scala/reflect/generic/Trees$ArrayValue
Asciz	elemtpt;
NameAndType	elemtpt:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$ArrayValue.elemtpt:()Lscala/reflect/generic/Trees$Tree;
Asciz	elems;
NameAndType	elems:()Lscala/collection/immutable/List;
Method	scala/reflect/generic/Trees$ArrayValue.elems:()Lscala/collection/immutable/List;
Asciz	scala/reflect/generic/Trees$Function;
class	scala/reflect/generic/Trees$Function
Asciz	vparams;
NameAndType	vparams:()Lscala/collection/immutable/List;
Method	scala/reflect/generic/Trees$Function.vparams:()Lscala/collection/immutable/List;
Method	scala/reflect/generic/Trees$Function.body:()Lscala/reflect/generic/Trees$Tree;
Asciz	scala/reflect/generic/Trees$Traverser$$anonfun$traverse$7;
class	scala/reflect/generic/Trees$Traverser$$anonfun$traverse$7
Asciz	(Lscala/reflect/generic/Trees$Traverser;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Tree;)V;
NameAndType	"<init>":(Lscala/reflect/generic/Trees$Traverser;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Tree;)V
Method	scala/reflect/generic/Trees$Traverser$$anonfun$traverse$7."<init>":(Lscala/reflect/generic/Trees$Traverser;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Tree;)V
Asciz	scala/reflect/generic/Trees$Assign;
class	scala/reflect/generic/Trees$Assign
Asciz	lhs;
NameAndType	lhs:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$Assign.lhs:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$Assign.rhs:()Lscala/reflect/generic/Trees$Tree;
Asciz	scala/reflect/generic/Trees$If;
class	scala/reflect/generic/Trees$If
Asciz	cond;
NameAndType	cond:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$If.cond:()Lscala/reflect/generic/Trees$Tree;
Asciz	thenp;
NameAndType	thenp:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$If.thenp:()Lscala/reflect/generic/Trees$Tree;
Asciz	elsep;
NameAndType	elsep:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$If.elsep:()Lscala/reflect/generic/Trees$Tree;
Asciz	scala/reflect/generic/Trees$Match;
class	scala/reflect/generic/Trees$Match
Asciz	selector;
NameAndType	selector:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$Match.selector:()Lscala/reflect/generic/Trees$Tree;
Asciz	cases;
NameAndType	cases:()Lscala/collection/immutable/List;
Method	scala/reflect/generic/Trees$Match.cases:()Lscala/collection/immutable/List;
Asciz	scala/reflect/generic/Trees$Return;
class	scala/reflect/generic/Trees$Return
Method	scala/reflect/generic/Trees$Return.expr:()Lscala/reflect/generic/Trees$Tree;
Asciz	scala/reflect/generic/Trees$Try;
class	scala/reflect/generic/Trees$Try
Asciz	block;
NameAndType	block:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$Try.block:()Lscala/reflect/generic/Trees$Tree;
Asciz	catches;
NameAndType	catches:()Lscala/collection/immutable/List;
Method	scala/reflect/generic/Trees$Try.catches:()Lscala/collection/immutable/List;
Asciz	finalizer;
NameAndType	finalizer:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$Try.finalizer:()Lscala/reflect/generic/Trees$Tree;
Asciz	scala/reflect/generic/Trees$Throw;
class	scala/reflect/generic/Trees$Throw
Method	scala/reflect/generic/Trees$Throw.expr:()Lscala/reflect/generic/Trees$Tree;
Asciz	scala/reflect/generic/Trees$New;
class	scala/reflect/generic/Trees$New
Method	scala/reflect/generic/Trees$New.tpt:()Lscala/reflect/generic/Trees$Tree;
Asciz	scala/reflect/generic/Trees$Typed;
class	scala/reflect/generic/Trees$Typed
Method	scala/reflect/generic/Trees$Typed.expr:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$Typed.tpt:()Lscala/reflect/generic/Trees$Tree;
Asciz	scala/reflect/generic/Trees$TypeApply;
class	scala/reflect/generic/Trees$TypeApply
Method	scala/reflect/generic/Trees$TypeApply.fun:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$TypeApply.args:()Lscala/collection/immutable/List;
Asciz	scala/reflect/generic/Trees$Apply;
class	scala/reflect/generic/Trees$Apply
Method	scala/reflect/generic/Trees$Apply.fun:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$Apply.args:()Lscala/collection/immutable/List;
Asciz	scala/reflect/generic/Trees$ApplyDynamic;
class	scala/reflect/generic/Trees$ApplyDynamic
Asciz	qual;
NameAndType	qual:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$ApplyDynamic.qual:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$ApplyDynamic.args:()Lscala/collection/immutable/List;
Asciz	scala/reflect/generic/Trees$Super;
class	scala/reflect/generic/Trees$Super
Asciz	scala/reflect/generic/Trees$This;
class	scala/reflect/generic/Trees$This
Asciz	scala/reflect/generic/Trees$Select;
class	scala/reflect/generic/Trees$Select
Asciz	qualifier;
NameAndType	qualifier:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$Select.qualifier:()Lscala/reflect/generic/Trees$Tree;
Asciz	scala/reflect/generic/Trees$Ident;
class	scala/reflect/generic/Trees$Ident
Asciz	scala/reflect/generic/Trees$Literal;
class	scala/reflect/generic/Trees$Literal
Asciz	scala/reflect/generic/Trees$AbsTypeTree;
class	scala/reflect/generic/Trees$AbsTypeTree
Asciz	TypeTree;
Asciz	()Lscala/reflect/generic/Trees$TypeTreeExtractor;;
NameAndType	TypeTree:()Lscala/reflect/generic/Trees$TypeTreeExtractor;
InterfaceMethod	scala/reflect/generic/Trees.TypeTree:()Lscala/reflect/generic/Trees$TypeTreeExtractor;
Asciz	scala/reflect/generic/Trees$TypeTreeExtractor;
class	scala/reflect/generic/Trees$TypeTreeExtractor
Asciz	unapply;
Asciz	(Lscala/reflect/generic/Trees$AbsTypeTree;)Z;
NameAndType	unapply:(Lscala/reflect/generic/Trees$AbsTypeTree;)Z
Method	scala/reflect/generic/Trees$TypeTreeExtractor.unapply:(Lscala/reflect/generic/Trees$AbsTypeTree;)Z
Asciz	scala/MatchError;
class	scala/MatchError
Asciz	(Ljava/lang/Object;)V;
NameAndType	"<init>":(Ljava/lang/Object;)V
Method	scala/MatchError."<init>":(Ljava/lang/Object;)V
Asciz	scala/reflect/generic/Trees$SingletonTypeTree;
class	scala/reflect/generic/Trees$SingletonTypeTree
Asciz	ref;
NameAndType	ref:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$SingletonTypeTree.ref:()Lscala/reflect/generic/Trees$Tree;
Asciz	scala/reflect/generic/Trees$SelectFromTypeTree;
class	scala/reflect/generic/Trees$SelectFromTypeTree
Method	scala/reflect/generic/Trees$SelectFromTypeTree.qualifier:()Lscala/reflect/generic/Trees$Tree;
Asciz	scala/reflect/generic/Trees$CompoundTypeTree;
class	scala/reflect/generic/Trees$CompoundTypeTree
Asciz	templ;
NameAndType	templ:()Lscala/reflect/generic/Trees$Template;
Method	scala/reflect/generic/Trees$CompoundTypeTree.templ:()Lscala/reflect/generic/Trees$Template;
Asciz	scala/reflect/generic/Trees$AppliedTypeTree;
class	scala/reflect/generic/Trees$AppliedTypeTree
Method	scala/reflect/generic/Trees$AppliedTypeTree.tpt:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$AppliedTypeTree.args:()Lscala/collection/immutable/List;
Asciz	scala/reflect/generic/Trees$TypeBoundsTree;
class	scala/reflect/generic/Trees$TypeBoundsTree
Asciz	lo;
NameAndType	lo:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$TypeBoundsTree.lo:()Lscala/reflect/generic/Trees$Tree;
Asciz	hi;
NameAndType	hi:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$TypeBoundsTree.hi:()Lscala/reflect/generic/Trees$Tree;
Asciz	scala/reflect/generic/Trees$ExistentialTypeTree;
class	scala/reflect/generic/Trees$ExistentialTypeTree
Method	scala/reflect/generic/Trees$ExistentialTypeTree.tpt:()Lscala/reflect/generic/Trees$Tree;
Asciz	whereClauses;
NameAndType	whereClauses:()Lscala/collection/immutable/List;
Method	scala/reflect/generic/Trees$ExistentialTypeTree.whereClauses:()Lscala/collection/immutable/List;
Asciz	scala/reflect/generic/Trees$SelectFromArray;
class	scala/reflect/generic/Trees$SelectFromArray
Method	scala/reflect/generic/Trees$SelectFromArray.qualifier:()Lscala/reflect/generic/Trees$Tree;
Asciz	this;
Asciz	Lscala/reflect/generic/Trees$Traverser;;
Asciz	tree;
Asciz	Lscala/reflect/generic/Trees$Tree;;
Asciz	temp120;
Asciz	temp121;
Asciz	Lscala/reflect/generic/Trees$PackageDef;;
Asciz	temp123;
Asciz	Lscala/collection/immutable/List;;
Asciz	stats$1;
Asciz	temp124;
Asciz	Lscala/reflect/generic/Trees$ClassDef;;
Asciz	temp125;
Asciz	Lscala/reflect/generic/Trees$Modifiers;;
Asciz	temp127;
Asciz	temp128;
Asciz	Lscala/reflect/generic/Trees$Template;;
Asciz	mods$1;
Asciz	tparams$1;
Asciz	impl$1;
Asciz	temp129;
Asciz	Lscala/reflect/generic/Trees$ModuleDef;;
Asciz	temp130;
Asciz	temp132;
Asciz	mods$2;
Asciz	impl$2;
Asciz	temp133;
Asciz	Lscala/reflect/generic/Trees$ValDef;;
Asciz	temp134;
Asciz	temp136;
Asciz	temp137;
Asciz	mods$3;
Asciz	tpt$1;
Asciz	rhs$1;
Asciz	temp138;
Asciz	Lscala/reflect/generic/Trees$DefDef;;
Asciz	temp139;
Asciz	temp141;
Asciz	temp142;
Asciz	temp143;
Asciz	temp144;
Asciz	mods$4;
Asciz	tparams$2;
Asciz	vparamss$1;
Asciz	tpt$2;
Asciz	rhs$2;
Asciz	temp145;
Asciz	Lscala/reflect/generic/Trees$TypeDef;;
Asciz	temp146;
Asciz	temp148;
Asciz	temp149;
Asciz	mods$5;
Asciz	tparams$3;
Asciz	rhs$3;
Asciz	temp150;
Asciz	Lscala/reflect/generic/Trees$LabelDef;;
Asciz	temp157;
Asciz	Lscala/reflect/generic/Trees$Annotated;;
Asciz	temp160;
Asciz	temp162;
Asciz	temp164;
Asciz	Lscala/reflect/generic/Trees$Block;;
Asciz	temp167;
Asciz	Lscala/reflect/generic/Trees$CaseDef;;
Asciz	temp178;
Asciz	Lscala/reflect/generic/Trees$UnApply;;
Asciz	temp181;
Asciz	Lscala/reflect/generic/Trees$ArrayValue;;
Asciz	temp184;
Asciz	Lscala/reflect/generic/Trees$Function;;
Asciz	temp185;
Asciz	temp186;
Asciz	vparams$1;
Asciz	body$1;
Asciz	temp187;
Asciz	Lscala/reflect/generic/Trees$Assign;;
Asciz	temp190;
Asciz	Lscala/reflect/generic/Trees$If;;
Asciz	temp194;
Asciz	Lscala/reflect/generic/Trees$Match;;
Asciz	temp199;
Asciz	Lscala/reflect/generic/Trees$Try;;
Asciz	temp207;
Asciz	Lscala/reflect/generic/Trees$Typed;;
Asciz	temp210;
Asciz	Lscala/reflect/generic/Trees$TypeApply;;
Asciz	temp213;
Asciz	Lscala/reflect/generic/Trees$Apply;;
Asciz	temp216;
Asciz	Lscala/reflect/generic/Trees$ApplyDynamic;;
Asciz	temp240;
Asciz	Lscala/reflect/generic/Trees$AppliedTypeTree;;
Asciz	temp243;
Asciz	Lscala/reflect/generic/Trees$TypeBoundsTree;;
Asciz	temp246;
Asciz	Lscala/reflect/generic/Trees$ExistentialTypeTree;;
Asciz	LocalVariableTable;
Asciz	scala/reflect/generic/Trees$Traverser$$anonfun$traverseTrees$1;
class	scala/reflect/generic/Trees$Traverser$$anonfun$traverseTrees$1
Asciz	(Lscala/reflect/generic/Trees$Traverser;)V;
NameAndType	"<init>":(Lscala/reflect/generic/Trees$Traverser;)V
Method	scala/reflect/generic/Trees$Traverser$$anonfun$traverseTrees$1."<init>":(Lscala/reflect/generic/Trees$Traverser;)V
Asciz	scala/collection/LinearSeqLike;
class	scala/collection/LinearSeqLike
Asciz	foreach;
Asciz	(Lscala/Function1;)V;
NameAndType	foreach:(Lscala/Function1;)V
InterfaceMethod	scala/collection/LinearSeqLike.foreach:(Lscala/Function1;)V
Asciz	(Lscala/collection/immutable/List<Lscala/reflect/generic/Trees$Tree;>;)V;
Asciz	Signature;
Asciz	traverseTreess;
Asciz	scala/reflect/generic/Trees$Traverser$$anonfun$traverseTreess$1;
class	scala/reflect/generic/Trees$Traverser$$anonfun$traverseTreess$1
Method	scala/reflect/generic/Trees$Traverser$$anonfun$traverseTreess$1."<init>":(Lscala/reflect/generic/Trees$Traverser;)V
Asciz	treess;
Asciz	(Lscala/collection/immutable/List<Lscala/collection/immutable/List<Lscala/reflect/generic/Trees$Tree;>;>;)V;
Asciz	scala/reflect/generic/Trees$Traverser$$anonfun$traverseStats$1;
class	scala/reflect/generic/Trees$Traverser$$anonfun$traverseStats$1
Asciz	(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Symbols$AbsSymbol;)V;
NameAndType	"<init>":(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Symbols$AbsSymbol;)V
Method	scala/reflect/generic/Trees$Traverser$$anonfun$traverseStats$1."<init>":(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Symbols$AbsSymbol;)V
Asciz	exprOwner$1;
Asciz	(Lscala/collection/immutable/List<Lscala/reflect/generic/Trees$Tree;>;Lscala/reflect/generic/Symbols$AbsSymbol;)V;
NameAndType	currentOwner:()Lscala/reflect/generic/Symbols$AbsSymbol;
Method	scala/reflect/generic/Trees$Traverser.currentOwner:()Lscala/reflect/generic/Symbols$AbsSymbol;
NameAndType	currentOwner_$eq:(Lscala/reflect/generic/Symbols$AbsSymbol;)V
Method	scala/reflect/generic/Trees$Traverser.currentOwner_$eq:(Lscala/reflect/generic/Symbols$AbsSymbol;)V
Asciz	scala/Function0;
class	scala/Function0
Asciz	apply;
Asciz	()Ljava/lang/Object;;
NameAndType	apply:()Ljava/lang/Object;
InterfaceMethod	scala/Function0.apply:()Ljava/lang/Object;
Asciz	owner;
Asciz	Lscala/Function0;;
Asciz	prevOwner;
Asciz	(Lscala/reflect/generic/Symbols$AbsSymbol;Lscala/Function0<Ljava/lang/Object;>;)V;
NameAndType	$outer:Lscala/reflect/generic/Universe;
Field	scala/reflect/generic/Trees$Traverser.$outer:Lscala/reflect/generic/Universe;
Asciz	(Lscala/reflect/generic/Universe;)V;
Asciz	java/lang/NullPointerException;
class	java/lang/NullPointerException
Asciz	()V;
NameAndType	"<init>":()V
Method	java/lang/NullPointerException."<init>":()V
Method	java/lang/Object."<init>":()V
Asciz	scala/reflect/generic/StandardDefinitions;
class	scala/reflect/generic/StandardDefinitions
Asciz	definitions;
Asciz	()Lscala/reflect/generic/StandardDefinitions$AbsDefinitions;;
NameAndType	definitions:()Lscala/reflect/generic/StandardDefinitions$AbsDefinitions;
InterfaceMethod	scala/reflect/generic/StandardDefinitions.definitions:()Lscala/reflect/generic/StandardDefinitions$AbsDefinitions;
Asciz	scala/reflect/generic/StandardDefinitions$AbsDefinitions;
class	scala/reflect/generic/StandardDefinitions$AbsDefinitions
Asciz	RootClass;
NameAndType	RootClass:()Lscala/reflect/generic/Symbols$AbsSymbol;
Method	scala/reflect/generic/StandardDefinitions$AbsDefinitions.RootClass:()Lscala/reflect/generic/Symbols$AbsSymbol;
Asciz	Scala;
Asciz	InnerClasses;
Asciz	If;
Asciz	New;
Asciz	Try;
Asciz	This;
Asciz	Bind;
Asciz	Star;
Asciz	Tree;
Asciz	Ident;
Asciz	Super;
Asciz	Throw;
Asciz	Apply;
Asciz	Typed;
Asciz	Match;
Asciz	Block;
Asciz	Select;
Asciz	Return;
Asciz	Import;
Asciz	Assign;
Asciz	DefDef;
Asciz	ValDef;
Asciz	Literal;
Asciz	scala/reflect/generic/Trees$RefTree;
class	scala/reflect/generic/Trees$RefTree
Asciz	RefTree;
Asciz	UnApply;
Asciz	CaseDef;
Asciz	TypeDef;
Asciz	Function;
Asciz	LabelDef;
Asciz	Template;
Asciz	ClassDef;
Asciz	TypeApply;
Asciz	Annotated;
Asciz	ModuleDef;
Asciz	scala/reflect/generic/Trees$Modifiers;
class	scala/reflect/generic/Trees$Modifiers
Asciz	Modifiers;
Asciz	Traverser;
Asciz	ArrayValue;
Asciz	PackageDef;
Asciz	AbsTypeTree;
Asciz	Alternative;
Asciz	scala/reflect/generic/Symbols;
class	scala/reflect/generic/Symbols
Asciz	AbsSymbol;
Asciz	ApplyDynamic;
Asciz	TypeBoundsTree;
Asciz	SelectFromArray;
Asciz	AppliedTypeTree;
Asciz	CompoundTypeTree;
Asciz	SingletonTypeTree;
Asciz	TypeTreeExtractor;
Asciz	SelectFromTypeTree;
Asciz	ExistentialTypeTree;
Asciz	AbsDefinitions;
Asciz	$anonfun$traverse$7;
Asciz	$anonfun$traverse$6;
Asciz	$anonfun$traverse$5;
Asciz	$anonfun$traverse$4;
Asciz	$anonfun$traverse$3;
Asciz	$anonfun$traverse$2;
Asciz	$anonfun$traverse$1;
Asciz	$anonfun$traverseStats$1;
Asciz	$anonfun$traverseTrees$1;
Asciz	$anonfun$traverseTreess$1;
Asciz	scala/ScalaObject;
class	scala/ScalaObject

{
public final scala.reflect.generic.Universe $outer;
  Signature: Lscala/reflect/generic/Universe;

private scala.reflect.generic.Symbols$AbsSymbol currentOwner;
  Signature: Lscala/reflect/generic/Symbols$AbsSymbol;

public scala.reflect.generic.Symbols$AbsSymbol currentOwner();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field currentOwner:Lscala/reflect/generic/Symbols$AbsSymbol;
	areturn
  Labels:

public void currentOwner_$eq(scala.reflect.generic.Symbols$AbsSymbol);
  Signature: (Lscala/reflect/generic/Symbols$AbsSymbol;)V
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	putfield	Field currentOwner:Lscala/reflect/generic/Symbols$AbsSymbol;
	return
  Labels:

public void traverse(scala.reflect.generic.Trees$Tree);
  Signature: (Lscala/reflect/generic/Trees$Tree;)V
  Code:
   Stack=10, Locals=69, Args_size=2
	aload_1
	astore_2
	aload_2
	aload_0
	invokevirtual	Method scala$reflect$generic$Trees$Traverser$$$outer:()Lscala/reflect/generic/Universe;
	invokeinterface	InterfaceMethod scala/reflect/generic/Trees.EmptyTree:()Lscala/reflect/generic/Trees$EmptyTree$;
	astore_3
	dup
	ifnonnull	l1 // aload_3
	pop
	aload_3
	ifnull	l2 // return
	goto	l3 // aload_2
l1	aload_3
	invokevirtual	Method java/lang/Object.equals:(Ljava/lang/Object;)Z
	ifne	l2 // return
l3	aload_2
	instanceof	class scala/reflect/generic/Trees$PackageDef
	ifeq	l4 // aload_2
	aload_2
	checkcast	class scala/reflect/generic/Trees$PackageDef
	astore	4
	aload	4
	invokevirtual	Method scala/reflect/generic/Trees$PackageDef.stats:()Lscala/collection/immutable/List;
	astore	5
	aload	5
	astore	6
	aload_0
	aload	4
	invokevirtual	Method scala/reflect/generic/Trees$PackageDef.pid:()Lscala/reflect/generic/Trees$RefTree;
	checkcast	class scala/reflect/generic/Trees$Tree
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	aload_0
	aload_1
	invokevirtual	Method scala/reflect/generic/Trees$Tree.symbol:()Lscala/reflect/generic/Symbols$AbsSymbol;
	invokevirtual	Method scala/reflect/generic/Symbols$AbsSymbol.moduleClass:()Lscala/reflect/generic/Symbols$AbsSymbol;
	new	class scala/reflect/generic/Trees$Traverser$$anonfun$traverse$1
	dup
	aload_0
	aload	6
	invokespecial	Method scala/reflect/generic/Trees$Traverser$$anonfun$traverse$1."<init>":(Lscala/reflect/generic/Trees$Traverser;Lscala/collection/immutable/List;)V
	invokevirtual	Method atOwner:(Lscala/reflect/generic/Symbols$AbsSymbol;Lscala/Function0;)V
	goto	l2 // return
l4	aload_2
	instanceof	class scala/reflect/generic/Trees$ClassDef
	ifeq	l5 // aload_2
	aload_2
	checkcast	class scala/reflect/generic/Trees$ClassDef
	astore	7
	aload	7
	invokevirtual	Method scala/reflect/generic/Trees$ClassDef.mods:()Lscala/reflect/generic/Trees$Modifiers;
	astore	8
	aload	7
	invokevirtual	Method scala/reflect/generic/Trees$ClassDef.tparams:()Lscala/collection/immutable/List;
	astore	9
	aload	7
	invokevirtual	Method scala/reflect/generic/Trees$ClassDef.impl:()Lscala/reflect/generic/Trees$Template;
	astore	10
	aload	8
	astore	11
	aload	9
	astore	12
	aload	10
	astore	13
	aload_0
	aload_1
	invokevirtual	Method scala/reflect/generic/Trees$Tree.symbol:()Lscala/reflect/generic/Symbols$AbsSymbol;
	new	class scala/reflect/generic/Trees$Traverser$$anonfun$traverse$2
	dup
	aload_0
	aload	11
	aload	12
	aload	13
	invokespecial	Method scala/reflect/generic/Trees$Traverser$$anonfun$traverse$2."<init>":(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Trees$Modifiers;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Template;)V
	invokevirtual	Method atOwner:(Lscala/reflect/generic/Symbols$AbsSymbol;Lscala/Function0;)V
	goto	l2 // return
l5	aload_2
	instanceof	class scala/reflect/generic/Trees$ModuleDef
	ifeq	l6 // aload_2
	aload_2
	checkcast	class scala/reflect/generic/Trees$ModuleDef
	astore	14
	aload	14
	invokevirtual	Method scala/reflect/generic/Trees$ModuleDef.mods:()Lscala/reflect/generic/Trees$Modifiers;
	astore	15
	aload	14
	invokevirtual	Method scala/reflect/generic/Trees$ModuleDef.impl:()Lscala/reflect/generic/Trees$Template;
	astore	16
	aload	15
	astore	17
	aload	16
	astore	18
	aload_0
	aload_1
	invokevirtual	Method scala/reflect/generic/Trees$Tree.symbol:()Lscala/reflect/generic/Symbols$AbsSymbol;
	invokevirtual	Method scala/reflect/generic/Symbols$AbsSymbol.moduleClass:()Lscala/reflect/generic/Symbols$AbsSymbol;
	new	class scala/reflect/generic/Trees$Traverser$$anonfun$traverse$3
	dup
	aload_0
	aload	17
	aload	18
	invokespecial	Method scala/reflect/generic/Trees$Traverser$$anonfun$traverse$3."<init>":(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Trees$Modifiers;Lscala/reflect/generic/Trees$Template;)V
	invokevirtual	Method atOwner:(Lscala/reflect/generic/Symbols$AbsSymbol;Lscala/Function0;)V
	goto	l2 // return
l6	aload_2
	instanceof	class scala/reflect/generic/Trees$ValDef
	ifeq	l7 // aload_2
	aload_2
	checkcast	class scala/reflect/generic/Trees$ValDef
	astore	19
	aload	19
	invokevirtual	Method scala/reflect/generic/Trees$ValDef.mods:()Lscala/reflect/generic/Trees$Modifiers;
	astore	20
	aload	19
	invokevirtual	Method scala/reflect/generic/Trees$ValDef.tpt:()Lscala/reflect/generic/Trees$Tree;
	astore	21
	aload	19
	invokevirtual	Method scala/reflect/generic/Trees$ValDef.rhs:()Lscala/reflect/generic/Trees$Tree;
	astore	22
	aload	20
	astore	23
	aload	21
	astore	24
	aload	22
	astore	25
	aload_0
	aload_1
	invokevirtual	Method scala/reflect/generic/Trees$Tree.symbol:()Lscala/reflect/generic/Symbols$AbsSymbol;
	new	class scala/reflect/generic/Trees$Traverser$$anonfun$traverse$4
	dup
	aload_0
	aload	23
	aload	24
	aload	25
	invokespecial	Method scala/reflect/generic/Trees$Traverser$$anonfun$traverse$4."<init>":(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Trees$Modifiers;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V
	invokevirtual	Method atOwner:(Lscala/reflect/generic/Symbols$AbsSymbol;Lscala/Function0;)V
	goto	l2 // return
l7	aload_2
	instanceof	class scala/reflect/generic/Trees$DefDef
	ifeq	l8 // aload_2
	aload_2
	checkcast	class scala/reflect/generic/Trees$DefDef
	astore	26
	aload	26
	invokevirtual	Method scala/reflect/generic/Trees$DefDef.mods:()Lscala/reflect/generic/Trees$Modifiers;
	astore	27
	aload	26
	invokevirtual	Method scala/reflect/generic/Trees$DefDef.tparams:()Lscala/collection/immutable/List;
	astore	28
	aload	26
	invokevirtual	Method scala/reflect/generic/Trees$DefDef.vparamss:()Lscala/collection/immutable/List;
	astore	29
	aload	26
	invokevirtual	Method scala/reflect/generic/Trees$DefDef.tpt:()Lscala/reflect/generic/Trees$Tree;
	astore	30
	aload	26
	invokevirtual	Method scala/reflect/generic/Trees$DefDef.rhs:()Lscala/reflect/generic/Trees$Tree;
	astore	31
	aload	27
	astore	32
	aload	28
	astore	33
	aload	29
	astore	34
	aload	30
	astore	35
	aload	31
	astore	36
	aload_0
	aload_1
	invokevirtual	Method scala/reflect/generic/Trees$Tree.symbol:()Lscala/reflect/generic/Symbols$AbsSymbol;
	new	class scala/reflect/generic/Trees$Traverser$$anonfun$traverse$5
	dup
	aload_0
	aload	32
	aload	33
	aload	34
	aload	35
	aload	36
	invokespecial	Method scala/reflect/generic/Trees$Traverser$$anonfun$traverse$5."<init>":(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Trees$Modifiers;Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V
	invokevirtual	Method atOwner:(Lscala/reflect/generic/Symbols$AbsSymbol;Lscala/Function0;)V
	goto	l2 // return
l8	aload_2
	instanceof	class scala/reflect/generic/Trees$TypeDef
	ifeq	l9 // aload_2
	aload_2
	checkcast	class scala/reflect/generic/Trees$TypeDef
	astore	37
	aload	37
	invokevirtual	Method scala/reflect/generic/Trees$TypeDef.mods:()Lscala/reflect/generic/Trees$Modifiers;
	astore	38
	aload	37
	invokevirtual	Method scala/reflect/generic/Trees$TypeDef.tparams:()Lscala/collection/immutable/List;
	astore	39
	aload	37
	invokevirtual	Method scala/reflect/generic/Trees$TypeDef.rhs:()Lscala/reflect/generic/Trees$Tree;
	astore	40
	aload	38
	astore	41
	aload	39
	astore	42
	aload	40
	astore	43
	aload_0
	aload_1
	invokevirtual	Method scala/reflect/generic/Trees$Tree.symbol:()Lscala/reflect/generic/Symbols$AbsSymbol;
	new	class scala/reflect/generic/Trees$Traverser$$anonfun$traverse$6
	dup
	aload_0
	aload	41
	aload	42
	aload	43
	invokespecial	Method scala/reflect/generic/Trees$Traverser$$anonfun$traverse$6."<init>":(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Trees$Modifiers;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Tree;)V
	invokevirtual	Method atOwner:(Lscala/reflect/generic/Symbols$AbsSymbol;Lscala/Function0;)V
	goto	l2 // return
l9	aload_2
	instanceof	class scala/reflect/generic/Trees$LabelDef
	ifeq	l10 // aload_2
	aload_2
	checkcast	class scala/reflect/generic/Trees$LabelDef
	astore	44
	aload_0
	aload	44
	invokevirtual	Method scala/reflect/generic/Trees$LabelDef.params:()Lscala/collection/immutable/List;
	invokevirtual	Method traverseTrees:(Lscala/collection/immutable/List;)V
	aload_0
	aload	44
	invokevirtual	Method scala/reflect/generic/Trees$LabelDef.rhs:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	goto	l2 // return
l10	aload_2
	instanceof	class scala/reflect/generic/Trees$Import
	ifeq	l11 // aload_2
	aload_0
	aload_2
	checkcast	class scala/reflect/generic/Trees$Import
	invokevirtual	Method scala/reflect/generic/Trees$Import.expr:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	goto	l2 // return
l11	aload_2
	instanceof	class scala/reflect/generic/Trees$Annotated
	ifeq	l12 // aload_2
	aload_2
	checkcast	class scala/reflect/generic/Trees$Annotated
	astore	45
	aload_0
	aload	45
	invokevirtual	Method scala/reflect/generic/Trees$Annotated.annot:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	aload_0
	aload	45
	invokevirtual	Method scala/reflect/generic/Trees$Annotated.arg:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	goto	l2 // return
l12	aload_2
	instanceof	class scala/reflect/generic/Trees$Template
	ifeq	l13 // aload_2
	aload_2
	checkcast	class scala/reflect/generic/Trees$Template
	astore	46
	aload	46
	invokevirtual	Method scala/reflect/generic/Trees$Template.self:()Lscala/reflect/generic/Trees$ValDef;
	astore	47
	aload	47
	astore	48
	aload_0
	aload	46
	invokevirtual	Method scala/reflect/generic/Trees$Template.parents:()Lscala/collection/immutable/List;
	invokevirtual	Method traverseTrees:(Lscala/collection/immutable/List;)V
	aload	48
	invokevirtual	Method scala/reflect/generic/Trees$ValDef.isEmpty:()Z
	ifne	l14 // aload_0
	aload_0
	aload	48
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
l14	aload_0
	aload	46
	invokevirtual	Method scala/reflect/generic/Trees$Template.body:()Lscala/collection/immutable/List;
	aload_1
	invokevirtual	Method scala/reflect/generic/Trees$Tree.symbol:()Lscala/reflect/generic/Symbols$AbsSymbol;
	invokevirtual	Method traverseStats:(Lscala/collection/immutable/List;Lscala/reflect/generic/Symbols$AbsSymbol;)V
	goto	l2 // return
l13	aload_2
	instanceof	class scala/reflect/generic/Trees$Block
	ifeq	l15 // aload_2
	aload_2
	checkcast	class scala/reflect/generic/Trees$Block
	astore	49
	aload_0
	aload	49
	invokevirtual	Method scala/reflect/generic/Trees$Block.stats:()Lscala/collection/immutable/List;
	invokevirtual	Method traverseTrees:(Lscala/collection/immutable/List;)V
	aload_0
	aload	49
	invokevirtual	Method scala/reflect/generic/Trees$Block.expr:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	goto	l2 // return
l15	aload_2
	instanceof	class scala/reflect/generic/Trees$CaseDef
	ifeq	l16 // aload_2
	aload_2
	checkcast	class scala/reflect/generic/Trees$CaseDef
	astore	50
	aload_0
	aload	50
	invokevirtual	Method scala/reflect/generic/Trees$CaseDef.pat:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	aload_0
	aload	50
	invokevirtual	Method scala/reflect/generic/Trees$CaseDef.guard:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	aload_0
	aload	50
	invokevirtual	Method scala/reflect/generic/Trees$CaseDef.body:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	goto	l2 // return
l16	aload_2
	instanceof	class scala/reflect/generic/Trees$Alternative
	ifeq	l17 // aload_2
	aload_0
	aload_2
	checkcast	class scala/reflect/generic/Trees$Alternative
	invokevirtual	Method scala/reflect/generic/Trees$Alternative.trees:()Lscala/collection/immutable/List;
	invokevirtual	Method traverseTrees:(Lscala/collection/immutable/List;)V
	goto	l2 // return
l17	aload_2
	instanceof	class scala/reflect/generic/Trees$Star
	ifeq	l18 // aload_2
	aload_0
	aload_2
	checkcast	class scala/reflect/generic/Trees$Star
	invokevirtual	Method scala/reflect/generic/Trees$Star.elem:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	goto	l2 // return
l18	aload_2
	instanceof	class scala/reflect/generic/Trees$Bind
	ifeq	l19 // aload_2
	aload_0
	aload_2
	checkcast	class scala/reflect/generic/Trees$Bind
	invokevirtual	Method scala/reflect/generic/Trees$Bind.body:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	goto	l2 // return
l19	aload_2
	instanceof	class scala/reflect/generic/Trees$UnApply
	ifeq	l20 // aload_2
	aload_2
	checkcast	class scala/reflect/generic/Trees$UnApply
	astore	51
	aload_0
	aload	51
	invokevirtual	Method scala/reflect/generic/Trees$UnApply.fun:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	aload_0
	aload	51
	invokevirtual	Method scala/reflect/generic/Trees$UnApply.args:()Lscala/collection/immutable/List;
	invokevirtual	Method traverseTrees:(Lscala/collection/immutable/List;)V
	goto	l2 // return
l20	aload_2
	instanceof	class scala/reflect/generic/Trees$ArrayValue
	ifeq	l21 // aload_2
	aload_2
	checkcast	class scala/reflect/generic/Trees$ArrayValue
	astore	52
	aload_0
	aload	52
	invokevirtual	Method scala/reflect/generic/Trees$ArrayValue.elemtpt:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	aload_0
	aload	52
	invokevirtual	Method scala/reflect/generic/Trees$ArrayValue.elems:()Lscala/collection/immutable/List;
	invokevirtual	Method traverseTrees:(Lscala/collection/immutable/List;)V
	goto	l2 // return
l21	aload_2
	instanceof	class scala/reflect/generic/Trees$Function
	ifeq	l22 // aload_2
	aload_2
	checkcast	class scala/reflect/generic/Trees$Function
	astore	53
	aload	53
	invokevirtual	Method scala/reflect/generic/Trees$Function.vparams:()Lscala/collection/immutable/List;
	astore	54
	aload	53
	invokevirtual	Method scala/reflect/generic/Trees$Function.body:()Lscala/reflect/generic/Trees$Tree;
	astore	55
	aload	54
	astore	56
	aload	55
	astore	57
	aload_0
	aload_1
	invokevirtual	Method scala/reflect/generic/Trees$Tree.symbol:()Lscala/reflect/generic/Symbols$AbsSymbol;
	new	class scala/reflect/generic/Trees$Traverser$$anonfun$traverse$7
	dup
	aload_0
	aload	56
	aload	57
	invokespecial	Method scala/reflect/generic/Trees$Traverser$$anonfun$traverse$7."<init>":(Lscala/reflect/generic/Trees$Traverser;Lscala/collection/immutable/List;Lscala/reflect/generic/Trees$Tree;)V
	invokevirtual	Method atOwner:(Lscala/reflect/generic/Symbols$AbsSymbol;Lscala/Function0;)V
	goto	l2 // return
l22	aload_2
	instanceof	class scala/reflect/generic/Trees$Assign
	ifeq	l23 // aload_2
	aload_2
	checkcast	class scala/reflect/generic/Trees$Assign
	astore	58
	aload_0
	aload	58
	invokevirtual	Method scala/reflect/generic/Trees$Assign.lhs:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	aload_0
	aload	58
	invokevirtual	Method scala/reflect/generic/Trees$Assign.rhs:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	goto	l2 // return
l23	aload_2
	instanceof	class scala/reflect/generic/Trees$If
	ifeq	l24 // aload_2
	aload_2
	checkcast	class scala/reflect/generic/Trees$If
	astore	59
	aload_0
	aload	59
	invokevirtual	Method scala/reflect/generic/Trees$If.cond:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	aload_0
	aload	59
	invokevirtual	Method scala/reflect/generic/Trees$If.thenp:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	aload_0
	aload	59
	invokevirtual	Method scala/reflect/generic/Trees$If.elsep:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	goto	l2 // return
l24	aload_2
	instanceof	class scala/reflect/generic/Trees$Match
	ifeq	l25 // aload_2
	aload_2
	checkcast	class scala/reflect/generic/Trees$Match
	astore	60
	aload_0
	aload	60
	invokevirtual	Method scala/reflect/generic/Trees$Match.selector:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	aload_0
	aload	60
	invokevirtual	Method scala/reflect/generic/Trees$Match.cases:()Lscala/collection/immutable/List;
	invokevirtual	Method traverseTrees:(Lscala/collection/immutable/List;)V
	goto	l2 // return
l25	aload_2
	instanceof	class scala/reflect/generic/Trees$Return
	ifeq	l26 // aload_2
	aload_0
	aload_2
	checkcast	class scala/reflect/generic/Trees$Return
	invokevirtual	Method scala/reflect/generic/Trees$Return.expr:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	goto	l2 // return
l26	aload_2
	instanceof	class scala/reflect/generic/Trees$Try
	ifeq	l27 // aload_2
	aload_2
	checkcast	class scala/reflect/generic/Trees$Try
	astore	61
	aload_0
	aload	61
	invokevirtual	Method scala/reflect/generic/Trees$Try.block:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	aload_0
	aload	61
	invokevirtual	Method scala/reflect/generic/Trees$Try.catches:()Lscala/collection/immutable/List;
	invokevirtual	Method traverseTrees:(Lscala/collection/immutable/List;)V
	aload_0
	aload	61
	invokevirtual	Method scala/reflect/generic/Trees$Try.finalizer:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	goto	l2 // return
l27	aload_2
	instanceof	class scala/reflect/generic/Trees$Throw
	ifeq	l28 // aload_2
	aload_0
	aload_2
	checkcast	class scala/reflect/generic/Trees$Throw
	invokevirtual	Method scala/reflect/generic/Trees$Throw.expr:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	goto	l2 // return
l28	aload_2
	instanceof	class scala/reflect/generic/Trees$New
	ifeq	l29 // aload_2
	aload_0
	aload_2
	checkcast	class scala/reflect/generic/Trees$New
	invokevirtual	Method scala/reflect/generic/Trees$New.tpt:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	goto	l2 // return
l29	aload_2
	instanceof	class scala/reflect/generic/Trees$Typed
	ifeq	l30 // aload_2
	aload_2
	checkcast	class scala/reflect/generic/Trees$Typed
	astore	62
	aload_0
	aload	62
	invokevirtual	Method scala/reflect/generic/Trees$Typed.expr:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	aload_0
	aload	62
	invokevirtual	Method scala/reflect/generic/Trees$Typed.tpt:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	goto	l2 // return
l30	aload_2
	instanceof	class scala/reflect/generic/Trees$TypeApply
	ifeq	l31 // aload_2
	aload_2
	checkcast	class scala/reflect/generic/Trees$TypeApply
	astore	63
	aload_0
	aload	63
	invokevirtual	Method scala/reflect/generic/Trees$TypeApply.fun:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	aload_0
	aload	63
	invokevirtual	Method scala/reflect/generic/Trees$TypeApply.args:()Lscala/collection/immutable/List;
	invokevirtual	Method traverseTrees:(Lscala/collection/immutable/List;)V
	goto	l2 // return
l31	aload_2
	instanceof	class scala/reflect/generic/Trees$Apply
	ifeq	l32 // aload_2
	aload_2
	checkcast	class scala/reflect/generic/Trees$Apply
	astore	64
	aload_0
	aload	64
	invokevirtual	Method scala/reflect/generic/Trees$Apply.fun:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	aload_0
	aload	64
	invokevirtual	Method scala/reflect/generic/Trees$Apply.args:()Lscala/collection/immutable/List;
	invokevirtual	Method traverseTrees:(Lscala/collection/immutable/List;)V
	goto	l2 // return
l32	aload_2
	instanceof	class scala/reflect/generic/Trees$ApplyDynamic
	ifeq	l33 // aload_2
	aload_2
	checkcast	class scala/reflect/generic/Trees$ApplyDynamic
	astore	65
	aload_0
	aload	65
	invokevirtual	Method scala/reflect/generic/Trees$ApplyDynamic.qual:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	aload_0
	aload	65
	invokevirtual	Method scala/reflect/generic/Trees$ApplyDynamic.args:()Lscala/collection/immutable/List;
	invokevirtual	Method traverseTrees:(Lscala/collection/immutable/List;)V
	goto	l2 // return
l33	aload_2
	instanceof	class scala/reflect/generic/Trees$Super
	ifne	l2 // return
	aload_2
	instanceof	class scala/reflect/generic/Trees$This
	ifne	l2 // return
	aload_2
	instanceof	class scala/reflect/generic/Trees$Select
	ifeq	l34 // aload_2
	aload_0
	aload_2
	checkcast	class scala/reflect/generic/Trees$Select
	invokevirtual	Method scala/reflect/generic/Trees$Select.qualifier:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	goto	l2 // return
l34	aload_2
	instanceof	class scala/reflect/generic/Trees$Ident
	ifne	l2 // return
	aload_2
	instanceof	class scala/reflect/generic/Trees$Literal
	ifne	l2 // return
	aload_2
	instanceof	class scala/reflect/generic/Trees$AbsTypeTree
	ifeq	l35 // aload_2
	aload_0
	invokevirtual	Method scala$reflect$generic$Trees$Traverser$$$outer:()Lscala/reflect/generic/Universe;
	invokeinterface	InterfaceMethod scala/reflect/generic/Trees.TypeTree:()Lscala/reflect/generic/Trees$TypeTreeExtractor;
	aload_2
	checkcast	class scala/reflect/generic/Trees$AbsTypeTree
	invokevirtual	Method scala/reflect/generic/Trees$TypeTreeExtractor.unapply:(Lscala/reflect/generic/Trees$AbsTypeTree;)Z
	ifne	l2 // return
	new	class scala/MatchError
	dup
	aload_2
	invokespecial	Method scala/MatchError."<init>":(Ljava/lang/Object;)V
	athrow
l35	aload_2
	instanceof	class scala/reflect/generic/Trees$SingletonTypeTree
	ifeq	l36 // aload_2
	aload_0
	aload_2
	checkcast	class scala/reflect/generic/Trees$SingletonTypeTree
	invokevirtual	Method scala/reflect/generic/Trees$SingletonTypeTree.ref:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	goto	l2 // return
l36	aload_2
	instanceof	class scala/reflect/generic/Trees$SelectFromTypeTree
	ifeq	l37 // aload_2
	aload_0
	aload_2
	checkcast	class scala/reflect/generic/Trees$SelectFromTypeTree
	invokevirtual	Method scala/reflect/generic/Trees$SelectFromTypeTree.qualifier:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	goto	l2 // return
l37	aload_2
	instanceof	class scala/reflect/generic/Trees$CompoundTypeTree
	ifeq	l38 // aload_2
	aload_0
	aload_2
	checkcast	class scala/reflect/generic/Trees$CompoundTypeTree
	invokevirtual	Method scala/reflect/generic/Trees$CompoundTypeTree.templ:()Lscala/reflect/generic/Trees$Template;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	goto	l2 // return
l38	aload_2
	instanceof	class scala/reflect/generic/Trees$AppliedTypeTree
	ifeq	l39 // aload_2
	aload_2
	checkcast	class scala/reflect/generic/Trees$AppliedTypeTree
	astore	66
	aload_0
	aload	66
	invokevirtual	Method scala/reflect/generic/Trees$AppliedTypeTree.tpt:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	aload_0
	aload	66
	invokevirtual	Method scala/reflect/generic/Trees$AppliedTypeTree.args:()Lscala/collection/immutable/List;
	invokevirtual	Method traverseTrees:(Lscala/collection/immutable/List;)V
	goto	l2 // return
l39	aload_2
	instanceof	class scala/reflect/generic/Trees$TypeBoundsTree
	ifeq	l40 // aload_2
	aload_2
	checkcast	class scala/reflect/generic/Trees$TypeBoundsTree
	astore	67
	aload_0
	aload	67
	invokevirtual	Method scala/reflect/generic/Trees$TypeBoundsTree.lo:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	aload_0
	aload	67
	invokevirtual	Method scala/reflect/generic/Trees$TypeBoundsTree.hi:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	goto	l2 // return
l40	aload_2
	instanceof	class scala/reflect/generic/Trees$ExistentialTypeTree
	ifeq	l41 // aload_2
	aload_2
	checkcast	class scala/reflect/generic/Trees$ExistentialTypeTree
	astore	68
	aload_0
	aload	68
	invokevirtual	Method scala/reflect/generic/Trees$ExistentialTypeTree.tpt:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
	aload_0
	aload	68
	invokevirtual	Method scala/reflect/generic/Trees$ExistentialTypeTree.whereClauses:()Lscala/collection/immutable/List;
	invokevirtual	Method traverseTrees:(Lscala/collection/immutable/List;)V
	goto	l2 // return
l41	aload_2
	instanceof	class scala/reflect/generic/Trees$SelectFromArray
	ifeq	l42 // new
	aload_0
	aload_2
	checkcast	class scala/reflect/generic/Trees$SelectFromArray
	invokevirtual	Method scala/reflect/generic/Trees$SelectFromArray.qualifier:()Lscala/reflect/generic/Trees$Tree;
	invokevirtual	Method traverse:(Lscala/reflect/generic/Trees$Tree;)V
l2	return
l42	new	class scala/MatchError
	dup
	aload_2
	invokespecial	Method scala/MatchError."<init>":(Ljava/lang/Object;)V
	athrow
  Labels:
   	l1 = 25 // aload_3
   	l3 = 32 // aload_2
   	l4 = 92 // aload_2
   	l5 = 163 // aload_2
   	l6 = 224 // aload_2
   	l7 = 295 // aload_2
   	l8 = 392 // aload_2
   	l9 = 463 // aload_2
   	l10 = 497 // aload_2
   	l11 = 518 // aload_2
   	l12 = 552 // aload_2
   	l14 = 599 // aload_0
   	l13 = 615 // aload_2
   	l15 = 649 // aload_2
   	l16 = 692 // aload_2
   	l17 = 713 // aload_2
   	l18 = 734 // aload_2
   	l19 = 755 // aload_2
   	l20 = 789 // aload_2
   	l21 = 823 // aload_2
   	l22 = 881 // aload_2
   	l23 = 915 // aload_2
   	l24 = 958 // aload_2
   	l25 = 992 // aload_2
   	l26 = 1013 // aload_2
   	l27 = 1056 // aload_2
   	l28 = 1077 // aload_2
   	l29 = 1098 // aload_2
   	l30 = 1132 // aload_2
   	l31 = 1166 // aload_2
   	l32 = 1200 // aload_2
   	l33 = 1234 // aload_2
   	l34 = 1269 // aload_2
   	l35 = 1318 // aload_2
   	l36 = 1339 // aload_2
   	l37 = 1360 // aload_2
   	l38 = 1381 // aload_2
   	l39 = 1415 // aload_2
   	l40 = 1449 // aload_2
   	l41 = 1483 // aload_2
   	l2 = 1501 // return
   	l42 = 1502 // new
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      1511      0    this       Lscala/reflect/generic/Trees$Traverser;
   0      1511      1    tree       Lscala/reflect/generic/Trees$Tree;
   2      1509      2    temp120       Lscala/reflect/generic/Trees$Tree;
   45      44      4    temp121       Lscala/reflect/generic/Trees$PackageDef;
   52      37      5    temp123       Lscala/collection/immutable/List;
   56      33      6    stats$1       Lscala/collection/immutable/List;
   105      55      7    temp124       Lscala/reflect/generic/Trees$ClassDef;
   112      48      8    temp125       Lscala/reflect/generic/Trees$Modifiers;
   119      41      9    temp127       Lscala/collection/immutable/List;
   126      34      10    temp128       Lscala/reflect/generic/Trees$Template;
   130      30      11    mods$1       Lscala/reflect/generic/Trees$Modifiers;
   134      26      12    tparams$1       Lscala/collection/immutable/List;
   138      22      13    impl$1       Lscala/reflect/generic/Trees$Template;
   176      45      14    temp129       Lscala/reflect/generic/Trees$ModuleDef;
   183      38      15    temp130       Lscala/reflect/generic/Trees$Modifiers;
   190      31      16    temp132       Lscala/reflect/generic/Trees$Template;
   194      27      17    mods$2       Lscala/reflect/generic/Trees$Modifiers;
   198      23      18    impl$2       Lscala/reflect/generic/Trees$Template;
   237      55      19    temp133       Lscala/reflect/generic/Trees$ValDef;
   244      48      20    temp134       Lscala/reflect/generic/Trees$Modifiers;
   251      41      21    temp136       Lscala/reflect/generic/Trees$Tree;
   258      34      22    temp137       Lscala/reflect/generic/Trees$Tree;
   262      30      23    mods$3       Lscala/reflect/generic/Trees$Modifiers;
   266      26      24    tpt$1       Lscala/reflect/generic/Trees$Tree;
   270      22      25    rhs$1       Lscala/reflect/generic/Trees$Tree;
   308      81      26    temp138       Lscala/reflect/generic/Trees$DefDef;
   315      74      27    temp139       Lscala/reflect/generic/Trees$Modifiers;
   322      67      28    temp141       Lscala/collection/immutable/List;
   329      60      29    temp142       Lscala/collection/immutable/List;
   336      53      30    temp143       Lscala/reflect/generic/Trees$Tree;
   343      46      31    temp144       Lscala/reflect/generic/Trees$Tree;
   347      42      32    mods$4       Lscala/reflect/generic/Trees$Modifiers;
   351      38      33    tparams$2       Lscala/collection/immutable/List;
   355      34      34    vparamss$1       Lscala/collection/immutable/List;
   359      30      35    tpt$2       Lscala/reflect/generic/Trees$Tree;
   363      26      36    rhs$2       Lscala/reflect/generic/Trees$Tree;
   405      55      37    temp145       Lscala/reflect/generic/Trees$TypeDef;
   412      48      38    temp146       Lscala/reflect/generic/Trees$Modifiers;
   419      41      39    temp148       Lscala/collection/immutable/List;
   426      34      40    temp149       Lscala/reflect/generic/Trees$Tree;
   430      30      41    mods$5       Lscala/reflect/generic/Trees$Modifiers;
   434      26      42    tparams$3       Lscala/collection/immutable/List;
   438      22      43    rhs$3       Lscala/reflect/generic/Trees$Tree;
   476      18      44    temp150       Lscala/reflect/generic/Trees$LabelDef;
   531      18      45    temp157       Lscala/reflect/generic/Trees$Annotated;
   565      47      46    temp160       Lscala/reflect/generic/Trees$Template;
   572      40      47    temp162       Lscala/reflect/generic/Trees$ValDef;
   576      36      48    self       Lscala/reflect/generic/Trees$ValDef;
   628      18      49    temp164       Lscala/reflect/generic/Trees$Block;
   662      27      50    temp167       Lscala/reflect/generic/Trees$CaseDef;
   768      18      51    temp178       Lscala/reflect/generic/Trees$UnApply;
   802      18      52    temp181       Lscala/reflect/generic/Trees$ArrayValue;
   836      42      53    temp184       Lscala/reflect/generic/Trees$Function;
   843      35      54    temp185       Lscala/collection/immutable/List;
   850      28      55    temp186       Lscala/reflect/generic/Trees$Tree;
   854      24      56    vparams$1       Lscala/collection/immutable/List;
   858      20      57    body$1       Lscala/reflect/generic/Trees$Tree;
   894      18      58    temp187       Lscala/reflect/generic/Trees$Assign;
   928      27      59    temp190       Lscala/reflect/generic/Trees$If;
   971      18      60    temp194       Lscala/reflect/generic/Trees$Match;
   1026      27      61    temp199       Lscala/reflect/generic/Trees$Try;
   1111      18      62    temp207       Lscala/reflect/generic/Trees$Typed;
   1145      18      63    temp210       Lscala/reflect/generic/Trees$TypeApply;
   1179      18      64    temp213       Lscala/reflect/generic/Trees$Apply;
   1213      18      65    temp216       Lscala/reflect/generic/Trees$ApplyDynamic;
   1394      18      66    temp240       Lscala/reflect/generic/Trees$AppliedTypeTree;
   1428      18      67    temp243       Lscala/reflect/generic/Trees$TypeBoundsTree;
   1462      18      68    temp246       Lscala/reflect/generic/Trees$ExistentialTypeTree;


public void traverseTrees(scala.collection.immutable.List);
  Signature: (Lscala/collection/immutable/List;)V
  Code:
   Stack=4, Locals=2, Args_size=2
	aload_1
	new	class scala/reflect/generic/Trees$Traverser$$anonfun$traverseTrees$1
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$Traverser$$anonfun$traverseTrees$1."<init>":(Lscala/reflect/generic/Trees$Traverser;)V
	invokeinterface	InterfaceMethod scala/collection/LinearSeqLike.foreach:(Lscala/Function1;)V
	return
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      15      0    this       Lscala/reflect/generic/Trees$Traverser;
   0      15      1    trees       Lscala/collection/immutable/List;

  Signature: length = 0x2
   01 FFFFFFD0 

public void traverseTreess(scala.collection.immutable.List);
  Signature: (Lscala/collection/immutable/List;)V
  Code:
   Stack=4, Locals=2, Args_size=2
	aload_1
	new	class scala/reflect/generic/Trees$Traverser$$anonfun$traverseTreess$1
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$Traverser$$anonfun$traverseTreess$1."<init>":(Lscala/reflect/generic/Trees$Traverser;)V
	invokeinterface	InterfaceMethod scala/collection/LinearSeqLike.foreach:(Lscala/Function1;)V
	return
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      15      0    this       Lscala/reflect/generic/Trees$Traverser;
   0      15      1    treess       Lscala/collection/immutable/List;

  Signature: length = 0x2
   01 FFFFFFD7 

public void traverseStats(scala.collection.immutable.List, scala.reflect.generic.Symbols$AbsSymbol);
  Signature: (Lscala/collection/immutable/List;Lscala/reflect/generic/Symbols$AbsSymbol;)V
  Code:
   Stack=5, Locals=3, Args_size=3
	aload_1
	new	class scala/reflect/generic/Trees$Traverser$$anonfun$traverseStats$1
	dup
	aload_0
	aload_2
	invokespecial	Method scala/reflect/generic/Trees$Traverser$$anonfun$traverseStats$1."<init>":(Lscala/reflect/generic/Trees$Traverser;Lscala/reflect/generic/Symbols$AbsSymbol;)V
	invokeinterface	InterfaceMethod scala/collection/LinearSeqLike.foreach:(Lscala/Function1;)V
	return
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      16      0    this       Lscala/reflect/generic/Trees$Traverser;
   0      16      1    stats       Lscala/collection/immutable/List;
   0      16      2    exprOwner$1       Lscala/reflect/generic/Symbols$AbsSymbol;

  Signature: length = 0x2
   01 FFFFFFDE 

public void atOwner(scala.reflect.generic.Symbols$AbsSymbol, scala.Function0);
  Signature: (Lscala/reflect/generic/Symbols$AbsSymbol;Lscala/Function0;)V
  Code:
   Stack=2, Locals=4, Args_size=3
	aload_0
	invokevirtual	Method currentOwner:()Lscala/reflect/generic/Symbols$AbsSymbol;
	astore_3
	aload_0
	aload_1
	invokevirtual	Method currentOwner_$eq:(Lscala/reflect/generic/Symbols$AbsSymbol;)V
	aload_2
	invokeinterface	InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
	pop
	aload_0
	aload_3
	invokevirtual	Method currentOwner_$eq:(Lscala/reflect/generic/Symbols$AbsSymbol;)V
	return
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      23      0    this       Lscala/reflect/generic/Trees$Traverser;
   0      23      1    owner       Lscala/reflect/generic/Symbols$AbsSymbol;
   0      23      2    traverse       Lscala/Function0;
   5      17      3    prevOwner       Lscala/reflect/generic/Symbols$AbsSymbol;

  Signature: length = 0x2
   01 FFFFFFEC 

public scala.reflect.generic.Universe scala$reflect$generic$Trees$Traverser$$$outer();
  Signature: ()Lscala/reflect/generic/Universe;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field $outer:Lscala/reflect/generic/Universe;
	areturn
  Labels:

public scala.reflect.generic.Trees$Traverser(scala.reflect.generic.Universe);
  Signature: (Lscala/reflect/generic/Universe;)V
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_1
	ifnonnull	l1 // aload_0
	new	class java/lang/NullPointerException
	dup
	invokespecial	Method java/lang/NullPointerException."<init>":()V
	athrow
l1	aload_0
	aload_1
	putfield	Field $outer:Lscala/reflect/generic/Universe;
	aload_0
	invokespecial	Method java/lang/Object."<init>":()V
	aload_0
	aload_1
	invokeinterface	InterfaceMethod scala/reflect/generic/StandardDefinitions.definitions:()Lscala/reflect/generic/StandardDefinitions$AbsDefinitions;
	invokevirtual	Method scala/reflect/generic/StandardDefinitions$AbsDefinitions.RootClass:()Lscala/reflect/generic/Symbols$AbsSymbol;
	putfield	Field currentOwner:Lscala/reflect/generic/Symbols$AbsSymbol;
	return
  Labels:
   	l1 = 12 // aload_0
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      35      0    this       Lscala/reflect/generic/Trees$Traverser;
   0      35      1    $outer       Lscala/reflect/generic/Universe;


}

