Compiled from "Universe.scala"
public abstract class scala.reflect.generic.Universe extends java.lang.Object implements scala.reflect.generic.Symbols,scala.reflect.generic.Types,scala.reflect.generic.Constants,scala.reflect.generic.Scopes,scala.reflect.generic.Names,scala.reflect.generic.StdNames,scala.reflect.generic.Trees,scala.reflect.generic.AnnotationInfos,scala.reflect.generic.StandardDefinitions,scala.ScalaObject
  SourceFile: "Universe.scala"
  ScalaSig: length = 0x1A0
   05 00 44 06 08 01 02 FFFFFF84 FFFFFF80 FFFFFF80 FFFFFF81 00 09 02 08 55
   6E 69 76 65 72 73 65 0A 02 03 04 01 07 67 65 6E
   65 72 69 63 0A 02 05 06 01 07 72 65 66 6C 65 63
   74 0A 01 07 01 05 73 63 61 6C 61 03 00 13 0C 00
   0A 12 16 19 1C 1F 22 25 28 2B 2E 10 02 0B 10 0D
   01 0C 0A 02 0D 0E 01 04 6C 61 6E 67 0A 01 0F 01
   04 6A 61 76 61 09 02 11 0C 02 06 4F 62 6A 65 63
   74 10 02 13 14 0D 01 02 09 02 15 02 02 07 53 79
   6D 62 6F 6C 73 10 02 13 17 09 02 18 02 02 05 54
   79 70 65 73 10 02 13 1A 09 02 1B 02 02 09 43 6F
   6E 73 74 61 6E 74 73 10 02 13 1D 09 02 1E 02 02
   06 53 63 6F 70 65 73 10 02 13 20 09 02 21 02 02
   05 4E 61 6D 65 73 10 02 13 23 09 02 24 02 02 08
   53 74 64 4E 61 6D 65 73 10 02 13 26 09 02 27 02
   02 05 54 72 65 65 73 10 02 13 29 09 02 2A 02 02
   0F 41 6E 6E 6F 74 61 74 69 6F 6E 49 6E 66 6F 73
   10 02 13 2C 09 02 2D 02 02 13 53 74 61 6E 64 61
   72 64 44 65 66 69 6E 69 74 69 6F 6E 73 10 02 2F
   30 0D 01 06 09 02 31 06 02 0B 53 63 61 6C 61 4F
   62 6A 65 63 74 08 05 33 00 FFFFFF84 00 34 01 06 3C 69
   6E 69 74 3E 14 01 35 10 02 13 00 04 08 37 00 FFFFFF84
   FFFFFF80 FFFFFF80 FFFFFF82 00 38 02 08 50 6F 73 69 74 69 6F 6E 11
   02 39 3C 10 02 2F 3A 09 02 3B 06 02 07 4E 6F 74
   68 69 6E 67 10 02 2F 3D 09 02 3E 06 02 03 41 6E
   79 08 07 40 00 FFFFFFC2 FFFFFF80 FFFFFF86 00 41 01 0A 4E 6F 50 6F
   73 69 74 69 6F 6E 15 01 42 10 02 43 36 0D 01 00
   
  InnerClass: 
   public abstract Tree=class scala/reflect/generic/Trees$Tree of class scala/reflect/generic/Trees
   public Literal=class scala/reflect/generic/Trees$Literal of class scala/reflect/generic/Trees
   public Modifiers=class scala/reflect/generic/Trees$Modifiers of class scala/reflect/generic/Trees
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	Universe.scala;
Asciz	Constant$module;
Asciz	Lscala/reflect/generic/Constants$Constant$;;
Asciz	SelectFromArray$module;
Asciz	Lscala/reflect/generic/Trees$SelectFromArray$;;
Asciz	ExistentialTypeTree$module;
Asciz	Lscala/reflect/generic/Trees$ExistentialTypeTree$;;
Asciz	TypeBoundsTree$module;
Asciz	Lscala/reflect/generic/Trees$TypeBoundsTree$;;
Asciz	AppliedTypeTree$module;
Asciz	Lscala/reflect/generic/Trees$AppliedTypeTree$;;
Asciz	CompoundTypeTree$module;
Asciz	Lscala/reflect/generic/Trees$CompoundTypeTree$;;
Asciz	SelectFromTypeTree$module;
Asciz	Lscala/reflect/generic/Trees$SelectFromTypeTree$;;
Asciz	SingletonTypeTree$module;
Asciz	Lscala/reflect/generic/Trees$SingletonTypeTree$;;
Asciz	Annotated$module;
Asciz	Lscala/reflect/generic/Trees$Annotated$;;
Asciz	Literal$module;
Asciz	Lscala/reflect/generic/Trees$Literal$;;
Asciz	Ident$module;
Asciz	Lscala/reflect/generic/Trees$Ident$;;
Asciz	Select$module;
Asciz	Lscala/reflect/generic/Trees$Select$;;
Asciz	This$module;
Asciz	Lscala/reflect/generic/Trees$This$;;
Asciz	Super$module;
Asciz	Lscala/reflect/generic/Trees$Super$;;
Asciz	ApplyDynamic$module;
Asciz	Lscala/reflect/generic/Trees$ApplyDynamic$;;
Asciz	Apply$module;
Asciz	Lscala/reflect/generic/Trees$Apply$;;
Asciz	TypeApply$module;
Asciz	Lscala/reflect/generic/Trees$TypeApply$;;
Asciz	Typed$module;
Asciz	Lscala/reflect/generic/Trees$Typed$;;
Asciz	New$module;
Asciz	Lscala/reflect/generic/Trees$New$;;
Asciz	Throw$module;
Asciz	Lscala/reflect/generic/Trees$Throw$;;
Asciz	Try$module;
Asciz	Lscala/reflect/generic/Trees$Try$;;
Asciz	Return$module;
Asciz	Lscala/reflect/generic/Trees$Return$;;
Asciz	Match$module;
Asciz	Lscala/reflect/generic/Trees$Match$;;
Asciz	If$module;
Asciz	Lscala/reflect/generic/Trees$If$;;
Asciz	Assign$module;
Asciz	Lscala/reflect/generic/Trees$Assign$;;
Asciz	Function$module;
Asciz	Lscala/reflect/generic/Trees$Function$;;
Asciz	ArrayValue$module;
Asciz	Lscala/reflect/generic/Trees$ArrayValue$;;
Asciz	UnApply$module;
Asciz	Lscala/reflect/generic/Trees$UnApply$;;
Asciz	Bind$module;
Asciz	Lscala/reflect/generic/Trees$Bind$;;
Asciz	Star$module;
Asciz	Lscala/reflect/generic/Trees$Star$;;
Asciz	Alternative$module;
Asciz	Lscala/reflect/generic/Trees$Alternative$;;
Asciz	CaseDef$module;
Asciz	Lscala/reflect/generic/Trees$CaseDef$;;
Asciz	Block$module;
Asciz	Lscala/reflect/generic/Trees$Block$;;
Asciz	Template$module;
Asciz	Lscala/reflect/generic/Trees$Template$;;
Asciz	Import$module;
Asciz	Lscala/reflect/generic/Trees$Import$;;
Asciz	ImportSelector$module;
Asciz	Lscala/reflect/generic/Trees$ImportSelector$;;
Asciz	LabelDef$module;
Asciz	Lscala/reflect/generic/Trees$LabelDef$;;
Asciz	TypeDef$module;
Asciz	Lscala/reflect/generic/Trees$TypeDef$;;
Asciz	DefDef$module;
Asciz	Lscala/reflect/generic/Trees$DefDef$;;
Asciz	ValDef$module;
Asciz	Lscala/reflect/generic/Trees$ValDef$;;
Asciz	ModuleDef$module;
Asciz	Lscala/reflect/generic/Trees$ModuleDef$;;
Asciz	ClassDef$module;
Asciz	Lscala/reflect/generic/Trees$ClassDef$;;
Asciz	PackageDef$module;
Asciz	Lscala/reflect/generic/Trees$PackageDef$;;
Asciz	EmptyTree$module;
Asciz	Lscala/reflect/generic/Trees$EmptyTree$;;
Asciz	bitmap$0;
Asciz	I;
Asciz	Modifiers$module;
Asciz	Lscala/reflect/generic/Trees$Modifiers$;;
Asciz	scala$reflect$generic$Types$$tostringRecursions;
Asciz	NoMods;
Asciz	Lscala/reflect/generic/Trees$Modifiers;;
Asciz	nodeCount;
Asciz	()I;
Asciz	Code;
Asciz	LineNumberTable;
Asciz	scala/reflect/generic/Universe;
class	scala/reflect/generic/Universe
NameAndType	nodeCount:I
Field	scala/reflect/generic/Universe.nodeCount:I
Asciz	nodeCount_$eq;
Asciz	(I)V;
Asciz	Modifiers;
Asciz	()Lscala/reflect/generic/Trees$Modifiers$;;
NameAndType	Modifiers$module:Lscala/reflect/generic/Trees$Modifiers$;
Field	scala/reflect/generic/Universe.Modifiers$module:Lscala/reflect/generic/Trees$Modifiers$;
Asciz	scala/reflect/generic/Trees$Modifiers$;
class	scala/reflect/generic/Trees$Modifiers$
Asciz	<init>;
Asciz	(Lscala/reflect/generic/Universe;)V;
NameAndType	"<init>":(Lscala/reflect/generic/Universe;)V
Method	scala/reflect/generic/Trees$Modifiers$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	()Lscala/reflect/generic/Trees$Modifiers;;
NameAndType	bitmap$0:I
Field	scala/reflect/generic/Universe.bitmap$0:I
Asciz	scala/reflect/generic/Trees$class;
class	scala/reflect/generic/Trees$class
Asciz	(Lscala/reflect/generic/Universe;)Lscala/reflect/generic/Trees$Modifiers;;
NameAndType	NoMods:(Lscala/reflect/generic/Universe;)Lscala/reflect/generic/Trees$Modifiers;
Method	scala/reflect/generic/Trees$class.NoMods:(Lscala/reflect/generic/Universe;)Lscala/reflect/generic/Trees$Modifiers;
NameAndType	NoMods:Lscala/reflect/generic/Trees$Modifiers;
Field	scala/reflect/generic/Universe.NoMods:Lscala/reflect/generic/Trees$Modifiers;
Asciz	EmptyTree;
Asciz	()Lscala/reflect/generic/Trees$EmptyTree$;;
NameAndType	EmptyTree$module:Lscala/reflect/generic/Trees$EmptyTree$;
Field	scala/reflect/generic/Universe.EmptyTree$module:Lscala/reflect/generic/Trees$EmptyTree$;
Asciz	scala/reflect/generic/Trees$EmptyTree$;
class	scala/reflect/generic/Trees$EmptyTree$
Method	scala/reflect/generic/Trees$EmptyTree$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	PackageDef;
Asciz	()Lscala/reflect/generic/Trees$PackageDef$;;
NameAndType	PackageDef$module:Lscala/reflect/generic/Trees$PackageDef$;
Field	scala/reflect/generic/Universe.PackageDef$module:Lscala/reflect/generic/Trees$PackageDef$;
Asciz	scala/reflect/generic/Trees$PackageDef$;
class	scala/reflect/generic/Trees$PackageDef$
Method	scala/reflect/generic/Trees$PackageDef$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	ClassDef;
Asciz	()Lscala/reflect/generic/Trees$ClassDef$;;
NameAndType	ClassDef$module:Lscala/reflect/generic/Trees$ClassDef$;
Field	scala/reflect/generic/Universe.ClassDef$module:Lscala/reflect/generic/Trees$ClassDef$;
Asciz	scala/reflect/generic/Trees$ClassDef$;
class	scala/reflect/generic/Trees$ClassDef$
Method	scala/reflect/generic/Trees$ClassDef$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	ModuleDef;
Asciz	()Lscala/reflect/generic/Trees$ModuleDef$;;
NameAndType	ModuleDef$module:Lscala/reflect/generic/Trees$ModuleDef$;
Field	scala/reflect/generic/Universe.ModuleDef$module:Lscala/reflect/generic/Trees$ModuleDef$;
Asciz	scala/reflect/generic/Trees$ModuleDef$;
class	scala/reflect/generic/Trees$ModuleDef$
Method	scala/reflect/generic/Trees$ModuleDef$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	ValDef;
Asciz	()Lscala/reflect/generic/Trees$ValDef$;;
NameAndType	ValDef$module:Lscala/reflect/generic/Trees$ValDef$;
Field	scala/reflect/generic/Universe.ValDef$module:Lscala/reflect/generic/Trees$ValDef$;
Asciz	scala/reflect/generic/Trees$ValDef$;
class	scala/reflect/generic/Trees$ValDef$
Method	scala/reflect/generic/Trees$ValDef$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	DefDef;
Asciz	()Lscala/reflect/generic/Trees$DefDef$;;
NameAndType	DefDef$module:Lscala/reflect/generic/Trees$DefDef$;
Field	scala/reflect/generic/Universe.DefDef$module:Lscala/reflect/generic/Trees$DefDef$;
Asciz	scala/reflect/generic/Trees$DefDef$;
class	scala/reflect/generic/Trees$DefDef$
Method	scala/reflect/generic/Trees$DefDef$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	TypeDef;
Asciz	()Lscala/reflect/generic/Trees$TypeDef$;;
NameAndType	TypeDef$module:Lscala/reflect/generic/Trees$TypeDef$;
Field	scala/reflect/generic/Universe.TypeDef$module:Lscala/reflect/generic/Trees$TypeDef$;
Asciz	scala/reflect/generic/Trees$TypeDef$;
class	scala/reflect/generic/Trees$TypeDef$
Method	scala/reflect/generic/Trees$TypeDef$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	LabelDef;
Asciz	()Lscala/reflect/generic/Trees$LabelDef$;;
NameAndType	LabelDef$module:Lscala/reflect/generic/Trees$LabelDef$;
Field	scala/reflect/generic/Universe.LabelDef$module:Lscala/reflect/generic/Trees$LabelDef$;
Asciz	scala/reflect/generic/Trees$LabelDef$;
class	scala/reflect/generic/Trees$LabelDef$
Method	scala/reflect/generic/Trees$LabelDef$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	ImportSelector;
Asciz	()Lscala/reflect/generic/Trees$ImportSelector$;;
NameAndType	ImportSelector$module:Lscala/reflect/generic/Trees$ImportSelector$;
Field	scala/reflect/generic/Universe.ImportSelector$module:Lscala/reflect/generic/Trees$ImportSelector$;
Asciz	scala/reflect/generic/Trees$ImportSelector$;
class	scala/reflect/generic/Trees$ImportSelector$
Method	scala/reflect/generic/Trees$ImportSelector$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	Import;
Asciz	()Lscala/reflect/generic/Trees$Import$;;
NameAndType	Import$module:Lscala/reflect/generic/Trees$Import$;
Field	scala/reflect/generic/Universe.Import$module:Lscala/reflect/generic/Trees$Import$;
Asciz	scala/reflect/generic/Trees$Import$;
class	scala/reflect/generic/Trees$Import$
Method	scala/reflect/generic/Trees$Import$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	Template;
Asciz	()Lscala/reflect/generic/Trees$Template$;;
NameAndType	Template$module:Lscala/reflect/generic/Trees$Template$;
Field	scala/reflect/generic/Universe.Template$module:Lscala/reflect/generic/Trees$Template$;
Asciz	scala/reflect/generic/Trees$Template$;
class	scala/reflect/generic/Trees$Template$
Method	scala/reflect/generic/Trees$Template$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	Block;
Asciz	()Lscala/reflect/generic/Trees$Block$;;
NameAndType	Block$module:Lscala/reflect/generic/Trees$Block$;
Field	scala/reflect/generic/Universe.Block$module:Lscala/reflect/generic/Trees$Block$;
Asciz	scala/reflect/generic/Trees$Block$;
class	scala/reflect/generic/Trees$Block$
Method	scala/reflect/generic/Trees$Block$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	CaseDef;
Asciz	()Lscala/reflect/generic/Trees$CaseDef$;;
NameAndType	CaseDef$module:Lscala/reflect/generic/Trees$CaseDef$;
Field	scala/reflect/generic/Universe.CaseDef$module:Lscala/reflect/generic/Trees$CaseDef$;
Asciz	scala/reflect/generic/Trees$CaseDef$;
class	scala/reflect/generic/Trees$CaseDef$
Method	scala/reflect/generic/Trees$CaseDef$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	Alternative;
Asciz	()Lscala/reflect/generic/Trees$Alternative$;;
NameAndType	Alternative$module:Lscala/reflect/generic/Trees$Alternative$;
Field	scala/reflect/generic/Universe.Alternative$module:Lscala/reflect/generic/Trees$Alternative$;
Asciz	scala/reflect/generic/Trees$Alternative$;
class	scala/reflect/generic/Trees$Alternative$
Method	scala/reflect/generic/Trees$Alternative$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	Star;
Asciz	()Lscala/reflect/generic/Trees$Star$;;
NameAndType	Star$module:Lscala/reflect/generic/Trees$Star$;
Field	scala/reflect/generic/Universe.Star$module:Lscala/reflect/generic/Trees$Star$;
Asciz	scala/reflect/generic/Trees$Star$;
class	scala/reflect/generic/Trees$Star$
Method	scala/reflect/generic/Trees$Star$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	Bind;
Asciz	()Lscala/reflect/generic/Trees$Bind$;;
NameAndType	Bind$module:Lscala/reflect/generic/Trees$Bind$;
Field	scala/reflect/generic/Universe.Bind$module:Lscala/reflect/generic/Trees$Bind$;
Asciz	scala/reflect/generic/Trees$Bind$;
class	scala/reflect/generic/Trees$Bind$
Method	scala/reflect/generic/Trees$Bind$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	UnApply;
Asciz	()Lscala/reflect/generic/Trees$UnApply$;;
NameAndType	UnApply$module:Lscala/reflect/generic/Trees$UnApply$;
Field	scala/reflect/generic/Universe.UnApply$module:Lscala/reflect/generic/Trees$UnApply$;
Asciz	scala/reflect/generic/Trees$UnApply$;
class	scala/reflect/generic/Trees$UnApply$
Method	scala/reflect/generic/Trees$UnApply$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	ArrayValue;
Asciz	()Lscala/reflect/generic/Trees$ArrayValue$;;
NameAndType	ArrayValue$module:Lscala/reflect/generic/Trees$ArrayValue$;
Field	scala/reflect/generic/Universe.ArrayValue$module:Lscala/reflect/generic/Trees$ArrayValue$;
Asciz	scala/reflect/generic/Trees$ArrayValue$;
class	scala/reflect/generic/Trees$ArrayValue$
Method	scala/reflect/generic/Trees$ArrayValue$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	Function;
Asciz	()Lscala/reflect/generic/Trees$Function$;;
NameAndType	Function$module:Lscala/reflect/generic/Trees$Function$;
Field	scala/reflect/generic/Universe.Function$module:Lscala/reflect/generic/Trees$Function$;
Asciz	scala/reflect/generic/Trees$Function$;
class	scala/reflect/generic/Trees$Function$
Method	scala/reflect/generic/Trees$Function$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	Assign;
Asciz	()Lscala/reflect/generic/Trees$Assign$;;
NameAndType	Assign$module:Lscala/reflect/generic/Trees$Assign$;
Field	scala/reflect/generic/Universe.Assign$module:Lscala/reflect/generic/Trees$Assign$;
Asciz	scala/reflect/generic/Trees$Assign$;
class	scala/reflect/generic/Trees$Assign$
Method	scala/reflect/generic/Trees$Assign$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	If;
Asciz	()Lscala/reflect/generic/Trees$If$;;
NameAndType	If$module:Lscala/reflect/generic/Trees$If$;
Field	scala/reflect/generic/Universe.If$module:Lscala/reflect/generic/Trees$If$;
Asciz	scala/reflect/generic/Trees$If$;
class	scala/reflect/generic/Trees$If$
Method	scala/reflect/generic/Trees$If$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	Match;
Asciz	()Lscala/reflect/generic/Trees$Match$;;
NameAndType	Match$module:Lscala/reflect/generic/Trees$Match$;
Field	scala/reflect/generic/Universe.Match$module:Lscala/reflect/generic/Trees$Match$;
Asciz	scala/reflect/generic/Trees$Match$;
class	scala/reflect/generic/Trees$Match$
Method	scala/reflect/generic/Trees$Match$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	Return;
Asciz	()Lscala/reflect/generic/Trees$Return$;;
NameAndType	Return$module:Lscala/reflect/generic/Trees$Return$;
Field	scala/reflect/generic/Universe.Return$module:Lscala/reflect/generic/Trees$Return$;
Asciz	scala/reflect/generic/Trees$Return$;
class	scala/reflect/generic/Trees$Return$
Method	scala/reflect/generic/Trees$Return$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	Try;
Asciz	()Lscala/reflect/generic/Trees$Try$;;
NameAndType	Try$module:Lscala/reflect/generic/Trees$Try$;
Field	scala/reflect/generic/Universe.Try$module:Lscala/reflect/generic/Trees$Try$;
Asciz	scala/reflect/generic/Trees$Try$;
class	scala/reflect/generic/Trees$Try$
Method	scala/reflect/generic/Trees$Try$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	Throw;
Asciz	()Lscala/reflect/generic/Trees$Throw$;;
NameAndType	Throw$module:Lscala/reflect/generic/Trees$Throw$;
Field	scala/reflect/generic/Universe.Throw$module:Lscala/reflect/generic/Trees$Throw$;
Asciz	scala/reflect/generic/Trees$Throw$;
class	scala/reflect/generic/Trees$Throw$
Method	scala/reflect/generic/Trees$Throw$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	New;
Asciz	()Lscala/reflect/generic/Trees$New$;;
NameAndType	New$module:Lscala/reflect/generic/Trees$New$;
Field	scala/reflect/generic/Universe.New$module:Lscala/reflect/generic/Trees$New$;
Asciz	scala/reflect/generic/Trees$New$;
class	scala/reflect/generic/Trees$New$
Method	scala/reflect/generic/Trees$New$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	Typed;
Asciz	()Lscala/reflect/generic/Trees$Typed$;;
NameAndType	Typed$module:Lscala/reflect/generic/Trees$Typed$;
Field	scala/reflect/generic/Universe.Typed$module:Lscala/reflect/generic/Trees$Typed$;
Asciz	scala/reflect/generic/Trees$Typed$;
class	scala/reflect/generic/Trees$Typed$
Method	scala/reflect/generic/Trees$Typed$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	TypeApply;
Asciz	()Lscala/reflect/generic/Trees$TypeApply$;;
NameAndType	TypeApply$module:Lscala/reflect/generic/Trees$TypeApply$;
Field	scala/reflect/generic/Universe.TypeApply$module:Lscala/reflect/generic/Trees$TypeApply$;
Asciz	scala/reflect/generic/Trees$TypeApply$;
class	scala/reflect/generic/Trees$TypeApply$
Method	scala/reflect/generic/Trees$TypeApply$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	Apply;
Asciz	()Lscala/reflect/generic/Trees$Apply$;;
NameAndType	Apply$module:Lscala/reflect/generic/Trees$Apply$;
Field	scala/reflect/generic/Universe.Apply$module:Lscala/reflect/generic/Trees$Apply$;
Asciz	scala/reflect/generic/Trees$Apply$;
class	scala/reflect/generic/Trees$Apply$
Method	scala/reflect/generic/Trees$Apply$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	ApplyDynamic;
Asciz	()Lscala/reflect/generic/Trees$ApplyDynamic$;;
NameAndType	ApplyDynamic$module:Lscala/reflect/generic/Trees$ApplyDynamic$;
Field	scala/reflect/generic/Universe.ApplyDynamic$module:Lscala/reflect/generic/Trees$ApplyDynamic$;
Asciz	scala/reflect/generic/Trees$ApplyDynamic$;
class	scala/reflect/generic/Trees$ApplyDynamic$
Method	scala/reflect/generic/Trees$ApplyDynamic$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	Super;
Asciz	()Lscala/reflect/generic/Trees$Super$;;
NameAndType	Super$module:Lscala/reflect/generic/Trees$Super$;
Field	scala/reflect/generic/Universe.Super$module:Lscala/reflect/generic/Trees$Super$;
Asciz	scala/reflect/generic/Trees$Super$;
class	scala/reflect/generic/Trees$Super$
Method	scala/reflect/generic/Trees$Super$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	This;
Asciz	()Lscala/reflect/generic/Trees$This$;;
NameAndType	This$module:Lscala/reflect/generic/Trees$This$;
Field	scala/reflect/generic/Universe.This$module:Lscala/reflect/generic/Trees$This$;
Asciz	scala/reflect/generic/Trees$This$;
class	scala/reflect/generic/Trees$This$
Method	scala/reflect/generic/Trees$This$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	Select;
Asciz	()Lscala/reflect/generic/Trees$Select$;;
NameAndType	Select$module:Lscala/reflect/generic/Trees$Select$;
Field	scala/reflect/generic/Universe.Select$module:Lscala/reflect/generic/Trees$Select$;
Asciz	scala/reflect/generic/Trees$Select$;
class	scala/reflect/generic/Trees$Select$
Method	scala/reflect/generic/Trees$Select$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	Ident;
Asciz	()Lscala/reflect/generic/Trees$Ident$;;
NameAndType	Ident$module:Lscala/reflect/generic/Trees$Ident$;
Field	scala/reflect/generic/Universe.Ident$module:Lscala/reflect/generic/Trees$Ident$;
Asciz	scala/reflect/generic/Trees$Ident$;
class	scala/reflect/generic/Trees$Ident$
Method	scala/reflect/generic/Trees$Ident$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	Literal;
Asciz	()Lscala/reflect/generic/Trees$Literal$;;
NameAndType	Literal$module:Lscala/reflect/generic/Trees$Literal$;
Field	scala/reflect/generic/Universe.Literal$module:Lscala/reflect/generic/Trees$Literal$;
Asciz	scala/reflect/generic/Trees$Literal$;
class	scala/reflect/generic/Trees$Literal$
Method	scala/reflect/generic/Trees$Literal$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	Annotated;
Asciz	()Lscala/reflect/generic/Trees$Annotated$;;
NameAndType	Annotated$module:Lscala/reflect/generic/Trees$Annotated$;
Field	scala/reflect/generic/Universe.Annotated$module:Lscala/reflect/generic/Trees$Annotated$;
Asciz	scala/reflect/generic/Trees$Annotated$;
class	scala/reflect/generic/Trees$Annotated$
Method	scala/reflect/generic/Trees$Annotated$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	SingletonTypeTree;
Asciz	()Lscala/reflect/generic/Trees$SingletonTypeTree$;;
NameAndType	SingletonTypeTree$module:Lscala/reflect/generic/Trees$SingletonTypeTree$;
Field	scala/reflect/generic/Universe.SingletonTypeTree$module:Lscala/reflect/generic/Trees$SingletonTypeTree$;
Asciz	scala/reflect/generic/Trees$SingletonTypeTree$;
class	scala/reflect/generic/Trees$SingletonTypeTree$
Method	scala/reflect/generic/Trees$SingletonTypeTree$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	SelectFromTypeTree;
Asciz	()Lscala/reflect/generic/Trees$SelectFromTypeTree$;;
NameAndType	SelectFromTypeTree$module:Lscala/reflect/generic/Trees$SelectFromTypeTree$;
Field	scala/reflect/generic/Universe.SelectFromTypeTree$module:Lscala/reflect/generic/Trees$SelectFromTypeTree$;
Asciz	scala/reflect/generic/Trees$SelectFromTypeTree$;
class	scala/reflect/generic/Trees$SelectFromTypeTree$
Method	scala/reflect/generic/Trees$SelectFromTypeTree$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	CompoundTypeTree;
Asciz	()Lscala/reflect/generic/Trees$CompoundTypeTree$;;
NameAndType	CompoundTypeTree$module:Lscala/reflect/generic/Trees$CompoundTypeTree$;
Field	scala/reflect/generic/Universe.CompoundTypeTree$module:Lscala/reflect/generic/Trees$CompoundTypeTree$;
Asciz	scala/reflect/generic/Trees$CompoundTypeTree$;
class	scala/reflect/generic/Trees$CompoundTypeTree$
Method	scala/reflect/generic/Trees$CompoundTypeTree$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	AppliedTypeTree;
Asciz	()Lscala/reflect/generic/Trees$AppliedTypeTree$;;
NameAndType	AppliedTypeTree$module:Lscala/reflect/generic/Trees$AppliedTypeTree$;
Field	scala/reflect/generic/Universe.AppliedTypeTree$module:Lscala/reflect/generic/Trees$AppliedTypeTree$;
Asciz	scala/reflect/generic/Trees$AppliedTypeTree$;
class	scala/reflect/generic/Trees$AppliedTypeTree$
Method	scala/reflect/generic/Trees$AppliedTypeTree$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	TypeBoundsTree;
Asciz	()Lscala/reflect/generic/Trees$TypeBoundsTree$;;
NameAndType	TypeBoundsTree$module:Lscala/reflect/generic/Trees$TypeBoundsTree$;
Field	scala/reflect/generic/Universe.TypeBoundsTree$module:Lscala/reflect/generic/Trees$TypeBoundsTree$;
Asciz	scala/reflect/generic/Trees$TypeBoundsTree$;
class	scala/reflect/generic/Trees$TypeBoundsTree$
Method	scala/reflect/generic/Trees$TypeBoundsTree$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	ExistentialTypeTree;
Asciz	()Lscala/reflect/generic/Trees$ExistentialTypeTree$;;
NameAndType	ExistentialTypeTree$module:Lscala/reflect/generic/Trees$ExistentialTypeTree$;
Field	scala/reflect/generic/Universe.ExistentialTypeTree$module:Lscala/reflect/generic/Trees$ExistentialTypeTree$;
Asciz	scala/reflect/generic/Trees$ExistentialTypeTree$;
class	scala/reflect/generic/Trees$ExistentialTypeTree$
Method	scala/reflect/generic/Trees$ExistentialTypeTree$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	SelectFromArray;
Asciz	()Lscala/reflect/generic/Trees$SelectFromArray$;;
NameAndType	SelectFromArray$module:Lscala/reflect/generic/Trees$SelectFromArray$;
Field	scala/reflect/generic/Universe.SelectFromArray$module:Lscala/reflect/generic/Trees$SelectFromArray$;
Asciz	scala/reflect/generic/Trees$SelectFromArray$;
class	scala/reflect/generic/Trees$SelectFromArray$
Method	scala/reflect/generic/Trees$SelectFromArray$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	(JLjava/lang/Object;)Lscala/reflect/generic/Trees$Modifiers;;
Asciz	(Lscala/reflect/generic/Universe;JLjava/lang/Object;)Lscala/reflect/generic/Trees$Modifiers;;
NameAndType	Modifiers:(Lscala/reflect/generic/Universe;JLjava/lang/Object;)Lscala/reflect/generic/Trees$Modifiers;
Method	scala/reflect/generic/Trees$class.Modifiers:(Lscala/reflect/generic/Universe;JLjava/lang/Object;)Lscala/reflect/generic/Trees$Modifiers;
Asciz	this;
Asciz	Lscala/reflect/generic/Universe;;
Asciz	flags;
Asciz	J;
Asciz	privateWithin;
Asciz	Ljava/lang/Object;;
Asciz	LocalVariableTable;
Asciz	(J)Lscala/reflect/generic/Trees$Modifiers;;
Asciz	(Lscala/reflect/generic/Universe;J)Lscala/reflect/generic/Trees$Modifiers;;
NameAndType	Modifiers:(Lscala/reflect/generic/Universe;J)Lscala/reflect/generic/Trees$Modifiers;
Method	scala/reflect/generic/Trees$class.Modifiers:(Lscala/reflect/generic/Universe;J)Lscala/reflect/generic/Trees$Modifiers;
Asciz	duplicateTree;
Asciz	(Lscala/reflect/generic/Trees$Tree;)Lscala/reflect/generic/Trees$Tree;;
Asciz	(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;)Lscala/reflect/generic/Trees$Tree;;
NameAndType	duplicateTree:(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;)Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$class.duplicateTree:(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;)Lscala/reflect/generic/Trees$Tree;
Asciz	tree;
Asciz	Lscala/reflect/generic/Trees$Tree;;
Asciz	(Ljava/lang/Object;)Lscala/reflect/generic/Trees$Literal;;
Asciz	(Lscala/reflect/generic/Universe;Ljava/lang/Object;)Lscala/reflect/generic/Trees$Literal;;
NameAndType	Literal:(Lscala/reflect/generic/Universe;Ljava/lang/Object;)Lscala/reflect/generic/Trees$Literal;
Method	scala/reflect/generic/Trees$class.Literal:(Lscala/reflect/generic/Universe;Ljava/lang/Object;)Lscala/reflect/generic/Trees$Literal;
Asciz	value;
Asciz	NoTag;
Asciz	UnitTag;
Asciz	BooleanTag;
Asciz	ByteTag;
Asciz	ShortTag;
Asciz	CharTag;
Asciz	IntTag;
int	6;
Asciz	LongTag;
int	7;
Asciz	FloatTag;
int	8;
Asciz	DoubleTag;
int	9;
Asciz	StringTag;
int	10;
Asciz	NullTag;
int	11;
Asciz	ClassTag;
int	12;
Asciz	EnumTag;
int	13;
Asciz	Constant;
Asciz	()Lscala/reflect/generic/Constants$Constant$;;
NameAndType	Constant$module:Lscala/reflect/generic/Constants$Constant$;
Field	scala/reflect/generic/Universe.Constant$module:Lscala/reflect/generic/Constants$Constant$;
Asciz	scala/reflect/generic/Constants$Constant$;
class	scala/reflect/generic/Constants$Constant$
Method	scala/reflect/generic/Constants$Constant$."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	maxTostringRecursions;
int	50;
NameAndType	scala$reflect$generic$Types$$tostringRecursions:I
Field	scala/reflect/generic/Universe.scala$reflect$generic$Types$$tostringRecursions:I
Asciz	scala$reflect$generic$Types$$tostringRecursions_$eq;
Asciz	NoPosition;
Asciz	()Ljava/lang/Object;;
Asciz	()V;
Asciz	java/lang/Object;
class	java/lang/Object
NameAndType	"<init>":()V
Method	java/lang/Object."<init>":()V
Asciz	scala/reflect/generic/Symbols$class;
class	scala/reflect/generic/Symbols$class
Asciz	$init$;
NameAndType	$init$:(Lscala/reflect/generic/Universe;)V
Method	scala/reflect/generic/Symbols$class.$init$:(Lscala/reflect/generic/Universe;)V
Asciz	scala/reflect/generic/Types$class;
class	scala/reflect/generic/Types$class
Method	scala/reflect/generic/Types$class.$init$:(Lscala/reflect/generic/Universe;)V
Asciz	scala/reflect/generic/Constants$class;
class	scala/reflect/generic/Constants$class
Method	scala/reflect/generic/Constants$class.$init$:(Lscala/reflect/generic/Universe;)V
Asciz	scala/reflect/generic/Scopes$class;
class	scala/reflect/generic/Scopes$class
Method	scala/reflect/generic/Scopes$class.$init$:(Lscala/reflect/generic/Universe;)V
Asciz	scala/reflect/generic/StdNames$class;
class	scala/reflect/generic/StdNames$class
Method	scala/reflect/generic/StdNames$class.$init$:(Lscala/reflect/generic/Universe;)V
Method	scala/reflect/generic/Trees$class.$init$:(Lscala/reflect/generic/Universe;)V
Asciz	scala/reflect/generic/AnnotationInfos$class;
class	scala/reflect/generic/AnnotationInfos$class
Method	scala/reflect/generic/AnnotationInfos$class.$init$:(Lscala/reflect/generic/Universe;)V
Asciz	scala/reflect/generic/StandardDefinitions$class;
class	scala/reflect/generic/StandardDefinitions$class
Method	scala/reflect/generic/StandardDefinitions$class.$init$:(Lscala/reflect/generic/Universe;)V
Asciz	ScalaSig;
Asciz	InnerClasses;
Asciz	scala/reflect/generic/Trees$Tree;
class	scala/reflect/generic/Trees$Tree
Asciz	scala/reflect/generic/Trees;
class	scala/reflect/generic/Trees
Asciz	Tree;
Asciz	scala/reflect/generic/Trees$Literal;
class	scala/reflect/generic/Trees$Literal
Asciz	scala/reflect/generic/Trees$Modifiers;
class	scala/reflect/generic/Trees$Modifiers
Asciz	scala/reflect/generic/Symbols;
class	scala/reflect/generic/Symbols
Asciz	scala/reflect/generic/Types;
class	scala/reflect/generic/Types
Asciz	scala/reflect/generic/Constants;
class	scala/reflect/generic/Constants
Asciz	scala/reflect/generic/Scopes;
class	scala/reflect/generic/Scopes
Asciz	scala/reflect/generic/Names;
class	scala/reflect/generic/Names
Asciz	scala/reflect/generic/StdNames;
class	scala/reflect/generic/StdNames
Asciz	scala/reflect/generic/AnnotationInfos;
class	scala/reflect/generic/AnnotationInfos
Asciz	scala/reflect/generic/StandardDefinitions;
class	scala/reflect/generic/StandardDefinitions
Asciz	scala/ScalaObject;
class	scala/ScalaObject

{
private scala.reflect.generic.Constants$Constant$ Constant$module;
  Signature: Lscala/reflect/generic/Constants$Constant$;

private scala.reflect.generic.Trees$SelectFromArray$ SelectFromArray$module;
  Signature: Lscala/reflect/generic/Trees$SelectFromArray$;

private scala.reflect.generic.Trees$ExistentialTypeTree$ ExistentialTypeTree$module;
  Signature: Lscala/reflect/generic/Trees$ExistentialTypeTree$;

private scala.reflect.generic.Trees$TypeBoundsTree$ TypeBoundsTree$module;
  Signature: Lscala/reflect/generic/Trees$TypeBoundsTree$;

private scala.reflect.generic.Trees$AppliedTypeTree$ AppliedTypeTree$module;
  Signature: Lscala/reflect/generic/Trees$AppliedTypeTree$;

private scala.reflect.generic.Trees$CompoundTypeTree$ CompoundTypeTree$module;
  Signature: Lscala/reflect/generic/Trees$CompoundTypeTree$;

private scala.reflect.generic.Trees$SelectFromTypeTree$ SelectFromTypeTree$module;
  Signature: Lscala/reflect/generic/Trees$SelectFromTypeTree$;

private scala.reflect.generic.Trees$SingletonTypeTree$ SingletonTypeTree$module;
  Signature: Lscala/reflect/generic/Trees$SingletonTypeTree$;

private scala.reflect.generic.Trees$Annotated$ Annotated$module;
  Signature: Lscala/reflect/generic/Trees$Annotated$;

private scala.reflect.generic.Trees$Literal$ Literal$module;
  Signature: Lscala/reflect/generic/Trees$Literal$;

private scala.reflect.generic.Trees$Ident$ Ident$module;
  Signature: Lscala/reflect/generic/Trees$Ident$;

private scala.reflect.generic.Trees$Select$ Select$module;
  Signature: Lscala/reflect/generic/Trees$Select$;

private scala.reflect.generic.Trees$This$ This$module;
  Signature: Lscala/reflect/generic/Trees$This$;

private scala.reflect.generic.Trees$Super$ Super$module;
  Signature: Lscala/reflect/generic/Trees$Super$;

private scala.reflect.generic.Trees$ApplyDynamic$ ApplyDynamic$module;
  Signature: Lscala/reflect/generic/Trees$ApplyDynamic$;

private scala.reflect.generic.Trees$Apply$ Apply$module;
  Signature: Lscala/reflect/generic/Trees$Apply$;

private scala.reflect.generic.Trees$TypeApply$ TypeApply$module;
  Signature: Lscala/reflect/generic/Trees$TypeApply$;

private scala.reflect.generic.Trees$Typed$ Typed$module;
  Signature: Lscala/reflect/generic/Trees$Typed$;

private scala.reflect.generic.Trees$New$ New$module;
  Signature: Lscala/reflect/generic/Trees$New$;

private scala.reflect.generic.Trees$Throw$ Throw$module;
  Signature: Lscala/reflect/generic/Trees$Throw$;

private scala.reflect.generic.Trees$Try$ Try$module;
  Signature: Lscala/reflect/generic/Trees$Try$;

private scala.reflect.generic.Trees$Return$ Return$module;
  Signature: Lscala/reflect/generic/Trees$Return$;

private scala.reflect.generic.Trees$Match$ Match$module;
  Signature: Lscala/reflect/generic/Trees$Match$;

private scala.reflect.generic.Trees$If$ If$module;
  Signature: Lscala/reflect/generic/Trees$If$;

private scala.reflect.generic.Trees$Assign$ Assign$module;
  Signature: Lscala/reflect/generic/Trees$Assign$;

private scala.reflect.generic.Trees$Function$ Function$module;
  Signature: Lscala/reflect/generic/Trees$Function$;

private scala.reflect.generic.Trees$ArrayValue$ ArrayValue$module;
  Signature: Lscala/reflect/generic/Trees$ArrayValue$;

private scala.reflect.generic.Trees$UnApply$ UnApply$module;
  Signature: Lscala/reflect/generic/Trees$UnApply$;

private scala.reflect.generic.Trees$Bind$ Bind$module;
  Signature: Lscala/reflect/generic/Trees$Bind$;

private scala.reflect.generic.Trees$Star$ Star$module;
  Signature: Lscala/reflect/generic/Trees$Star$;

private scala.reflect.generic.Trees$Alternative$ Alternative$module;
  Signature: Lscala/reflect/generic/Trees$Alternative$;

private scala.reflect.generic.Trees$CaseDef$ CaseDef$module;
  Signature: Lscala/reflect/generic/Trees$CaseDef$;

private scala.reflect.generic.Trees$Block$ Block$module;
  Signature: Lscala/reflect/generic/Trees$Block$;

private scala.reflect.generic.Trees$Template$ Template$module;
  Signature: Lscala/reflect/generic/Trees$Template$;

private scala.reflect.generic.Trees$Import$ Import$module;
  Signature: Lscala/reflect/generic/Trees$Import$;

private scala.reflect.generic.Trees$ImportSelector$ ImportSelector$module;
  Signature: Lscala/reflect/generic/Trees$ImportSelector$;

private scala.reflect.generic.Trees$LabelDef$ LabelDef$module;
  Signature: Lscala/reflect/generic/Trees$LabelDef$;

private scala.reflect.generic.Trees$TypeDef$ TypeDef$module;
  Signature: Lscala/reflect/generic/Trees$TypeDef$;

private scala.reflect.generic.Trees$DefDef$ DefDef$module;
  Signature: Lscala/reflect/generic/Trees$DefDef$;

private scala.reflect.generic.Trees$ValDef$ ValDef$module;
  Signature: Lscala/reflect/generic/Trees$ValDef$;

private scala.reflect.generic.Trees$ModuleDef$ ModuleDef$module;
  Signature: Lscala/reflect/generic/Trees$ModuleDef$;

private scala.reflect.generic.Trees$ClassDef$ ClassDef$module;
  Signature: Lscala/reflect/generic/Trees$ClassDef$;

private scala.reflect.generic.Trees$PackageDef$ PackageDef$module;
  Signature: Lscala/reflect/generic/Trees$PackageDef$;

private scala.reflect.generic.Trees$EmptyTree$ EmptyTree$module;
  Signature: Lscala/reflect/generic/Trees$EmptyTree$;

public volatile int bitmap$0;
  Signature: I

private scala.reflect.generic.Trees$Modifiers$ Modifiers$module;
  Signature: Lscala/reflect/generic/Trees$Modifiers$;

private int scala$reflect$generic$Types$$tostringRecursions;
  Signature: I

private final scala.reflect.generic.Trees$Modifiers NoMods;
  Signature: Lscala/reflect/generic/Trees$Modifiers;

private int nodeCount;
  Signature: I

public int nodeCount();
  Signature: ()I
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field nodeCount:I
	ireturn
  Labels:

public void nodeCount_$eq(int);
  Signature: (I)V
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	iload_1
	putfield	Field nodeCount:I
	return
  Labels:

public final scala.reflect.generic.Trees$Modifiers$ Modifiers();
  Signature: ()Lscala/reflect/generic/Trees$Modifiers$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field Modifiers$module:Lscala/reflect/generic/Trees$Modifiers$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$Modifiers$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$Modifiers$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field Modifiers$module:Lscala/reflect/generic/Trees$Modifiers$;
l1	aload_0
	getfield	Field Modifiers$module:Lscala/reflect/generic/Trees$Modifiers$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public scala.reflect.generic.Trees$Modifiers NoMods();
  Signature: ()Lscala/reflect/generic/Trees$Modifiers;
  Code:
   Stack=3, Locals=1, Args_size=1
	aload_0
	getfield	Field bitmap$0:I
	iconst_1
	iand
	iconst_0
	if_icmpne	l1 // aload_0
	aload_0
	dup
	pop
	monitorenter
	aload_0
	getfield	Field bitmap$0:I
	iconst_1
	iand
	iconst_0
	if_icmpne	l2 // aload_0
	aload_0
	aload_0
	invokestatic	Method scala/reflect/generic/Trees$class.NoMods:(Lscala/reflect/generic/Universe;)Lscala/reflect/generic/Trees$Modifiers;
	putfield	Field NoMods:Lscala/reflect/generic/Trees$Modifiers;
	aload_0
	aload_0
	getfield	Field bitmap$0:I
	iconst_1
	ior
	putfield	Field bitmap$0:I
l2	aload_0
	monitorexit
l1	aload_0
	getfield	Field NoMods:Lscala/reflect/generic/Trees$Modifiers;
	areturn
	aload_0
	monitorexit
	athrow
  Labels:
   	l2 = 42 // aload_0
   	l1 = 44 // aload_0
  Exception table:
   from   to  target type
    14    44    49   any

public final scala.reflect.generic.Trees$EmptyTree$ EmptyTree();
  Signature: ()Lscala/reflect/generic/Trees$EmptyTree$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field EmptyTree$module:Lscala/reflect/generic/Trees$EmptyTree$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$EmptyTree$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$EmptyTree$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field EmptyTree$module:Lscala/reflect/generic/Trees$EmptyTree$;
l1	aload_0
	getfield	Field EmptyTree$module:Lscala/reflect/generic/Trees$EmptyTree$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$PackageDef$ PackageDef();
  Signature: ()Lscala/reflect/generic/Trees$PackageDef$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field PackageDef$module:Lscala/reflect/generic/Trees$PackageDef$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$PackageDef$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$PackageDef$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field PackageDef$module:Lscala/reflect/generic/Trees$PackageDef$;
l1	aload_0
	getfield	Field PackageDef$module:Lscala/reflect/generic/Trees$PackageDef$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$ClassDef$ ClassDef();
  Signature: ()Lscala/reflect/generic/Trees$ClassDef$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field ClassDef$module:Lscala/reflect/generic/Trees$ClassDef$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$ClassDef$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$ClassDef$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field ClassDef$module:Lscala/reflect/generic/Trees$ClassDef$;
l1	aload_0
	getfield	Field ClassDef$module:Lscala/reflect/generic/Trees$ClassDef$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$ModuleDef$ ModuleDef();
  Signature: ()Lscala/reflect/generic/Trees$ModuleDef$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field ModuleDef$module:Lscala/reflect/generic/Trees$ModuleDef$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$ModuleDef$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$ModuleDef$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field ModuleDef$module:Lscala/reflect/generic/Trees$ModuleDef$;
l1	aload_0
	getfield	Field ModuleDef$module:Lscala/reflect/generic/Trees$ModuleDef$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$ValDef$ ValDef();
  Signature: ()Lscala/reflect/generic/Trees$ValDef$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field ValDef$module:Lscala/reflect/generic/Trees$ValDef$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$ValDef$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$ValDef$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field ValDef$module:Lscala/reflect/generic/Trees$ValDef$;
l1	aload_0
	getfield	Field ValDef$module:Lscala/reflect/generic/Trees$ValDef$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$DefDef$ DefDef();
  Signature: ()Lscala/reflect/generic/Trees$DefDef$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field DefDef$module:Lscala/reflect/generic/Trees$DefDef$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$DefDef$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$DefDef$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field DefDef$module:Lscala/reflect/generic/Trees$DefDef$;
l1	aload_0
	getfield	Field DefDef$module:Lscala/reflect/generic/Trees$DefDef$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$TypeDef$ TypeDef();
  Signature: ()Lscala/reflect/generic/Trees$TypeDef$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field TypeDef$module:Lscala/reflect/generic/Trees$TypeDef$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$TypeDef$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$TypeDef$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field TypeDef$module:Lscala/reflect/generic/Trees$TypeDef$;
l1	aload_0
	getfield	Field TypeDef$module:Lscala/reflect/generic/Trees$TypeDef$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$LabelDef$ LabelDef();
  Signature: ()Lscala/reflect/generic/Trees$LabelDef$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field LabelDef$module:Lscala/reflect/generic/Trees$LabelDef$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$LabelDef$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$LabelDef$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field LabelDef$module:Lscala/reflect/generic/Trees$LabelDef$;
l1	aload_0
	getfield	Field LabelDef$module:Lscala/reflect/generic/Trees$LabelDef$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$ImportSelector$ ImportSelector();
  Signature: ()Lscala/reflect/generic/Trees$ImportSelector$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field ImportSelector$module:Lscala/reflect/generic/Trees$ImportSelector$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$ImportSelector$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$ImportSelector$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field ImportSelector$module:Lscala/reflect/generic/Trees$ImportSelector$;
l1	aload_0
	getfield	Field ImportSelector$module:Lscala/reflect/generic/Trees$ImportSelector$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$Import$ Import();
  Signature: ()Lscala/reflect/generic/Trees$Import$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field Import$module:Lscala/reflect/generic/Trees$Import$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$Import$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$Import$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field Import$module:Lscala/reflect/generic/Trees$Import$;
l1	aload_0
	getfield	Field Import$module:Lscala/reflect/generic/Trees$Import$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$Template$ Template();
  Signature: ()Lscala/reflect/generic/Trees$Template$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field Template$module:Lscala/reflect/generic/Trees$Template$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$Template$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$Template$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field Template$module:Lscala/reflect/generic/Trees$Template$;
l1	aload_0
	getfield	Field Template$module:Lscala/reflect/generic/Trees$Template$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$Block$ Block();
  Signature: ()Lscala/reflect/generic/Trees$Block$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field Block$module:Lscala/reflect/generic/Trees$Block$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$Block$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$Block$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field Block$module:Lscala/reflect/generic/Trees$Block$;
l1	aload_0
	getfield	Field Block$module:Lscala/reflect/generic/Trees$Block$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$CaseDef$ CaseDef();
  Signature: ()Lscala/reflect/generic/Trees$CaseDef$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field CaseDef$module:Lscala/reflect/generic/Trees$CaseDef$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$CaseDef$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$CaseDef$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field CaseDef$module:Lscala/reflect/generic/Trees$CaseDef$;
l1	aload_0
	getfield	Field CaseDef$module:Lscala/reflect/generic/Trees$CaseDef$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$Alternative$ Alternative();
  Signature: ()Lscala/reflect/generic/Trees$Alternative$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field Alternative$module:Lscala/reflect/generic/Trees$Alternative$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$Alternative$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$Alternative$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field Alternative$module:Lscala/reflect/generic/Trees$Alternative$;
l1	aload_0
	getfield	Field Alternative$module:Lscala/reflect/generic/Trees$Alternative$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$Star$ Star();
  Signature: ()Lscala/reflect/generic/Trees$Star$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field Star$module:Lscala/reflect/generic/Trees$Star$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$Star$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$Star$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field Star$module:Lscala/reflect/generic/Trees$Star$;
l1	aload_0
	getfield	Field Star$module:Lscala/reflect/generic/Trees$Star$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$Bind$ Bind();
  Signature: ()Lscala/reflect/generic/Trees$Bind$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field Bind$module:Lscala/reflect/generic/Trees$Bind$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$Bind$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$Bind$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field Bind$module:Lscala/reflect/generic/Trees$Bind$;
l1	aload_0
	getfield	Field Bind$module:Lscala/reflect/generic/Trees$Bind$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$UnApply$ UnApply();
  Signature: ()Lscala/reflect/generic/Trees$UnApply$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field UnApply$module:Lscala/reflect/generic/Trees$UnApply$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$UnApply$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$UnApply$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field UnApply$module:Lscala/reflect/generic/Trees$UnApply$;
l1	aload_0
	getfield	Field UnApply$module:Lscala/reflect/generic/Trees$UnApply$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$ArrayValue$ ArrayValue();
  Signature: ()Lscala/reflect/generic/Trees$ArrayValue$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field ArrayValue$module:Lscala/reflect/generic/Trees$ArrayValue$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$ArrayValue$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$ArrayValue$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field ArrayValue$module:Lscala/reflect/generic/Trees$ArrayValue$;
l1	aload_0
	getfield	Field ArrayValue$module:Lscala/reflect/generic/Trees$ArrayValue$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$Function$ Function();
  Signature: ()Lscala/reflect/generic/Trees$Function$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field Function$module:Lscala/reflect/generic/Trees$Function$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$Function$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$Function$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field Function$module:Lscala/reflect/generic/Trees$Function$;
l1	aload_0
	getfield	Field Function$module:Lscala/reflect/generic/Trees$Function$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$Assign$ Assign();
  Signature: ()Lscala/reflect/generic/Trees$Assign$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field Assign$module:Lscala/reflect/generic/Trees$Assign$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$Assign$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$Assign$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field Assign$module:Lscala/reflect/generic/Trees$Assign$;
l1	aload_0
	getfield	Field Assign$module:Lscala/reflect/generic/Trees$Assign$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$If$ If();
  Signature: ()Lscala/reflect/generic/Trees$If$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field If$module:Lscala/reflect/generic/Trees$If$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$If$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$If$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field If$module:Lscala/reflect/generic/Trees$If$;
l1	aload_0
	getfield	Field If$module:Lscala/reflect/generic/Trees$If$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$Match$ Match();
  Signature: ()Lscala/reflect/generic/Trees$Match$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field Match$module:Lscala/reflect/generic/Trees$Match$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$Match$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$Match$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field Match$module:Lscala/reflect/generic/Trees$Match$;
l1	aload_0
	getfield	Field Match$module:Lscala/reflect/generic/Trees$Match$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$Return$ Return();
  Signature: ()Lscala/reflect/generic/Trees$Return$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field Return$module:Lscala/reflect/generic/Trees$Return$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$Return$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$Return$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field Return$module:Lscala/reflect/generic/Trees$Return$;
l1	aload_0
	getfield	Field Return$module:Lscala/reflect/generic/Trees$Return$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$Try$ Try();
  Signature: ()Lscala/reflect/generic/Trees$Try$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field Try$module:Lscala/reflect/generic/Trees$Try$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$Try$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$Try$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field Try$module:Lscala/reflect/generic/Trees$Try$;
l1	aload_0
	getfield	Field Try$module:Lscala/reflect/generic/Trees$Try$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$Throw$ Throw();
  Signature: ()Lscala/reflect/generic/Trees$Throw$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field Throw$module:Lscala/reflect/generic/Trees$Throw$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$Throw$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$Throw$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field Throw$module:Lscala/reflect/generic/Trees$Throw$;
l1	aload_0
	getfield	Field Throw$module:Lscala/reflect/generic/Trees$Throw$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$New$ New();
  Signature: ()Lscala/reflect/generic/Trees$New$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field New$module:Lscala/reflect/generic/Trees$New$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$New$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$New$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field New$module:Lscala/reflect/generic/Trees$New$;
l1	aload_0
	getfield	Field New$module:Lscala/reflect/generic/Trees$New$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$Typed$ Typed();
  Signature: ()Lscala/reflect/generic/Trees$Typed$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field Typed$module:Lscala/reflect/generic/Trees$Typed$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$Typed$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$Typed$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field Typed$module:Lscala/reflect/generic/Trees$Typed$;
l1	aload_0
	getfield	Field Typed$module:Lscala/reflect/generic/Trees$Typed$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$TypeApply$ TypeApply();
  Signature: ()Lscala/reflect/generic/Trees$TypeApply$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field TypeApply$module:Lscala/reflect/generic/Trees$TypeApply$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$TypeApply$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$TypeApply$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field TypeApply$module:Lscala/reflect/generic/Trees$TypeApply$;
l1	aload_0
	getfield	Field TypeApply$module:Lscala/reflect/generic/Trees$TypeApply$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$Apply$ Apply();
  Signature: ()Lscala/reflect/generic/Trees$Apply$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field Apply$module:Lscala/reflect/generic/Trees$Apply$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$Apply$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$Apply$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field Apply$module:Lscala/reflect/generic/Trees$Apply$;
l1	aload_0
	getfield	Field Apply$module:Lscala/reflect/generic/Trees$Apply$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$ApplyDynamic$ ApplyDynamic();
  Signature: ()Lscala/reflect/generic/Trees$ApplyDynamic$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field ApplyDynamic$module:Lscala/reflect/generic/Trees$ApplyDynamic$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$ApplyDynamic$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$ApplyDynamic$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field ApplyDynamic$module:Lscala/reflect/generic/Trees$ApplyDynamic$;
l1	aload_0
	getfield	Field ApplyDynamic$module:Lscala/reflect/generic/Trees$ApplyDynamic$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$Super$ Super();
  Signature: ()Lscala/reflect/generic/Trees$Super$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field Super$module:Lscala/reflect/generic/Trees$Super$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$Super$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$Super$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field Super$module:Lscala/reflect/generic/Trees$Super$;
l1	aload_0
	getfield	Field Super$module:Lscala/reflect/generic/Trees$Super$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$This$ This();
  Signature: ()Lscala/reflect/generic/Trees$This$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field This$module:Lscala/reflect/generic/Trees$This$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$This$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$This$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field This$module:Lscala/reflect/generic/Trees$This$;
l1	aload_0
	getfield	Field This$module:Lscala/reflect/generic/Trees$This$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$Select$ Select();
  Signature: ()Lscala/reflect/generic/Trees$Select$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field Select$module:Lscala/reflect/generic/Trees$Select$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$Select$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$Select$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field Select$module:Lscala/reflect/generic/Trees$Select$;
l1	aload_0
	getfield	Field Select$module:Lscala/reflect/generic/Trees$Select$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$Ident$ Ident();
  Signature: ()Lscala/reflect/generic/Trees$Ident$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field Ident$module:Lscala/reflect/generic/Trees$Ident$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$Ident$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$Ident$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field Ident$module:Lscala/reflect/generic/Trees$Ident$;
l1	aload_0
	getfield	Field Ident$module:Lscala/reflect/generic/Trees$Ident$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$Literal$ Literal();
  Signature: ()Lscala/reflect/generic/Trees$Literal$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field Literal$module:Lscala/reflect/generic/Trees$Literal$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$Literal$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$Literal$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field Literal$module:Lscala/reflect/generic/Trees$Literal$;
l1	aload_0
	getfield	Field Literal$module:Lscala/reflect/generic/Trees$Literal$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$Annotated$ Annotated();
  Signature: ()Lscala/reflect/generic/Trees$Annotated$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field Annotated$module:Lscala/reflect/generic/Trees$Annotated$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$Annotated$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$Annotated$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field Annotated$module:Lscala/reflect/generic/Trees$Annotated$;
l1	aload_0
	getfield	Field Annotated$module:Lscala/reflect/generic/Trees$Annotated$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$SingletonTypeTree$ SingletonTypeTree();
  Signature: ()Lscala/reflect/generic/Trees$SingletonTypeTree$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field SingletonTypeTree$module:Lscala/reflect/generic/Trees$SingletonTypeTree$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$SingletonTypeTree$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$SingletonTypeTree$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field SingletonTypeTree$module:Lscala/reflect/generic/Trees$SingletonTypeTree$;
l1	aload_0
	getfield	Field SingletonTypeTree$module:Lscala/reflect/generic/Trees$SingletonTypeTree$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$SelectFromTypeTree$ SelectFromTypeTree();
  Signature: ()Lscala/reflect/generic/Trees$SelectFromTypeTree$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field SelectFromTypeTree$module:Lscala/reflect/generic/Trees$SelectFromTypeTree$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$SelectFromTypeTree$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$SelectFromTypeTree$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field SelectFromTypeTree$module:Lscala/reflect/generic/Trees$SelectFromTypeTree$;
l1	aload_0
	getfield	Field SelectFromTypeTree$module:Lscala/reflect/generic/Trees$SelectFromTypeTree$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$CompoundTypeTree$ CompoundTypeTree();
  Signature: ()Lscala/reflect/generic/Trees$CompoundTypeTree$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field CompoundTypeTree$module:Lscala/reflect/generic/Trees$CompoundTypeTree$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$CompoundTypeTree$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$CompoundTypeTree$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field CompoundTypeTree$module:Lscala/reflect/generic/Trees$CompoundTypeTree$;
l1	aload_0
	getfield	Field CompoundTypeTree$module:Lscala/reflect/generic/Trees$CompoundTypeTree$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$AppliedTypeTree$ AppliedTypeTree();
  Signature: ()Lscala/reflect/generic/Trees$AppliedTypeTree$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field AppliedTypeTree$module:Lscala/reflect/generic/Trees$AppliedTypeTree$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$AppliedTypeTree$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$AppliedTypeTree$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field AppliedTypeTree$module:Lscala/reflect/generic/Trees$AppliedTypeTree$;
l1	aload_0
	getfield	Field AppliedTypeTree$module:Lscala/reflect/generic/Trees$AppliedTypeTree$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$TypeBoundsTree$ TypeBoundsTree();
  Signature: ()Lscala/reflect/generic/Trees$TypeBoundsTree$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field TypeBoundsTree$module:Lscala/reflect/generic/Trees$TypeBoundsTree$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$TypeBoundsTree$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$TypeBoundsTree$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field TypeBoundsTree$module:Lscala/reflect/generic/Trees$TypeBoundsTree$;
l1	aload_0
	getfield	Field TypeBoundsTree$module:Lscala/reflect/generic/Trees$TypeBoundsTree$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$ExistentialTypeTree$ ExistentialTypeTree();
  Signature: ()Lscala/reflect/generic/Trees$ExistentialTypeTree$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field ExistentialTypeTree$module:Lscala/reflect/generic/Trees$ExistentialTypeTree$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$ExistentialTypeTree$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$ExistentialTypeTree$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field ExistentialTypeTree$module:Lscala/reflect/generic/Trees$ExistentialTypeTree$;
l1	aload_0
	getfield	Field ExistentialTypeTree$module:Lscala/reflect/generic/Trees$ExistentialTypeTree$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final scala.reflect.generic.Trees$SelectFromArray$ SelectFromArray();
  Signature: ()Lscala/reflect/generic/Trees$SelectFromArray$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field SelectFromArray$module:Lscala/reflect/generic/Trees$SelectFromArray$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Trees$SelectFromArray$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$SelectFromArray$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field SelectFromArray$module:Lscala/reflect/generic/Trees$SelectFromArray$;
l1	aload_0
	getfield	Field SelectFromArray$module:Lscala/reflect/generic/Trees$SelectFromArray$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public scala.reflect.generic.Trees$Modifiers Modifiers(long, java.lang.Object);
  Signature: (JLjava/lang/Object;)Lscala/reflect/generic/Trees$Modifiers;
  Code:
   Stack=4, Locals=4, Args_size=3
	aload_0
	lload_1
	aload_3
	invokestatic	Method scala/reflect/generic/Trees$class.Modifiers:(Lscala/reflect/generic/Universe;JLjava/lang/Object;)Lscala/reflect/generic/Trees$Modifiers;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/reflect/generic/Universe;
   0      7      1    flags       J
   0      7      3    privateWithin       Ljava/lang/Object;


public scala.reflect.generic.Trees$Modifiers Modifiers(long);
  Signature: (J)Lscala/reflect/generic/Trees$Modifiers;
  Code:
   Stack=3, Locals=3, Args_size=2
	aload_0
	lload_1
	invokestatic	Method scala/reflect/generic/Trees$class.Modifiers:(Lscala/reflect/generic/Universe;J)Lscala/reflect/generic/Trees$Modifiers;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/reflect/generic/Universe;
   0      6      1    flags       J


public scala.reflect.generic.Trees$Tree duplicateTree(scala.reflect.generic.Trees$Tree);
  Signature: (Lscala/reflect/generic/Trees$Tree;)Lscala/reflect/generic/Trees$Tree;
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	invokestatic	Method scala/reflect/generic/Trees$class.duplicateTree:(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;)Lscala/reflect/generic/Trees$Tree;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/reflect/generic/Universe;
   0      6      1    tree       Lscala/reflect/generic/Trees$Tree;


public scala.reflect.generic.Trees$Literal Literal(java.lang.Object);
  Signature: (Ljava/lang/Object;)Lscala/reflect/generic/Trees$Literal;
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	invokestatic	Method scala/reflect/generic/Trees$class.Literal:(Lscala/reflect/generic/Universe;Ljava/lang/Object;)Lscala/reflect/generic/Trees$Literal;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/reflect/generic/Universe;
   0      6      1    value       Ljava/lang/Object;


public final int NoTag();
  Signature: ()I
  Code:
   Stack=1, Locals=1, Args_size=1
	iconst_0
	ireturn
  Labels:

public final int UnitTag();
  Signature: ()I
  Code:
   Stack=1, Locals=1, Args_size=1
	iconst_1
	ireturn
  Labels:

public final int BooleanTag();
  Signature: ()I
  Code:
   Stack=1, Locals=1, Args_size=1
	iconst_2
	ireturn
  Labels:

public final int ByteTag();
  Signature: ()I
  Code:
   Stack=1, Locals=1, Args_size=1
	iconst_3
	ireturn
  Labels:

public final int ShortTag();
  Signature: ()I
  Code:
   Stack=1, Locals=1, Args_size=1
	iconst_4
	ireturn
  Labels:

public final int CharTag();
  Signature: ()I
  Code:
   Stack=1, Locals=1, Args_size=1
	iconst_5
	ireturn
  Labels:

public final int IntTag();
  Signature: ()I
  Code:
   Stack=1, Locals=1, Args_size=1
	ldc_w	int 6
	ireturn
  Labels:

public final int LongTag();
  Signature: ()I
  Code:
   Stack=1, Locals=1, Args_size=1
	ldc_w	int 7
	ireturn
  Labels:

public final int FloatTag();
  Signature: ()I
  Code:
   Stack=1, Locals=1, Args_size=1
	ldc_w	int 8
	ireturn
  Labels:

public final int DoubleTag();
  Signature: ()I
  Code:
   Stack=1, Locals=1, Args_size=1
	ldc_w	int 9
	ireturn
  Labels:

public final int StringTag();
  Signature: ()I
  Code:
   Stack=1, Locals=1, Args_size=1
	ldc_w	int 10
	ireturn
  Labels:

public final int NullTag();
  Signature: ()I
  Code:
   Stack=1, Locals=1, Args_size=1
	ldc_w	int 11
	ireturn
  Labels:

public final int ClassTag();
  Signature: ()I
  Code:
   Stack=1, Locals=1, Args_size=1
	ldc_w	int 12
	ireturn
  Labels:

public final int EnumTag();
  Signature: ()I
  Code:
   Stack=1, Locals=1, Args_size=1
	ldc_w	int 13
	ireturn
  Labels:

public final scala.reflect.generic.Constants$Constant$ Constant();
  Signature: ()Lscala/reflect/generic/Constants$Constant$;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	getfield	Field Constant$module:Lscala/reflect/generic/Constants$Constant$;
	ifnonnull	l1 // aload_0
	aload_0
	new	class scala/reflect/generic/Constants$Constant$
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Constants$Constant$."<init>":(Lscala/reflect/generic/Universe;)V
	putfield	Field Constant$module:Lscala/reflect/generic/Constants$Constant$;
l1	aload_0
	getfield	Field Constant$module:Lscala/reflect/generic/Constants$Constant$;
	areturn
  Labels:
   	l1 = 19 // aload_0

public final int maxTostringRecursions();
  Signature: ()I
  Code:
   Stack=1, Locals=1, Args_size=1
	ldc_w	int 50
	ireturn
  Labels:

public final int scala$reflect$generic$Types$$tostringRecursions();
  Signature: ()I
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field scala$reflect$generic$Types$$tostringRecursions:I
	ireturn
  Labels:

public final void scala$reflect$generic$Types$$tostringRecursions_$eq(int);
  Signature: (I)V
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	iload_1
	putfield	Field scala$reflect$generic$Types$$tostringRecursions:I
	return
  Labels:

public abstract java.lang.Object NoPosition();
  Signature: ()Ljava/lang/Object;

public scala.reflect.generic.Universe();
  Signature: ()V
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokespecial	Method java/lang/Object."<init>":()V
	aload_0
	invokestatic	Method scala/reflect/generic/Symbols$class.$init$:(Lscala/reflect/generic/Universe;)V
	aload_0
	invokestatic	Method scala/reflect/generic/Types$class.$init$:(Lscala/reflect/generic/Universe;)V
	aload_0
	invokestatic	Method scala/reflect/generic/Constants$class.$init$:(Lscala/reflect/generic/Universe;)V
	aload_0
	invokestatic	Method scala/reflect/generic/Scopes$class.$init$:(Lscala/reflect/generic/Universe;)V
	aload_0
	invokestatic	Method scala/reflect/generic/StdNames$class.$init$:(Lscala/reflect/generic/Universe;)V
	aload_0
	invokestatic	Method scala/reflect/generic/Trees$class.$init$:(Lscala/reflect/generic/Universe;)V
	aload_0
	invokestatic	Method scala/reflect/generic/AnnotationInfos$class.$init$:(Lscala/reflect/generic/Universe;)V
	aload_0
	invokestatic	Method scala/reflect/generic/StandardDefinitions$class.$init$:(Lscala/reflect/generic/Universe;)V
	return
  Labels:

}

