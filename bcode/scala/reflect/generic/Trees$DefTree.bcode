Compiled from "Trees.scala"
public abstract class scala.reflect.generic.Trees$DefTree extends scala.reflect.generic.Trees$Tree implements scala.reflect.generic.Trees$SymTree,scala.ScalaObject
  SourceFile: "Trees.scala"
  Scala: length = 0x
   
  InnerClass: 
   public abstract Tree=class scala/reflect/generic/Trees$Tree of class scala/reflect/generic/Trees
   public abstract SymTree=class scala/reflect/generic/Trees$SymTree of class scala/reflect/generic/Trees
   public abstract DefTree=class scala/reflect/generic/Trees$DefTree of class scala/reflect/generic/Trees
   public abstract AbsSymbol=class scala/reflect/generic/Symbols$AbsSymbol of class scala/reflect/generic/Symbols
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	Trees.scala;
Asciz	symbol;
Asciz	Lscala/reflect/generic/Symbols$AbsSymbol;;
Asciz	()Lscala/reflect/generic/Symbols$AbsSymbol;;
Asciz	Code;
Asciz	LineNumberTable;
Asciz	scala/reflect/generic/Trees$DefTree;
class	scala/reflect/generic/Trees$DefTree
NameAndType	symbol:Lscala/reflect/generic/Symbols$AbsSymbol;
Field	scala/reflect/generic/Trees$DefTree.symbol:Lscala/reflect/generic/Symbols$AbsSymbol;
Asciz	symbol_$eq;
Asciz	(Lscala/reflect/generic/Symbols$AbsSymbol;)V;
Asciz	hasSymbol;
Asciz	()Z;
Asciz	scala/reflect/generic/Trees$SymTree$class;
class	scala/reflect/generic/Trees$SymTree$class
Asciz	(Lscala/reflect/generic/Trees$SymTree;)Z;
NameAndType	hasSymbol:(Lscala/reflect/generic/Trees$SymTree;)Z
Method	scala/reflect/generic/Trees$SymTree$class.hasSymbol:(Lscala/reflect/generic/Trees$SymTree;)Z
Asciz	name;
Asciz	()Ljava/lang/Object;;
Asciz	isDef;
Asciz	scala$reflect$generic$Trees$DefTree$$$outer;
Asciz	()Lscala/reflect/generic/Universe;;
Asciz	scala/reflect/generic/Trees$Tree;
class	scala/reflect/generic/Trees$Tree
Asciz	$outer;
Asciz	Lscala/reflect/generic/Universe;;
NameAndType	$outer:Lscala/reflect/generic/Universe;
Field	scala/reflect/generic/Trees$Tree.$outer:Lscala/reflect/generic/Universe;
Asciz	scala$reflect$generic$Trees$SymTree$$$outer;
Asciz	()Lscala/reflect/generic/Trees;;
NameAndType	scala$reflect$generic$Trees$DefTree$$$outer:()Lscala/reflect/generic/Universe;
Method	scala/reflect/generic/Trees$DefTree.scala$reflect$generic$Trees$DefTree$$$outer:()Lscala/reflect/generic/Universe;
Asciz	<init>;
Asciz	(Lscala/reflect/generic/Universe;)V;
NameAndType	"<init>":(Lscala/reflect/generic/Universe;)V
Method	scala/reflect/generic/Trees$Tree."<init>":(Lscala/reflect/generic/Universe;)V
Asciz	$init$;
Asciz	(Lscala/reflect/generic/Trees$SymTree;)V;
NameAndType	$init$:(Lscala/reflect/generic/Trees$SymTree;)V
Method	scala/reflect/generic/Trees$SymTree$class.$init$:(Lscala/reflect/generic/Trees$SymTree;)V
Asciz	this;
Asciz	Lscala/reflect/generic/Trees$DefTree;;
Asciz	LocalVariableTable;
Asciz	Scala;
Asciz	InnerClasses;
Asciz	scala/reflect/generic/Trees;
class	scala/reflect/generic/Trees
Asciz	Tree;
Asciz	scala/reflect/generic/Trees$SymTree;
class	scala/reflect/generic/Trees$SymTree
Asciz	SymTree;
Asciz	DefTree;
Asciz	scala/reflect/generic/Symbols$AbsSymbol;
class	scala/reflect/generic/Symbols$AbsSymbol
Asciz	scala/reflect/generic/Symbols;
class	scala/reflect/generic/Symbols
Asciz	AbsSymbol;
Asciz	scala/ScalaObject;
class	scala/ScalaObject

{
private scala.reflect.generic.Symbols$AbsSymbol symbol;
  Signature: Lscala/reflect/generic/Symbols$AbsSymbol;

public scala.reflect.generic.Symbols$AbsSymbol symbol();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field symbol:Lscala/reflect/generic/Symbols$AbsSymbol;
	areturn
  Labels:

public void symbol_$eq(scala.reflect.generic.Symbols$AbsSymbol);
  Signature: (Lscala/reflect/generic/Symbols$AbsSymbol;)V
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	putfield	Field symbol:Lscala/reflect/generic/Symbols$AbsSymbol;
	return
  Labels:

public boolean hasSymbol();
  Signature: ()Z
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/reflect/generic/Trees$SymTree$class.hasSymbol:(Lscala/reflect/generic/Trees$SymTree;)Z
	ireturn
  Labels:

public abstract java.lang.Object name();
  Signature: ()Ljava/lang/Object;

public boolean isDef();
  Signature: ()Z
  Code:
   Stack=1, Locals=1, Args_size=1
	iconst_1
	ireturn
  Labels:

public scala.reflect.generic.Universe scala$reflect$generic$Trees$DefTree$$$outer();
  Signature: ()Lscala/reflect/generic/Universe;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field scala/reflect/generic/Trees$Tree.$outer:Lscala/reflect/generic/Universe;
	areturn
  Labels:

public scala.reflect.generic.Trees scala$reflect$generic$Trees$SymTree$$$outer();
  Signature: ()Lscala/reflect/generic/Trees;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokevirtual	Method scala$reflect$generic$Trees$DefTree$$$outer:()Lscala/reflect/generic/Universe;
	areturn
  Labels:

public scala.reflect.generic.Trees$DefTree(scala.reflect.generic.Universe);
  Signature: (Lscala/reflect/generic/Universe;)V
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	invokespecial	Method scala/reflect/generic/Trees$Tree."<init>":(Lscala/reflect/generic/Universe;)V
	aload_0
	invokestatic	Method scala/reflect/generic/Trees$SymTree$class.$init$:(Lscala/reflect/generic/Trees$SymTree;)V
	return
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      10      0    this       Lscala/reflect/generic/Trees$DefTree;
   0      10      1    $outer       Lscala/reflect/generic/Universe;


}

