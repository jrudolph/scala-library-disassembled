Compiled from "Trees.scala"
public abstract class scala.reflect.generic.Trees$Tree extends java.lang.Object implements scala.Product,scala.ScalaObject
  SourceFile: "Trees.scala"
  Scala: length = 0x
   
  InnerClass: 
   public abstract Tree=class scala/reflect/generic/Trees$Tree of class scala/reflect/generic/Trees
   public abstract AbsType=class scala/reflect/generic/Types$AbsType of class scala/reflect/generic/Types
   public abstract AbsSymbol=class scala/reflect/generic/Symbols$AbsSymbol of class scala/reflect/generic/Symbols
   public abstract AbsTreePrinter=class scala/reflect/generic/Trees$AbsTreePrinter of class scala/reflect/generic/Trees
   public final $anonfun$children$1=class scala/reflect/generic/Trees$Tree$$anonfun$children$1 of class scala/reflect/generic/Trees$Tree
   public final $anonfun$subtrees$1$1=class scala/reflect/generic/Trees$Tree$$anonfun$subtrees$1$1 of class scala/reflect/generic/Trees$Tree
   public GenericCanBuildFrom=class scala/collection/generic/TraversableFactory$GenericCanBuildFrom of class scala/collection/generic/TraversableFactory
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	Trees.scala;
Asciz	id;
Asciz	I;
Asciz	rawpos;
Asciz	Ljava/lang/Object;;
Asciz	rawtpe;
Asciz	Lscala/reflect/generic/Types$AbsType;;
Asciz	$outer;
Asciz	Lscala/reflect/generic/Universe;;
Asciz	productElementName;
Asciz	(I)Ljava/lang/String;;
Asciz	Code;
Asciz	LineNumberTable;
Asciz	scala/Product$class;
class	scala/Product$class
Asciz	(Lscala/Product;I)Ljava/lang/String;;
NameAndType	productElementName:(Lscala/Product;I)Ljava/lang/String;
Method	scala/Product$class.productElementName:(Lscala/Product;I)Ljava/lang/String;
Asciz	this;
Asciz	Lscala/reflect/generic/Trees$Tree;;
Asciz	n;
Asciz	LocalVariableTable;
Asciz	productIterator;
Asciz	()Lscala/collection/Iterator;;
Asciz	(Lscala/Product;)Lscala/collection/Iterator;;
NameAndType	productIterator:(Lscala/Product;)Lscala/collection/Iterator;
Method	scala/Product$class.productIterator:(Lscala/Product;)Lscala/collection/Iterator;
Asciz	productElements;
NameAndType	productElements:(Lscala/Product;)Lscala/collection/Iterator;
Method	scala/Product$class.productElements:(Lscala/Product;)Lscala/collection/Iterator;
Asciz	Deprecated;
Asciz	productPrefix;
Asciz	()Ljava/lang/String;;
Asciz	(Lscala/Product;)Ljava/lang/String;;
NameAndType	productPrefix:(Lscala/Product;)Ljava/lang/String;
Method	scala/Product$class.productPrefix:(Lscala/Product;)Ljava/lang/String;
Asciz	()I;
Asciz	scala/reflect/generic/Trees$Tree;
class	scala/reflect/generic/Trees$Tree
NameAndType	id:I
Field	scala/reflect/generic/Trees$Tree.id:I
Asciz	pos;
Asciz	()Ljava/lang/Object;;
NameAndType	rawpos:Ljava/lang/Object;
Field	scala/reflect/generic/Trees$Tree.rawpos:Ljava/lang/Object;
Asciz	pos_$eq;
Asciz	(Ljava/lang/Object;)V;
Asciz	setPos;
Asciz	(Ljava/lang/Object;)Lscala/reflect/generic/Trees$Tree;;
Asciz	tpe;
Asciz	()Lscala/reflect/generic/Types$AbsType;;
NameAndType	rawtpe:Lscala/reflect/generic/Types$AbsType;
Field	scala/reflect/generic/Trees$Tree.rawtpe:Lscala/reflect/generic/Types$AbsType;
Asciz	tpe_$eq;
Asciz	(Lscala/reflect/generic/Types$AbsType;)V;
Asciz	t;
Asciz	setType;
Asciz	(Lscala/reflect/generic/Types$AbsType;)Lscala/reflect/generic/Trees$Tree;;
Asciz	tp;
Asciz	defineType;
NameAndType	setType:(Lscala/reflect/generic/Types$AbsType;)Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$Tree.setType:(Lscala/reflect/generic/Types$AbsType;)Lscala/reflect/generic/Trees$Tree;
Asciz	symbol;
Asciz	()Lscala/reflect/generic/Symbols$AbsSymbol;;
Asciz	symbol_$eq;
Asciz	(Lscala/reflect/generic/Symbols$AbsSymbol;)V;
Asciz	java/lang/UnsupportedOperationException;
class	java/lang/UnsupportedOperationException
Asciz	scala/collection/mutable/StringBuilder;
class	scala/collection/mutable/StringBuilder
Asciz	<init>;
Asciz	()V;
NameAndType	"<init>":()V
Method	scala/collection/mutable/StringBuilder."<init>":()V
Asciz	symbol_= inapplicable for ;
String	symbol_= inapplicable for 
Asciz	append;
Asciz	(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;;
NameAndType	append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
Method	scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
Asciz	toString;
NameAndType	toString:()Ljava/lang/String;
Method	scala/collection/mutable/StringBuilder.toString:()Ljava/lang/String;
Asciz	(Ljava/lang/String;)V;
NameAndType	"<init>":(Ljava/lang/String;)V
Method	java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
Asciz	sym;
Asciz	Lscala/reflect/generic/Symbols$AbsSymbol;;
Asciz	setSymbol;
Asciz	(Lscala/reflect/generic/Symbols$AbsSymbol;)Lscala/reflect/generic/Trees$Tree;;
NameAndType	symbol_$eq:(Lscala/reflect/generic/Symbols$AbsSymbol;)V
Method	scala/reflect/generic/Trees$Tree.symbol_$eq:(Lscala/reflect/generic/Symbols$AbsSymbol;)V
Asciz	hasSymbol;
Asciz	()Z;
Asciz	isDef;
Asciz	isEmpty;
Asciz	children;
Asciz	()Lscala/collection/immutable/List;;
Asciz	scala/Product;
class	scala/Product
NameAndType	productIterator:()Lscala/collection/Iterator;
InterfaceMethod	scala/Product.productIterator:()Lscala/collection/Iterator;
Asciz	scala/collection/TraversableOnce;
class	scala/collection/TraversableOnce
Asciz	toList;
NameAndType	toList:()Lscala/collection/immutable/List;
InterfaceMethod	scala/collection/TraversableOnce.toList:()Lscala/collection/immutable/List;
Asciz	scala/reflect/generic/Trees$Tree$$anonfun$children$1;
class	scala/reflect/generic/Trees$Tree$$anonfun$children$1
Asciz	(Lscala/reflect/generic/Trees$Tree;)V;
NameAndType	"<init>":(Lscala/reflect/generic/Trees$Tree;)V
Method	scala/reflect/generic/Trees$Tree$$anonfun$children$1."<init>":(Lscala/reflect/generic/Trees$Tree;)V
Asciz	scala/collection/immutable/List$;
class	scala/collection/immutable/List$
Asciz	MODULE$;
Asciz	Lscala/collection/immutable/List$;;
NameAndType	MODULE$:Lscala/collection/immutable/List$;
Field	scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
Asciz	canBuildFrom;
Asciz	()Lscala/collection/generic/CanBuildFrom;;
NameAndType	canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
Method	scala/collection/immutable/List$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
Asciz	scala/collection/TraversableLike;
class	scala/collection/TraversableLike
Asciz	flatMap;
Asciz	(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;;
NameAndType	flatMap:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
InterfaceMethod	scala/collection/TraversableLike.flatMap:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
Asciz	scala/collection/immutable/List;
class	scala/collection/immutable/List
Asciz	()Lscala/collection/immutable/List<Lscala/reflect/generic/Trees$Tree;>;;
Asciz	Signature;
Asciz	duplicate;
Asciz	()Lscala/reflect/generic/Trees$Tree;;
Asciz	scala$reflect$generic$Trees$Tree$$$outer;
Asciz	()Lscala/reflect/generic/Universe;;
NameAndType	scala$reflect$generic$Trees$Tree$$$outer:()Lscala/reflect/generic/Universe;
Method	scala/reflect/generic/Trees$Tree.scala$reflect$generic$Trees$Tree$$$outer:()Lscala/reflect/generic/Universe;
Asciz	scala/reflect/generic/Trees;
class	scala/reflect/generic/Trees
Asciz	duplicateTree;
Asciz	(Lscala/reflect/generic/Trees$Tree;)Lscala/reflect/generic/Trees$Tree;;
NameAndType	duplicateTree:(Lscala/reflect/generic/Trees$Tree;)Lscala/reflect/generic/Trees$Tree;
InterfaceMethod	scala/reflect/generic/Trees.duplicateTree:(Lscala/reflect/generic/Trees$Tree;)Lscala/reflect/generic/Trees$Tree;
Asciz	copyAttrs;
NameAndType	pos:()Ljava/lang/Object;
Method	scala/reflect/generic/Trees$Tree.pos:()Ljava/lang/Object;
NameAndType	pos_$eq:(Ljava/lang/Object;)V
Method	scala/reflect/generic/Trees$Tree.pos_$eq:(Ljava/lang/Object;)V
NameAndType	tpe:()Lscala/reflect/generic/Types$AbsType;
Method	scala/reflect/generic/Trees$Tree.tpe:()Lscala/reflect/generic/Types$AbsType;
NameAndType	tpe_$eq:(Lscala/reflect/generic/Types$AbsType;)V
Method	scala/reflect/generic/Trees$Tree.tpe_$eq:(Lscala/reflect/generic/Types$AbsType;)V
NameAndType	hasSymbol:()Z
Method	scala/reflect/generic/Trees$Tree.hasSymbol:()Z
NameAndType	symbol:()Lscala/reflect/generic/Symbols$AbsSymbol;
Method	scala/reflect/generic/Trees$Tree.symbol:()Lscala/reflect/generic/Symbols$AbsSymbol;
Asciz	tree;
Asciz	java/io/StringWriter;
class	java/io/StringWriter
Method	java/io/StringWriter."<init>":()V
Asciz	java/io/PrintWriter;
class	java/io/PrintWriter
Asciz	(Ljava/io/Writer;)V;
NameAndType	"<init>":(Ljava/io/Writer;)V
Method	java/io/PrintWriter."<init>":(Ljava/io/Writer;)V
Asciz	newTreePrinter;
Asciz	(Ljava/io/PrintWriter;)Lscala/reflect/generic/Trees$AbsTreePrinter;;
NameAndType	newTreePrinter:(Ljava/io/PrintWriter;)Lscala/reflect/generic/Trees$AbsTreePrinter;
InterfaceMethod	scala/reflect/generic/Trees.newTreePrinter:(Ljava/io/PrintWriter;)Lscala/reflect/generic/Trees$AbsTreePrinter;
Asciz	scala/reflect/generic/Trees$AbsTreePrinter;
class	scala/reflect/generic/Trees$AbsTreePrinter
Asciz	print;
NameAndType	print:(Lscala/reflect/generic/Trees$Tree;)V
Method	scala/reflect/generic/Trees$AbsTreePrinter.print:(Lscala/reflect/generic/Trees$Tree;)V
Asciz	flush;
NameAndType	flush:()V
Method	scala/reflect/generic/Trees$AbsTreePrinter.flush:()V
Method	java/io/StringWriter.toString:()Ljava/lang/String;
Asciz	buffer;
Asciz	Ljava/io/StringWriter;;
Asciz	printer;
Asciz	Lscala/reflect/generic/Trees$AbsTreePrinter;;
Asciz	hashCode;
Asciz	java/lang/Object;
class	java/lang/Object
NameAndType	hashCode:()I
Method	java/lang/Object.hashCode:()I
Asciz	equals;
Asciz	(Ljava/lang/Object;)Z;
Asciz	that;
NameAndType	$outer:Lscala/reflect/generic/Universe;
Field	scala/reflect/generic/Trees$Tree.$outer:Lscala/reflect/generic/Universe;
Asciz	subtrees$1;
Asciz	(Ljava/lang/Object;)Lscala/collection/immutable/List;;
Asciz	EmptyTree;
Asciz	()Lscala/reflect/generic/Trees$EmptyTree$;;
NameAndType	EmptyTree:()Lscala/reflect/generic/Trees$EmptyTree$;
InterfaceMethod	scala/reflect/generic/Trees.EmptyTree:()Lscala/reflect/generic/Trees$EmptyTree$;
NameAndType	equals:(Ljava/lang/Object;)Z
Method	java/lang/Object.equals:(Ljava/lang/Object;)Z
Asciz	scala/collection/immutable/Nil$;
class	scala/collection/immutable/Nil$
Asciz	Lscala/collection/immutable/Nil$;;
NameAndType	MODULE$:Lscala/collection/immutable/Nil$;
Field	scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
Asciz	scala/Predef$;
class	scala/Predef$
Asciz	Lscala/Predef$;;
NameAndType	MODULE$:Lscala/Predef$;
Field	scala/Predef$.MODULE$:Lscala/Predef$;
Asciz	[Ljava/lang/Object;;
class	"[Ljava/lang/Object;"
Asciz	wrapRefArray;
Asciz	([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;;
NameAndType	wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
Method	scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
Asciz	scala/reflect/generic/Trees$Tree$$anonfun$subtrees$1$1;
class	scala/reflect/generic/Trees$Tree$$anonfun$subtrees$1$1
Method	scala/reflect/generic/Trees$Tree$$anonfun$subtrees$1$1."<init>":(Lscala/reflect/generic/Trees$Tree;)V
Asciz	scala/collection/generic/TraversableFactory$GenericCanBuildFrom;
class	scala/collection/generic/TraversableFactory$GenericCanBuildFrom
Asciz	(Lscala/collection/generic/TraversableFactory;)V;
NameAndType	"<init>":(Lscala/collection/generic/TraversableFactory;)V
Method	scala/collection/generic/TraversableFactory$GenericCanBuildFrom."<init>":(Lscala/collection/generic/TraversableFactory;)V
Asciz	x;
Asciz	(Lscala/reflect/generic/Universe;)V;
Asciz	java/lang/NullPointerException;
class	java/lang/NullPointerException
Method	java/lang/NullPointerException."<init>":()V
Method	java/lang/Object."<init>":()V
Asciz	$init$;
Asciz	(Lscala/Product;)V;
NameAndType	$init$:(Lscala/Product;)V
Method	scala/Product$class.$init$:(Lscala/Product;)V
Asciz	nodeCount;
NameAndType	nodeCount:()I
InterfaceMethod	scala/reflect/generic/Trees.nodeCount:()I
Asciz	nodeCount_$eq;
Asciz	(I)V;
NameAndType	nodeCount_$eq:(I)V
InterfaceMethod	scala/reflect/generic/Trees.nodeCount_$eq:(I)V
Asciz	scala/reflect/generic/Universe;
class	scala/reflect/generic/Universe
Asciz	NoPosition;
NameAndType	NoPosition:()Ljava/lang/Object;
Method	scala/reflect/generic/Universe.NoPosition:()Ljava/lang/Object;
Asciz	Scala;
Asciz	InnerClasses;
Asciz	Tree;
Asciz	scala/reflect/generic/Types$AbsType;
class	scala/reflect/generic/Types$AbsType
Asciz	scala/reflect/generic/Types;
class	scala/reflect/generic/Types
Asciz	AbsType;
Asciz	scala/reflect/generic/Symbols$AbsSymbol;
class	scala/reflect/generic/Symbols$AbsSymbol
Asciz	scala/reflect/generic/Symbols;
class	scala/reflect/generic/Symbols
Asciz	AbsSymbol;
Asciz	AbsTreePrinter;
Asciz	$anonfun$children$1;
Asciz	$anonfun$subtrees$1$1;
Asciz	scala/collection/generic/TraversableFactory;
class	scala/collection/generic/TraversableFactory
Asciz	GenericCanBuildFrom;
Asciz	scala/ScalaObject;
class	scala/ScalaObject

{
private final int id;
  Signature: I

private java.lang.Object rawpos;
  Signature: Ljava/lang/Object;

private scala.reflect.generic.Types$AbsType rawtpe;
  Signature: Lscala/reflect/generic/Types$AbsType;

public final scala.reflect.generic.Universe $outer;
  Signature: Lscala/reflect/generic/Universe;

public java.lang.String productElementName(int);
  Signature: (I)Ljava/lang/String;
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	iload_1
	invokestatic	Method scala/Product$class.productElementName:(Lscala/Product;I)Ljava/lang/String;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/reflect/generic/Trees$Tree;
   0      6      1    n       I


public scala.collection.Iterator productIterator();
  Signature: ()Lscala/collection/Iterator;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/Product$class.productIterator:(Lscala/Product;)Lscala/collection/Iterator;
	areturn
  Labels:

public scala.collection.Iterator productElements();
  Signature: ()Lscala/collection/Iterator;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/Product$class.productElements:(Lscala/Product;)Lscala/collection/Iterator;
	areturn
  Labels:
  Deprecated: true

public java.lang.String productPrefix();
  Signature: ()Ljava/lang/String;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/Product$class.productPrefix:(Lscala/Product;)Ljava/lang/String;
	areturn
  Labels:

public int id();
  Signature: ()I
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field id:I
	ireturn
  Labels:

public java.lang.Object pos();
  Signature: ()Ljava/lang/Object;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field rawpos:Ljava/lang/Object;
	areturn
  Labels:

public void pos_$eq(java.lang.Object);
  Signature: (Ljava/lang/Object;)V
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	putfield	Field rawpos:Ljava/lang/Object;
	return
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/reflect/generic/Trees$Tree;
   0      6      1    pos       Ljava/lang/Object;


public scala.reflect.generic.Trees$Tree setPos(java.lang.Object);
  Signature: (Ljava/lang/Object;)Lscala/reflect/generic/Trees$Tree;
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	putfield	Field rawpos:Ljava/lang/Object;
	aload_0
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/reflect/generic/Trees$Tree;
   0      7      1    pos       Ljava/lang/Object;


public scala.reflect.generic.Types$AbsType tpe();
  Signature: ()Lscala/reflect/generic/Types$AbsType;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field rawtpe:Lscala/reflect/generic/Types$AbsType;
	areturn
  Labels:

public void tpe_$eq(scala.reflect.generic.Types$AbsType);
  Signature: (Lscala/reflect/generic/Types$AbsType;)V
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	putfield	Field rawtpe:Lscala/reflect/generic/Types$AbsType;
	return
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/reflect/generic/Trees$Tree;
   0      6      1    t       Lscala/reflect/generic/Types$AbsType;


public scala.reflect.generic.Trees$Tree setType(scala.reflect.generic.Types$AbsType);
  Signature: (Lscala/reflect/generic/Types$AbsType;)Lscala/reflect/generic/Trees$Tree;
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	putfield	Field rawtpe:Lscala/reflect/generic/Types$AbsType;
	aload_0
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/reflect/generic/Trees$Tree;
   0      7      1    tp       Lscala/reflect/generic/Types$AbsType;


public scala.reflect.generic.Trees$Tree defineType(scala.reflect.generic.Types$AbsType);
  Signature: (Lscala/reflect/generic/Types$AbsType;)Lscala/reflect/generic/Trees$Tree;
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	invokevirtual	Method setType:(Lscala/reflect/generic/Types$AbsType;)Lscala/reflect/generic/Trees$Tree;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/reflect/generic/Trees$Tree;
   0      6      1    tp       Lscala/reflect/generic/Types$AbsType;


public scala.reflect.generic.Symbols$AbsSymbol symbol();
  Signature: ()Lscala/reflect/generic/Symbols$AbsSymbol;
  Code:
   Stack=1, Locals=1, Args_size=1
	aconst_null
	areturn
  Labels:

public void symbol_$eq(scala.reflect.generic.Symbols$AbsSymbol);
  Signature: (Lscala/reflect/generic/Symbols$AbsSymbol;)V
  Code:
   Stack=4, Locals=2, Args_size=2
	new	class java/lang/UnsupportedOperationException
	dup
	new	class scala/collection/mutable/StringBuilder
	dup
	invokespecial	Method scala/collection/mutable/StringBuilder."<init>":()V
	ldc	String symbol_= inapplicable for 
	invokevirtual	Method scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
	aload_0
	invokevirtual	Method scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
	invokevirtual	Method scala/collection/mutable/StringBuilder.toString:()Ljava/lang/String;
	invokespecial	Method java/lang/UnsupportedOperationException."<init>":(Ljava/lang/String;)V
	athrow
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      27      0    this       Lscala/reflect/generic/Trees$Tree;
   0      27      1    sym       Lscala/reflect/generic/Symbols$AbsSymbol;


public scala.reflect.generic.Trees$Tree setSymbol(scala.reflect.generic.Symbols$AbsSymbol);
  Signature: (Lscala/reflect/generic/Symbols$AbsSymbol;)Lscala/reflect/generic/Trees$Tree;
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	invokevirtual	Method symbol_$eq:(Lscala/reflect/generic/Symbols$AbsSymbol;)V
	aload_0
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/reflect/generic/Trees$Tree;
   0      7      1    sym       Lscala/reflect/generic/Symbols$AbsSymbol;


public boolean hasSymbol();
  Signature: ()Z
  Code:
   Stack=1, Locals=1, Args_size=1
	iconst_0
	ireturn
  Labels:

public boolean isDef();
  Signature: ()Z
  Code:
   Stack=1, Locals=1, Args_size=1
	iconst_0
	ireturn
  Labels:

public boolean isEmpty();
  Signature: ()Z
  Code:
   Stack=1, Locals=1, Args_size=1
	iconst_0
	ireturn
  Labels:

public scala.collection.immutable.List children();
  Signature: ()Lscala/collection/immutable/List;
  Code:
   Stack=4, Locals=1, Args_size=1
	aload_0
	invokeinterface	InterfaceMethod scala/Product.productIterator:()Lscala/collection/Iterator;
	invokeinterface	InterfaceMethod scala/collection/TraversableOnce.toList:()Lscala/collection/immutable/List;
	new	class scala/reflect/generic/Trees$Tree$$anonfun$children$1
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$Tree$$anonfun$children$1."<init>":(Lscala/reflect/generic/Trees$Tree;)V
	getstatic	Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
	invokevirtual	Method scala/collection/immutable/List$.canBuildFrom:()Lscala/collection/generic/CanBuildFrom;
	invokeinterface	InterfaceMethod scala/collection/TraversableLike.flatMap:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
	checkcast	class scala/collection/immutable/List
	areturn
  Labels:
  Signature: length = 0x2
   00 FFFFFF84 

public scala.reflect.generic.Trees$Tree duplicate();
  Signature: ()Lscala/reflect/generic/Trees$Tree;
  Code:
   Stack=2, Locals=1, Args_size=1
	aload_0
	invokevirtual	Method scala$reflect$generic$Trees$Tree$$$outer:()Lscala/reflect/generic/Universe;
	aload_0
	invokeinterface	InterfaceMethod scala/reflect/generic/Trees.duplicateTree:(Lscala/reflect/generic/Trees$Tree;)Lscala/reflect/generic/Trees$Tree;
	areturn
  Labels:

public scala.reflect.generic.Trees$Tree copyAttrs(scala.reflect.generic.Trees$Tree);
  Signature: (Lscala/reflect/generic/Trees$Tree;)Lscala/reflect/generic/Trees$Tree;
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	invokevirtual	Method pos:()Ljava/lang/Object;
	invokevirtual	Method pos_$eq:(Ljava/lang/Object;)V
	aload_0
	aload_1
	invokevirtual	Method tpe:()Lscala/reflect/generic/Types$AbsType;
	invokevirtual	Method tpe_$eq:(Lscala/reflect/generic/Types$AbsType;)V
	aload_0
	invokevirtual	Method hasSymbol:()Z
	ifeq	l1 // aload_0
	aload_0
	aload_1
	invokevirtual	Method symbol:()Lscala/reflect/generic/Symbols$AbsSymbol;
	invokevirtual	Method symbol_$eq:(Lscala/reflect/generic/Symbols$AbsSymbol;)V
l1	aload_0
	areturn
  Labels:
   	l1 = 31 // aload_0
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      33      0    this       Lscala/reflect/generic/Trees$Tree;
   0      33      1    tree       Lscala/reflect/generic/Trees$Tree;


public java.lang.String toString();
  Signature: ()Ljava/lang/String;
  Code:
   Stack=4, Locals=3, Args_size=1
	new	class java/io/StringWriter
	dup
	invokespecial	Method java/io/StringWriter."<init>":()V
	astore_1
	aload_0
	invokevirtual	Method scala$reflect$generic$Trees$Tree$$$outer:()Lscala/reflect/generic/Universe;
	new	class java/io/PrintWriter
	dup
	aload_1
	invokespecial	Method java/io/PrintWriter."<init>":(Ljava/io/Writer;)V
	invokeinterface	InterfaceMethod scala/reflect/generic/Trees.newTreePrinter:(Ljava/io/PrintWriter;)Lscala/reflect/generic/Trees$AbsTreePrinter;
	astore_2
	aload_2
	aload_0
	invokevirtual	Method scala/reflect/generic/Trees$AbsTreePrinter.print:(Lscala/reflect/generic/Trees$Tree;)V
	aload_2
	invokevirtual	Method scala/reflect/generic/Trees$AbsTreePrinter.flush:()V
	aload_1
	invokevirtual	Method java/io/StringWriter.toString:()Ljava/lang/String;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      40      0    this       Lscala/reflect/generic/Trees$Tree;
   8      31      1    buffer       Ljava/io/StringWriter;
   26      13      2    printer       Lscala/reflect/generic/Trees$AbsTreePrinter;


public int hashCode();
  Signature: ()I
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokespecial	Method java/lang/Object.hashCode:()I
	ireturn
  Labels:

public boolean equals(java.lang.Object);
  Signature: (Ljava/lang/Object;)Z
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_1
	instanceof	class scala/reflect/generic/Trees$Tree
	ifeq	l1 // iconst_0
	aload_1
	checkcast	class scala/reflect/generic/Trees$Tree
	invokevirtual	Method scala$reflect$generic$Trees$Tree$$$outer:()Lscala/reflect/generic/Universe;
	aload_0
	invokevirtual	Method scala$reflect$generic$Trees$Tree$$$outer:()Lscala/reflect/generic/Universe;
	if_acmpne	l1 // iconst_0
	aload_0
	aload_1
	checkcast	class scala/reflect/generic/Trees$Tree
	if_acmpne	l2 // iconst_0
	iconst_1
	goto	l3 // ireturn
l2	iconst_0
	goto	l3 // ireturn
l1	iconst_0
l3	ireturn
  Labels:
   	l2 = 33 // iconst_0
   	l1 = 37 // iconst_0
   	l3 = 38 // ireturn
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      39      0    this       Lscala/reflect/generic/Trees$Tree;
   0      39      1    that       Ljava/lang/Object;


public scala.reflect.generic.Universe scala$reflect$generic$Trees$Tree$$$outer();
  Signature: ()Lscala/reflect/generic/Universe;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field $outer:Lscala/reflect/generic/Universe;
	areturn
  Labels:

public final scala.collection.immutable.List subtrees$1(java.lang.Object);
  Signature: (Ljava/lang/Object;)Lscala/collection/immutable/List;
  Code:
   Stack=5, Locals=5, Args_size=2
	aload_1
	aload_0
	invokevirtual	Method scala$reflect$generic$Trees$Tree$$$outer:()Lscala/reflect/generic/Universe;
	invokeinterface	InterfaceMethod scala/reflect/generic/Trees.EmptyTree:()Lscala/reflect/generic/Trees$EmptyTree$;
	astore_2
	dup
	ifnonnull	l1 // aload_2
	pop
	aload_2
	ifnull	l2 // getstatic
	goto	l3 // aload_1
l1	aload_2
	invokevirtual	Method java/lang/Object.equals:(Ljava/lang/Object;)Z
	ifeq	l3 // aload_1
l2	getstatic	Field scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
	goto	l4 // areturn
l3	aload_1
	instanceof	class scala/reflect/generic/Trees$Tree
	ifeq	l5 // aload_1
	aload_1
	checkcast	class scala/reflect/generic/Trees$Tree
	invokevirtual	Method scala$reflect$generic$Trees$Tree$$$outer:()Lscala/reflect/generic/Universe;
	aload_0
	invokevirtual	Method scala$reflect$generic$Trees$Tree$$$outer:()Lscala/reflect/generic/Universe;
	if_acmpne	l5 // aload_1
	getstatic	Field scala/Predef$.MODULE$:Lscala/Predef$;
	iconst_1
	anewarray	class scala/reflect/generic/Trees$Tree
	dup
	iconst_0
	aload_1
	checkcast	class scala/reflect/generic/Trees$Tree
	aastore
	checkcast	class "[Ljava/lang/Object;"
	invokevirtual	Method scala/Predef$.wrapRefArray:([Ljava/lang/Object;)Lscala/collection/mutable/WrappedArray;
	astore_3
	aload_3
	invokeinterface	InterfaceMethod scala/collection/TraversableOnce.toList:()Lscala/collection/immutable/List;
	goto	l4 // areturn
l5	aload_1
	instanceof	class scala/collection/immutable/List
	ifeq	l6 // getstatic
	aload_1
	checkcast	class scala/collection/immutable/List
	new	class scala/reflect/generic/Trees$Tree$$anonfun$subtrees$1$1
	dup
	aload_0
	invokespecial	Method scala/reflect/generic/Trees$Tree$$anonfun$subtrees$1$1."<init>":(Lscala/reflect/generic/Trees$Tree;)V
	getstatic	Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
	astore	4
	new	class scala/collection/generic/TraversableFactory$GenericCanBuildFrom
	dup
	aload	4
	invokespecial	Method scala/collection/generic/TraversableFactory$GenericCanBuildFrom."<init>":(Lscala/collection/generic/TraversableFactory;)V
	invokeinterface	InterfaceMethod scala/collection/TraversableLike.flatMap:(Lscala/Function1;Lscala/collection/generic/CanBuildFrom;)Ljava/lang/Object;
	checkcast	class scala/collection/immutable/List
	goto	l4 // areturn
l6	getstatic	Field scala/collection/immutable/Nil$.MODULE$:Lscala/collection/immutable/Nil$;
l4	areturn
  Labels:
   	l1 = 23 // aload_2
   	l2 = 30 // getstatic
   	l3 = 36 // aload_1
   	l5 = 87 // aload_1
   	l6 = 131 // getstatic
   	l4 = 134 // areturn
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      135      0    this       Lscala/reflect/generic/Trees$Tree;
   0      135      1    x       Ljava/lang/Object;


public scala.reflect.generic.Trees$Tree(scala.reflect.generic.Universe);
  Signature: (Lscala/reflect/generic/Universe;)V
  Code:
   Stack=3, Locals=2, Args_size=2
	aload_1
	ifnonnull	l1 // aload_0
	new	class java/lang/NullPointerException
	dup
	invokespecial	Method java/lang/NullPointerException."<init>":()V
	athrow
l1	aload_0
	aload_1
	putfield	Field $outer:Lscala/reflect/generic/Universe;
	aload_0
	invokespecial	Method java/lang/Object."<init>":()V
	aload_0
	invokestatic	Method scala/Product$class.$init$:(Lscala/Product;)V
	aload_0
	aload_1
	invokeinterface	InterfaceMethod scala/reflect/generic/Trees.nodeCount:()I
	putfield	Field id:I
	aload_1
	aload_1
	invokeinterface	InterfaceMethod scala/reflect/generic/Trees.nodeCount:()I
	iconst_1
	iadd
	invokeinterface	InterfaceMethod scala/reflect/generic/Trees.nodeCount_$eq:(I)V
	aload_0
	aload_1
	invokevirtual	Method scala/reflect/generic/Universe.NoPosition:()Ljava/lang/Object;
	putfield	Field rawpos:Ljava/lang/Object;
	return
  Labels:
   	l1 = 12 // aload_0
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      58      0    this       Lscala/reflect/generic/Trees$Tree;
   0      58      1    $outer       Lscala/reflect/generic/Universe;


}

