Compiled from "Trees.scala"
public final class scala.reflect.generic.Trees$If$ extends scala.runtime.AbstractFunction3 implements scala.ScalaObject
  SourceFile: "Trees.scala"
  Scala: length = 0x
   
  InnerClass: 
   public If=class scala/reflect/generic/Trees$If of class scala/reflect/generic/Trees
   public abstract Tree=class scala/reflect/generic/Trees$Tree of class scala/reflect/generic/Trees
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	Trees.scala;
Asciz	$outer;
Asciz	Lscala/reflect/generic/Universe;;
Asciz	unapply;
Asciz	(Lscala/reflect/generic/Trees$If;)Lscala/Option;;
Asciz	Code;
Asciz	LineNumberTable;
Asciz	scala/None$;
class	scala/None$
Asciz	MODULE$;
Asciz	Lscala/None$;;
NameAndType	MODULE$:Lscala/None$;
Field	scala/None$.MODULE$:Lscala/None$;
Asciz	scala/Some;
class	scala/Some
Asciz	scala/Tuple3;
class	scala/Tuple3
Asciz	scala/reflect/generic/Trees$If;
class	scala/reflect/generic/Trees$If
Asciz	cond;
Asciz	()Lscala/reflect/generic/Trees$Tree;;
NameAndType	cond:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$If.cond:()Lscala/reflect/generic/Trees$Tree;
Asciz	thenp;
NameAndType	thenp:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$If.thenp:()Lscala/reflect/generic/Trees$Tree;
Asciz	elsep;
NameAndType	elsep:()Lscala/reflect/generic/Trees$Tree;
Method	scala/reflect/generic/Trees$If.elsep:()Lscala/reflect/generic/Trees$Tree;
Asciz	<init>;
Asciz	(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V;
NameAndType	"<init>":(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
Method	scala/Tuple3."<init>":(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
Asciz	(Ljava/lang/Object;)V;
NameAndType	"<init>":(Ljava/lang/Object;)V
Method	scala/Some."<init>":(Ljava/lang/Object;)V
Asciz	this;
Asciz	Lscala/reflect/generic/Trees$If$;;
Asciz	x$0;
Asciz	Lscala/reflect/generic/Trees$If;;
Asciz	LocalVariableTable;
Asciz	apply;
Asciz	(Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)Lscala/reflect/generic/Trees$If;;
Asciz	scala/reflect/generic/Trees$If$;
class	scala/reflect/generic/Trees$If$
NameAndType	$outer:Lscala/reflect/generic/Universe;
Field	scala/reflect/generic/Trees$If$.$outer:Lscala/reflect/generic/Universe;
Asciz	(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V;
NameAndType	"<init>":(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V
Method	scala/reflect/generic/Trees$If."<init>":(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V
Asciz	Lscala/reflect/generic/Trees$Tree;;
Asciz	(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;;
Asciz	scala/reflect/generic/Trees$Tree;
class	scala/reflect/generic/Trees$Tree
NameAndType	apply:(Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)Lscala/reflect/generic/Trees$If;
Method	scala/reflect/generic/Trees$If$.apply:(Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)Lscala/reflect/generic/Trees$If;
Asciz	v1;
Asciz	Ljava/lang/Object;;
Asciz	v2;
Asciz	v3;
Asciz	(Lscala/reflect/generic/Universe;)V;
Asciz	java/lang/NullPointerException;
class	java/lang/NullPointerException
Asciz	()V;
NameAndType	"<init>":()V
Method	java/lang/NullPointerException."<init>":()V
Asciz	scala/runtime/AbstractFunction3;
class	scala/runtime/AbstractFunction3
Method	scala/runtime/AbstractFunction3."<init>":()V
Asciz	Scala;
Asciz	InnerClasses;
Asciz	scala/reflect/generic/Trees;
class	scala/reflect/generic/Trees
Asciz	If;
Asciz	Tree;
Asciz	scala/ScalaObject;
class	scala/ScalaObject

{
public final scala.reflect.generic.Universe $outer;
  Signature: Lscala/reflect/generic/Universe;

public scala.Option unapply(scala.reflect.generic.Trees$If);
  Signature: (Lscala/reflect/generic/Trees$If;)Lscala/Option;
  Code:
   Stack=7, Locals=2, Args_size=2
	aload_1
	ifnonnull	l1 // new
	getstatic	Field scala/None$.MODULE$:Lscala/None$;
	goto	l2 // areturn
l1	new	class scala/Some
	dup
	new	class scala/Tuple3
	dup
	aload_1
	invokevirtual	Method scala/reflect/generic/Trees$If.cond:()Lscala/reflect/generic/Trees$Tree;
	aload_1
	invokevirtual	Method scala/reflect/generic/Trees$If.thenp:()Lscala/reflect/generic/Trees$Tree;
	aload_1
	invokevirtual	Method scala/reflect/generic/Trees$If.elsep:()Lscala/reflect/generic/Trees$Tree;
	invokespecial	Method scala/Tuple3."<init>":(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
	invokespecial	Method scala/Some."<init>":(Ljava/lang/Object;)V
l2	areturn
  Labels:
   	l1 = 10 // new
   	l2 = 36 // areturn
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      37      0    this       Lscala/reflect/generic/Trees$If$;
   0      37      1    x$0       Lscala/reflect/generic/Trees$If;


public scala.reflect.generic.Trees$If apply(scala.reflect.generic.Trees$Tree, scala.reflect.generic.Trees$Tree, scala.reflect.generic.Trees$Tree);
  Signature: (Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)Lscala/reflect/generic/Trees$If;
  Code:
   Stack=6, Locals=4, Args_size=4
	new	class scala/reflect/generic/Trees$If
	dup
	aload_0
	getfield	Field $outer:Lscala/reflect/generic/Universe;
	aload_1
	aload_2
	aload_3
	invokespecial	Method scala/reflect/generic/Trees$If."<init>":(Lscala/reflect/generic/Universe;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)V
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      15      0    this       Lscala/reflect/generic/Trees$If$;
   0      15      1    cond       Lscala/reflect/generic/Trees$Tree;
   0      15      2    thenp       Lscala/reflect/generic/Trees$Tree;
   0      15      3    elsep       Lscala/reflect/generic/Trees$Tree;


public java.lang.Object apply(java.lang.Object, java.lang.Object, java.lang.Object);
  Signature: (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  Code:
   Stack=4, Locals=4, Args_size=4
	aload_0
	aload_1
	checkcast	class scala/reflect/generic/Trees$Tree
	aload_2
	checkcast	class scala/reflect/generic/Trees$Tree
	aload_3
	checkcast	class scala/reflect/generic/Trees$Tree
	invokevirtual	Method apply:(Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;Lscala/reflect/generic/Trees$Tree;)Lscala/reflect/generic/Trees$If;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      17      0    this       Lscala/reflect/generic/Trees$If$;
   0      17      1    v1       Ljava/lang/Object;
   0      17      2    v2       Ljava/lang/Object;
   0      17      3    v3       Ljava/lang/Object;


public scala.reflect.generic.Trees$If$(scala.reflect.generic.Universe);
  Signature: (Lscala/reflect/generic/Universe;)V
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_1
	ifnonnull	l1 // aload_0
	new	class java/lang/NullPointerException
	dup
	invokespecial	Method java/lang/NullPointerException."<init>":()V
	athrow
l1	aload_0
	aload_1
	putfield	Field $outer:Lscala/reflect/generic/Universe;
	aload_0
	invokespecial	Method scala/runtime/AbstractFunction3."<init>":()V
	return
  Labels:
   	l1 = 12 // aload_0
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      22      0    this       Lscala/reflect/generic/Trees$If$;
   0      22      1    $outer       Lscala/reflect/generic/Universe;


}

