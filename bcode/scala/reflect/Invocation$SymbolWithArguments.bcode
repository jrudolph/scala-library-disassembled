Compiled from "Invocation.scala"
public class scala.reflect.Invocation$SymbolWithArguments extends java.lang.Object implements scala.ScalaObject
  SourceFile: "Invocation.scala"
  Scala: length = 0x
   
  InnerClass: 
   public #219= #59 of #218; //Catch=class scala/util/control/Exception$Catch of class scala/util/control/Exception
   public #222= #14 of #221; //SymbolWithArguments=class scala/reflect/Invocation$SymbolWithArguments of class scala/reflect/Invocation
   public final #223= #203 of #14; //$anonfun$getArgs$1=class scala/reflect/Invocation$SymbolWithArguments$$anonfun$getArgs$1 of class scala/reflect/Invocation$SymbolWithArguments
   public final #224= #169 of #14; //$anonfun$argsMatch$1=class scala/reflect/Invocation$SymbolWithArguments$$anonfun$argsMatch$1 of class scala/reflect/Invocation$SymbolWithArguments
   public final #225= #176 of #14; //$anonfun$argsMatch$2=class scala/reflect/Invocation$SymbolWithArguments$$anonfun$argsMatch$2 of class scala/reflect/Invocation$SymbolWithArguments
   public final #226= #54 of #14; //$anonfun$getMethodOn$1=class scala/reflect/Invocation$SymbolWithArguments$$anonfun$getMethodOn$1 of class scala/reflect/Invocation$SymbolWithArguments
   public final #227= #188 of #14; //$anonfun$getArgTypes$1=class scala/reflect/Invocation$SymbolWithArguments$$anonfun$getArgTypes$1 of class scala/reflect/Invocation$SymbolWithArguments
   public final #228= #65 of #14; //$anonfun$getMethodOn$2=class scala/reflect/Invocation$SymbolWithArguments$$anonfun$getMethodOn$2 of class scala/reflect/Invocation$SymbolWithArguments
   public final #229= #87 of #14; //$anonfun$getDeclaredMethodsOn$1=class scala/reflect/Invocation$SymbolWithArguments$$anonfun$getDeclaredMethodsOn$1 of class scala/reflect/Invocation$SymbolWithArguments
   public final #230= #100 of #14; //$anonfun$getDeclaredMethodsOn$2=class scala/reflect/Invocation$SymbolWithArguments$$anonfun$getDeclaredMethodsOn$2 of class scala/reflect/Invocation$SymbolWithArguments
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	Invocation.scala;
const #3 = Asciz	args;
const #4 = Asciz	Lscala/collection/Sequence;;
const #5 = Asciz	Lscala/collection/Sequence<Lscala/reflect/Invocation$PrimitivePreserver<*>;>;;
const #6 = Asciz	Signature;
const #7 = Asciz	sym;
const #8 = Asciz	Lscala/Symbol;;
const #9 = Asciz	<init>;
const #10 = Asciz	(Lscala/Symbol;Lscala/collection/Sequence;)V;
const #11 = Asciz	Code;
const #12 = Asciz	LineNumberTable;
const #13 = Asciz	scala/reflect/Invocation$SymbolWithArguments;
const #14 = class	#13;	//  scala/reflect/Invocation$SymbolWithArguments
const #15 = NameAndType	#7:#8;//  sym:Lscala/Symbol;
const #16 = Field	#14.#15;	//  scala/reflect/Invocation$SymbolWithArguments.sym:Lscala/Symbol;
const #17 = NameAndType	#3:#4;//  args:Lscala/collection/Sequence;
const #18 = Field	#14.#17;	//  scala/reflect/Invocation$SymbolWithArguments.args:Lscala/collection/Sequence;
const #19 = Asciz	java/lang/Object;
const #20 = class	#19;	//  java/lang/Object
const #21 = Asciz	()V;
const #22 = NameAndType	#9:#21;//  "<init>":()V
const #23 = Method	#20.#22;	//  java/lang/Object."<init>":()V
const #24 = Asciz	this;
const #25 = Asciz	Lscala/reflect/Invocation$SymbolWithArguments;;
const #26 = Asciz	LocalVariableTable;
const #27 = Asciz	(Lscala/Symbol;Lscala/collection/Sequence<Lscala/reflect/Invocation$PrimitivePreserver<*>;>;)V;
const #28 = Asciz	getMethodOn;
const #29 = Asciz	(Ljava/lang/Object;)Ljava/lang/reflect/Method;;
const #30 = Asciz	scala/util/control/Exception$;
const #31 = class	#30;	//  scala/util/control/Exception$
const #32 = Asciz	MODULE$;
const #33 = Asciz	Lscala/util/control/Exception$;;
const #34 = NameAndType	#32:#33;//  MODULE$:Lscala/util/control/Exception$;
const #35 = Field	#31.#34;	//  scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
const #36 = Asciz	scala/runtime/ScalaRunTime$;
const #37 = class	#36;	//  scala/runtime/ScalaRunTime$
const #38 = Asciz	Lscala/runtime/ScalaRunTime$;;
const #39 = NameAndType	#32:#38;//  MODULE$:Lscala/runtime/ScalaRunTime$;
const #40 = Field	#37.#39;	//  scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
const #41 = Asciz	java/lang/Class;
const #42 = class	#41;	//  java/lang/Class
const #43 = Asciz	java/lang/NoSuchMethodException;
const #44 = class	#43;	//  java/lang/NoSuchMethodException
const #45 = Asciz	boxArray;
const #46 = Asciz	(Ljava/lang/Object;)Lscala/runtime/BoxedArray;;
const #47 = NameAndType	#45:#46;//  boxArray:(Ljava/lang/Object;)Lscala/runtime/BoxedArray;
const #48 = Method	#37.#47;	//  scala/runtime/ScalaRunTime$.boxArray:(Ljava/lang/Object;)Lscala/runtime/BoxedArray;
const #49 = Asciz	catching;
const #50 = Asciz	(Lscala/collection/Sequence;)Lscala/util/control/Exception$Catch;;
const #51 = NameAndType	#49:#50;//  catching:(Lscala/collection/Sequence;)Lscala/util/control/Exception$Catch;
const #52 = Method	#31.#51;	//  scala/util/control/Exception$.catching:(Lscala/collection/Sequence;)Lscala/util/control/Exception$Catch;
const #53 = Asciz	scala/reflect/Invocation$SymbolWithArguments$$anonfun$getMethodOn$1;
const #54 = class	#53;	//  scala/reflect/Invocation$SymbolWithArguments$$anonfun$getMethodOn$1
const #55 = Asciz	(Lscala/reflect/Invocation$SymbolWithArguments;Ljava/lang/Object;)V;
const #56 = NameAndType	#9:#55;//  "<init>":(Lscala/reflect/Invocation$SymbolWithArguments;Ljava/lang/Object;)V
const #57 = Method	#54.#56;	//  scala/reflect/Invocation$SymbolWithArguments$$anonfun$getMethodOn$1."<init>":(Lscala/reflect/Invocation$SymbolWithArguments;Ljava/lang/Object;)V
const #58 = Asciz	scala/util/control/Exception$Catch;
const #59 = class	#58;	//  scala/util/control/Exception$Catch
const #60 = Asciz	opt;
const #61 = Asciz	(Lscala/Function0;)Lscala/Option;;
const #62 = NameAndType	#60:#61;//  opt:(Lscala/Function0;)Lscala/Option;
const #63 = Method	#59.#62;	//  scala/util/control/Exception$Catch.opt:(Lscala/Function0;)Lscala/Option;
const #64 = Asciz	scala/reflect/Invocation$SymbolWithArguments$$anonfun$getMethodOn$2;
const #65 = class	#64;	//  scala/reflect/Invocation$SymbolWithArguments$$anonfun$getMethodOn$2
const #66 = Method	#65.#56;	//  scala/reflect/Invocation$SymbolWithArguments$$anonfun$getMethodOn$2."<init>":(Lscala/reflect/Invocation$SymbolWithArguments;Ljava/lang/Object;)V
const #67 = Asciz	scala/Option;
const #68 = class	#67;	//  scala/Option
const #69 = Asciz	getOrElse;
const #70 = Asciz	(Lscala/Function0;)Ljava/lang/Object;;
const #71 = NameAndType	#69:#70;//  getOrElse:(Lscala/Function0;)Ljava/lang/Object;
const #72 = Method	#68.#71;	//  scala/Option.getOrElse:(Lscala/Function0;)Ljava/lang/Object;
const #73 = Asciz	java/lang/reflect/Method;
const #74 = class	#73;	//  java/lang/reflect/Method
const #75 = Asciz	x$7;
const #76 = Asciz	Ljava/lang/Object;;
const #77 = Asciz	getDeclaredMethodsOn;
const #78 = Asciz	getClass;
const #79 = Asciz	()Ljava/lang/Class;;
const #80 = NameAndType	#78:#79;//  getClass:()Ljava/lang/Class;
const #81 = Method	#20.#80;	//  java/lang/Object.getClass:()Ljava/lang/Class;
const #82 = Asciz	getDeclaredMethods;
const #83 = Asciz	()[Ljava/lang/reflect/Method;;
const #84 = NameAndType	#82:#83;//  getDeclaredMethods:()[Ljava/lang/reflect/Method;
const #85 = Method	#42.#84;	//  java/lang/Class.getDeclaredMethods:()[Ljava/lang/reflect/Method;
const #86 = Asciz	scala/reflect/Invocation$SymbolWithArguments$$anonfun$getDeclaredMethodsOn$1;
const #87 = class	#86;	//  scala/reflect/Invocation$SymbolWithArguments$$anonfun$getDeclaredMethodsOn$1
const #88 = Asciz	(Lscala/reflect/Invocation$SymbolWithArguments;)V;
const #89 = NameAndType	#9:#88;//  "<init>":(Lscala/reflect/Invocation$SymbolWithArguments;)V
const #90 = Method	#87.#89;	//  scala/reflect/Invocation$SymbolWithArguments$$anonfun$getDeclaredMethodsOn$1."<init>":(Lscala/reflect/Invocation$SymbolWithArguments;)V
const #91 = Asciz	scala/collection/generic/TraversableTemplate;
const #92 = class	#91;	//  scala/collection/generic/TraversableTemplate
const #93 = Asciz	filter;
const #94 = Asciz	(Lscala/Function1;)Lscala/collection/generic/TraversableTemplate;;
const #95 = NameAndType	#93:#94;//  filter:(Lscala/Function1;)Lscala/collection/generic/TraversableTemplate;
const #96 = InterfaceMethod	#92.#95;	//  scala/collection/generic/TraversableTemplate.filter:(Lscala/Function1;)Lscala/collection/generic/TraversableTemplate;
const #97 = Asciz	scala/collection/generic/VectorTemplate;
const #98 = class	#97;	//  scala/collection/generic/VectorTemplate
const #99 = Asciz	scala/reflect/Invocation$SymbolWithArguments$$anonfun$getDeclaredMethodsOn$2;
const #100 = class	#99;	//  scala/reflect/Invocation$SymbolWithArguments$$anonfun$getDeclaredMethodsOn$2
const #101 = Method	#100.#89;	//  scala/reflect/Invocation$SymbolWithArguments$$anonfun$getDeclaredMethodsOn$2."<init>":(Lscala/reflect/Invocation$SymbolWithArguments;)V
const #102 = Asciz	find;
const #103 = Asciz	(Lscala/Function1;)Lscala/Option;;
const #104 = NameAndType	#102:#103;//  find:(Lscala/Function1;)Lscala/Option;
const #105 = InterfaceMethod	#98.#104;	//  scala/collection/generic/VectorTemplate.find:(Lscala/Function1;)Lscala/Option;
const #106 = Asciz	scala/Some;
const #107 = class	#106;	//  scala/Some
const #108 = Asciz	x;
const #109 = Asciz	()Ljava/lang/Object;;
const #110 = NameAndType	#108:#109;//  x:()Ljava/lang/Object;
const #111 = Method	#107.#110;	//  scala/Some.x:()Ljava/lang/Object;
const #112 = Asciz	setAccessible;
const #113 = Asciz	(Z)V;
const #114 = NameAndType	#112:#113;//  setAccessible:(Z)V
const #115 = Method	#74.#114;	//  java/lang/reflect/Method.setAccessible:(Z)V
const #116 = Asciz	scala/None$;
const #117 = class	#116;	//  scala/None$
const #118 = Asciz	Lscala/None$;;
const #119 = NameAndType	#32:#118;//  MODULE$:Lscala/None$;
const #120 = Field	#117.#119;	//  scala/None$.MODULE$:Lscala/None$;
const #121 = Asciz	equals;
const #122 = Asciz	(Ljava/lang/Object;)Z;
const #123 = NameAndType	#121:#122;//  equals:(Ljava/lang/Object;)Z
const #124 = Method	#20.#123;	//  java/lang/Object.equals:(Ljava/lang/Object;)Z
const #125 = Asciz	()Lscala/Symbol;;
const #126 = NameAndType	#7:#125;//  sym:()Lscala/Symbol;
const #127 = Method	#14.#126;	//  scala/reflect/Invocation$SymbolWithArguments.sym:()Lscala/Symbol;
const #128 = Asciz	scala/Symbol;
const #129 = class	#128;	//  scala/Symbol
const #130 = Asciz	name;
const #131 = Asciz	()Ljava/lang/String;;
const #132 = NameAndType	#130:#131;//  name:()Ljava/lang/String;
const #133 = Method	#129.#132;	//  scala/Symbol.name:()Ljava/lang/String;
const #134 = Asciz	(Ljava/lang/String;)V;
const #135 = NameAndType	#9:#134;//  "<init>":(Ljava/lang/String;)V
const #136 = Method	#44.#135;	//  java/lang/NoSuchMethodException."<init>":(Ljava/lang/String;)V
const #137 = Asciz	scala/MatchError;
const #138 = class	#137;	//  scala/MatchError
const #139 = Asciz	toString;
const #140 = NameAndType	#139:#131;//  toString:()Ljava/lang/String;
const #141 = Method	#68.#140;	//  scala/Option.toString:()Ljava/lang/String;
const #142 = Method	#138.#135;	//  scala/MatchError."<init>":(Ljava/lang/String;)V
const #143 = Asciz	temp9;
const #144 = Asciz	Lscala/Option;;
const #145 = Asciz	temp10;
const #146 = Asciz	Lscala/Some;;
const #147 = Asciz	temp11;
const #148 = Asciz	Ljava/lang/reflect/Method;;
const #149 = Asciz	m;
const #150 = Asciz	argsMatch;
const #151 = Asciz	(Ljava/lang/reflect/Method;)Z;
const #152 = Asciz	scala/collection/immutable/List$;
const #153 = class	#152;	//  scala/collection/immutable/List$
const #154 = Asciz	Lscala/collection/immutable/List$;;
const #155 = NameAndType	#32:#154;//  MODULE$:Lscala/collection/immutable/List$;
const #156 = Field	#153.#155;	//  scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
const #157 = Asciz	getParameterTypes;
const #158 = Asciz	()[Ljava/lang/Class;;
const #159 = NameAndType	#157:#158;//  getParameterTypes:()[Ljava/lang/Class;
const #160 = Method	#74.#159;	//  java/lang/reflect/Method.getParameterTypes:()[Ljava/lang/Class;
const #161 = Asciz	toList;
const #162 = Asciz	()Lscala/collection/immutable/List;;
const #163 = NameAndType	#161:#162;//  toList:()Lscala/collection/immutable/List;
const #164 = InterfaceMethod	#92.#163;	//  scala/collection/generic/TraversableTemplate.toList:()Lscala/collection/immutable/List;
const #165 = Asciz	getArgTypes;
const #166 = NameAndType	#165:#162;//  getArgTypes:()Lscala/collection/immutable/List;
const #167 = Method	#14.#166;	//  scala/reflect/Invocation$SymbolWithArguments.getArgTypes:()Lscala/collection/immutable/List;
const #168 = Asciz	scala/reflect/Invocation$SymbolWithArguments$$anonfun$argsMatch$1;
const #169 = class	#168;	//  scala/reflect/Invocation$SymbolWithArguments$$anonfun$argsMatch$1
const #170 = Method	#169.#89;	//  scala/reflect/Invocation$SymbolWithArguments$$anonfun$argsMatch$1."<init>":(Lscala/reflect/Invocation$SymbolWithArguments;)V
const #171 = Asciz	map2;
const #172 = Asciz	(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/Function2;)Lscala/collection/immutable/List;;
const #173 = NameAndType	#171:#172;//  map2:(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/Function2;)Lscala/collection/immutable/List;
const #174 = Method	#153.#173;	//  scala/collection/immutable/List$.map2:(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/Function2;)Lscala/collection/immutable/List;
const #175 = Asciz	scala/reflect/Invocation$SymbolWithArguments$$anonfun$argsMatch$2;
const #176 = class	#175;	//  scala/reflect/Invocation$SymbolWithArguments$$anonfun$argsMatch$2
const #177 = Method	#176.#89;	//  scala/reflect/Invocation$SymbolWithArguments$$anonfun$argsMatch$2."<init>":(Lscala/reflect/Invocation$SymbolWithArguments;)V
const #178 = Asciz	scala/collection/generic/LinearSequenceTemplate;
const #179 = class	#178;	//  scala/collection/generic/LinearSequenceTemplate
const #180 = Asciz	forall;
const #181 = Asciz	(Lscala/Function1;)Z;
const #182 = NameAndType	#180:#181;//  forall:(Lscala/Function1;)Z
const #183 = InterfaceMethod	#179.#182;	//  scala/collection/generic/LinearSequenceTemplate.forall:(Lscala/Function1;)Z
const #184 = Asciz	()Lscala/collection/Sequence;;
const #185 = NameAndType	#3:#184;//  args:()Lscala/collection/Sequence;
const #186 = Method	#14.#185;	//  scala/reflect/Invocation$SymbolWithArguments.args:()Lscala/collection/Sequence;
const #187 = Asciz	scala/reflect/Invocation$SymbolWithArguments$$anonfun$getArgTypes$1;
const #188 = class	#187;	//  scala/reflect/Invocation$SymbolWithArguments$$anonfun$getArgTypes$1
const #189 = Method	#188.#89;	//  scala/reflect/Invocation$SymbolWithArguments$$anonfun$getArgTypes$1."<init>":(Lscala/reflect/Invocation$SymbolWithArguments;)V
const #190 = Asciz	builderFactory;
const #191 = Asciz	()Lscala/collection/generic/BuilderFactory;;
const #192 = NameAndType	#190:#191;//  builderFactory:()Lscala/collection/generic/BuilderFactory;
const #193 = Method	#153.#192;	//  scala/collection/immutable/List$.builderFactory:()Lscala/collection/generic/BuilderFactory;
const #194 = Asciz	map;
const #195 = Asciz	(Lscala/Function1;Lscala/collection/generic/BuilderFactory;)Ljava/lang/Object;;
const #196 = NameAndType	#194:#195;//  map:(Lscala/Function1;Lscala/collection/generic/BuilderFactory;)Ljava/lang/Object;
const #197 = InterfaceMethod	#92.#196;	//  scala/collection/generic/TraversableTemplate.map:(Lscala/Function1;Lscala/collection/generic/BuilderFactory;)Ljava/lang/Object;
const #198 = Asciz	scala/collection/immutable/List;
const #199 = class	#198;	//  scala/collection/immutable/List
const #200 = Asciz	()Lscala/collection/immutable/List<Ljava/lang/Class<*>;>;;
const #201 = Asciz	getArgs;
const #202 = Asciz	scala/reflect/Invocation$SymbolWithArguments$$anonfun$getArgs$1;
const #203 = class	#202;	//  scala/reflect/Invocation$SymbolWithArguments$$anonfun$getArgs$1
const #204 = Method	#203.#89;	//  scala/reflect/Invocation$SymbolWithArguments$$anonfun$getArgs$1."<init>":(Lscala/reflect/Invocation$SymbolWithArguments;)V
const #205 = Asciz	scala/collection/Sequence$;
const #206 = class	#205;	//  scala/collection/Sequence$
const #207 = Asciz	Lscala/collection/Sequence$;;
const #208 = NameAndType	#32:#207;//  MODULE$:Lscala/collection/Sequence$;
const #209 = Field	#206.#208;	//  scala/collection/Sequence$.MODULE$:Lscala/collection/Sequence$;
const #210 = Method	#206.#192;	//  scala/collection/Sequence$.builderFactory:()Lscala/collection/generic/BuilderFactory;
const #211 = Asciz	scala/collection/Sequence;
const #212 = class	#211;	//  scala/collection/Sequence
const #213 = Asciz	()Lscala/collection/Sequence<Ljava/lang/Object;>;;
const #214 = Asciz	()Lscala/collection/Sequence<Lscala/reflect/Invocation$PrimitivePreserver<*>;>;;
const #215 = Asciz	Scala;
const #216 = Asciz	InnerClasses;
const #217 = Asciz	scala/util/control/Exception;
const #218 = class	#217;	//  scala/util/control/Exception
const #219 = Asciz	Catch;
const #220 = Asciz	scala/reflect/Invocation;
const #221 = class	#220;	//  scala/reflect/Invocation
const #222 = Asciz	SymbolWithArguments;
const #223 = Asciz	$anonfun$getArgs$1;
const #224 = Asciz	$anonfun$argsMatch$1;
const #225 = Asciz	$anonfun$argsMatch$2;
const #226 = Asciz	$anonfun$getMethodOn$1;
const #227 = Asciz	$anonfun$getArgTypes$1;
const #228 = Asciz	$anonfun$getMethodOn$2;
const #229 = Asciz	$anonfun$getDeclaredMethodsOn$1;
const #230 = Asciz	$anonfun$getDeclaredMethodsOn$2;
const #231 = Asciz	scala/ScalaObject;
const #232 = class	#231;	//  scala/ScalaObject

{
public scala.reflect.Invocation$SymbolWithArguments(scala.Symbol, scala.collection.Sequence);
  Code:
   Stack=2, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	putfield	#16; //Field sym:Lscala/Symbol;
   5:	aload_0
   6:	aload_2
   7:	putfield	#18; //Field args:Lscala/collection/Sequence;
   10:	aload_0
   11:	invokespecial	#23; //Method java/lang/Object."<init>":()V
   14:	return
  LineNumberTable: 
   line 74: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      15      0    this       Lscala/reflect/Invocation$SymbolWithArguments;
   0      15      1    sym       Lscala/Symbol;
   0      15      2    args       Lscala/collection/Sequence;

  Signature: length = 0x2
   00 1B 

public java.lang.reflect.Method getMethodOn(java.lang.Object);
  Code:
   Stack=6, Locals=2, Args_size=2
   0:	getstatic	#35; //Field scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
   3:	getstatic	#40; //Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
   6:	iconst_1
   7:	anewarray	#42; //class java/lang/Class
   10:	dup
   11:	iconst_0
   12:	ldc	#44; //class java/lang/NoSuchMethodException
   14:	aastore
   15:	invokevirtual	#48; //Method scala/runtime/ScalaRunTime$.boxArray:(Ljava/lang/Object;)Lscala/runtime/BoxedArray;
   18:	invokevirtual	#52; //Method scala/util/control/Exception$.catching:(Lscala/collection/Sequence;)Lscala/util/control/Exception$Catch;
   21:	new	#54; //class scala/reflect/Invocation$SymbolWithArguments$$anonfun$getMethodOn$1
   24:	dup
   25:	aload_0
   26:	aload_1
   27:	invokespecial	#57; //Method scala/reflect/Invocation$SymbolWithArguments$$anonfun$getMethodOn$1."<init>":(Lscala/reflect/Invocation$SymbolWithArguments;Ljava/lang/Object;)V
   30:	invokevirtual	#63; //Method scala/util/control/Exception$Catch.opt:(Lscala/Function0;)Lscala/Option;
   33:	new	#65; //class scala/reflect/Invocation$SymbolWithArguments$$anonfun$getMethodOn$2
   36:	dup
   37:	aload_0
   38:	aload_1
   39:	invokespecial	#66; //Method scala/reflect/Invocation$SymbolWithArguments$$anonfun$getMethodOn$2."<init>":(Lscala/reflect/Invocation$SymbolWithArguments;Ljava/lang/Object;)V
   42:	invokevirtual	#72; //Method scala/Option.getOrElse:(Lscala/Function0;)Ljava/lang/Object;
   45:	checkcast	#74; //class java/lang/reflect/Method
   48:	areturn
  LineNumberTable: 
   line 88: 0
   line 89: 21
   line 90: 33

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      49      0    this       Lscala/reflect/Invocation$SymbolWithArguments;
   0      49      1    x$7       Ljava/lang/Object;


public java.lang.reflect.Method getDeclaredMethodsOn(java.lang.Object);
  Code:
   Stack=4, Locals=7, Args_size=2
   0:	getstatic	#40; //Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
   3:	aload_1
   4:	invokevirtual	#81; //Method java/lang/Object.getClass:()Ljava/lang/Class;
   7:	invokevirtual	#85; //Method java/lang/Class.getDeclaredMethods:()[Ljava/lang/reflect/Method;
   10:	invokevirtual	#48; //Method scala/runtime/ScalaRunTime$.boxArray:(Ljava/lang/Object;)Lscala/runtime/BoxedArray;
   13:	new	#87; //class scala/reflect/Invocation$SymbolWithArguments$$anonfun$getDeclaredMethodsOn$1
   16:	dup
   17:	aload_0
   18:	invokespecial	#90; //Method scala/reflect/Invocation$SymbolWithArguments$$anonfun$getDeclaredMethodsOn$1."<init>":(Lscala/reflect/Invocation$SymbolWithArguments;)V
   21:	invokeinterface	#96,  2; //InterfaceMethod scala/collection/generic/TraversableTemplate.filter:(Lscala/Function1;)Lscala/collection/generic/TraversableTemplate;
   26:	checkcast	#98; //class scala/collection/generic/VectorTemplate
   29:	new	#100; //class scala/reflect/Invocation$SymbolWithArguments$$anonfun$getDeclaredMethodsOn$2
   32:	dup
   33:	aload_0
   34:	invokespecial	#101; //Method scala/reflect/Invocation$SymbolWithArguments$$anonfun$getDeclaredMethodsOn$2."<init>":(Lscala/reflect/Invocation$SymbolWithArguments;)V
   37:	invokeinterface	#105,  2; //InterfaceMethod scala/collection/generic/VectorTemplate.find:(Lscala/Function1;)Lscala/Option;
   42:	astore_2
   43:	aload_2
   44:	instanceof	#107; //class scala/Some
   47:	ifeq	77
   50:	aload_2
   51:	checkcast	#107; //class scala/Some
   54:	astore_3
   55:	aload_3
   56:	invokevirtual	#111; //Method scala/Some.x:()Ljava/lang/Object;
   59:	checkcast	#74; //class java/lang/reflect/Method
   62:	astore	4
   64:	aload	4
   66:	astore	5
   68:	aload	5
   70:	iconst_1
   71:	invokevirtual	#115; //Method java/lang/reflect/Method.setAccessible:(Z)V
   74:	aload	5
   76:	areturn
   77:	getstatic	#120; //Field scala/None$.MODULE$:Lscala/None$;
   80:	aload_2
   81:	astore	6
   83:	dup
   84:	ifnonnull	96
   87:	pop
   88:	aload	6
   90:	ifnull	104
   93:	goto	126
   96:	aload	6
   98:	invokevirtual	#124; //Method java/lang/Object.equals:(Ljava/lang/Object;)Z
   101:	ifeq	126
   104:	aload_2
   105:	instanceof	#117; //class scala/None$
   108:	ifeq	126
   111:	new	#44; //class java/lang/NoSuchMethodException
   114:	dup
   115:	aload_0
   116:	invokevirtual	#127; //Method sym:()Lscala/Symbol;
   119:	invokevirtual	#133; //Method scala/Symbol.name:()Ljava/lang/String;
   122:	invokespecial	#136; //Method java/lang/NoSuchMethodException."<init>":(Ljava/lang/String;)V
   125:	athrow
   126:	new	#138; //class scala/MatchError
   129:	dup
   130:	aload_2
   131:	invokevirtual	#141; //Method scala/Option.toString:()Ljava/lang/String;
   134:	invokespecial	#142; //Method scala/MatchError."<init>":(Ljava/lang/String;)V
   137:	athrow
  LineNumberTable: 
   line 82: 0
   line 83: 64
   line 82: 76
   line 84: 111
   line 82: 126

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      138      0    this       Lscala/reflect/Invocation$SymbolWithArguments;
   0      138      1    x       Ljava/lang/Object;
   43      95      2    temp9       Lscala/Option;
   55      21      3    temp10       Lscala/Some;
   64      12      4    temp11       Ljava/lang/reflect/Method;
   68      8      5    m       Ljava/lang/reflect/Method;


public boolean argsMatch(java.lang.reflect.Method);
  Code:
   Stack=6, Locals=2, Args_size=2
   0:	getstatic	#156; //Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
   3:	getstatic	#40; //Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
   6:	aload_1
   7:	invokevirtual	#160; //Method java/lang/reflect/Method.getParameterTypes:()[Ljava/lang/Class;
   10:	invokevirtual	#48; //Method scala/runtime/ScalaRunTime$.boxArray:(Ljava/lang/Object;)Lscala/runtime/BoxedArray;
   13:	invokeinterface	#164,  1; //InterfaceMethod scala/collection/generic/TraversableTemplate.toList:()Lscala/collection/immutable/List;
   18:	aload_0
   19:	invokevirtual	#167; //Method getArgTypes:()Lscala/collection/immutable/List;
   22:	new	#169; //class scala/reflect/Invocation$SymbolWithArguments$$anonfun$argsMatch$1
   25:	dup
   26:	aload_0
   27:	invokespecial	#170; //Method scala/reflect/Invocation$SymbolWithArguments$$anonfun$argsMatch$1."<init>":(Lscala/reflect/Invocation$SymbolWithArguments;)V
   30:	invokevirtual	#174; //Method scala/collection/immutable/List$.map2:(Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/Function2;)Lscala/collection/immutable/List;
   33:	new	#176; //class scala/reflect/Invocation$SymbolWithArguments$$anonfun$argsMatch$2
   36:	dup
   37:	aload_0
   38:	invokespecial	#177; //Method scala/reflect/Invocation$SymbolWithArguments$$anonfun$argsMatch$2."<init>":(Lscala/reflect/Invocation$SymbolWithArguments;)V
   41:	invokeinterface	#183,  2; //InterfaceMethod scala/collection/generic/LinearSequenceTemplate.forall:(Lscala/Function1;)Z
   46:	ireturn
  LineNumberTable: 
   line 78: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      47      0    this       Lscala/reflect/Invocation$SymbolWithArguments;
   0      47      1    m       Ljava/lang/reflect/Method;


public scala.collection.immutable.List getArgTypes();
  Code:
   Stack=4, Locals=1, Args_size=1
   0:	aload_0
   1:	invokevirtual	#186; //Method args:()Lscala/collection/Sequence;
   4:	invokeinterface	#164,  1; //InterfaceMethod scala/collection/generic/TraversableTemplate.toList:()Lscala/collection/immutable/List;
   9:	new	#188; //class scala/reflect/Invocation$SymbolWithArguments$$anonfun$getArgTypes$1
   12:	dup
   13:	aload_0
   14:	invokespecial	#189; //Method scala/reflect/Invocation$SymbolWithArguments$$anonfun$getArgTypes$1."<init>":(Lscala/reflect/Invocation$SymbolWithArguments;)V
   17:	getstatic	#156; //Field scala/collection/immutable/List$.MODULE$:Lscala/collection/immutable/List$;
   20:	invokevirtual	#193; //Method scala/collection/immutable/List$.builderFactory:()Lscala/collection/generic/BuilderFactory;
   23:	invokeinterface	#197,  3; //InterfaceMethod scala/collection/generic/TraversableTemplate.map:(Lscala/Function1;Lscala/collection/generic/BuilderFactory;)Ljava/lang/Object;
   28:	checkcast	#199; //class scala/collection/immutable/List
   31:	areturn
  LineNumberTable: 
   line 76: 0

  Signature: length = 0x2
   00 FFFFFFC8 

public scala.collection.Sequence getArgs();
  Code:
   Stack=4, Locals=2, Args_size=1
   0:	aload_0
   1:	invokevirtual	#186; //Method args:()Lscala/collection/Sequence;
   4:	new	#203; //class scala/reflect/Invocation$SymbolWithArguments$$anonfun$getArgs$1
   7:	dup
   8:	aload_0
   9:	invokespecial	#204; //Method scala/reflect/Invocation$SymbolWithArguments$$anonfun$getArgs$1."<init>":(Lscala/reflect/Invocation$SymbolWithArguments;)V
   12:	getstatic	#209; //Field scala/collection/Sequence$.MODULE$:Lscala/collection/Sequence$;
   15:	invokevirtual	#210; //Method scala/collection/Sequence$.builderFactory:()Lscala/collection/generic/BuilderFactory;
   18:	invokeinterface	#197,  3; //InterfaceMethod scala/collection/generic/TraversableTemplate.map:(Lscala/Function1;Lscala/collection/generic/BuilderFactory;)Ljava/lang/Object;
   23:	astore_1
   24:	aload_1
   25:	instanceof	#212; //class scala/collection/Sequence
   28:	ifeq	35
   31:	aload_1
   32:	goto	42
   35:	getstatic	#40; //Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
   38:	aload_1
   39:	invokevirtual	#48; //Method scala/runtime/ScalaRunTime$.boxArray:(Ljava/lang/Object;)Lscala/runtime/BoxedArray;
   42:	checkcast	#212; //class scala/collection/Sequence
   45:	areturn
  LineNumberTable: 
   line 75: 0

  Signature: length = 0x2
   00 FFFFFFD5 

public scala.collection.Sequence args();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#18; //Field args:Lscala/collection/Sequence;
   4:	areturn
  LineNumberTable: 
   line 74: 0

  Signature: length = 0x2
   00 FFFFFFD6 

public scala.Symbol sym();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#16; //Field sym:Lscala/Symbol;
   4:	areturn
  LineNumberTable: 
   line 74: 0


}

