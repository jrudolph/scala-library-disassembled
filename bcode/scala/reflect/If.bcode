Compiled from "Tree.scala"
public class scala.reflect.If extends scala.reflect.Tree implements scala.ScalaObject,scala.Product,java.io.Serializable
  SourceFile: "Tree.scala"
  ScalaSig: length = 0x408
   05 00 FFFFFF81 10 06 08 01 02 FFFFFF84 FFFFFF80 FFFFFF80 FFFFFF80 40 07 02 02
   49 66 0A 02 03 04 01 07 72 65 66 6C 65 63 74 0A
   01 05 01 05 73 63 61 6C 61 03 00 13 04 00 08 0C
   10 10 02 09 0A 0D 01 02 09 02 0B 02 02 04 54 72
   65 65 10 02 0D 0E 0D 01 04 09 02 0F 04 02 0B 53
   63 61 6C 61 4F 62 6A 65 63 74 10 02 0D 11 09 02
   12 04 02 07 50 72 6F 64 75 63 74 08 08 14 00 FFFFFF82
   FFFFFFCA FFFFFF80 FFFFFF84 00 15 01 09 63 6F 6E 64 69 74 69 6F 6E
   15 01 08 08 08 17 00 FFFFFF82 FFFFFF88 FFFFFFA0 FFFFFF80 04 08 01 0A 63
   6F 6E 64 69 74 69 6F 6E 20 08 08 19 00 FFFFFF82 FFFFFFCA FFFFFF80
   FFFFFF84 00 15 01 08 74 72 75 65 43 61 73 65 08 08 1B
   00 FFFFFF82 FFFFFF88 FFFFFFA0 FFFFFF80 04 08 01 09 74 72 75 65 43 61 73
   65 20 08 08 1D 00 FFFFFF82 FFFFFFCA FFFFFF80 FFFFFF84 00 15 01 09 66 61
   6C 73 65 43 61 73 65 08 08 1F 00 FFFFFF82 FFFFFF88 FFFFFFA0 FFFFFF80 04
   08 01 0A 66 61 6C 73 65 43 61 73 65 20 08 05 21
   00 FFFFFF84 00 22 01 06 3C 69 6E 69 74 3E 14 04 23 24
   25 26 10 02 09 00 08 05 14 20 FFFFFFC0 00 08 08 05 19
   20 FFFFFFC0 00 08 08 05 1D 20 FFFFFFC0 00 08 08 07 28 00 FFFFFF81
   FFFFFF80 FFFFFF84 00 29 01 04 63 6F 70 79 14 04 23 2A 2B 2C
   08 07 14 27 FFFFFF90 FFFFFF80 FFFFFFC0 00 08 08 07 19 27 FFFFFF90 FFFFFF80 FFFFFFC0
   00 08 08 07 1D 27 FFFFFF90 FFFFFF80 FFFFFFC0 00 08 08 07 2E 00 FFFFFF91
   FFFFFF80 FFFFFF84 00 2F 01 0E 63 6F 70 79 24 64 65 66 61 75
   6C 74 24 31 15 01 30 2A 02 08 31 2B 01 32 10 02
   33 38 0D 01 34 0A 02 35 36 01 09 75 6E 63 68 65
   63 6B 65 64 0A 02 37 04 01 0A 61 6E 6E 6F 74 61
   74 69 6F 6E 09 02 39 34 02 11 75 6E 63 68 65 63
   6B 65 64 56 61 72 69 61 6E 63 65 08 07 3B 00 FFFFFF91
   FFFFFF80 FFFFFF84 00 2F 01 0E 63 6F 70 79 24 64 65 66 61 75
   6C 74 24 32 08 07 3D 00 FFFFFF91 FFFFFF80 FFFFFF84 00 2F 01 0E 63
   6F 70 79 24 64 65 66 61 75 6C 74 24 33 08 08 3F
   00 FFFFFF84 FFFFFF80 FFFFFF80 FFFFFF84 20 40 01 08 68 61 73 68 43 6F 64
   65 14 01 41 10 02 0D 42 09 02 43 04 02 03 49 6E
   74 08 08 45 00 FFFFFF84 FFFFFF80 FFFFFF80 FFFFFF84 20 46 01 08 74 6F 53
   74 72 69 6E 67 14 01 47 10 02 48 4B 0E 02 0D 49
   09 02 4A 04 01 06 50 72 65 64 65 66 09 02 4C 4D
   02 06 53 74 72 69 6E 67 0A 02 4A 04 08 08 4F 00
   FFFFFF84 FFFFFF80 FFFFFF80 FFFFFF84 20 50 01 06 65 71 75 61 6C 73 14 02
   51 54 10 02 0D 52 09 02 53 04 02 07 42 6F 6F 6C
   65 61 6E 08 07 55 4E FFFFFF81 FFFFFF80 FFFFFFC0 00 56 01 03 78 24
   31 10 02 0D 57 09 02 58 04 02 03 41 6E 79 08 08
   5A 00 FFFFFF84 FFFFFF80 FFFFFF80 FFFFFF84 20 5B 01 0D 70 72 6F 64 75 63
   74 50 72 65 66 69 78 15 01 5C 10 02 5D 62 0D 01
   5E 0A 02 5F 60 01 04 6C 61 6E 67 0A 01 61 01 04
   6A 61 76 61 09 02 4C 5E 08 08 64 00 FFFFFF84 FFFFFF80 FFFFFF80 FFFFFF84
   20 65 01 0C 70 72 6F 64 75 63 74 41 72 69 74 79
   15 01 41 08 08 67 00 FFFFFF84 FFFFFF80 FFFFFF80 FFFFFF84 20 68 01 0E 70
   72 6F 64 75 63 74 45 6C 65 6D 65 6E 74 14 02 56
   69 08 07 55 66 FFFFFF81 FFFFFF80 FFFFFFC0 00 41 08 08 6B 00 FFFFFF84 FFFFFF80
   FFFFFF80 FFFFFF84 20 6C 01 08 63 61 6E 45 71 75 61 6C 14 02
   51 6D 08 07 55 6A FFFFFF81 FFFFFF80 FFFFFFC0 00 56 28 02 00 6F 10
   02 0D 70 09 02 71 04 02 0C 73 65 72 69 61 6C 69
   7A 61 62 6C 65 07 07 73 02 FFFFFF81 FFFFFF80 FFFFFF88 02 74 01 02
   49 66 10 02 09 75 06 08 01 02 FFFFFF84 FFFFFF81 FFFFFF80 FFFFFF88 02 76
   13 04 75 77 7A 0C 10 02 5D 78 09 02 79 5E 02 06
   4F 62 6A 65 63 74 10 06 0D 7B 08 08 08 23 09 02
   7C 04 02 09 46 75 6E 63 74 69 6F 6E 33 08 05 21
   75 FFFFFF84 00 7E 14 01 74 08 09 FFFFFF81 00 75 FFFFFF81 FFFFFF80 FFFFFF84 40
   FFFFFF81 01 01 05 61 70 70 6C 79 14 07 23 FFFFFF81 02 FFFFFF81 03
   FFFFFF81 04 08 05 14 7F FFFFFFC0 00 08 08 05 19 7F FFFFFFC0 00 08
   08 05 1D 7F FFFFFFC0 00 08 08 09 FFFFFF81 06 75 FFFFFF81 FFFFFF80 FFFFFF84 40
   FFFFFF81 07 01 07 75 6E 61 70 70 6C 79 14 04 FFFFFF81 08 FFFFFF81
   0E 10 05 0D FFFFFF81 09 FFFFFF81 0B 09 03 FFFFFF81 0A 04 02 06 4F
   70 74 69 6F 6E 10 06 0D FFFFFF81 0C 08 08 08 09 03 FFFFFF81
   0D 04 02 06 54 75 70 6C 65 33 08 07 FFFFFF81 0F FFFFFF81 05
   FFFFFFC0 00 23 01 03 78 24 30 
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	Tree.scala;
Asciz	tupled;
Asciz	()Lscala/Function1;;
Asciz	Code;
Asciz	scala/reflect/If$;
class	scala/reflect/If$
Asciz	MODULE$;
Asciz	Lscala/reflect/If$;;
NameAndType	MODULE$:Lscala/reflect/If$;
Field	scala/reflect/If$.MODULE$:Lscala/reflect/If$;
NameAndType	tupled:()Lscala/Function1;
Method	scala/reflect/If$.tupled:()Lscala/Function1;
Asciz	curry;
NameAndType	curry:()Lscala/Function1;
Method	scala/reflect/If$.curry:()Lscala/Function1;
Asciz	Deprecated;
Asciz	curried;
NameAndType	curried:()Lscala/Function1;
Method	scala/reflect/If$.curried:()Lscala/Function1;
Asciz	falseCase;
Asciz	Lscala/reflect/Tree;;
Asciz	trueCase;
Asciz	condition;
Asciz	productElementName;
Asciz	(I)Ljava/lang/String;;
Asciz	LineNumberTable;
Asciz	scala/Product$class;
class	scala/Product$class
Asciz	(Lscala/Product;I)Ljava/lang/String;;
NameAndType	productElementName:(Lscala/Product;I)Ljava/lang/String;
Method	scala/Product$class.productElementName:(Lscala/Product;I)Ljava/lang/String;
Asciz	this;
Asciz	Lscala/reflect/If;;
Asciz	n;
Asciz	I;
Asciz	LocalVariableTable;
Asciz	productIterator;
Asciz	()Lscala/collection/Iterator;;
Asciz	(Lscala/Product;)Lscala/collection/Iterator;;
NameAndType	productIterator:(Lscala/Product;)Lscala/collection/Iterator;
Method	scala/Product$class.productIterator:(Lscala/Product;)Lscala/collection/Iterator;
Asciz	productElements;
NameAndType	productElements:(Lscala/Product;)Lscala/collection/Iterator;
Method	scala/Product$class.productElements:(Lscala/Product;)Lscala/collection/Iterator;
Asciz	copy$default$3;
Asciz	()Lscala/reflect/Tree;;
Asciz	scala/reflect/If;
class	scala/reflect/If
NameAndType	falseCase:()Lscala/reflect/Tree;
Method	scala/reflect/If.falseCase:()Lscala/reflect/Tree;
Asciz	copy$default$2;
NameAndType	trueCase:()Lscala/reflect/Tree;
Method	scala/reflect/If.trueCase:()Lscala/reflect/Tree;
Asciz	copy$default$1;
NameAndType	condition:()Lscala/reflect/Tree;
Method	scala/reflect/If.condition:()Lscala/reflect/Tree;
NameAndType	condition:Lscala/reflect/Tree;
Field	scala/reflect/If.condition:Lscala/reflect/Tree;
NameAndType	trueCase:Lscala/reflect/Tree;
Field	scala/reflect/If.trueCase:Lscala/reflect/Tree;
NameAndType	falseCase:Lscala/reflect/Tree;
Field	scala/reflect/If.falseCase:Lscala/reflect/Tree;
Asciz	copy;
Asciz	(Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)Lscala/reflect/If;;
Asciz	<init>;
Asciz	(Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)V;
NameAndType	"<init>":(Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)V
Method	scala/reflect/If."<init>":(Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)V
Asciz	hashCode;
Asciz	()I;
Asciz	scala/runtime/ScalaRunTime$;
class	scala/runtime/ScalaRunTime$
Asciz	Lscala/runtime/ScalaRunTime$;;
NameAndType	MODULE$:Lscala/runtime/ScalaRunTime$;
Field	scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
Asciz	_hashCode;
Asciz	(Lscala/Product;)I;
NameAndType	_hashCode:(Lscala/Product;)I
Method	scala/runtime/ScalaRunTime$._hashCode:(Lscala/Product;)I
Asciz	toString;
Asciz	()Ljava/lang/String;;
Asciz	_toString;
Asciz	(Lscala/Product;)Ljava/lang/String;;
NameAndType	_toString:(Lscala/Product;)Ljava/lang/String;
Method	scala/runtime/ScalaRunTime$._toString:(Lscala/Product;)Ljava/lang/String;
Asciz	equals;
Asciz	(Ljava/lang/Object;)Z;
Asciz	gd10$1;
Asciz	(Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)Z;
NameAndType	gd10$1:(Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)Z
Method	scala/reflect/If.gd10$1:(Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)Z
Asciz	scala/Equals;
class	scala/Equals
Asciz	canEqual;
NameAndType	canEqual:(Ljava/lang/Object;)Z
InterfaceMethod	scala/Equals.canEqual:(Ljava/lang/Object;)Z
Asciz	temp43;
Asciz	temp44;
Asciz	temp45;
Asciz	temp46;
Asciz	productPrefix;
Asciz	If;
String	If
Asciz	productArity;
Asciz	productElement;
Asciz	(I)Ljava/lang/Object;;
Asciz	java/lang/IndexOutOfBoundsException;
class	java/lang/IndexOutOfBoundsException
Asciz	scala/runtime/BoxesRunTime;
class	scala/runtime/BoxesRunTime
Asciz	boxToInteger;
Asciz	(I)Ljava/lang/Integer;;
NameAndType	boxToInteger:(I)Ljava/lang/Integer;
Method	scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
Asciz	java/lang/Object;
class	java/lang/Object
NameAndType	toString:()Ljava/lang/String;
Method	java/lang/Object.toString:()Ljava/lang/String;
Asciz	(Ljava/lang/String;)V;
NameAndType	"<init>":(Ljava/lang/String;)V
Method	java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
NameAndType	equals:(Ljava/lang/Object;)Z
Method	java/lang/Object.equals:(Ljava/lang/Object;)Z
Asciz	scala/reflect/Tree;
class	scala/reflect/Tree
Asciz	()V;
NameAndType	"<init>":()V
Method	scala/reflect/Tree."<init>":()V
Asciz	$init$;
Asciz	(Lscala/Product;)V;
NameAndType	$init$:(Lscala/Product;)V
Method	scala/Product$class.$init$:(Lscala/Product;)V
Asciz	ScalaSig;
Asciz	scala/ScalaObject;
class	scala/ScalaObject
Asciz	scala/Product;
class	scala/Product
Asciz	java/io/Serializable;
class	java/io/Serializable

{
private final scala.reflect.Tree falseCase;
  Signature: Lscala/reflect/Tree;

private final scala.reflect.Tree trueCase;
  Signature: Lscala/reflect/Tree;

private final scala.reflect.Tree condition;
  Signature: Lscala/reflect/Tree;

public static final scala.Function1 tupled();
  Signature: ()Lscala/Function1;
  Code:
   Stack=1, Locals=0, Args_size=0
	getstatic	Field scala/reflect/If$.MODULE$:Lscala/reflect/If$;
	invokevirtual	Method scala/reflect/If$.tupled:()Lscala/Function1;
	areturn
  Labels:

public static final scala.Function1 curry();
  Signature: ()Lscala/Function1;
  Code:
   Stack=1, Locals=0, Args_size=0
	getstatic	Field scala/reflect/If$.MODULE$:Lscala/reflect/If$;
	invokevirtual	Method scala/reflect/If$.curry:()Lscala/Function1;
	areturn
  Labels:
  Deprecated: true

public static final scala.Function1 curried();
  Signature: ()Lscala/Function1;
  Code:
   Stack=1, Locals=0, Args_size=0
	getstatic	Field scala/reflect/If$.MODULE$:Lscala/reflect/If$;
	invokevirtual	Method scala/reflect/If$.curried:()Lscala/Function1;
	areturn
  Labels:

public java.lang.String productElementName(int);
  Signature: (I)Ljava/lang/String;
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	iload_1
	invokestatic	Method scala/Product$class.productElementName:(Lscala/Product;I)Ljava/lang/String;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/reflect/If;
   0      6      1    n       I


public scala.collection.Iterator productIterator();
  Signature: ()Lscala/collection/Iterator;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/Product$class.productIterator:(Lscala/Product;)Lscala/collection/Iterator;
	areturn
  Labels:

public scala.collection.Iterator productElements();
  Signature: ()Lscala/collection/Iterator;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/Product$class.productElements:(Lscala/Product;)Lscala/collection/Iterator;
	areturn
  Labels:
  Deprecated: true

public scala.reflect.Tree copy$default$3();
  Signature: ()Lscala/reflect/Tree;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokevirtual	Method falseCase:()Lscala/reflect/Tree;
	areturn
  Labels:

public scala.reflect.Tree copy$default$2();
  Signature: ()Lscala/reflect/Tree;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokevirtual	Method trueCase:()Lscala/reflect/Tree;
	areturn
  Labels:

public scala.reflect.Tree copy$default$1();
  Signature: ()Lscala/reflect/Tree;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokevirtual	Method condition:()Lscala/reflect/Tree;
	areturn
  Labels:

public scala.reflect.Tree condition();
  Signature: ()Lscala/reflect/Tree;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field condition:Lscala/reflect/Tree;
	areturn
  Labels:

public scala.reflect.Tree trueCase();
  Signature: ()Lscala/reflect/Tree;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field trueCase:Lscala/reflect/Tree;
	areturn
  Labels:

public scala.reflect.Tree falseCase();
  Signature: ()Lscala/reflect/Tree;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field falseCase:Lscala/reflect/Tree;
	areturn
  Labels:

public scala.reflect.If copy(scala.reflect.Tree, scala.reflect.Tree, scala.reflect.Tree);
  Signature: (Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)Lscala/reflect/If;
  Code:
   Stack=5, Locals=4, Args_size=4
	new	class scala/reflect/If
	dup
	aload_1
	aload_2
	aload_3
	invokespecial	Method "<init>":(Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)V
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/reflect/If;
   0      11      1    condition       Lscala/reflect/Tree;
   0      11      2    trueCase       Lscala/reflect/Tree;
   0      11      3    falseCase       Lscala/reflect/Tree;


public int hashCode();
  Signature: ()I
  Code:
   Stack=2, Locals=1, Args_size=1
	getstatic	Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
	aload_0
	invokevirtual	Method scala/runtime/ScalaRunTime$._hashCode:(Lscala/Product;)I
	ireturn
  Labels:

public java.lang.String toString();
  Signature: ()Ljava/lang/String;
  Code:
   Stack=2, Locals=1, Args_size=1
	getstatic	Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
	aload_0
	invokevirtual	Method scala/runtime/ScalaRunTime$._toString:(Lscala/Product;)Ljava/lang/String;
	areturn
  Labels:

public boolean equals(java.lang.Object);
  Signature: (Ljava/lang/Object;)Z
  Code:
   Stack=4, Locals=6, Args_size=2
	aload_0
	aload_1
	if_acmpeq	l1 // iconst_1
	aload_1
	instanceof	class scala/reflect/If
	ifeq	l2 // iconst_0
	aload_1
	checkcast	class scala/reflect/If
	astore_2
	aload_2
	invokevirtual	Method condition:()Lscala/reflect/Tree;
	astore_3
	aload_2
	invokevirtual	Method trueCase:()Lscala/reflect/Tree;
	astore	4
	aload_2
	invokevirtual	Method falseCase:()Lscala/reflect/Tree;
	astore	5
	aload_0
	aload_3
	aload	4
	aload	5
	invokespecial	Method gd10$1:(Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)Z
	ifeq	l3 // iconst_0
	aload_1
	checkcast	class scala/reflect/If
	aload_0
	invokeinterface	InterfaceMethod scala/Equals.canEqual:(Ljava/lang/Object;)Z
	goto	l4 // ifeq
l3	iconst_0
	goto	l4 // ifeq
l2	iconst_0
l4	ifeq	l5 // iconst_0
l1	iconst_1
	goto	l6 // ireturn
l5	iconst_0
l6	ireturn
  Labels:
   	l3 = 59 // iconst_0
   	l2 = 63 // iconst_0
   	l4 = 64 // ifeq
   	l1 = 67 // iconst_1
   	l5 = 71 // iconst_0
   	l6 = 72 // ireturn
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      73      0    this       Lscala/reflect/If;
   17      46      2    temp43       Lscala/reflect/If;
   22      41      3    temp44       Lscala/reflect/Tree;
   28      35      4    temp45       Lscala/reflect/Tree;
   34      29      5    temp46       Lscala/reflect/Tree;


public java.lang.String productPrefix();
  Signature: ()Ljava/lang/String;
  Code:
   Stack=1, Locals=1, Args_size=1
	ldc	String If
	areturn
  Labels:

public int productArity();
  Signature: ()I
  Code:
   Stack=1, Locals=1, Args_size=1
	iconst_3
	ireturn
  Labels:

public java.lang.Object productElement(int);
  Signature: (I)Ljava/lang/Object;
  Code:
   Stack=3, Locals=2, Args_size=2
	iload_1
	tableswitch{ //0 to 2
		0: 57;
		1: 50;
		2: 43;
		default: 28 }
	new	class java/lang/IndexOutOfBoundsException
	dup
	iload_1
	invokestatic	Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
	invokevirtual	Method java/lang/Object.toString:()Ljava/lang/String;
	invokespecial	Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
	athrow
	aload_0
	invokevirtual	Method falseCase:()Lscala/reflect/Tree;
	goto	l1 // areturn
	aload_0
	invokevirtual	Method trueCase:()Lscala/reflect/Tree;
	goto	l1 // areturn
	aload_0
	invokevirtual	Method condition:()Lscala/reflect/Tree;
l1	areturn
  Labels:
   	l1 = 61 // areturn

public boolean canEqual(java.lang.Object);
  Signature: (Ljava/lang/Object;)Z
  Code:
   Stack=1, Locals=2, Args_size=2
	aload_1
	instanceof	class scala/reflect/If
	ireturn
  Labels:

private final boolean gd10$1(scala.reflect.Tree, scala.reflect.Tree, scala.reflect.Tree);
  Signature: (Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)Z
  Code:
   Stack=2, Locals=7, Args_size=4
	aload_1
	aload_0
	invokevirtual	Method condition:()Lscala/reflect/Tree;
	astore	4
	dup
	ifnonnull	l1 // aload
	pop
	aload	4
	ifnull	l2 // aload_2
	goto	l3 // iconst_0
l1	aload	4
	invokevirtual	Method java/lang/Object.equals:(Ljava/lang/Object;)Z
	ifeq	l3 // iconst_0
l2	aload_2
	aload_0
	invokevirtual	Method trueCase:()Lscala/reflect/Tree;
	astore	5
	dup
	ifnonnull	l4 // aload
	pop
	aload	5
	ifnull	l5 // aload_3
	goto	l3 // iconst_0
l4	aload	5
	invokevirtual	Method java/lang/Object.equals:(Ljava/lang/Object;)Z
	ifeq	l3 // iconst_0
l5	aload_3
	aload_0
	invokevirtual	Method falseCase:()Lscala/reflect/Tree;
	astore	6
	dup
	ifnonnull	l6 // aload
	pop
	aload	6
	ifnull	l7 // iconst_1
	goto	l3 // iconst_0
l6	aload	6
	invokevirtual	Method java/lang/Object.equals:(Ljava/lang/Object;)Z
	ifeq	l3 // iconst_0
l7	iconst_1
	goto	l8 // ireturn
l3	iconst_0
l8	ireturn
  Labels:
   	l1 = 20 // aload
   	l2 = 28 // aload_2
   	l4 = 48 // aload
   	l5 = 56 // aload_3
   	l6 = 76 // aload
   	l7 = 84 // iconst_1
   	l3 = 88 // iconst_0
   	l8 = 89 // ireturn

public scala.reflect.If(scala.reflect.Tree, scala.reflect.Tree, scala.reflect.Tree);
  Signature: (Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)V
  Code:
   Stack=2, Locals=4, Args_size=4
	aload_0
	aload_1
	putfield	Field condition:Lscala/reflect/Tree;
	aload_0
	aload_2
	putfield	Field trueCase:Lscala/reflect/Tree;
	aload_0
	aload_3
	putfield	Field falseCase:Lscala/reflect/Tree;
	aload_0
	invokespecial	Method scala/reflect/Tree."<init>":()V
	aload_0
	invokestatic	Method scala/Product$class.$init$:(Lscala/Product;)V
	return
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      24      0    this       Lscala/reflect/If;
   0      24      1    condition       Lscala/reflect/Tree;
   0      24      2    trueCase       Lscala/reflect/Tree;
   0      24      3    falseCase       Lscala/reflect/Tree;


}

