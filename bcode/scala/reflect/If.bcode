Compiled from "Tree.scala"
public class scala.reflect.If extends scala.reflect.Tree implements scala.ScalaObject,scala.Product,java.io.Serializable
  SourceFile: "Tree.scala"
  ScalaSig: length = 0x3B7
   05 00 FFFFFF81 05 06 08 01 02 FFFFFF84 FFFFFF80 FFFFFF80 FFFFFF80 40 07 02 02
   49 66 0A 02 03 04 01 07 72 65 66 6C 65 63 74 0A
   01 05 01 05 73 63 61 6C 61 03 00 13 04 00 08 0C
   10 10 02 09 0A 0D 01 02 09 02 0B 02 02 04 54 72
   65 65 10 02 0D 0E 0D 01 04 09 02 0F 04 02 0B 53
   63 61 6C 61 4F 62 6A 65 63 74 10 02 0D 11 09 02
   12 04 02 07 50 72 6F 64 75 63 74 08 08 14 00 FFFFFF82
   FFFFFFCA FFFFFF80 FFFFFF84 00 15 01 09 63 6F 6E 64 69 74 69 6F 6E
   15 01 08 08 08 17 00 FFFFFF82 FFFFFF88 FFFFFFA0 FFFFFF80 04 08 01 0A 63
   6F 6E 64 69 74 69 6F 6E 20 08 08 19 00 FFFFFF82 FFFFFFCA FFFFFF80
   FFFFFF84 00 15 01 08 74 72 75 65 43 61 73 65 08 08 1B
   00 FFFFFF82 FFFFFF88 FFFFFFA0 FFFFFF80 04 08 01 09 74 72 75 65 43 61 73
   65 20 08 08 1D 00 FFFFFF82 FFFFFFCA FFFFFF80 FFFFFF84 00 15 01 09 66 61
   6C 73 65 43 61 73 65 08 08 1F 00 FFFFFF82 FFFFFF88 FFFFFFA0 FFFFFF80 04
   08 01 0A 66 61 6C 73 65 43 61 73 65 20 08 05 21
   00 FFFFFF84 00 22 01 06 3C 69 6E 69 74 3E 14 04 23 24
   25 26 10 02 09 00 08 05 14 20 FFFFFFC0 00 08 08 05 19
   20 FFFFFFC0 00 08 08 05 1D 20 FFFFFFC0 00 08 08 07 28 00 FFFFFF81
   FFFFFF80 FFFFFF84 00 29 01 04 63 6F 70 79 14 04 23 2A 2D 30
   08 08 2B 14 27 FFFFFF90 FFFFFF80 FFFFFFC0 00 08 08 07 2C 00 FFFFFF91 FFFFFF80
   FFFFFF84 00 15 01 0E 63 6F 70 79 24 64 65 66 61 75 6C
   74 24 31 08 08 2E 19 27 FFFFFF90 FFFFFF80 FFFFFFC0 00 08 08 07 2F
   00 FFFFFF91 FFFFFF80 FFFFFF84 00 15 01 0E 63 6F 70 79 24 64 65 66
   61 75 6C 74 24 32 08 08 31 1D 27 FFFFFF90 FFFFFF80 FFFFFFC0 00 08
   08 07 32 00 FFFFFF91 FFFFFF80 FFFFFF84 00 15 01 0E 63 6F 70 79 24
   64 65 66 61 75 6C 74 24 33 08 08 34 00 FFFFFF84 FFFFFF80 FFFFFF80
   FFFFFF84 20 35 01 08 68 61 73 68 43 6F 64 65 14 01 36
   10 02 0D 37 09 02 38 04 02 03 49 6E 74 08 08 3A
   00 FFFFFF84 FFFFFF80 FFFFFF80 FFFFFF84 20 3B 01 08 74 6F 53 74 72 69 6E
   67 14 01 3C 10 02 3D 40 0E 02 0D 3E 09 02 3F 04
   01 06 50 72 65 64 65 66 09 02 41 42 02 06 53 74
   72 69 6E 67 0A 02 3F 04 08 08 44 00 FFFFFF84 FFFFFF80 FFFFFF80 FFFFFF84
   20 45 01 06 65 71 75 61 6C 73 14 02 46 49 10 02
   0D 47 09 02 48 04 02 07 42 6F 6F 6C 65 61 6E 08
   07 4A 43 FFFFFF81 FFFFFF80 FFFFFFC0 00 4B 01 03 78 24 31 10 02 0D
   4C 09 02 4D 04 02 03 41 6E 79 08 08 4F 00 FFFFFF84 FFFFFF80
   FFFFFF80 FFFFFF84 20 50 01 0D 70 72 6F 64 75 63 74 50 72 65
   66 69 78 15 01 51 10 02 52 57 0D 01 53 0A 02 54
   55 01 04 6C 61 6E 67 0A 01 56 01 04 6A 61 76 61
   09 02 41 53 08 08 59 00 FFFFFF84 FFFFFF80 FFFFFF80 FFFFFF84 20 5A 01 0C
   70 72 6F 64 75 63 74 41 72 69 74 79 15 01 36 08
   08 5C 00 FFFFFF84 FFFFFF80 FFFFFF80 FFFFFF84 20 5D 01 0E 70 72 6F 64 75
   63 74 45 6C 65 6D 65 6E 74 14 02 4B 5E 08 07 4A
   5B FFFFFF81 FFFFFF80 FFFFFFC0 00 36 08 08 60 00 FFFFFF84 FFFFFF80 FFFFFF80 FFFFFF84 20 61
   01 08 63 61 6E 45 71 75 61 6C 14 02 46 62 08 07
   4A 5F FFFFFF81 FFFFFF80 FFFFFFC0 00 4B 28 02 00 64 10 02 0D 65 09
   02 66 04 02 0C 73 65 72 69 61 6C 69 7A 61 62 6C
   65 07 07 68 02 FFFFFF81 FFFFFF80 FFFFFF88 02 69 01 02 49 66 10 02
   09 6A 06 08 01 02 FFFFFF84 FFFFFF81 FFFFFF80 FFFFFF88 02 6B 13 04 6A 6C
   6F 0C 10 02 52 6D 09 02 6E 53 02 06 4F 62 6A 65
   63 74 10 06 0D 70 08 08 08 23 09 02 71 04 02 09
   46 75 6E 63 74 69 6F 6E 33 08 05 21 6A FFFFFF84 00 73
   14 01 69 08 07 75 6A FFFFFF81 FFFFFF80 FFFFFF84 40 76 01 05 61 70
   70 6C 79 14 04 23 77 78 79 08 05 14 74 FFFFFFC0 00 08
   08 05 19 74 FFFFFFC0 00 08 08 05 1D 74 FFFFFFC0 00 08 08 07
   7B 6A FFFFFF81 FFFFFF80 FFFFFF84 40 7C 01 07 75 6E 61 70 70 6C 79
   14 03 7D FFFFFF81 03 10 04 0D 7E FFFFFF81 00 09 02 7F 04 02
   04 53 6F 6D 65 10 06 0D FFFFFF81 01 08 08 08 09 03 FFFFFF81
   02 04 02 06 54 75 70 6C 65 33 08 06 FFFFFF81 04 7A FFFFFFC0
   00 23 01 03 78 24 30 
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	Tree.scala;
const #3 = Asciz	falseCase;
const #4 = Asciz	Lscala/reflect/Tree;;
const #5 = Asciz	trueCase;
const #6 = Asciz	condition;
const #7 = Asciz	<init>;
const #8 = Asciz	(Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)V;
const #9 = Asciz	Code;
const #10 = Asciz	LineNumberTable;
const #11 = Asciz	scala/reflect/If;
const #12 = class	#11;	//  scala/reflect/If
const #13 = NameAndType	#6:#4;//  condition:Lscala/reflect/Tree;
const #14 = Field	#12.#13;	//  scala/reflect/If.condition:Lscala/reflect/Tree;
const #15 = NameAndType	#5:#4;//  trueCase:Lscala/reflect/Tree;
const #16 = Field	#12.#15;	//  scala/reflect/If.trueCase:Lscala/reflect/Tree;
const #17 = NameAndType	#3:#4;//  falseCase:Lscala/reflect/Tree;
const #18 = Field	#12.#17;	//  scala/reflect/If.falseCase:Lscala/reflect/Tree;
const #19 = Asciz	scala/reflect/Tree;
const #20 = class	#19;	//  scala/reflect/Tree
const #21 = Asciz	()V;
const #22 = NameAndType	#7:#21;//  "<init>":()V
const #23 = Method	#20.#22;	//  scala/reflect/Tree."<init>":()V
const #24 = Asciz	scala/Product$class;
const #25 = class	#24;	//  scala/Product$class
const #26 = Asciz	$init$;
const #27 = Asciz	(Lscala/Product;)V;
const #28 = NameAndType	#26:#27;//  $init$:(Lscala/Product;)V
const #29 = Method	#25.#28;	//  scala/Product$class.$init$:(Lscala/Product;)V
const #30 = Asciz	this;
const #31 = Asciz	Lscala/reflect/If;;
const #32 = Asciz	LocalVariableTable;
const #33 = Asciz	gd10$1;
const #34 = Asciz	(Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)Z;
const #35 = Asciz	()Lscala/reflect/Tree;;
const #36 = NameAndType	#6:#35;//  condition:()Lscala/reflect/Tree;
const #37 = Method	#12.#36;	//  scala/reflect/If.condition:()Lscala/reflect/Tree;
const #38 = Asciz	java/lang/Object;
const #39 = class	#38;	//  java/lang/Object
const #40 = Asciz	equals;
const #41 = Asciz	(Ljava/lang/Object;)Z;
const #42 = NameAndType	#40:#41;//  equals:(Ljava/lang/Object;)Z
const #43 = Method	#39.#42;	//  java/lang/Object.equals:(Ljava/lang/Object;)Z
const #44 = NameAndType	#5:#35;//  trueCase:()Lscala/reflect/Tree;
const #45 = Method	#12.#44;	//  scala/reflect/If.trueCase:()Lscala/reflect/Tree;
const #46 = NameAndType	#3:#35;//  falseCase:()Lscala/reflect/Tree;
const #47 = Method	#12.#46;	//  scala/reflect/If.falseCase:()Lscala/reflect/Tree;
const #48 = Asciz	canEqual;
const #49 = Asciz	productElement;
const #50 = Asciz	(I)Ljava/lang/Object;;
const #51 = Asciz	java/lang/IndexOutOfBoundsException;
const #52 = class	#51;	//  java/lang/IndexOutOfBoundsException
const #53 = Asciz	scala/runtime/BoxesRunTime;
const #54 = class	#53;	//  scala/runtime/BoxesRunTime
const #55 = Asciz	boxToInteger;
const #56 = Asciz	(I)Ljava/lang/Integer;;
const #57 = NameAndType	#55:#56;//  boxToInteger:(I)Ljava/lang/Integer;
const #58 = Method	#54.#57;	//  scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
const #59 = Asciz	toString;
const #60 = Asciz	()Ljava/lang/String;;
const #61 = NameAndType	#59:#60;//  toString:()Ljava/lang/String;
const #62 = Method	#39.#61;	//  java/lang/Object.toString:()Ljava/lang/String;
const #63 = Asciz	(Ljava/lang/String;)V;
const #64 = NameAndType	#7:#63;//  "<init>":(Ljava/lang/String;)V
const #65 = Method	#52.#64;	//  java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
const #66 = Asciz	temp47;
const #67 = Asciz	I;
const #68 = Asciz	productArity;
const #69 = Asciz	()I;
const #70 = Asciz	productPrefix;
const #71 = Asciz	If;
const #72 = String	#71;	//  If
const #73 = NameAndType	#33:#34;//  gd10$1:(Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)Z
const #74 = Method	#12.#73;	//  scala/reflect/If.gd10$1:(Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)Z
const #75 = Asciz	scala/Product;
const #76 = class	#75;	//  scala/Product
const #77 = NameAndType	#48:#41;//  canEqual:(Ljava/lang/Object;)Z
const #78 = InterfaceMethod	#76.#77;	//  scala/Product.canEqual:(Ljava/lang/Object;)Z
const #79 = Asciz	temp42;
const #80 = Asciz	Ljava/lang/Object;;
const #81 = Asciz	temp43;
const #82 = Asciz	temp44;
const #83 = Asciz	temp45;
const #84 = Asciz	temp46;
const #85 = Asciz	falseCase$1;
const #86 = Asciz	trueCase$1;
const #87 = Asciz	condition$1;
const #88 = Asciz	scala/runtime/ScalaRunTime$;
const #89 = class	#88;	//  scala/runtime/ScalaRunTime$
const #90 = Asciz	MODULE$;
const #91 = Asciz	Lscala/runtime/ScalaRunTime$;;
const #92 = NameAndType	#90:#91;//  MODULE$:Lscala/runtime/ScalaRunTime$;
const #93 = Field	#89.#92;	//  scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
const #94 = Asciz	_toString;
const #95 = Asciz	(Lscala/Product;)Ljava/lang/String;;
const #96 = NameAndType	#94:#95;//  _toString:(Lscala/Product;)Ljava/lang/String;
const #97 = Method	#89.#96;	//  scala/runtime/ScalaRunTime$._toString:(Lscala/Product;)Ljava/lang/String;
const #98 = Asciz	hashCode;
const #99 = Asciz	_hashCode;
const #100 = Asciz	(Lscala/Product;)I;
const #101 = NameAndType	#99:#100;//  _hashCode:(Lscala/Product;)I
const #102 = Method	#89.#101;	//  scala/runtime/ScalaRunTime$._hashCode:(Lscala/Product;)I
const #103 = Asciz	copy$default$1;
const #104 = Asciz	copy$default$2;
const #105 = Asciz	copy$default$3;
const #106 = Asciz	copy;
const #107 = Asciz	(Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)Lscala/reflect/If;;
const #108 = NameAndType	#7:#8;//  "<init>":(Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)V
const #109 = Method	#12.#108;	//  scala/reflect/If."<init>":(Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)V
const #110 = Asciz	productElements;
const #111 = Asciz	()Lscala/collection/Iterator;;
const #112 = Asciz	(Lscala/Product;)Lscala/collection/Iterator;;
const #113 = NameAndType	#110:#112;//  productElements:(Lscala/Product;)Lscala/collection/Iterator;
const #114 = Method	#25.#113;	//  scala/Product$class.productElements:(Lscala/Product;)Lscala/collection/Iterator;
const #115 = Asciz	productIterator;
const #116 = NameAndType	#115:#112;//  productIterator:(Lscala/Product;)Lscala/collection/Iterator;
const #117 = Method	#25.#116;	//  scala/Product$class.productIterator:(Lscala/Product;)Lscala/collection/Iterator;
const #118 = Asciz	ScalaSig;
const #119 = Asciz	scala/ScalaObject;
const #120 = class	#119;	//  scala/ScalaObject
const #121 = Asciz	java/io/Serializable;
const #122 = class	#121;	//  java/io/Serializable

{
public scala.reflect.If(scala.reflect.Tree, scala.reflect.Tree, scala.reflect.Tree);
  Code:
   Stack=2, Locals=4, Args_size=4
   0:	aload_0
   1:	aload_1
   2:	putfield	#14; //Field condition:Lscala/reflect/Tree;
   5:	aload_0
   6:	aload_2
   7:	putfield	#16; //Field trueCase:Lscala/reflect/Tree;
   10:	aload_0
   11:	aload_3
   12:	putfield	#18; //Field falseCase:Lscala/reflect/Tree;
   15:	aload_0
   16:	invokespecial	#23; //Method scala/reflect/Tree."<init>":()V
   19:	aload_0
   20:	invokestatic	#29; //Method scala/Product$class.$init$:(Lscala/Product;)V
   23:	return
  LineNumberTable: 
   line 36: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      24      0    this       Lscala/reflect/If;
   0      24      1    condition       Lscala/reflect/Tree;
   0      24      2    trueCase       Lscala/reflect/Tree;
   0      24      3    falseCase       Lscala/reflect/Tree;


public boolean canEqual(java.lang.Object);
  Code:
   Stack=1, Locals=2, Args_size=2
   0:	aload_1
   1:	instanceof	#12; //class scala/reflect/If
   4:	ireturn
  LineNumberTable: 
   line 36: 0


public java.lang.Object productElement(int);
  Code:
   Stack=3, Locals=3, Args_size=2
   0:	iload_1
   1:	istore_2
   2:	iload_2
   3:	tableswitch{ //0 to 2
		0: 57;
		1: 50;
		2: 43;
		default: 28 }
   28:	new	#52; //class java/lang/IndexOutOfBoundsException
   31:	dup
   32:	iload_1
   33:	invokestatic	#58; //Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
   36:	invokevirtual	#62; //Method java/lang/Object.toString:()Ljava/lang/String;
   39:	invokespecial	#65; //Method java/lang/IndexOutOfBoundsException."<init>":(Ljava/lang/String;)V
   42:	athrow
   43:	aload_0
   44:	invokevirtual	#47; //Method falseCase:()Lscala/reflect/Tree;
   47:	goto	61
   50:	aload_0
   51:	invokevirtual	#45; //Method trueCase:()Lscala/reflect/Tree;
   54:	goto	61
   57:	aload_0
   58:	invokevirtual	#37; //Method condition:()Lscala/reflect/Tree;
   61:	areturn
  LineNumberTable: 
   line 36: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      62      0    this       Lscala/reflect/If;
   2      60      2    temp47       I


public int productArity();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	iconst_3
   1:	ireturn
  LineNumberTable: 
   line 36: 0


public java.lang.String productPrefix();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	ldc	#72; //String If
   2:	areturn
  LineNumberTable: 
   line 36: 0


public boolean equals(java.lang.Object);
  Code:
   Stack=4, Locals=10, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	if_acmpeq	91
   5:	aload_1
   6:	astore_2
   7:	aload_2
   8:	instanceof	#12; //class scala/reflect/If
   11:	ifeq	87
   14:	aload_2
   15:	checkcast	#12; //class scala/reflect/If
   18:	astore_3
   19:	aload_3
   20:	invokevirtual	#37; //Method condition:()Lscala/reflect/Tree;
   23:	astore	4
   25:	aload_3
   26:	invokevirtual	#45; //Method trueCase:()Lscala/reflect/Tree;
   29:	astore	5
   31:	aload_3
   32:	invokevirtual	#47; //Method falseCase:()Lscala/reflect/Tree;
   35:	astore	6
   37:	aload	6
   39:	astore	7
   41:	aload	5
   43:	astore	8
   45:	aload	4
   47:	astore	9
   49:	aload_0
   50:	aload	7
   52:	aload	8
   54:	aload	9
   56:	invokespecial	#74; //Method gd10$1:(Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)Z
   59:	ifeq	83
   62:	aload	6
   64:	astore	7
   66:	aload	5
   68:	astore	8
   70:	aload_1
   71:	checkcast	#12; //class scala/reflect/If
   74:	aload_0
   75:	invokeinterface	#78,  2; //InterfaceMethod scala/Product.canEqual:(Ljava/lang/Object;)Z
   80:	goto	88
   83:	iconst_0
   84:	goto	88
   87:	iconst_0
   88:	ifeq	95
   91:	iconst_1
   92:	goto	96
   95:	iconst_0
   96:	ireturn
  LineNumberTable: 
   line 36: 0
   line 26: 83
   line 36: 88

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      97      0    this       Lscala/reflect/If;
   7      84      2    temp42       Ljava/lang/Object;
   19      68      3    temp43       Lscala/reflect/If;
   25      62      4    temp44       Lscala/reflect/Tree;
   31      56      5    temp45       Lscala/reflect/Tree;
   37      50      6    temp46       Lscala/reflect/Tree;
   41      21      7    falseCase$1       Lscala/reflect/Tree;
   66      14      7    falseCase$1       Lscala/reflect/Tree;
   62      25      7    falseCase$1       Lscala/reflect/Tree;
   45      17      8    trueCase$1       Lscala/reflect/Tree;
   70      10      8    trueCase$1       Lscala/reflect/Tree;
   62      25      8    trueCase$1       Lscala/reflect/Tree;
   49      38      9    condition$1       Lscala/reflect/Tree;


public java.lang.String toString();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	getstatic	#93; //Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
   3:	aload_0
   4:	invokevirtual	#97; //Method scala/runtime/ScalaRunTime$._toString:(Lscala/Product;)Ljava/lang/String;
   7:	areturn
  LineNumberTable: 
   line 36: 0


public int hashCode();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	getstatic	#93; //Field scala/runtime/ScalaRunTime$.MODULE$:Lscala/runtime/ScalaRunTime$;
   3:	aload_0
   4:	invokevirtual	#102; //Method scala/runtime/ScalaRunTime$._hashCode:(Lscala/Product;)I
   7:	ireturn
  LineNumberTable: 
   line 36: 0


public scala.reflect.Tree copy$default$1();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokevirtual	#37; //Method condition:()Lscala/reflect/Tree;
   4:	areturn
  LineNumberTable: 
   line 36: 0


public scala.reflect.Tree copy$default$2();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokevirtual	#45; //Method trueCase:()Lscala/reflect/Tree;
   4:	areturn
  LineNumberTable: 
   line 36: 0


public scala.reflect.Tree copy$default$3();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokevirtual	#47; //Method falseCase:()Lscala/reflect/Tree;
   4:	areturn
  LineNumberTable: 
   line 36: 0


public scala.reflect.If copy(scala.reflect.Tree, scala.reflect.Tree, scala.reflect.Tree);
  Code:
   Stack=5, Locals=4, Args_size=4
   0:	new	#12; //class scala/reflect/If
   3:	dup
   4:	aload_1
   5:	aload_2
   6:	aload_3
   7:	invokespecial	#109; //Method "<init>":(Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)V
   10:	areturn
  LineNumberTable: 
   line 36: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/reflect/If;
   0      11      1    condition       Lscala/reflect/Tree;
   0      11      2    trueCase       Lscala/reflect/Tree;
   0      11      3    falseCase       Lscala/reflect/Tree;


public scala.reflect.Tree falseCase();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#18; //Field falseCase:Lscala/reflect/Tree;
   4:	areturn
  LineNumberTable: 
   line 36: 0


public scala.reflect.Tree trueCase();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#16; //Field trueCase:Lscala/reflect/Tree;
   4:	areturn
  LineNumberTable: 
   line 36: 0


public scala.reflect.Tree condition();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#14; //Field condition:Lscala/reflect/Tree;
   4:	areturn
  LineNumberTable: 
   line 36: 0


public scala.collection.Iterator productElements();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokestatic	#114; //Method scala/Product$class.productElements:(Lscala/Product;)Lscala/collection/Iterator;
   4:	areturn
  LineNumberTable: 
   line 36: 0


public scala.collection.Iterator productIterator();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokestatic	#117; //Method scala/Product$class.productIterator:(Lscala/Product;)Lscala/collection/Iterator;
   4:	areturn
  LineNumberTable: 
   line 36: 0


}

