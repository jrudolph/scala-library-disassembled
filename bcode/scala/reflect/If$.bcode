Compiled from "Tree.scala"
public final class scala.reflect.If$ extends java.lang.Object implements scala.Function3,scala.ScalaObject
  SourceFile: "Tree.scala"
  Scala: length = 0x
   
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	Tree.scala;
Asciz	Scala;
Asciz	MODULE$;
Asciz	Lscala/reflect/If$;;
Asciz	<clinit>;
Asciz	()V;
Asciz	Code;
Asciz	scala/reflect/If$;
class	scala/reflect/If$
Asciz	<init>;
NameAndType	"<init>":()V
Method	scala/reflect/If$."<init>":()V
Asciz	LineNumberTable;
Asciz	java/lang/Object;
class	java/lang/Object
Method	java/lang/Object."<init>":()V
NameAndType	MODULE$:Lscala/reflect/If$;
Field	scala/reflect/If$.MODULE$:Lscala/reflect/If$;
Asciz	scala/Function3$class;
class	scala/Function3$class
Asciz	$init$;
Asciz	(Lscala/Function3;)V;
NameAndType	$init$:(Lscala/Function3;)V
Method	scala/Function3$class.$init$:(Lscala/Function3;)V
Asciz	apply;
Asciz	(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;;
Asciz	scala/reflect/Tree;
class	scala/reflect/Tree
Asciz	(Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)Lscala/reflect/If;;
NameAndType	apply:(Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)Lscala/reflect/If;
Method	scala/reflect/If$.apply:(Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)Lscala/reflect/If;
Asciz	this;
Asciz	v1;
Asciz	Ljava/lang/Object;;
Asciz	v2;
Asciz	v3;
Asciz	LocalVariableTable;
Asciz	scala/reflect/If;
class	scala/reflect/If
Asciz	(Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)V;
NameAndType	"<init>":(Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)V
Method	scala/reflect/If."<init>":(Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)V
Asciz	condition;
Asciz	Lscala/reflect/Tree;;
Asciz	trueCase;
Asciz	falseCase;
Asciz	unapply;
Asciz	(Lscala/reflect/If;)Lscala/Some;;
Asciz	scala/Some;
class	scala/Some
Asciz	scala/Tuple3;
class	scala/Tuple3
Asciz	()Lscala/reflect/Tree;;
NameAndType	condition:()Lscala/reflect/Tree;
Method	scala/reflect/If.condition:()Lscala/reflect/Tree;
NameAndType	trueCase:()Lscala/reflect/Tree;
Method	scala/reflect/If.trueCase:()Lscala/reflect/Tree;
NameAndType	falseCase:()Lscala/reflect/Tree;
Method	scala/reflect/If.falseCase:()Lscala/reflect/Tree;
Asciz	(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V;
NameAndType	"<init>":(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
Method	scala/Tuple3."<init>":(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
Asciz	(Ljava/lang/Object;)V;
NameAndType	"<init>":(Ljava/lang/Object;)V
Method	scala/Some."<init>":(Ljava/lang/Object;)V
Asciz	x$0;
Asciz	Lscala/reflect/If;;
Asciz	curry;
Asciz	()Lscala/Function1;;
Asciz	(Lscala/Function3;)Lscala/Function1;;
NameAndType	curry:(Lscala/Function3;)Lscala/Function1;
Method	scala/Function3$class.curry:(Lscala/Function3;)Lscala/Function1;
Asciz	toString;
Asciz	()Ljava/lang/String;;
Asciz	(Lscala/Function3;)Ljava/lang/String;;
NameAndType	toString:(Lscala/Function3;)Ljava/lang/String;
Method	scala/Function3$class.toString:(Lscala/Function3;)Ljava/lang/String;
Asciz	scala/Function3;
class	scala/Function3
Asciz	scala/ScalaObject;
class	scala/ScalaObject

{
public static final scala.reflect.If$ MODULE$;
  Signature: Lscala/reflect/If$;

public static {};
  Signature: ()V
  Code:
   Stack=1, Locals=0, Args_size=0
	new	class scala/reflect/If$
	invokespecial	Method "<init>":()V
	return
  Labels:

private scala.reflect.If$();
  Signature: ()V
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokespecial	Method java/lang/Object."<init>":()V
	aload_0
	putstatic	Field MODULE$:Lscala/reflect/If$;
	aload_0
	invokestatic	Method scala/Function3$class.$init$:(Lscala/Function3;)V
	return
  Labels:

public java.lang.Object apply(java.lang.Object, java.lang.Object, java.lang.Object);
  Signature: (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  Code:
   Stack=4, Locals=4, Args_size=4
	aload_0
	aload_1
	checkcast	class scala/reflect/Tree
	aload_2
	checkcast	class scala/reflect/Tree
	aload_3
	checkcast	class scala/reflect/Tree
	invokevirtual	Method apply:(Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)Lscala/reflect/If;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      17      0    this       Lscala/reflect/If$;
   0      17      1    v1       Ljava/lang/Object;
   0      17      2    v2       Ljava/lang/Object;
   0      17      3    v3       Ljava/lang/Object;


public scala.reflect.If apply(scala.reflect.Tree, scala.reflect.Tree, scala.reflect.Tree);
  Signature: (Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)Lscala/reflect/If;
  Code:
   Stack=5, Locals=4, Args_size=4
	new	class scala/reflect/If
	dup
	aload_1
	aload_2
	aload_3
	invokespecial	Method scala/reflect/If."<init>":(Lscala/reflect/Tree;Lscala/reflect/Tree;Lscala/reflect/Tree;)V
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/reflect/If$;
   0      11      1    condition       Lscala/reflect/Tree;
   0      11      2    trueCase       Lscala/reflect/Tree;
   0      11      3    falseCase       Lscala/reflect/Tree;


public scala.Some unapply(scala.reflect.If);
  Signature: (Lscala/reflect/If;)Lscala/Some;
  Code:
   Stack=7, Locals=2, Args_size=2
	new	class scala/Some
	dup
	new	class scala/Tuple3
	dup
	aload_1
	invokevirtual	Method scala/reflect/If.condition:()Lscala/reflect/Tree;
	aload_1
	invokevirtual	Method scala/reflect/If.trueCase:()Lscala/reflect/Tree;
	aload_1
	invokevirtual	Method scala/reflect/If.falseCase:()Lscala/reflect/Tree;
	invokespecial	Method scala/Tuple3."<init>":(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V
	invokespecial	Method scala/Some."<init>":(Ljava/lang/Object;)V
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      27      0    this       Lscala/reflect/If$;
   0      27      1    x$0       Lscala/reflect/If;


public scala.Function1 curry();
  Signature: ()Lscala/Function1;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/Function3$class.curry:(Lscala/Function3;)Lscala/Function1;
	areturn
  Labels:

public java.lang.String toString();
  Signature: ()Ljava/lang/String;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/Function3$class.toString:(Lscala/Function3;)Ljava/lang/String;
	areturn
  Labels:

}

