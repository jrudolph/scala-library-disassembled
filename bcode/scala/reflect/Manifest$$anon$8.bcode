Compiled from "Manifest.scala"
public final class scala.reflect.Manifest$$anon$8 extends java.lang.Object implements scala.reflect.Manifest
  SourceFile: "Manifest.scala"
  Signature: length = 0x2
   00 59 
  Scala: length = 0x
   
  InnerClass: 
   public final #92= #18 of #59; //$anon$8=class scala/reflect/Manifest$$anon$8 of class scala/reflect/Manifest
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	Manifest.scala;
const #3 = Asciz	bitmap$0;
const #4 = Asciz	I;
const #5 = Asciz	parents$1;
const #6 = Asciz	Lscala/collection/Sequence;;
const #7 = Asciz	toString;
const #8 = Asciz	Ljava/lang/String;;
const #9 = Asciz	erasure;
const #10 = Asciz	Ljava/lang/Class;;
const #11 = Asciz	Ljava/lang/Class<*>;;
const #12 = Asciz	Signature;
const #13 = Asciz	<init>;
const #14 = Asciz	(Lscala/collection/Sequence;)V;
const #15 = Asciz	Code;
const #16 = Asciz	LineNumberTable;
const #17 = Asciz	scala/reflect/Manifest$$anon$8;
const #18 = class	#17;	//  scala/reflect/Manifest$$anon$8
const #19 = NameAndType	#5:#6;//  parents$1:Lscala/collection/Sequence;
const #20 = Field	#18.#19;	//  scala/reflect/Manifest$$anon$8.parents$1:Lscala/collection/Sequence;
const #21 = Asciz	java/lang/Object;
const #22 = class	#21;	//  java/lang/Object
const #23 = Asciz	()V;
const #24 = NameAndType	#13:#23;//  "<init>":()V
const #25 = Method	#22.#24;	//  java/lang/Object."<init>":()V
const #26 = Asciz	scala/reflect/Manifest$class;
const #27 = class	#26;	//  scala/reflect/Manifest$class
const #28 = Asciz	$init$;
const #29 = Asciz	(Lscala/reflect/Manifest;)V;
const #30 = NameAndType	#28:#29;//  $init$:(Lscala/reflect/Manifest;)V
const #31 = Method	#27.#30;	//  scala/reflect/Manifest$class.$init$:(Lscala/reflect/Manifest;)V
const #32 = Asciz	()Ljava/lang/String;;
const #33 = NameAndType	#3:#4;//  bitmap$0:I
const #34 = Field	#18.#33;	//  scala/reflect/Manifest$$anon$8.bitmap$0:I
const #35 = Asciz	 with ;
const #36 = String	#35;	//   with 
const #37 = Asciz	scala/collection/generic/TraversableTemplate;
const #38 = class	#37;	//  scala/collection/generic/TraversableTemplate
const #39 = Asciz	mkString;
const #40 = Asciz	(Ljava/lang/String;)Ljava/lang/String;;
const #41 = NameAndType	#39:#40;//  mkString:(Ljava/lang/String;)Ljava/lang/String;
const #42 = InterfaceMethod	#38.#41;	//  scala/collection/generic/TraversableTemplate.mkString:(Ljava/lang/String;)Ljava/lang/String;
const #43 = NameAndType	#7:#8;//  toString:Ljava/lang/String;
const #44 = Field	#18.#43;	//  scala/reflect/Manifest$$anon$8.toString:Ljava/lang/String;
const #45 = Asciz	scala/runtime/BoxedUnit;
const #46 = class	#45;	//  scala/runtime/BoxedUnit
const #47 = Asciz	UNIT;
const #48 = Asciz	Lscala/runtime/BoxedUnit;;
const #49 = NameAndType	#47:#48;//  UNIT:Lscala/runtime/BoxedUnit;
const #50 = Field	#46.#49;	//  scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
const #51 = Asciz	()Ljava/lang/Class;;
const #52 = Asciz	scala/collection/generic/IterableTemplate;
const #53 = class	#52;	//  scala/collection/generic/IterableTemplate
const #54 = Asciz	first;
const #55 = Asciz	()Ljava/lang/Object;;
const #56 = NameAndType	#54:#55;//  first:()Ljava/lang/Object;
const #57 = InterfaceMethod	#53.#56;	//  scala/collection/generic/IterableTemplate.first:()Ljava/lang/Object;
const #58 = Asciz	scala/reflect/Manifest;
const #59 = class	#58;	//  scala/reflect/Manifest
const #60 = NameAndType	#9:#51;//  erasure:()Ljava/lang/Class;
const #61 = InterfaceMethod	#59.#60;	//  scala/reflect/Manifest.erasure:()Ljava/lang/Class;
const #62 = NameAndType	#9:#10;//  erasure:Ljava/lang/Class;
const #63 = Field	#18.#62;	//  scala/reflect/Manifest$$anon$8.erasure:Ljava/lang/Class;
const #64 = Asciz	()Ljava/lang/Class<*>;;
const #65 = Asciz	typeArguments;
const #66 = Asciz	()Lscala/Option;;
const #67 = Asciz	(Lscala/reflect/Manifest;)Lscala/Option;;
const #68 = NameAndType	#65:#67;//  typeArguments:(Lscala/reflect/Manifest;)Lscala/Option;
const #69 = Method	#27.#68;	//  scala/reflect/Manifest$class.typeArguments:(Lscala/reflect/Manifest;)Lscala/Option;
const #70 = Asciz	equals;
const #71 = Asciz	(Ljava/lang/Object;)Z;
const #72 = Asciz	(Lscala/reflect/Manifest;Ljava/lang/Object;)Z;
const #73 = NameAndType	#70:#72;//  equals:(Lscala/reflect/Manifest;Ljava/lang/Object;)Z
const #74 = Method	#27.#73;	//  scala/reflect/Manifest$class.equals:(Lscala/reflect/Manifest;Ljava/lang/Object;)Z
const #75 = Asciz	this;
const #76 = Asciz	Lscala/reflect/Manifest$$anon$8;;
const #77 = Asciz	that;
const #78 = Asciz	Ljava/lang/Object;;
const #79 = Asciz	LocalVariableTable;
const #80 = Asciz	$greater$colon$greater;
const #81 = Asciz	(Lscala/reflect/Manifest;)Z;
const #82 = Asciz	(Lscala/reflect/Manifest;Lscala/reflect/Manifest;)Z;
const #83 = NameAndType	#80:#82;//  $greater$colon$greater:(Lscala/reflect/Manifest;Lscala/reflect/Manifest;)Z
const #84 = Method	#27.#83;	//  scala/reflect/Manifest$class.$greater$colon$greater:(Lscala/reflect/Manifest;Lscala/reflect/Manifest;)Z
const #85 = Asciz	Lscala/reflect/Manifest;;
const #86 = Asciz	$less$colon$less;
const #87 = NameAndType	#86:#82;//  $less$colon$less:(Lscala/reflect/Manifest;Lscala/reflect/Manifest;)Z
const #88 = Method	#27.#87;	//  scala/reflect/Manifest$class.$less$colon$less:(Lscala/reflect/Manifest;Lscala/reflect/Manifest;)Z
const #89 = Asciz	Ljava/lang/Object;Lscala/reflect/Manifest<TT;>;;
const #90 = Asciz	Scala;
const #91 = Asciz	InnerClasses;
const #92 = Asciz	$anon$8;

{
public volatile int bitmap$0;

public scala.reflect.Manifest$$anon$8(scala.collection.Sequence);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	putfield	#20; //Field parents$1:Lscala/collection/Sequence;
   5:	aload_0
   6:	invokespecial	#25; //Method java/lang/Object."<init>":()V
   9:	aload_0
   10:	invokestatic	#31; //Method scala/reflect/Manifest$class.$init$:(Lscala/reflect/Manifest;)V
   13:	return
  LineNumberTable: 
   line 153: 0


public java.lang.String toString();
  Code:
   Stack=3, Locals=2, Args_size=1
   0:	aload_0
   1:	getfield	#34; //Field bitmap$0:I
   4:	iconst_4
   5:	iand
   6:	iconst_0
   7:	if_icmpne	55
   10:	aload_0
   11:	dup
   12:	astore_1
   13:	monitorenter
   14:	aload_0
   15:	getfield	#34; //Field bitmap$0:I
   18:	iconst_4
   19:	iand
   20:	iconst_0
   21:	if_icmpne	49
   24:	aload_0
   25:	aload_0
   26:	getfield	#20; //Field parents$1:Lscala/collection/Sequence;
   29:	ldc	#36; //String  with 
   31:	invokeinterface	#42,  2; //InterfaceMethod scala/collection/generic/TraversableTemplate.mkString:(Ljava/lang/String;)Ljava/lang/String;
   36:	putfield	#44; //Field toString:Ljava/lang/String;
   39:	aload_0
   40:	aload_0
   41:	getfield	#34; //Field bitmap$0:I
   44:	iconst_4
   45:	ior
   46:	putfield	#34; //Field bitmap$0:I
   49:	getstatic	#50; //Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
   52:	pop
   53:	aload_1
   54:	monitorexit
   55:	aload_0
   56:	getfield	#44; //Field toString:Ljava/lang/String;
   59:	areturn
   60:	aload_1
   61:	monitorexit
   62:	athrow
  Exception table:
   from   to  target type
    14    55    60   any
  LineNumberTable: 
   line 155: 0
   line 28: 6
   line 155: 10
   line 28: 20
   line 155: 24


public java.lang.Class erasure();
  Code:
   Stack=3, Locals=2, Args_size=1
   0:	aload_0
   1:	getfield	#34; //Field bitmap$0:I
   4:	iconst_1
   5:	iand
   6:	iconst_0
   7:	if_icmpne	61
   10:	aload_0
   11:	dup
   12:	astore_1
   13:	monitorenter
   14:	aload_0
   15:	getfield	#34; //Field bitmap$0:I
   18:	iconst_1
   19:	iand
   20:	iconst_0
   21:	if_icmpne	55
   24:	aload_0
   25:	aload_0
   26:	getfield	#20; //Field parents$1:Lscala/collection/Sequence;
   29:	invokeinterface	#57,  1; //InterfaceMethod scala/collection/generic/IterableTemplate.first:()Ljava/lang/Object;
   34:	checkcast	#59; //class scala/reflect/Manifest
   37:	invokeinterface	#61,  1; //InterfaceMethod scala/reflect/Manifest.erasure:()Ljava/lang/Class;
   42:	putfield	#63; //Field erasure:Ljava/lang/Class;
   45:	aload_0
   46:	aload_0
   47:	getfield	#34; //Field bitmap$0:I
   50:	iconst_1
   51:	ior
   52:	putfield	#34; //Field bitmap$0:I
   55:	getstatic	#50; //Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
   58:	pop
   59:	aload_1
   60:	monitorexit
   61:	aload_0
   62:	getfield	#63; //Field erasure:Ljava/lang/Class;
   65:	areturn
   66:	aload_1
   67:	monitorexit
   68:	athrow
  Exception table:
   from   to  target type
    14    61    66   any
  LineNumberTable: 
   line 154: 0
   line 28: 6
   line 154: 10
   line 28: 20
   line 154: 24

  Signature: length = 0x2
   00 40 

public scala.Option typeArguments();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokestatic	#69; //Method scala/reflect/Manifest$class.typeArguments:(Lscala/reflect/Manifest;)Lscala/Option;
   4:	areturn
  LineNumberTable: 
   line 153: 0


public boolean equals(java.lang.Object);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#74; //Method scala/reflect/Manifest$class.equals:(Lscala/reflect/Manifest;Ljava/lang/Object;)Z
   5:	ireturn
  LineNumberTable: 
   line 153: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/reflect/Manifest$$anon$8;
   0      6      1    that       Ljava/lang/Object;


public boolean $greater$colon$greater(scala.reflect.Manifest);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#84; //Method scala/reflect/Manifest$class.$greater$colon$greater:(Lscala/reflect/Manifest;Lscala/reflect/Manifest;)Z
   5:	ireturn
  LineNumberTable: 
   line 153: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/reflect/Manifest$$anon$8;
   0      6      1    that       Lscala/reflect/Manifest;


public boolean $less$colon$less(scala.reflect.Manifest);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#88; //Method scala/reflect/Manifest$class.$less$colon$less:(Lscala/reflect/Manifest;Lscala/reflect/Manifest;)Z
   5:	ireturn
  LineNumberTable: 
   line 153: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/reflect/Manifest$$anon$8;
   0      6      1    that       Lscala/reflect/Manifest;


}

