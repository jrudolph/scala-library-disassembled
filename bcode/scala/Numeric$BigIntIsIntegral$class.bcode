Compiled from "Numeric.scala"
public abstract class scala.Numeric$BigIntIsIntegral$class extends java.lang.Object
  SourceFile: "Numeric.scala"
  Scala: length = 0x
   
  InnerClass: 
   public abstract #78= #75 of #77; //BigIntIsIntegral=class scala/Numeric$BigIntIsIntegral of class scala/Numeric
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	Numeric.scala;
const #3 = Asciz	$init$;
const #4 = Asciz	(Lscala/Numeric$BigIntIsIntegral;)V;
const #5 = Asciz	Code;
const #6 = Asciz	LineNumberTable;
const #7 = Asciz	$this;
const #8 = Asciz	Lscala/Numeric$BigIntIsIntegral;;
const #9 = Asciz	LocalVariableTable;
const #10 = Asciz	toDouble;
const #11 = Asciz	(Lscala/Numeric$BigIntIsIntegral;Lscala/BigInt;)D;
const #12 = Asciz	scala/BigInt;
const #13 = class	#12;	//  scala/BigInt
const #14 = Asciz	longValue;
const #15 = Asciz	()J;
const #16 = NameAndType	#14:#15;//  longValue:()J
const #17 = Method	#13.#16;	//  scala/BigInt.longValue:()J
const #18 = Asciz	x;
const #19 = Asciz	Lscala/BigInt;;
const #20 = Asciz	toFloat;
const #21 = Asciz	(Lscala/Numeric$BigIntIsIntegral;Lscala/BigInt;)F;
const #22 = Asciz	toLong;
const #23 = Asciz	(Lscala/Numeric$BigIntIsIntegral;Lscala/BigInt;)J;
const #24 = Asciz	toInt;
const #25 = Asciz	(Lscala/Numeric$BigIntIsIntegral;Lscala/BigInt;)I;
const #26 = Asciz	intValue;
const #27 = Asciz	()I;
const #28 = NameAndType	#26:#27;//  intValue:()I
const #29 = Method	#13.#28;	//  scala/BigInt.intValue:()I
const #30 = Asciz	fromInt;
const #31 = Asciz	(Lscala/Numeric$BigIntIsIntegral;I)Lscala/BigInt;;
const #32 = Asciz	scala/BigInt$;
const #33 = class	#32;	//  scala/BigInt$
const #34 = Asciz	MODULE$;
const #35 = Asciz	Lscala/BigInt$;;
const #36 = NameAndType	#34:#35;//  MODULE$:Lscala/BigInt$;
const #37 = Field	#33.#36;	//  scala/BigInt$.MODULE$:Lscala/BigInt$;
const #38 = Asciz	apply;
const #39 = Asciz	(I)Lscala/BigInt;;
const #40 = NameAndType	#38:#39;//  apply:(I)Lscala/BigInt;
const #41 = Method	#33.#40;	//  scala/BigInt$.apply:(I)Lscala/BigInt;
const #42 = Asciz	I;
const #43 = Asciz	negate;
const #44 = Asciz	(Lscala/Numeric$BigIntIsIntegral;Lscala/BigInt;)Lscala/BigInt;;
const #45 = Asciz	unary_$minus;
const #46 = Asciz	()Lscala/BigInt;;
const #47 = NameAndType	#45:#46;//  unary_$minus:()Lscala/BigInt;
const #48 = Method	#13.#47;	//  scala/BigInt.unary_$minus:()Lscala/BigInt;
const #49 = Asciz	rem;
const #50 = Asciz	(Lscala/Numeric$BigIntIsIntegral;Lscala/BigInt;Lscala/BigInt;)Lscala/BigInt;;
const #51 = Asciz	$percent;
const #52 = Asciz	(Lscala/BigInt;)Lscala/BigInt;;
const #53 = NameAndType	#51:#52;//  $percent:(Lscala/BigInt;)Lscala/BigInt;
const #54 = Method	#13.#53;	//  scala/BigInt.$percent:(Lscala/BigInt;)Lscala/BigInt;
const #55 = Asciz	y;
const #56 = Asciz	quot;
const #57 = Asciz	$div;
const #58 = NameAndType	#57:#52;//  $div:(Lscala/BigInt;)Lscala/BigInt;
const #59 = Method	#13.#58;	//  scala/BigInt.$div:(Lscala/BigInt;)Lscala/BigInt;
const #60 = Asciz	times;
const #61 = Asciz	$times;
const #62 = NameAndType	#61:#52;//  $times:(Lscala/BigInt;)Lscala/BigInt;
const #63 = Method	#13.#62;	//  scala/BigInt.$times:(Lscala/BigInt;)Lscala/BigInt;
const #64 = Asciz	minus;
const #65 = Asciz	$minus;
const #66 = NameAndType	#65:#52;//  $minus:(Lscala/BigInt;)Lscala/BigInt;
const #67 = Method	#13.#66;	//  scala/BigInt.$minus:(Lscala/BigInt;)Lscala/BigInt;
const #68 = Asciz	plus;
const #69 = Asciz	$plus;
const #70 = NameAndType	#69:#52;//  $plus:(Lscala/BigInt;)Lscala/BigInt;
const #71 = Method	#13.#70;	//  scala/BigInt.$plus:(Lscala/BigInt;)Lscala/BigInt;
const #72 = Asciz	Scala;
const #73 = Asciz	InnerClasses;
const #74 = Asciz	scala/Numeric$BigIntIsIntegral;
const #75 = class	#74;	//  scala/Numeric$BigIntIsIntegral
const #76 = Asciz	scala/Numeric;
const #77 = class	#76;	//  scala/Numeric
const #78 = Asciz	BigIntIsIntegral;
const #79 = Asciz	scala/Numeric$BigIntIsIntegral$class;
const #80 = class	#79;	//  scala/Numeric$BigIntIsIntegral$class
const #81 = Asciz	java/lang/Object;
const #82 = class	#81;	//  java/lang/Object

{
public static void $init$(scala.Numeric$BigIntIsIntegral);
  Code:
   Stack=0, Locals=1, Args_size=1
   0:	return
  LineNumberTable: 
   line 4: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      1      0    $this       Lscala/Numeric$BigIntIsIntegral;


public static double toDouble(scala.Numeric$BigIntIsIntegral, scala.BigInt);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_1
   1:	invokevirtual	#17; //Method scala/BigInt.longValue:()J
   4:	l2d
   5:	dreturn
  LineNumberTable: 
   line 15: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    $this       Lscala/Numeric$BigIntIsIntegral;
   0      6      1    x       Lscala/BigInt;


public static float toFloat(scala.Numeric$BigIntIsIntegral, scala.BigInt);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_1
   1:	invokevirtual	#17; //Method scala/BigInt.longValue:()J
   4:	l2f
   5:	freturn
  LineNumberTable: 
   line 14: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    $this       Lscala/Numeric$BigIntIsIntegral;
   0      6      1    x       Lscala/BigInt;


public static long toLong(scala.Numeric$BigIntIsIntegral, scala.BigInt);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_1
   1:	invokevirtual	#17; //Method scala/BigInt.longValue:()J
   4:	lreturn
  LineNumberTable: 
   line 13: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      5      0    $this       Lscala/Numeric$BigIntIsIntegral;
   0      5      1    x       Lscala/BigInt;


public static int toInt(scala.Numeric$BigIntIsIntegral, scala.BigInt);
  Code:
   Stack=1, Locals=2, Args_size=2
   0:	aload_1
   1:	invokevirtual	#29; //Method scala/BigInt.intValue:()I
   4:	ireturn
  LineNumberTable: 
   line 12: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      5      0    $this       Lscala/Numeric$BigIntIsIntegral;
   0      5      1    x       Lscala/BigInt;


public static scala.BigInt fromInt(scala.Numeric$BigIntIsIntegral, int);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	getstatic	#37; //Field scala/BigInt$.MODULE$:Lscala/BigInt$;
   3:	iload_1
   4:	invokevirtual	#41; //Method scala/BigInt$.apply:(I)Lscala/BigInt;
   7:	areturn
  LineNumberTable: 
   line 11: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      8      0    $this       Lscala/Numeric$BigIntIsIntegral;
   0      8      1    x       I


public static scala.BigInt negate(scala.Numeric$BigIntIsIntegral, scala.BigInt);
  Code:
   Stack=1, Locals=2, Args_size=2
   0:	aload_1
   1:	invokevirtual	#48; //Method scala/BigInt.unary_$minus:()Lscala/BigInt;
   4:	areturn
  LineNumberTable: 
   line 10: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      5      0    $this       Lscala/Numeric$BigIntIsIntegral;
   0      5      1    x       Lscala/BigInt;


public static scala.BigInt rem(scala.Numeric$BigIntIsIntegral, scala.BigInt, scala.BigInt);
  Code:
   Stack=2, Locals=3, Args_size=3
   0:	aload_1
   1:	aload_2
   2:	invokevirtual	#54; //Method scala/BigInt.$percent:(Lscala/BigInt;)Lscala/BigInt;
   5:	areturn
  LineNumberTable: 
   line 9: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    $this       Lscala/Numeric$BigIntIsIntegral;
   0      6      1    x       Lscala/BigInt;
   0      6      2    y       Lscala/BigInt;


public static scala.BigInt quot(scala.Numeric$BigIntIsIntegral, scala.BigInt, scala.BigInt);
  Code:
   Stack=2, Locals=3, Args_size=3
   0:	aload_1
   1:	aload_2
   2:	invokevirtual	#59; //Method scala/BigInt.$div:(Lscala/BigInt;)Lscala/BigInt;
   5:	areturn
  LineNumberTable: 
   line 8: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    $this       Lscala/Numeric$BigIntIsIntegral;
   0      6      1    x       Lscala/BigInt;
   0      6      2    y       Lscala/BigInt;


public static scala.BigInt times(scala.Numeric$BigIntIsIntegral, scala.BigInt, scala.BigInt);
  Code:
   Stack=2, Locals=3, Args_size=3
   0:	aload_1
   1:	aload_2
   2:	invokevirtual	#63; //Method scala/BigInt.$times:(Lscala/BigInt;)Lscala/BigInt;
   5:	areturn
  LineNumberTable: 
   line 7: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    $this       Lscala/Numeric$BigIntIsIntegral;
   0      6      1    x       Lscala/BigInt;
   0      6      2    y       Lscala/BigInt;


public static scala.BigInt minus(scala.Numeric$BigIntIsIntegral, scala.BigInt, scala.BigInt);
  Code:
   Stack=2, Locals=3, Args_size=3
   0:	aload_1
   1:	aload_2
   2:	invokevirtual	#67; //Method scala/BigInt.$minus:(Lscala/BigInt;)Lscala/BigInt;
   5:	areturn
  LineNumberTable: 
   line 6: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    $this       Lscala/Numeric$BigIntIsIntegral;
   0      6      1    x       Lscala/BigInt;
   0      6      2    y       Lscala/BigInt;


public static scala.BigInt plus(scala.Numeric$BigIntIsIntegral, scala.BigInt, scala.BigInt);
  Code:
   Stack=2, Locals=3, Args_size=3
   0:	aload_1
   1:	aload_2
   2:	invokevirtual	#71; //Method scala/BigInt.$plus:(Lscala/BigInt;)Lscala/BigInt;
   5:	areturn
  LineNumberTable: 
   line 5: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    $this       Lscala/Numeric$BigIntIsIntegral;
   0      6      1    x       Lscala/BigInt;
   0      6      2    y       Lscala/BigInt;


}

