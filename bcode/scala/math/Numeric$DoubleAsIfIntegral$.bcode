Compiled from "Numeric.scala"
public final class scala.math.Numeric$DoubleAsIfIntegral$ extends java.lang.Object implements scala.math.Numeric$DoubleAsIfIntegral,scala.math.Ordering$DoubleOrdering,scala.ScalaObject
  SourceFile: "Numeric.scala"
  Scala: length = 0x
   
  InnerClass: 
   public #248= #245 of #247; //Ops=class scala/math/Numeric$Ops of class scala/math/Numeric
   public #248= #250 of #140; //Ops=class scala/math/Ordering$Ops of class scala/math/Ordering
   public #253= #252 of #91; //IntegralOps=class scala/math/Integral$IntegralOps of class scala/math/Integral
   public abstract #254= #65 of #140; //DoubleOrdering=class scala/math/Ordering$DoubleOrdering of class scala/math/Ordering
   public abstract #255= #99 of #247; //DoubleIsConflicted=class scala/math/Numeric$DoubleIsConflicted of class scala/math/Numeric
   public abstract #256= #77 of #247; //DoubleAsIfIntegral=class scala/math/Numeric$DoubleAsIfIntegral of class scala/math/Numeric
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	Numeric.scala;
const #3 = Asciz	Scala;
const #4 = Asciz	MODULE$;
const #5 = Asciz	Lscala/math/Numeric$DoubleAsIfIntegral$;;
const #6 = Asciz	<clinit>;
const #7 = Asciz	()V;
const #8 = Asciz	Code;
const #9 = Asciz	scala/math/Numeric$DoubleAsIfIntegral$;
const #10 = class	#9;	//  scala/math/Numeric$DoubleAsIfIntegral$
const #11 = Asciz	<init>;
const #12 = NameAndType	#11:#7;//  "<init>":()V
const #13 = Method	#10.#12;	//  scala/math/Numeric$DoubleAsIfIntegral$."<init>":()V
const #14 = Asciz	LineNumberTable;
const #15 = Asciz	java/lang/Object;
const #16 = class	#15;	//  java/lang/Object
const #17 = Method	#16.#12;	//  java/lang/Object."<init>":()V
const #18 = NameAndType	#4:#5;//  MODULE$:Lscala/math/Numeric$DoubleAsIfIntegral$;
const #19 = Field	#10.#18;	//  scala/math/Numeric$DoubleAsIfIntegral$.MODULE$:Lscala/math/Numeric$DoubleAsIfIntegral$;
const #20 = Asciz	scala/math/PartialOrdering$class;
const #21 = class	#20;	//  scala/math/PartialOrdering$class
const #22 = Asciz	$init$;
const #23 = Asciz	(Lscala/math/PartialOrdering;)V;
const #24 = NameAndType	#22:#23;//  $init$:(Lscala/math/PartialOrdering;)V
const #25 = Method	#21.#24;	//  scala/math/PartialOrdering$class.$init$:(Lscala/math/PartialOrdering;)V
const #26 = Asciz	scala/math/Ordering$class;
const #27 = class	#26;	//  scala/math/Ordering$class
const #28 = Asciz	(Lscala/math/Ordering;)V;
const #29 = NameAndType	#22:#28;//  $init$:(Lscala/math/Ordering;)V
const #30 = Method	#27.#29;	//  scala/math/Ordering$class.$init$:(Lscala/math/Ordering;)V
const #31 = Asciz	scala/math/Numeric$class;
const #32 = class	#31;	//  scala/math/Numeric$class
const #33 = Asciz	(Lscala/math/Numeric;)V;
const #34 = NameAndType	#22:#33;//  $init$:(Lscala/math/Numeric;)V
const #35 = Method	#32.#34;	//  scala/math/Numeric$class.$init$:(Lscala/math/Numeric;)V
const #36 = Asciz	scala/math/Numeric$DoubleIsConflicted$class;
const #37 = class	#36;	//  scala/math/Numeric$DoubleIsConflicted$class
const #38 = Asciz	(Lscala/math/Numeric$DoubleIsConflicted;)V;
const #39 = NameAndType	#22:#38;//  $init$:(Lscala/math/Numeric$DoubleIsConflicted;)V
const #40 = Method	#37.#39;	//  scala/math/Numeric$DoubleIsConflicted$class.$init$:(Lscala/math/Numeric$DoubleIsConflicted;)V
const #41 = Asciz	scala/math/Integral$class;
const #42 = class	#41;	//  scala/math/Integral$class
const #43 = Asciz	(Lscala/math/Integral;)V;
const #44 = NameAndType	#22:#43;//  $init$:(Lscala/math/Integral;)V
const #45 = Method	#42.#44;	//  scala/math/Integral$class.$init$:(Lscala/math/Integral;)V
const #46 = Asciz	scala/math/Numeric$DoubleAsIfIntegral$class;
const #47 = class	#46;	//  scala/math/Numeric$DoubleAsIfIntegral$class
const #48 = Asciz	(Lscala/math/Numeric$DoubleAsIfIntegral;)V;
const #49 = NameAndType	#22:#48;//  $init$:(Lscala/math/Numeric$DoubleAsIfIntegral;)V
const #50 = Method	#47.#49;	//  scala/math/Numeric$DoubleAsIfIntegral$class.$init$:(Lscala/math/Numeric$DoubleAsIfIntegral;)V
const #51 = Asciz	scala/math/Ordering$DoubleOrdering$class;
const #52 = class	#51;	//  scala/math/Ordering$DoubleOrdering$class
const #53 = Asciz	(Lscala/math/Ordering$DoubleOrdering;)V;
const #54 = NameAndType	#22:#53;//  $init$:(Lscala/math/Ordering$DoubleOrdering;)V
const #55 = Method	#52.#54;	//  scala/math/Ordering$DoubleOrdering$class.$init$:(Lscala/math/Ordering$DoubleOrdering;)V
const #56 = Asciz	compare;
const #57 = Asciz	(Ljava/lang/Object;Ljava/lang/Object;)I;
const #58 = Asciz	scala/runtime/BoxesRunTime;
const #59 = class	#58;	//  scala/runtime/BoxesRunTime
const #60 = Asciz	unboxToDouble;
const #61 = Asciz	(Ljava/lang/Object;)D;
const #62 = NameAndType	#60:#61;//  unboxToDouble:(Ljava/lang/Object;)D
const #63 = Method	#59.#62;	//  scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
const #64 = Asciz	scala/math/Ordering$DoubleOrdering;
const #65 = class	#64;	//  scala/math/Ordering$DoubleOrdering
const #66 = Asciz	(DD)I;
const #67 = NameAndType	#56:#66;//  compare:(DD)I
const #68 = InterfaceMethod	#65.#67;	//  scala/math/Ordering$DoubleOrdering.compare:(DD)I
const #69 = Asciz	this;
const #70 = Asciz	x;
const #71 = Asciz	Ljava/lang/Object;;
const #72 = Asciz	y;
const #73 = Asciz	LocalVariableTable;
const #74 = Asciz	quot;
const #75 = Asciz	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;;
const #76 = Asciz	scala/math/Numeric$DoubleAsIfIntegral;
const #77 = class	#76;	//  scala/math/Numeric$DoubleAsIfIntegral
const #78 = Asciz	(DD)D;
const #79 = NameAndType	#74:#78;//  quot:(DD)D
const #80 = InterfaceMethod	#77.#79;	//  scala/math/Numeric$DoubleAsIfIntegral.quot:(DD)D
const #81 = Asciz	boxToDouble;
const #82 = Asciz	(D)Ljava/lang/Double;;
const #83 = NameAndType	#81:#82;//  boxToDouble:(D)Ljava/lang/Double;
const #84 = Method	#59.#83;	//  scala/runtime/BoxesRunTime.boxToDouble:(D)Ljava/lang/Double;
const #85 = Asciz	rem;
const #86 = NameAndType	#85:#78;//  rem:(DD)D
const #87 = InterfaceMethod	#77.#86;	//  scala/math/Numeric$DoubleAsIfIntegral.rem:(DD)D
const #88 = Asciz	mkNumericOps;
const #89 = Asciz	(Ljava/lang/Object;)Lscala/math/Numeric$Ops;;
const #90 = Asciz	scala/math/Integral;
const #91 = class	#90;	//  scala/math/Integral
const #92 = Asciz	(Ljava/lang/Object;)Lscala/math/Integral$IntegralOps;;
const #93 = NameAndType	#88:#92;//  mkNumericOps:(Ljava/lang/Object;)Lscala/math/Integral$IntegralOps;
const #94 = InterfaceMethod	#91.#93;	//  scala/math/Integral.mkNumericOps:(Ljava/lang/Object;)Lscala/math/Integral$IntegralOps;
const #95 = Asciz	lhs;
const #96 = Asciz	Signature;
const #97 = Asciz	plus;
const #98 = Asciz	scala/math/Numeric$DoubleIsConflicted;
const #99 = class	#98;	//  scala/math/Numeric$DoubleIsConflicted
const #100 = NameAndType	#97:#78;//  plus:(DD)D
const #101 = InterfaceMethod	#99.#100;	//  scala/math/Numeric$DoubleIsConflicted.plus:(DD)D
const #102 = Asciz	minus;
const #103 = NameAndType	#102:#78;//  minus:(DD)D
const #104 = InterfaceMethod	#99.#103;	//  scala/math/Numeric$DoubleIsConflicted.minus:(DD)D
const #105 = Asciz	times;
const #106 = NameAndType	#105:#78;//  times:(DD)D
const #107 = InterfaceMethod	#99.#106;	//  scala/math/Numeric$DoubleIsConflicted.times:(DD)D
const #108 = Asciz	negate;
const #109 = Asciz	(Ljava/lang/Object;)Ljava/lang/Object;;
const #110 = Asciz	(D)D;
const #111 = NameAndType	#108:#110;//  negate:(D)D
const #112 = InterfaceMethod	#99.#111;	//  scala/math/Numeric$DoubleIsConflicted.negate:(D)D
const #113 = Asciz	fromInt;
const #114 = Asciz	(I)Ljava/lang/Object;;
const #115 = Asciz	(I)D;
const #116 = NameAndType	#113:#115;//  fromInt:(I)D
const #117 = InterfaceMethod	#99.#116;	//  scala/math/Numeric$DoubleIsConflicted.fromInt:(I)D
const #118 = Asciz	I;
const #119 = Asciz	toInt;
const #120 = Asciz	(Ljava/lang/Object;)I;
const #121 = Asciz	(D)I;
const #122 = NameAndType	#119:#121;//  toInt:(D)I
const #123 = InterfaceMethod	#99.#122;	//  scala/math/Numeric$DoubleIsConflicted.toInt:(D)I
const #124 = Asciz	toLong;
const #125 = Asciz	(Ljava/lang/Object;)J;
const #126 = Asciz	(D)J;
const #127 = NameAndType	#124:#126;//  toLong:(D)J
const #128 = InterfaceMethod	#99.#127;	//  scala/math/Numeric$DoubleIsConflicted.toLong:(D)J
const #129 = Asciz	toFloat;
const #130 = Asciz	(Ljava/lang/Object;)F;
const #131 = Asciz	(D)F;
const #132 = NameAndType	#129:#131;//  toFloat:(D)F
const #133 = InterfaceMethod	#99.#132;	//  scala/math/Numeric$DoubleIsConflicted.toFloat:(D)F
const #134 = Asciz	toDouble;
const #135 = NameAndType	#134:#110;//  toDouble:(D)D
const #136 = InterfaceMethod	#99.#135;	//  scala/math/Numeric$DoubleIsConflicted.toDouble:(D)D
const #137 = Asciz	tryCompare;
const #138 = Asciz	(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Option;;
const #139 = Asciz	scala/math/Ordering;
const #140 = class	#139;	//  scala/math/Ordering
const #141 = Asciz	(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;;
const #142 = NameAndType	#137:#141;//  tryCompare:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
const #143 = InterfaceMethod	#140.#142;	//  scala/math/Ordering.tryCompare:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
const #144 = Asciz	reverse;
const #145 = Asciz	()Lscala/math/PartialOrdering;;
const #146 = Asciz	()Lscala/math/Ordering;;
const #147 = NameAndType	#144:#146;//  reverse:()Lscala/math/Ordering;
const #148 = InterfaceMethod	#140.#147;	//  scala/math/Ordering.reverse:()Lscala/math/Ordering;
const #149 = Asciz	mkOrderingOps;
const #150 = Asciz	(Ljava/lang/Object;)Lscala/math/Ordering$Ops;;
const #151 = Asciz	(Lscala/math/Ordering;Ljava/lang/Object;)Lscala/math/Ordering$Ops;;
const #152 = NameAndType	#149:#151;//  mkOrderingOps:(Lscala/math/Ordering;Ljava/lang/Object;)Lscala/math/Ordering$Ops;
const #153 = Method	#27.#152;	//  scala/math/Ordering$class.mkOrderingOps:(Lscala/math/Ordering;Ljava/lang/Object;)Lscala/math/Ordering$Ops;
const #154 = Asciz	on;
const #155 = Asciz	(Lscala/Function1;)Lscala/math/Ordering;;
const #156 = Asciz	(Lscala/math/Ordering;Lscala/Function1;)Lscala/math/Ordering;;
const #157 = NameAndType	#154:#156;//  on:(Lscala/math/Ordering;Lscala/Function1;)Lscala/math/Ordering;
const #158 = Method	#27.#157;	//  scala/math/Ordering$class.on:(Lscala/math/Ordering;Lscala/Function1;)Lscala/math/Ordering;
const #159 = Asciz	f;
const #160 = Asciz	Lscala/Function1;;
const #161 = Asciz	(Lscala/math/Ordering;)Lscala/math/Ordering;;
const #162 = NameAndType	#144:#161;//  reverse:(Lscala/math/Ordering;)Lscala/math/Ordering;
const #163 = Method	#27.#162;	//  scala/math/Ordering$class.reverse:(Lscala/math/Ordering;)Lscala/math/Ordering;
const #164 = Asciz	min;
const #165 = Asciz	(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;;
const #166 = NameAndType	#164:#165;//  min:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
const #167 = Method	#27.#166;	//  scala/math/Ordering$class.min:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
const #168 = Asciz	max;
const #169 = NameAndType	#168:#165;//  max:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
const #170 = Method	#27.#169;	//  scala/math/Ordering$class.max:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
const #171 = Asciz	equiv;
const #172 = Asciz	(Ljava/lang/Object;Ljava/lang/Object;)Z;
const #173 = Asciz	(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z;
const #174 = NameAndType	#171:#173;//  equiv:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #175 = Method	#27.#174;	//  scala/math/Ordering$class.equiv:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #176 = Asciz	gt;
const #177 = NameAndType	#176:#173;//  gt:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #178 = Method	#27.#177;	//  scala/math/Ordering$class.gt:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #179 = Asciz	lt;
const #180 = NameAndType	#179:#173;//  lt:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #181 = Method	#27.#180;	//  scala/math/Ordering$class.lt:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #182 = Asciz	gteq;
const #183 = NameAndType	#182:#173;//  gteq:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #184 = Method	#27.#183;	//  scala/math/Ordering$class.gteq:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #185 = Asciz	lteq;
const #186 = NameAndType	#185:#173;//  lteq:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #187 = Method	#27.#186;	//  scala/math/Ordering$class.lteq:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #188 = Asciz	(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;;
const #189 = NameAndType	#137:#188;//  tryCompare:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
const #190 = Method	#27.#189;	//  scala/math/Ordering$class.tryCompare:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
const #191 = Asciz	signum;
const #192 = Asciz	(Lscala/math/Numeric;Ljava/lang/Object;)I;
const #193 = NameAndType	#191:#192;//  signum:(Lscala/math/Numeric;Ljava/lang/Object;)I
const #194 = Method	#32.#193;	//  scala/math/Numeric$class.signum:(Lscala/math/Numeric;Ljava/lang/Object;)I
const #195 = Asciz	abs;
const #196 = Asciz	(Lscala/math/Numeric;Ljava/lang/Object;)Ljava/lang/Object;;
const #197 = NameAndType	#195:#196;//  abs:(Lscala/math/Numeric;Ljava/lang/Object;)Ljava/lang/Object;
const #198 = Method	#32.#197;	//  scala/math/Numeric$class.abs:(Lscala/math/Numeric;Ljava/lang/Object;)Ljava/lang/Object;
const #199 = Asciz	one;
const #200 = Asciz	()Ljava/lang/Object;;
const #201 = Asciz	(Lscala/math/Numeric;)Ljava/lang/Object;;
const #202 = NameAndType	#199:#201;//  one:(Lscala/math/Numeric;)Ljava/lang/Object;
const #203 = Method	#32.#202;	//  scala/math/Numeric$class.one:(Lscala/math/Numeric;)Ljava/lang/Object;
const #204 = Asciz	zero;
const #205 = NameAndType	#204:#201;//  zero:(Lscala/math/Numeric;)Ljava/lang/Object;
const #206 = Method	#32.#205;	//  scala/math/Numeric$class.zero:(Lscala/math/Numeric;)Ljava/lang/Object;
const #207 = Asciz	(Lscala/math/Numeric$DoubleIsConflicted;D)D;
const #208 = NameAndType	#134:#207;//  toDouble:(Lscala/math/Numeric$DoubleIsConflicted;D)D
const #209 = Method	#37.#208;	//  scala/math/Numeric$DoubleIsConflicted$class.toDouble:(Lscala/math/Numeric$DoubleIsConflicted;D)D
const #210 = Asciz	D;
const #211 = Asciz	(Lscala/math/Numeric$DoubleIsConflicted;D)F;
const #212 = NameAndType	#129:#211;//  toFloat:(Lscala/math/Numeric$DoubleIsConflicted;D)F
const #213 = Method	#37.#212;	//  scala/math/Numeric$DoubleIsConflicted$class.toFloat:(Lscala/math/Numeric$DoubleIsConflicted;D)F
const #214 = Asciz	(Lscala/math/Numeric$DoubleIsConflicted;D)J;
const #215 = NameAndType	#124:#214;//  toLong:(Lscala/math/Numeric$DoubleIsConflicted;D)J
const #216 = Method	#37.#215;	//  scala/math/Numeric$DoubleIsConflicted$class.toLong:(Lscala/math/Numeric$DoubleIsConflicted;D)J
const #217 = Asciz	(Lscala/math/Numeric$DoubleIsConflicted;D)I;
const #218 = NameAndType	#119:#217;//  toInt:(Lscala/math/Numeric$DoubleIsConflicted;D)I
const #219 = Method	#37.#218;	//  scala/math/Numeric$DoubleIsConflicted$class.toInt:(Lscala/math/Numeric$DoubleIsConflicted;D)I
const #220 = Asciz	(Lscala/math/Numeric$DoubleIsConflicted;I)D;
const #221 = NameAndType	#113:#220;//  fromInt:(Lscala/math/Numeric$DoubleIsConflicted;I)D
const #222 = Method	#37.#221;	//  scala/math/Numeric$DoubleIsConflicted$class.fromInt:(Lscala/math/Numeric$DoubleIsConflicted;I)D
const #223 = NameAndType	#108:#207;//  negate:(Lscala/math/Numeric$DoubleIsConflicted;D)D
const #224 = Method	#37.#223;	//  scala/math/Numeric$DoubleIsConflicted$class.negate:(Lscala/math/Numeric$DoubleIsConflicted;D)D
const #225 = Asciz	(Lscala/math/Numeric$DoubleIsConflicted;DD)D;
const #226 = NameAndType	#105:#225;//  times:(Lscala/math/Numeric$DoubleIsConflicted;DD)D
const #227 = Method	#37.#226;	//  scala/math/Numeric$DoubleIsConflicted$class.times:(Lscala/math/Numeric$DoubleIsConflicted;DD)D
const #228 = NameAndType	#102:#225;//  minus:(Lscala/math/Numeric$DoubleIsConflicted;DD)D
const #229 = Method	#37.#228;	//  scala/math/Numeric$DoubleIsConflicted$class.minus:(Lscala/math/Numeric$DoubleIsConflicted;DD)D
const #230 = NameAndType	#97:#225;//  plus:(Lscala/math/Numeric$DoubleIsConflicted;DD)D
const #231 = Method	#37.#230;	//  scala/math/Numeric$DoubleIsConflicted$class.plus:(Lscala/math/Numeric$DoubleIsConflicted;DD)D
const #232 = Asciz	(Lscala/math/Integral;Ljava/lang/Object;)Lscala/math/Integral$IntegralOps;;
const #233 = NameAndType	#88:#232;//  mkNumericOps:(Lscala/math/Integral;Ljava/lang/Object;)Lscala/math/Integral$IntegralOps;
const #234 = Method	#42.#233;	//  scala/math/Integral$class.mkNumericOps:(Lscala/math/Integral;Ljava/lang/Object;)Lscala/math/Integral$IntegralOps;
const #235 = Asciz	(Lscala/math/Numeric$DoubleAsIfIntegral;DD)D;
const #236 = NameAndType	#85:#235;//  rem:(Lscala/math/Numeric$DoubleAsIfIntegral;DD)D
const #237 = Method	#47.#236;	//  scala/math/Numeric$DoubleAsIfIntegral$class.rem:(Lscala/math/Numeric$DoubleAsIfIntegral;DD)D
const #238 = NameAndType	#74:#235;//  quot:(Lscala/math/Numeric$DoubleAsIfIntegral;DD)D
const #239 = Method	#47.#238;	//  scala/math/Numeric$DoubleAsIfIntegral$class.quot:(Lscala/math/Numeric$DoubleAsIfIntegral;DD)D
const #240 = Asciz	(Lscala/math/Ordering$DoubleOrdering;DD)I;
const #241 = NameAndType	#56:#240;//  compare:(Lscala/math/Ordering$DoubleOrdering;DD)I
const #242 = Method	#52.#241;	//  scala/math/Ordering$DoubleOrdering$class.compare:(Lscala/math/Ordering$DoubleOrdering;DD)I
const #243 = Asciz	InnerClasses;
const #244 = Asciz	scala/math/Numeric$Ops;
const #245 = class	#244;	//  scala/math/Numeric$Ops
const #246 = Asciz	scala/math/Numeric;
const #247 = class	#246;	//  scala/math/Numeric
const #248 = Asciz	Ops;
const #249 = Asciz	scala/math/Ordering$Ops;
const #250 = class	#249;	//  scala/math/Ordering$Ops
const #251 = Asciz	scala/math/Integral$IntegralOps;
const #252 = class	#251;	//  scala/math/Integral$IntegralOps
const #253 = Asciz	IntegralOps;
const #254 = Asciz	DoubleOrdering;
const #255 = Asciz	DoubleIsConflicted;
const #256 = Asciz	DoubleAsIfIntegral;
const #257 = Asciz	scala/ScalaObject;
const #258 = class	#257;	//  scala/ScalaObject

{
public static final scala.math.Numeric$DoubleAsIfIntegral$ MODULE$;

public static {};
  Code:
   Stack=1, Locals=0, Args_size=0
   0:	new	#10; //class scala/math/Numeric$DoubleAsIfIntegral$
   3:	invokespecial	#13; //Method "<init>":()V
   6:	return

public scala.math.Numeric$DoubleAsIfIntegral$();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokespecial	#17; //Method java/lang/Object."<init>":()V
   4:	aload_0
   5:	putstatic	#19; //Field MODULE$:Lscala/math/Numeric$DoubleAsIfIntegral$;
   8:	aload_0
   9:	invokestatic	#25; //Method scala/math/PartialOrdering$class.$init$:(Lscala/math/PartialOrdering;)V
   12:	aload_0
   13:	invokestatic	#30; //Method scala/math/Ordering$class.$init$:(Lscala/math/Ordering;)V
   16:	aload_0
   17:	invokestatic	#35; //Method scala/math/Numeric$class.$init$:(Lscala/math/Numeric;)V
   20:	aload_0
   21:	invokestatic	#40; //Method scala/math/Numeric$DoubleIsConflicted$class.$init$:(Lscala/math/Numeric$DoubleIsConflicted;)V
   24:	aload_0
   25:	invokestatic	#45; //Method scala/math/Integral$class.$init$:(Lscala/math/Integral;)V
   28:	aload_0
   29:	invokestatic	#50; //Method scala/math/Numeric$DoubleAsIfIntegral$class.$init$:(Lscala/math/Numeric$DoubleAsIfIntegral;)V
   32:	aload_0
   33:	invokestatic	#55; //Method scala/math/Ordering$DoubleOrdering$class.$init$:(Lscala/math/Ordering$DoubleOrdering;)V
   36:	return
  LineNumberTable: 
   line 152: 0


public int compare(java.lang.Object, java.lang.Object);
  Code:
   Stack=5, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   5:	aload_2
   6:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   9:	invokeinterface	#68,  5; //InterfaceMethod scala/math/Ordering$DoubleOrdering.compare:(DD)I
   14:	ireturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      15      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      15      1    x       Ljava/lang/Object;
   0      15      2    y       Ljava/lang/Object;


public java.lang.Object quot(java.lang.Object, java.lang.Object);
  Code:
   Stack=5, Locals=5, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   5:	aload_2
   6:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   9:	invokeinterface	#80,  5; //InterfaceMethod scala/math/Numeric$DoubleAsIfIntegral.quot:(DD)D
   14:	dstore_3
   15:	dload_3
   16:	invokestatic	#84; //Method scala/runtime/BoxesRunTime.boxToDouble:(D)Ljava/lang/Double;
   19:	areturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      20      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      20      1    x       Ljava/lang/Object;
   0      20      2    y       Ljava/lang/Object;


public java.lang.Object rem(java.lang.Object, java.lang.Object);
  Code:
   Stack=5, Locals=5, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   5:	aload_2
   6:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   9:	invokeinterface	#87,  5; //InterfaceMethod scala/math/Numeric$DoubleAsIfIntegral.rem:(DD)D
   14:	dstore_3
   15:	dload_3
   16:	invokestatic	#84; //Method scala/runtime/BoxesRunTime.boxToDouble:(D)Ljava/lang/Double;
   19:	areturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      20      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      20      1    x       Ljava/lang/Object;
   0      20      2    y       Ljava/lang/Object;


public scala.math.Numeric$Ops mkNumericOps(java.lang.Object);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokeinterface	#94,  2; //InterfaceMethod scala/math/Integral.mkNumericOps:(Ljava/lang/Object;)Lscala/math/Integral$IntegralOps;
   7:	areturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      8      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      8      1    lhs       Ljava/lang/Object;

  Signature: length = 0x2
   00 59 

public java.lang.Object plus(java.lang.Object, java.lang.Object);
  Code:
   Stack=5, Locals=5, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   5:	aload_2
   6:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   9:	invokeinterface	#101,  5; //InterfaceMethod scala/math/Numeric$DoubleIsConflicted.plus:(DD)D
   14:	dstore_3
   15:	dload_3
   16:	invokestatic	#84; //Method scala/runtime/BoxesRunTime.boxToDouble:(D)Ljava/lang/Double;
   19:	areturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      20      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      20      1    x       Ljava/lang/Object;
   0      20      2    y       Ljava/lang/Object;


public java.lang.Object minus(java.lang.Object, java.lang.Object);
  Code:
   Stack=5, Locals=5, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   5:	aload_2
   6:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   9:	invokeinterface	#104,  5; //InterfaceMethod scala/math/Numeric$DoubleIsConflicted.minus:(DD)D
   14:	dstore_3
   15:	dload_3
   16:	invokestatic	#84; //Method scala/runtime/BoxesRunTime.boxToDouble:(D)Ljava/lang/Double;
   19:	areturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      20      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      20      1    x       Ljava/lang/Object;
   0      20      2    y       Ljava/lang/Object;


public java.lang.Object times(java.lang.Object, java.lang.Object);
  Code:
   Stack=5, Locals=5, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   5:	aload_2
   6:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   9:	invokeinterface	#107,  5; //InterfaceMethod scala/math/Numeric$DoubleIsConflicted.times:(DD)D
   14:	dstore_3
   15:	dload_3
   16:	invokestatic	#84; //Method scala/runtime/BoxesRunTime.boxToDouble:(D)Ljava/lang/Double;
   19:	areturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      20      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      20      1    x       Ljava/lang/Object;
   0      20      2    y       Ljava/lang/Object;


public java.lang.Object negate(java.lang.Object);
  Code:
   Stack=3, Locals=4, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   5:	invokeinterface	#112,  3; //InterfaceMethod scala/math/Numeric$DoubleIsConflicted.negate:(D)D
   10:	dstore_2
   11:	dload_2
   12:	invokestatic	#84; //Method scala/runtime/BoxesRunTime.boxToDouble:(D)Ljava/lang/Double;
   15:	areturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      16      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      16      1    x       Ljava/lang/Object;


public java.lang.Object fromInt(int);
  Code:
   Stack=2, Locals=4, Args_size=2
   0:	aload_0
   1:	iload_1
   2:	invokeinterface	#117,  2; //InterfaceMethod scala/math/Numeric$DoubleIsConflicted.fromInt:(I)D
   7:	dstore_2
   8:	dload_2
   9:	invokestatic	#84; //Method scala/runtime/BoxesRunTime.boxToDouble:(D)Ljava/lang/Double;
   12:	areturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      13      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      13      1    x       I


public int toInt(java.lang.Object);
  Code:
   Stack=3, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   5:	invokeinterface	#123,  3; //InterfaceMethod scala/math/Numeric$DoubleIsConflicted.toInt:(D)I
   10:	ireturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      11      1    x       Ljava/lang/Object;


public long toLong(java.lang.Object);
  Code:
   Stack=3, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   5:	invokeinterface	#128,  3; //InterfaceMethod scala/math/Numeric$DoubleIsConflicted.toLong:(D)J
   10:	lreturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      11      1    x       Ljava/lang/Object;


public float toFloat(java.lang.Object);
  Code:
   Stack=3, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   5:	invokeinterface	#133,  3; //InterfaceMethod scala/math/Numeric$DoubleIsConflicted.toFloat:(D)F
   10:	freturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      11      1    x       Ljava/lang/Object;


public double toDouble(java.lang.Object);
  Code:
   Stack=3, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   5:	invokeinterface	#136,  3; //InterfaceMethod scala/math/Numeric$DoubleIsConflicted.toDouble:(D)D
   10:	dreturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      11      1    x       Ljava/lang/Object;


public scala.Option tryCompare(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokeinterface	#143,  3; //InterfaceMethod scala/math/Ordering.tryCompare:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
   8:	areturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      9      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      9      1    x       Ljava/lang/Object;
   0      9      2    y       Ljava/lang/Object;


public scala.math.PartialOrdering reverse();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokeinterface	#148,  1; //InterfaceMethod scala/math/Ordering.reverse:()Lscala/math/Ordering;
   6:	areturn
  LineNumberTable: 
   line 152: 0


public scala.math.Ordering$Ops mkOrderingOps(java.lang.Object);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#153; //Method scala/math/Ordering$class.mkOrderingOps:(Lscala/math/Ordering;Ljava/lang/Object;)Lscala/math/Ordering$Ops;
   5:	areturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      6      1    lhs       Ljava/lang/Object;

  Signature: length = 0x2
   00 FFFFFF96 

public scala.math.Ordering on(scala.Function1);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#158; //Method scala/math/Ordering$class.on:(Lscala/math/Ordering;Lscala/Function1;)Lscala/math/Ordering;
   5:	areturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      6      1    f       Lscala/Function1;


public scala.math.Ordering reverse();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokestatic	#163; //Method scala/math/Ordering$class.reverse:(Lscala/math/Ordering;)Lscala/math/Ordering;
   4:	areturn
  LineNumberTable: 
   line 152: 0


public java.lang.Object min(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokestatic	#167; //Method scala/math/Ordering$class.min:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   6:	areturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public java.lang.Object max(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokestatic	#170; //Method scala/math/Ordering$class.max:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   6:	areturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public boolean equiv(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokestatic	#175; //Method scala/math/Ordering$class.equiv:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
   6:	ireturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public boolean gt(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokestatic	#178; //Method scala/math/Ordering$class.gt:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
   6:	ireturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public boolean lt(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokestatic	#181; //Method scala/math/Ordering$class.lt:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
   6:	ireturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public boolean gteq(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokestatic	#184; //Method scala/math/Ordering$class.gteq:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
   6:	ireturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public boolean lteq(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokestatic	#187; //Method scala/math/Ordering$class.lteq:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
   6:	ireturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public scala.Some tryCompare(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokestatic	#190; //Method scala/math/Ordering$class.tryCompare:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
   6:	areturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public int signum(java.lang.Object);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#194; //Method scala/math/Numeric$class.signum:(Lscala/math/Numeric;Ljava/lang/Object;)I
   5:	ireturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      6      1    x       Ljava/lang/Object;


public java.lang.Object abs(java.lang.Object);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#198; //Method scala/math/Numeric$class.abs:(Lscala/math/Numeric;Ljava/lang/Object;)Ljava/lang/Object;
   5:	areturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      6      1    x       Ljava/lang/Object;


public java.lang.Object one();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokestatic	#203; //Method scala/math/Numeric$class.one:(Lscala/math/Numeric;)Ljava/lang/Object;
   4:	areturn
  LineNumberTable: 
   line 152: 0


public java.lang.Object zero();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokestatic	#206; //Method scala/math/Numeric$class.zero:(Lscala/math/Numeric;)Ljava/lang/Object;
   4:	areturn
  LineNumberTable: 
   line 152: 0


public double toDouble(double);
  Code:
   Stack=3, Locals=3, Args_size=2
   0:	aload_0
   1:	dload_1
   2:	invokestatic	#209; //Method scala/math/Numeric$DoubleIsConflicted$class.toDouble:(Lscala/math/Numeric$DoubleIsConflicted;D)D
   5:	dreturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      6      1    x       D


public float toFloat(double);
  Code:
   Stack=3, Locals=3, Args_size=2
   0:	aload_0
   1:	dload_1
   2:	invokestatic	#213; //Method scala/math/Numeric$DoubleIsConflicted$class.toFloat:(Lscala/math/Numeric$DoubleIsConflicted;D)F
   5:	freturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      6      1    x       D


public long toLong(double);
  Code:
   Stack=3, Locals=3, Args_size=2
   0:	aload_0
   1:	dload_1
   2:	invokestatic	#216; //Method scala/math/Numeric$DoubleIsConflicted$class.toLong:(Lscala/math/Numeric$DoubleIsConflicted;D)J
   5:	lreturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      6      1    x       D


public int toInt(double);
  Code:
   Stack=3, Locals=3, Args_size=2
   0:	aload_0
   1:	dload_1
   2:	invokestatic	#219; //Method scala/math/Numeric$DoubleIsConflicted$class.toInt:(Lscala/math/Numeric$DoubleIsConflicted;D)I
   5:	ireturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      6      1    x       D


public double fromInt(int);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	iload_1
   2:	invokestatic	#222; //Method scala/math/Numeric$DoubleIsConflicted$class.fromInt:(Lscala/math/Numeric$DoubleIsConflicted;I)D
   5:	dreturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      6      1    x       I


public double negate(double);
  Code:
   Stack=3, Locals=3, Args_size=2
   0:	aload_0
   1:	dload_1
   2:	invokestatic	#224; //Method scala/math/Numeric$DoubleIsConflicted$class.negate:(Lscala/math/Numeric$DoubleIsConflicted;D)D
   5:	dreturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      6      1    x       D


public double times(double, double);
  Code:
   Stack=5, Locals=5, Args_size=3
   0:	aload_0
   1:	dload_1
   2:	dload_3
   3:	invokestatic	#227; //Method scala/math/Numeric$DoubleIsConflicted$class.times:(Lscala/math/Numeric$DoubleIsConflicted;DD)D
   6:	dreturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      7      1    x       D
   0      7      3    y       D


public double minus(double, double);
  Code:
   Stack=5, Locals=5, Args_size=3
   0:	aload_0
   1:	dload_1
   2:	dload_3
   3:	invokestatic	#229; //Method scala/math/Numeric$DoubleIsConflicted$class.minus:(Lscala/math/Numeric$DoubleIsConflicted;DD)D
   6:	dreturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      7      1    x       D
   0      7      3    y       D


public double plus(double, double);
  Code:
   Stack=5, Locals=5, Args_size=3
   0:	aload_0
   1:	dload_1
   2:	dload_3
   3:	invokestatic	#231; //Method scala/math/Numeric$DoubleIsConflicted$class.plus:(Lscala/math/Numeric$DoubleIsConflicted;DD)D
   6:	dreturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      7      1    x       D
   0      7      3    y       D


public scala.math.Integral$IntegralOps mkNumericOps(java.lang.Object);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#234; //Method scala/math/Integral$class.mkNumericOps:(Lscala/math/Integral;Ljava/lang/Object;)Lscala/math/Integral$IntegralOps;
   5:	areturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      6      1    lhs       Ljava/lang/Object;

  Signature: length = 0x2
   00 5C 

public double rem(double, double);
  Code:
   Stack=5, Locals=5, Args_size=3
   0:	aload_0
   1:	dload_1
   2:	dload_3
   3:	invokestatic	#237; //Method scala/math/Numeric$DoubleAsIfIntegral$class.rem:(Lscala/math/Numeric$DoubleAsIfIntegral;DD)D
   6:	dreturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      7      1    x       D
   0      7      3    y       D


public double quot(double, double);
  Code:
   Stack=5, Locals=5, Args_size=3
   0:	aload_0
   1:	dload_1
   2:	dload_3
   3:	invokestatic	#239; //Method scala/math/Numeric$DoubleAsIfIntegral$class.quot:(Lscala/math/Numeric$DoubleAsIfIntegral;DD)D
   6:	dreturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      7      1    x       D
   0      7      3    y       D


public int compare(double, double);
  Code:
   Stack=5, Locals=5, Args_size=3
   0:	aload_0
   1:	dload_1
   2:	dload_3
   3:	invokestatic	#242; //Method scala/math/Ordering$DoubleOrdering$class.compare:(Lscala/math/Ordering$DoubleOrdering;DD)I
   6:	ireturn
  LineNumberTable: 
   line 152: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleAsIfIntegral$;
   0      7      1    x       D
   0      7      3    y       D


}

