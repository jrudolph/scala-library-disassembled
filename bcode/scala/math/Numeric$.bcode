Compiled from "Numeric.scala"
public final class scala.math.Numeric$ extends java.lang.Object implements scala.ScalaObject
  SourceFile: "Numeric.scala"
  Scala: length = 0x
   
  InnerClass: 
   public Ops=class scala/math/Numeric$Ops of class scala/math/Numeric
   public abstract IntIsIntegral=class scala/math/Numeric$IntIsIntegral of class scala/math/Numeric
   public abstract LongIsIntegral=class scala/math/Numeric$LongIsIntegral of class scala/math/Numeric
   public abstract ByteIsIntegral=class scala/math/Numeric$ByteIsIntegral of class scala/math/Numeric
   public abstract ShortIsIntegral=class scala/math/Numeric$ShortIsIntegral of class scala/math/Numeric
   public abstract BigIntIsIntegral=class scala/math/Numeric$BigIntIsIntegral of class scala/math/Numeric
   public abstract FloatIsFractional=class scala/math/Numeric$FloatIsFractional of class scala/math/Numeric
   public abstract DoubleAsIfIntegral=class scala/math/Numeric$DoubleAsIfIntegral of class scala/math/Numeric
   public abstract DoubleIsFractional=class scala/math/Numeric$DoubleIsFractional of class scala/math/Numeric
   public abstract DoubleIsConflicted=class scala/math/Numeric$DoubleIsConflicted of class scala/math/Numeric
   public abstract IntIsIntegral$class=class scala/math/Numeric$IntIsIntegral$class of class scala/math/Numeric
   public abstract ByteIsIntegral$class=class scala/math/Numeric$ByteIsIntegral$class of class scala/math/Numeric
   public abstract LongIsIntegral$class=class scala/math/Numeric$LongIsIntegral$class of class scala/math/Numeric
   public abstract ShortIsIntegral$class=class scala/math/Numeric$ShortIsIntegral$class of class scala/math/Numeric
   public abstract BigIntIsIntegral$class=class scala/math/Numeric$BigIntIsIntegral$class of class scala/math/Numeric
   public abstract BigDecimalAsIfIntegral=class scala/math/Numeric$BigDecimalAsIfIntegral of class scala/math/Numeric
   public abstract BigDecimalIsFractional=class scala/math/Numeric$BigDecimalIsFractional of class scala/math/Numeric
   public abstract BigDecimalIsConflicted=class scala/math/Numeric$BigDecimalIsConflicted of class scala/math/Numeric
   public abstract FloatIsFractional$class=class scala/math/Numeric$FloatIsFractional$class of class scala/math/Numeric
   public abstract DoubleIsFractional$class=class scala/math/Numeric$DoubleIsFractional$class of class scala/math/Numeric
   public abstract DoubleIsConflicted$class=class scala/math/Numeric$DoubleIsConflicted$class of class scala/math/Numeric
   public abstract DoubleAsIfIntegral$class=class scala/math/Numeric$DoubleAsIfIntegral$class of class scala/math/Numeric
   public abstract BigDecimalIsFractional$class=class scala/math/Numeric$BigDecimalIsFractional$class of class scala/math/Numeric
   public abstract BigDecimalIsConflicted$class=class scala/math/Numeric$BigDecimalIsConflicted$class of class scala/math/Numeric
   public abstract BigDecimalAsIfIntegral$class=class scala/math/Numeric$BigDecimalAsIfIntegral$class of class scala/math/Numeric
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	Numeric.scala;
Asciz	Scala;
Asciz	MODULE$;
Asciz	Lscala/math/Numeric$;;
Asciz	<clinit>;
Asciz	()V;
Asciz	Code;
Asciz	scala/math/Numeric$;
class	scala/math/Numeric$
Asciz	<init>;
NameAndType	"<init>":()V
Method	scala/math/Numeric$."<init>":()V
Asciz	LineNumberTable;
Asciz	java/lang/Object;
class	java/lang/Object
Method	java/lang/Object."<init>":()V
NameAndType	MODULE$:Lscala/math/Numeric$;
Field	scala/math/Numeric$.MODULE$:Lscala/math/Numeric$;
Asciz	InnerClasses;
Asciz	scala/math/Numeric$Ops;
class	scala/math/Numeric$Ops
Asciz	scala/math/Numeric;
class	scala/math/Numeric
Asciz	Ops;
Asciz	scala/math/Numeric$IntIsIntegral;
class	scala/math/Numeric$IntIsIntegral
Asciz	IntIsIntegral;
Asciz	scala/math/Numeric$LongIsIntegral;
class	scala/math/Numeric$LongIsIntegral
Asciz	LongIsIntegral;
Asciz	scala/math/Numeric$ByteIsIntegral;
class	scala/math/Numeric$ByteIsIntegral
Asciz	ByteIsIntegral;
Asciz	scala/math/Numeric$ShortIsIntegral;
class	scala/math/Numeric$ShortIsIntegral
Asciz	ShortIsIntegral;
Asciz	scala/math/Numeric$BigIntIsIntegral;
class	scala/math/Numeric$BigIntIsIntegral
Asciz	BigIntIsIntegral;
Asciz	scala/math/Numeric$FloatIsFractional;
class	scala/math/Numeric$FloatIsFractional
Asciz	FloatIsFractional;
Asciz	scala/math/Numeric$DoubleAsIfIntegral;
class	scala/math/Numeric$DoubleAsIfIntegral
Asciz	DoubleAsIfIntegral;
Asciz	scala/math/Numeric$DoubleIsFractional;
class	scala/math/Numeric$DoubleIsFractional
Asciz	DoubleIsFractional;
Asciz	scala/math/Numeric$DoubleIsConflicted;
class	scala/math/Numeric$DoubleIsConflicted
Asciz	DoubleIsConflicted;
Asciz	scala/math/Numeric$IntIsIntegral$class;
class	scala/math/Numeric$IntIsIntegral$class
Asciz	IntIsIntegral$class;
Asciz	scala/math/Numeric$ByteIsIntegral$class;
class	scala/math/Numeric$ByteIsIntegral$class
Asciz	ByteIsIntegral$class;
Asciz	scala/math/Numeric$LongIsIntegral$class;
class	scala/math/Numeric$LongIsIntegral$class
Asciz	LongIsIntegral$class;
Asciz	scala/math/Numeric$ShortIsIntegral$class;
class	scala/math/Numeric$ShortIsIntegral$class
Asciz	ShortIsIntegral$class;
Asciz	scala/math/Numeric$BigIntIsIntegral$class;
class	scala/math/Numeric$BigIntIsIntegral$class
Asciz	BigIntIsIntegral$class;
Asciz	scala/math/Numeric$BigDecimalAsIfIntegral;
class	scala/math/Numeric$BigDecimalAsIfIntegral
Asciz	BigDecimalAsIfIntegral;
Asciz	scala/math/Numeric$BigDecimalIsFractional;
class	scala/math/Numeric$BigDecimalIsFractional
Asciz	BigDecimalIsFractional;
Asciz	scala/math/Numeric$BigDecimalIsConflicted;
class	scala/math/Numeric$BigDecimalIsConflicted
Asciz	BigDecimalIsConflicted;
Asciz	scala/math/Numeric$FloatIsFractional$class;
class	scala/math/Numeric$FloatIsFractional$class
Asciz	FloatIsFractional$class;
Asciz	scala/math/Numeric$DoubleIsFractional$class;
class	scala/math/Numeric$DoubleIsFractional$class
Asciz	DoubleIsFractional$class;
Asciz	scala/math/Numeric$DoubleIsConflicted$class;
class	scala/math/Numeric$DoubleIsConflicted$class
Asciz	DoubleIsConflicted$class;
Asciz	scala/math/Numeric$DoubleAsIfIntegral$class;
class	scala/math/Numeric$DoubleAsIfIntegral$class
Asciz	DoubleAsIfIntegral$class;
Asciz	scala/math/Numeric$BigDecimalIsFractional$class;
class	scala/math/Numeric$BigDecimalIsFractional$class
Asciz	BigDecimalIsFractional$class;
Asciz	scala/math/Numeric$BigDecimalIsConflicted$class;
class	scala/math/Numeric$BigDecimalIsConflicted$class
Asciz	BigDecimalIsConflicted$class;
Asciz	scala/math/Numeric$BigDecimalAsIfIntegral$class;
class	scala/math/Numeric$BigDecimalAsIfIntegral$class
Asciz	BigDecimalAsIfIntegral$class;
Asciz	scala/ScalaObject;
class	scala/ScalaObject

{
public static final scala.math.Numeric$ MODULE$;
  Signature: Lscala/math/Numeric$;

public static {};
  Signature: ()V
  Code:
   Stack=1, Locals=0, Args_size=0
	new	class scala/math/Numeric$
	invokespecial	Method "<init>":()V
	return
  Labels:

private scala.math.Numeric$();
  Signature: ()V
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokespecial	Method java/lang/Object."<init>":()V
	aload_0
	putstatic	Field MODULE$:Lscala/math/Numeric$;
	return
  Labels:

}

