Compiled from "Numeric.scala"
public abstract class scala.math.Numeric$LongIsIntegral$class extends java.lang.Object
  SourceFile: "Numeric.scala"
  Scala: length = 0x
   
  InnerClass: 
   public abstract LongIsIntegral=class scala/math/Numeric$LongIsIntegral of class scala/math/Numeric
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	Numeric.scala;
Asciz	$init$;
Asciz	(Lscala/math/Numeric$LongIsIntegral;)V;
Asciz	Code;
Asciz	LineNumberTable;
Asciz	$this;
Asciz	Lscala/math/Numeric$LongIsIntegral;;
Asciz	LocalVariableTable;
Asciz	toDouble;
Asciz	(Lscala/math/Numeric$LongIsIntegral;J)D;
Asciz	x;
Asciz	J;
Asciz	toFloat;
Asciz	(Lscala/math/Numeric$LongIsIntegral;J)F;
Asciz	toLong;
Asciz	(Lscala/math/Numeric$LongIsIntegral;J)J;
Asciz	toInt;
Asciz	(Lscala/math/Numeric$LongIsIntegral;J)I;
Asciz	fromInt;
Asciz	(Lscala/math/Numeric$LongIsIntegral;I)J;
Asciz	I;
Asciz	negate;
Asciz	rem;
Asciz	(Lscala/math/Numeric$LongIsIntegral;JJ)J;
Asciz	y;
Asciz	quot;
Asciz	times;
Asciz	minus;
Asciz	plus;
Asciz	Scala;
Asciz	InnerClasses;
Asciz	scala/math/Numeric$LongIsIntegral;
class	scala/math/Numeric$LongIsIntegral
Asciz	scala/math/Numeric;
class	scala/math/Numeric
Asciz	LongIsIntegral;
Asciz	scala/math/Numeric$LongIsIntegral$class;
class	scala/math/Numeric$LongIsIntegral$class
Asciz	java/lang/Object;
class	java/lang/Object

{
public static void $init$(scala.math.Numeric$LongIsIntegral);
  Signature: (Lscala/math/Numeric$LongIsIntegral;)V
  Code:
   Stack=0, Locals=1, Args_size=1
	return
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      1      0    $this       Lscala/math/Numeric$LongIsIntegral;


public static double toDouble(scala.math.Numeric$LongIsIntegral, long);
  Signature: (Lscala/math/Numeric$LongIsIntegral;J)D
  Code:
   Stack=2, Locals=3, Args_size=2
	lload_1
	l2d
	dreturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      3      0    $this       Lscala/math/Numeric$LongIsIntegral;
   0      3      1    x       J


public static float toFloat(scala.math.Numeric$LongIsIntegral, long);
  Signature: (Lscala/math/Numeric$LongIsIntegral;J)F
  Code:
   Stack=2, Locals=3, Args_size=2
	lload_1
	l2f
	freturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      3      0    $this       Lscala/math/Numeric$LongIsIntegral;
   0      3      1    x       J


public static long toLong(scala.math.Numeric$LongIsIntegral, long);
  Signature: (Lscala/math/Numeric$LongIsIntegral;J)J
  Code:
   Stack=2, Locals=3, Args_size=2
	lload_1
	lreturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      2      0    $this       Lscala/math/Numeric$LongIsIntegral;
   0      2      1    x       J


public static int toInt(scala.math.Numeric$LongIsIntegral, long);
  Signature: (Lscala/math/Numeric$LongIsIntegral;J)I
  Code:
   Stack=2, Locals=3, Args_size=2
	lload_1
	l2i
	ireturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      3      0    $this       Lscala/math/Numeric$LongIsIntegral;
   0      3      1    x       J


public static long fromInt(scala.math.Numeric$LongIsIntegral, int);
  Signature: (Lscala/math/Numeric$LongIsIntegral;I)J
  Code:
   Stack=2, Locals=2, Args_size=2
	iload_1
	i2l
	lreturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      3      0    $this       Lscala/math/Numeric$LongIsIntegral;
   0      3      1    x       I


public static long negate(scala.math.Numeric$LongIsIntegral, long);
  Signature: (Lscala/math/Numeric$LongIsIntegral;J)J
  Code:
   Stack=2, Locals=3, Args_size=2
	lload_1
	lneg
	lreturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      3      0    $this       Lscala/math/Numeric$LongIsIntegral;
   0      3      1    x       J


public static long rem(scala.math.Numeric$LongIsIntegral, long, long);
  Signature: (Lscala/math/Numeric$LongIsIntegral;JJ)J
  Code:
   Stack=4, Locals=5, Args_size=3
	lload_1
	lload_3
	lrem
	lreturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      4      0    $this       Lscala/math/Numeric$LongIsIntegral;
   0      4      1    x       J
   0      4      3    y       J


public static long quot(scala.math.Numeric$LongIsIntegral, long, long);
  Signature: (Lscala/math/Numeric$LongIsIntegral;JJ)J
  Code:
   Stack=4, Locals=5, Args_size=3
	lload_1
	lload_3
	ldiv
	lreturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      4      0    $this       Lscala/math/Numeric$LongIsIntegral;
   0      4      1    x       J
   0      4      3    y       J


public static long times(scala.math.Numeric$LongIsIntegral, long, long);
  Signature: (Lscala/math/Numeric$LongIsIntegral;JJ)J
  Code:
   Stack=4, Locals=5, Args_size=3
	lload_1
	lload_3
	lmul
	lreturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      4      0    $this       Lscala/math/Numeric$LongIsIntegral;
   0      4      1    x       J
   0      4      3    y       J


public static long minus(scala.math.Numeric$LongIsIntegral, long, long);
  Signature: (Lscala/math/Numeric$LongIsIntegral;JJ)J
  Code:
   Stack=4, Locals=5, Args_size=3
	lload_1
	lload_3
	lsub
	lreturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      4      0    $this       Lscala/math/Numeric$LongIsIntegral;
   0      4      1    x       J
   0      4      3    y       J


public static long plus(scala.math.Numeric$LongIsIntegral, long, long);
  Signature: (Lscala/math/Numeric$LongIsIntegral;JJ)J
  Code:
   Stack=4, Locals=5, Args_size=3
	lload_1
	lload_3
	ladd
	lreturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      4      0    $this       Lscala/math/Numeric$LongIsIntegral;
   0      4      1    x       J
   0      4      3    y       J


}

