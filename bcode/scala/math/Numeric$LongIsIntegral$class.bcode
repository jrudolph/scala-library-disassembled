Compiled from "Numeric.scala"
public abstract class scala.math.Numeric$LongIsIntegral$class extends java.lang.Object
  SourceFile: "Numeric.scala"
  Scala: length = 0x
   
  InnerClass: 
   public abstract #37= #34 of #36; //LongIsIntegral=class scala/math/Numeric$LongIsIntegral of class scala/math/Numeric
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	Numeric.scala;
const #3 = Asciz	$init$;
const #4 = Asciz	(Lscala/math/Numeric$LongIsIntegral;)V;
const #5 = Asciz	Code;
const #6 = Asciz	LineNumberTable;
const #7 = Asciz	$this;
const #8 = Asciz	Lscala/math/Numeric$LongIsIntegral;;
const #9 = Asciz	LocalVariableTable;
const #10 = Asciz	toDouble;
const #11 = Asciz	(Lscala/math/Numeric$LongIsIntegral;J)D;
const #12 = Asciz	x;
const #13 = Asciz	J;
const #14 = Asciz	toFloat;
const #15 = Asciz	(Lscala/math/Numeric$LongIsIntegral;J)F;
const #16 = Asciz	toLong;
const #17 = Asciz	(Lscala/math/Numeric$LongIsIntegral;J)J;
const #18 = Asciz	toInt;
const #19 = Asciz	(Lscala/math/Numeric$LongIsIntegral;J)I;
const #20 = Asciz	fromInt;
const #21 = Asciz	(Lscala/math/Numeric$LongIsIntegral;I)J;
const #22 = Asciz	I;
const #23 = Asciz	negate;
const #24 = Asciz	rem;
const #25 = Asciz	(Lscala/math/Numeric$LongIsIntegral;JJ)J;
const #26 = Asciz	y;
const #27 = Asciz	quot;
const #28 = Asciz	times;
const #29 = Asciz	minus;
const #30 = Asciz	plus;
const #31 = Asciz	Scala;
const #32 = Asciz	InnerClasses;
const #33 = Asciz	scala/math/Numeric$LongIsIntegral;
const #34 = class	#33;	//  scala/math/Numeric$LongIsIntegral
const #35 = Asciz	scala/math/Numeric;
const #36 = class	#35;	//  scala/math/Numeric
const #37 = Asciz	LongIsIntegral;
const #38 = Asciz	scala/math/Numeric$LongIsIntegral$class;
const #39 = class	#38;	//  scala/math/Numeric$LongIsIntegral$class
const #40 = Asciz	java/lang/Object;
const #41 = class	#40;	//  java/lang/Object

{
public static void $init$(scala.math.Numeric$LongIsIntegral);
  Code:
   Stack=0, Locals=1, Args_size=1
   0:	return
  LineNumberTable: 
   line 78: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      1      0    $this       Lscala/math/Numeric$LongIsIntegral;


public static double toDouble(scala.math.Numeric$LongIsIntegral, long);
  Code:
   Stack=2, Locals=3, Args_size=2
   0:	lload_1
   1:	l2d
   2:	dreturn
  LineNumberTable: 
   line 89: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      3      0    $this       Lscala/math/Numeric$LongIsIntegral;
   0      3      1    x       J


public static float toFloat(scala.math.Numeric$LongIsIntegral, long);
  Code:
   Stack=2, Locals=3, Args_size=2
   0:	lload_1
   1:	l2f
   2:	freturn
  LineNumberTable: 
   line 88: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      3      0    $this       Lscala/math/Numeric$LongIsIntegral;
   0      3      1    x       J


public static long toLong(scala.math.Numeric$LongIsIntegral, long);
  Code:
   Stack=2, Locals=3, Args_size=2
   0:	lload_1
   1:	lreturn
  LineNumberTable: 
   line 87: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      2      0    $this       Lscala/math/Numeric$LongIsIntegral;
   0      2      1    x       J


public static int toInt(scala.math.Numeric$LongIsIntegral, long);
  Code:
   Stack=2, Locals=3, Args_size=2
   0:	lload_1
   1:	l2i
   2:	ireturn
  LineNumberTable: 
   line 86: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      3      0    $this       Lscala/math/Numeric$LongIsIntegral;
   0      3      1    x       J


public static long fromInt(scala.math.Numeric$LongIsIntegral, int);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	iload_1
   1:	i2l
   2:	lreturn
  LineNumberTable: 
   line 85: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      3      0    $this       Lscala/math/Numeric$LongIsIntegral;
   0      3      1    x       I


public static long negate(scala.math.Numeric$LongIsIntegral, long);
  Code:
   Stack=2, Locals=3, Args_size=2
   0:	lload_1
   1:	lneg
   2:	lreturn
  LineNumberTable: 
   line 84: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      3      0    $this       Lscala/math/Numeric$LongIsIntegral;
   0      3      1    x       J


public static long rem(scala.math.Numeric$LongIsIntegral, long, long);
  Code:
   Stack=4, Locals=5, Args_size=3
   0:	lload_1
   1:	lload_3
   2:	lrem
   3:	lreturn
  LineNumberTable: 
   line 83: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      4      0    $this       Lscala/math/Numeric$LongIsIntegral;
   0      4      1    x       J
   0      4      3    y       J


public static long quot(scala.math.Numeric$LongIsIntegral, long, long);
  Code:
   Stack=4, Locals=5, Args_size=3
   0:	lload_1
   1:	lload_3
   2:	ldiv
   3:	lreturn
  LineNumberTable: 
   line 82: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      4      0    $this       Lscala/math/Numeric$LongIsIntegral;
   0      4      1    x       J
   0      4      3    y       J


public static long times(scala.math.Numeric$LongIsIntegral, long, long);
  Code:
   Stack=4, Locals=5, Args_size=3
   0:	lload_1
   1:	lload_3
   2:	lmul
   3:	lreturn
  LineNumberTable: 
   line 81: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      4      0    $this       Lscala/math/Numeric$LongIsIntegral;
   0      4      1    x       J
   0      4      3    y       J


public static long minus(scala.math.Numeric$LongIsIntegral, long, long);
  Code:
   Stack=4, Locals=5, Args_size=3
   0:	lload_1
   1:	lload_3
   2:	lsub
   3:	lreturn
  LineNumberTable: 
   line 80: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      4      0    $this       Lscala/math/Numeric$LongIsIntegral;
   0      4      1    x       J
   0      4      3    y       J


public static long plus(scala.math.Numeric$LongIsIntegral, long, long);
  Code:
   Stack=4, Locals=5, Args_size=3
   0:	lload_1
   1:	lload_3
   2:	ladd
   3:	lreturn
  LineNumberTable: 
   line 79: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      4      0    $this       Lscala/math/Numeric$LongIsIntegral;
   0      4      1    x       J
   0      4      3    y       J


}

