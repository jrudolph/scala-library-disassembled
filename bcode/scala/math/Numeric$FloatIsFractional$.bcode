Compiled from "Numeric.scala"
public final class scala.math.Numeric$FloatIsFractional$ extends java.lang.Object implements scala.math.Numeric$FloatIsFractional,scala.math.Ordering$FloatOrdering,scala.ScalaObject
  SourceFile: "Numeric.scala"
  Scala: length = 0x
   
  InnerClass: 
   public Ops=class scala/math/Numeric$Ops of class scala/math/Numeric
   public Ops=class scala/math/Ordering$Ops of class scala/math/Ordering
   public abstract FloatOrdering=class scala/math/Ordering$FloatOrdering of class scala/math/Ordering
   public FractionalOps=class scala/math/Fractional$FractionalOps of class scala/math/Fractional
   public abstract FloatIsFractional=class scala/math/Numeric$FloatIsFractional of class scala/math/Numeric
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	Numeric.scala;
Asciz	Scala;
Asciz	MODULE$;
Asciz	Lscala/math/Numeric$FloatIsFractional$;;
Asciz	<clinit>;
Asciz	()V;
Asciz	Code;
Asciz	scala/math/Numeric$FloatIsFractional$;
class	scala/math/Numeric$FloatIsFractional$
Asciz	<init>;
NameAndType	"<init>":()V
Method	scala/math/Numeric$FloatIsFractional$."<init>":()V
Asciz	LineNumberTable;
Asciz	java/lang/Object;
class	java/lang/Object
Method	java/lang/Object."<init>":()V
NameAndType	MODULE$:Lscala/math/Numeric$FloatIsFractional$;
Field	scala/math/Numeric$FloatIsFractional$.MODULE$:Lscala/math/Numeric$FloatIsFractional$;
Asciz	scala/math/PartialOrdering$class;
class	scala/math/PartialOrdering$class
Asciz	$init$;
Asciz	(Lscala/math/PartialOrdering;)V;
NameAndType	$init$:(Lscala/math/PartialOrdering;)V
Method	scala/math/PartialOrdering$class.$init$:(Lscala/math/PartialOrdering;)V
Asciz	scala/math/Ordering$class;
class	scala/math/Ordering$class
Asciz	(Lscala/math/Ordering;)V;
NameAndType	$init$:(Lscala/math/Ordering;)V
Method	scala/math/Ordering$class.$init$:(Lscala/math/Ordering;)V
Asciz	scala/math/Numeric$class;
class	scala/math/Numeric$class
Asciz	(Lscala/math/Numeric;)V;
NameAndType	$init$:(Lscala/math/Numeric;)V
Method	scala/math/Numeric$class.$init$:(Lscala/math/Numeric;)V
Asciz	scala/math/Fractional$class;
class	scala/math/Fractional$class
Asciz	(Lscala/math/Fractional;)V;
NameAndType	$init$:(Lscala/math/Fractional;)V
Method	scala/math/Fractional$class.$init$:(Lscala/math/Fractional;)V
Asciz	scala/math/Numeric$FloatIsFractional$class;
class	scala/math/Numeric$FloatIsFractional$class
Asciz	(Lscala/math/Numeric$FloatIsFractional;)V;
NameAndType	$init$:(Lscala/math/Numeric$FloatIsFractional;)V
Method	scala/math/Numeric$FloatIsFractional$class.$init$:(Lscala/math/Numeric$FloatIsFractional;)V
Asciz	scala/math/Ordering$FloatOrdering$class;
class	scala/math/Ordering$FloatOrdering$class
Asciz	(Lscala/math/Ordering$FloatOrdering;)V;
NameAndType	$init$:(Lscala/math/Ordering$FloatOrdering;)V
Method	scala/math/Ordering$FloatOrdering$class.$init$:(Lscala/math/Ordering$FloatOrdering;)V
Asciz	compare;
Asciz	(Ljava/lang/Object;Ljava/lang/Object;)I;
Asciz	scala/runtime/BoxesRunTime;
class	scala/runtime/BoxesRunTime
Asciz	unboxToFloat;
Asciz	(Ljava/lang/Object;)F;
NameAndType	unboxToFloat:(Ljava/lang/Object;)F
Method	scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
Asciz	scala/math/Ordering$FloatOrdering;
class	scala/math/Ordering$FloatOrdering
Asciz	(FF)I;
NameAndType	compare:(FF)I
InterfaceMethod	scala/math/Ordering$FloatOrdering.compare:(FF)I
Asciz	this;
Asciz	x;
Asciz	Ljava/lang/Object;;
Asciz	y;
Asciz	LocalVariableTable;
Asciz	plus;
Asciz	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;;
Asciz	scala/math/Numeric$FloatIsFractional;
class	scala/math/Numeric$FloatIsFractional
Asciz	(FF)F;
NameAndType	plus:(FF)F
InterfaceMethod	scala/math/Numeric$FloatIsFractional.plus:(FF)F
Asciz	boxToFloat;
Asciz	(F)Ljava/lang/Float;;
NameAndType	boxToFloat:(F)Ljava/lang/Float;
Method	scala/runtime/BoxesRunTime.boxToFloat:(F)Ljava/lang/Float;
Asciz	minus;
NameAndType	minus:(FF)F
InterfaceMethod	scala/math/Numeric$FloatIsFractional.minus:(FF)F
Asciz	times;
NameAndType	times:(FF)F
InterfaceMethod	scala/math/Numeric$FloatIsFractional.times:(FF)F
Asciz	div;
NameAndType	div:(FF)F
InterfaceMethod	scala/math/Numeric$FloatIsFractional.div:(FF)F
Asciz	negate;
Asciz	(Ljava/lang/Object;)Ljava/lang/Object;;
Asciz	(F)F;
NameAndType	negate:(F)F
InterfaceMethod	scala/math/Numeric$FloatIsFractional.negate:(F)F
Asciz	fromInt;
Asciz	(I)Ljava/lang/Object;;
Asciz	(I)F;
NameAndType	fromInt:(I)F
InterfaceMethod	scala/math/Numeric$FloatIsFractional.fromInt:(I)F
Asciz	I;
Asciz	toInt;
Asciz	(Ljava/lang/Object;)I;
Asciz	(F)I;
NameAndType	toInt:(F)I
InterfaceMethod	scala/math/Numeric$FloatIsFractional.toInt:(F)I
Asciz	toLong;
Asciz	(Ljava/lang/Object;)J;
Asciz	(F)J;
NameAndType	toLong:(F)J
InterfaceMethod	scala/math/Numeric$FloatIsFractional.toLong:(F)J
Asciz	toFloat;
NameAndType	toFloat:(F)F
InterfaceMethod	scala/math/Numeric$FloatIsFractional.toFloat:(F)F
Asciz	toDouble;
Asciz	(Ljava/lang/Object;)D;
Asciz	(F)D;
NameAndType	toDouble:(F)D
InterfaceMethod	scala/math/Numeric$FloatIsFractional.toDouble:(F)D
Asciz	mkNumericOps;
Asciz	(Ljava/lang/Object;)Lscala/math/Numeric$Ops;;
Asciz	scala/math/Fractional;
class	scala/math/Fractional
Asciz	(Ljava/lang/Object;)Lscala/math/Fractional$FractionalOps;;
NameAndType	mkNumericOps:(Ljava/lang/Object;)Lscala/math/Fractional$FractionalOps;
InterfaceMethod	scala/math/Fractional.mkNumericOps:(Ljava/lang/Object;)Lscala/math/Fractional$FractionalOps;
Asciz	lhs;
Asciz	Signature;
Asciz	tryCompare;
Asciz	(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Option;;
Asciz	scala/math/Ordering;
class	scala/math/Ordering
Asciz	(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;;
NameAndType	tryCompare:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
InterfaceMethod	scala/math/Ordering.tryCompare:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
Asciz	reverse;
Asciz	()Lscala/math/PartialOrdering;;
Asciz	()Lscala/math/Ordering;;
NameAndType	reverse:()Lscala/math/Ordering;
InterfaceMethod	scala/math/Ordering.reverse:()Lscala/math/Ordering;
Asciz	mkOrderingOps;
Asciz	(Ljava/lang/Object;)Lscala/math/Ordering$Ops;;
Asciz	(Lscala/math/Ordering;Ljava/lang/Object;)Lscala/math/Ordering$Ops;;
NameAndType	mkOrderingOps:(Lscala/math/Ordering;Ljava/lang/Object;)Lscala/math/Ordering$Ops;
Method	scala/math/Ordering$class.mkOrderingOps:(Lscala/math/Ordering;Ljava/lang/Object;)Lscala/math/Ordering$Ops;
Asciz	on;
Asciz	(Lscala/Function1;)Lscala/math/Ordering;;
Asciz	(Lscala/math/Ordering;Lscala/Function1;)Lscala/math/Ordering;;
NameAndType	on:(Lscala/math/Ordering;Lscala/Function1;)Lscala/math/Ordering;
Method	scala/math/Ordering$class.on:(Lscala/math/Ordering;Lscala/Function1;)Lscala/math/Ordering;
Asciz	f;
Asciz	Lscala/Function1;;
Asciz	(Lscala/math/Ordering;)Lscala/math/Ordering;;
NameAndType	reverse:(Lscala/math/Ordering;)Lscala/math/Ordering;
Method	scala/math/Ordering$class.reverse:(Lscala/math/Ordering;)Lscala/math/Ordering;
Asciz	min;
Asciz	(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;;
NameAndType	min:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
Method	scala/math/Ordering$class.min:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
Asciz	max;
NameAndType	max:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
Method	scala/math/Ordering$class.max:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
Asciz	equiv;
Asciz	(Ljava/lang/Object;Ljava/lang/Object;)Z;
Asciz	(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z;
NameAndType	equiv:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
Method	scala/math/Ordering$class.equiv:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
Asciz	gt;
NameAndType	gt:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
Method	scala/math/Ordering$class.gt:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
Asciz	lt;
NameAndType	lt:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
Method	scala/math/Ordering$class.lt:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
Asciz	gteq;
NameAndType	gteq:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
Method	scala/math/Ordering$class.gteq:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
Asciz	lteq;
NameAndType	lteq:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
Method	scala/math/Ordering$class.lteq:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
Asciz	(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;;
NameAndType	tryCompare:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
Method	scala/math/Ordering$class.tryCompare:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
Asciz	signum;
Asciz	(Lscala/math/Numeric;Ljava/lang/Object;)I;
NameAndType	signum:(Lscala/math/Numeric;Ljava/lang/Object;)I
Method	scala/math/Numeric$class.signum:(Lscala/math/Numeric;Ljava/lang/Object;)I
Asciz	abs;
Asciz	(Lscala/math/Numeric;Ljava/lang/Object;)Ljava/lang/Object;;
NameAndType	abs:(Lscala/math/Numeric;Ljava/lang/Object;)Ljava/lang/Object;
Method	scala/math/Numeric$class.abs:(Lscala/math/Numeric;Ljava/lang/Object;)Ljava/lang/Object;
Asciz	one;
Asciz	()Ljava/lang/Object;;
Asciz	(Lscala/math/Numeric;)Ljava/lang/Object;;
NameAndType	one:(Lscala/math/Numeric;)Ljava/lang/Object;
Method	scala/math/Numeric$class.one:(Lscala/math/Numeric;)Ljava/lang/Object;
Asciz	zero;
NameAndType	zero:(Lscala/math/Numeric;)Ljava/lang/Object;
Method	scala/math/Numeric$class.zero:(Lscala/math/Numeric;)Ljava/lang/Object;
Asciz	(Lscala/math/Fractional;Ljava/lang/Object;)Lscala/math/Fractional$FractionalOps;;
NameAndType	mkNumericOps:(Lscala/math/Fractional;Ljava/lang/Object;)Lscala/math/Fractional$FractionalOps;
Method	scala/math/Fractional$class.mkNumericOps:(Lscala/math/Fractional;Ljava/lang/Object;)Lscala/math/Fractional$FractionalOps;
Asciz	(Lscala/math/Numeric$FloatIsFractional;F)D;
NameAndType	toDouble:(Lscala/math/Numeric$FloatIsFractional;F)D
Method	scala/math/Numeric$FloatIsFractional$class.toDouble:(Lscala/math/Numeric$FloatIsFractional;F)D
Asciz	F;
Asciz	(Lscala/math/Numeric$FloatIsFractional;F)F;
NameAndType	toFloat:(Lscala/math/Numeric$FloatIsFractional;F)F
Method	scala/math/Numeric$FloatIsFractional$class.toFloat:(Lscala/math/Numeric$FloatIsFractional;F)F
Asciz	(Lscala/math/Numeric$FloatIsFractional;F)J;
NameAndType	toLong:(Lscala/math/Numeric$FloatIsFractional;F)J
Method	scala/math/Numeric$FloatIsFractional$class.toLong:(Lscala/math/Numeric$FloatIsFractional;F)J
Asciz	(Lscala/math/Numeric$FloatIsFractional;F)I;
NameAndType	toInt:(Lscala/math/Numeric$FloatIsFractional;F)I
Method	scala/math/Numeric$FloatIsFractional$class.toInt:(Lscala/math/Numeric$FloatIsFractional;F)I
Asciz	(Lscala/math/Numeric$FloatIsFractional;I)F;
NameAndType	fromInt:(Lscala/math/Numeric$FloatIsFractional;I)F
Method	scala/math/Numeric$FloatIsFractional$class.fromInt:(Lscala/math/Numeric$FloatIsFractional;I)F
NameAndType	negate:(Lscala/math/Numeric$FloatIsFractional;F)F
Method	scala/math/Numeric$FloatIsFractional$class.negate:(Lscala/math/Numeric$FloatIsFractional;F)F
Asciz	(Lscala/math/Numeric$FloatIsFractional;FF)F;
NameAndType	div:(Lscala/math/Numeric$FloatIsFractional;FF)F
Method	scala/math/Numeric$FloatIsFractional$class.div:(Lscala/math/Numeric$FloatIsFractional;FF)F
NameAndType	times:(Lscala/math/Numeric$FloatIsFractional;FF)F
Method	scala/math/Numeric$FloatIsFractional$class.times:(Lscala/math/Numeric$FloatIsFractional;FF)F
NameAndType	minus:(Lscala/math/Numeric$FloatIsFractional;FF)F
Method	scala/math/Numeric$FloatIsFractional$class.minus:(Lscala/math/Numeric$FloatIsFractional;FF)F
NameAndType	plus:(Lscala/math/Numeric$FloatIsFractional;FF)F
Method	scala/math/Numeric$FloatIsFractional$class.plus:(Lscala/math/Numeric$FloatIsFractional;FF)F
Asciz	(Lscala/math/Ordering$FloatOrdering;FF)I;
NameAndType	compare:(Lscala/math/Ordering$FloatOrdering;FF)I
Method	scala/math/Ordering$FloatOrdering$class.compare:(Lscala/math/Ordering$FloatOrdering;FF)I
Asciz	InnerClasses;
Asciz	scala/math/Numeric$Ops;
class	scala/math/Numeric$Ops
Asciz	scala/math/Numeric;
class	scala/math/Numeric
Asciz	Ops;
Asciz	scala/math/Ordering$Ops;
class	scala/math/Ordering$Ops
Asciz	FloatOrdering;
Asciz	scala/math/Fractional$FractionalOps;
class	scala/math/Fractional$FractionalOps
Asciz	FractionalOps;
Asciz	FloatIsFractional;
Asciz	scala/ScalaObject;
class	scala/ScalaObject

{
public static final scala.math.Numeric$FloatIsFractional$ MODULE$;
  Signature: Lscala/math/Numeric$FloatIsFractional$;

public static {};
  Signature: ()V
  Code:
   Stack=1, Locals=0, Args_size=0
	new	class scala/math/Numeric$FloatIsFractional$
	invokespecial	Method "<init>":()V
	return
  Labels:

public scala.math.Numeric$FloatIsFractional$();
  Signature: ()V
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokespecial	Method java/lang/Object."<init>":()V
	aload_0
	putstatic	Field MODULE$:Lscala/math/Numeric$FloatIsFractional$;
	aload_0
	invokestatic	Method scala/math/PartialOrdering$class.$init$:(Lscala/math/PartialOrdering;)V
	aload_0
	invokestatic	Method scala/math/Ordering$class.$init$:(Lscala/math/Ordering;)V
	aload_0
	invokestatic	Method scala/math/Numeric$class.$init$:(Lscala/math/Numeric;)V
	aload_0
	invokestatic	Method scala/math/Fractional$class.$init$:(Lscala/math/Fractional;)V
	aload_0
	invokestatic	Method scala/math/Numeric$FloatIsFractional$class.$init$:(Lscala/math/Numeric$FloatIsFractional;)V
	aload_0
	invokestatic	Method scala/math/Ordering$FloatOrdering$class.$init$:(Lscala/math/Ordering$FloatOrdering;)V
	return
  Labels:

public int compare(java.lang.Object, java.lang.Object);
  Signature: (Ljava/lang/Object;Ljava/lang/Object;)I
  Code:
   Stack=3, Locals=3, Args_size=3
	aload_0
	aload_1
	invokestatic	Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
	aload_2
	invokestatic	Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
	invokeinterface	InterfaceMethod scala/math/Ordering$FloatOrdering.compare:(FF)I
	ireturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      15      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      15      1    x       Ljava/lang/Object;
   0      15      2    y       Ljava/lang/Object;


public java.lang.Object plus(java.lang.Object, java.lang.Object);
  Signature: (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  Code:
   Stack=3, Locals=4, Args_size=3
	aload_0
	aload_1
	invokestatic	Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
	aload_2
	invokestatic	Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
	invokeinterface	InterfaceMethod scala/math/Numeric$FloatIsFractional.plus:(FF)F
	fstore_3
	fload_3
	invokestatic	Method scala/runtime/BoxesRunTime.boxToFloat:(F)Ljava/lang/Float;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      20      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      20      1    x       Ljava/lang/Object;
   0      20      2    y       Ljava/lang/Object;


public java.lang.Object minus(java.lang.Object, java.lang.Object);
  Signature: (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  Code:
   Stack=3, Locals=4, Args_size=3
	aload_0
	aload_1
	invokestatic	Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
	aload_2
	invokestatic	Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
	invokeinterface	InterfaceMethod scala/math/Numeric$FloatIsFractional.minus:(FF)F
	fstore_3
	fload_3
	invokestatic	Method scala/runtime/BoxesRunTime.boxToFloat:(F)Ljava/lang/Float;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      20      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      20      1    x       Ljava/lang/Object;
   0      20      2    y       Ljava/lang/Object;


public java.lang.Object times(java.lang.Object, java.lang.Object);
  Signature: (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  Code:
   Stack=3, Locals=4, Args_size=3
	aload_0
	aload_1
	invokestatic	Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
	aload_2
	invokestatic	Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
	invokeinterface	InterfaceMethod scala/math/Numeric$FloatIsFractional.times:(FF)F
	fstore_3
	fload_3
	invokestatic	Method scala/runtime/BoxesRunTime.boxToFloat:(F)Ljava/lang/Float;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      20      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      20      1    x       Ljava/lang/Object;
   0      20      2    y       Ljava/lang/Object;


public java.lang.Object div(java.lang.Object, java.lang.Object);
  Signature: (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  Code:
   Stack=3, Locals=4, Args_size=3
	aload_0
	aload_1
	invokestatic	Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
	aload_2
	invokestatic	Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
	invokeinterface	InterfaceMethod scala/math/Numeric$FloatIsFractional.div:(FF)F
	fstore_3
	fload_3
	invokestatic	Method scala/runtime/BoxesRunTime.boxToFloat:(F)Ljava/lang/Float;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      20      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      20      1    x       Ljava/lang/Object;
   0      20      2    y       Ljava/lang/Object;


public java.lang.Object negate(java.lang.Object);
  Signature: (Ljava/lang/Object;)Ljava/lang/Object;
  Code:
   Stack=2, Locals=3, Args_size=2
	aload_0
	aload_1
	invokestatic	Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
	invokeinterface	InterfaceMethod scala/math/Numeric$FloatIsFractional.negate:(F)F
	fstore_2
	fload_2
	invokestatic	Method scala/runtime/BoxesRunTime.boxToFloat:(F)Ljava/lang/Float;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      16      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      16      1    x       Ljava/lang/Object;


public java.lang.Object fromInt(int);
  Signature: (I)Ljava/lang/Object;
  Code:
   Stack=2, Locals=3, Args_size=2
	aload_0
	iload_1
	invokeinterface	InterfaceMethod scala/math/Numeric$FloatIsFractional.fromInt:(I)F
	fstore_2
	fload_2
	invokestatic	Method scala/runtime/BoxesRunTime.boxToFloat:(F)Ljava/lang/Float;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      13      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      13      1    x       I


public int toInt(java.lang.Object);
  Signature: (Ljava/lang/Object;)I
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	invokestatic	Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
	invokeinterface	InterfaceMethod scala/math/Numeric$FloatIsFractional.toInt:(F)I
	ireturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      11      1    x       Ljava/lang/Object;


public long toLong(java.lang.Object);
  Signature: (Ljava/lang/Object;)J
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	invokestatic	Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
	invokeinterface	InterfaceMethod scala/math/Numeric$FloatIsFractional.toLong:(F)J
	lreturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      11      1    x       Ljava/lang/Object;


public float toFloat(java.lang.Object);
  Signature: (Ljava/lang/Object;)F
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	invokestatic	Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
	invokeinterface	InterfaceMethod scala/math/Numeric$FloatIsFractional.toFloat:(F)F
	freturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      11      1    x       Ljava/lang/Object;


public double toDouble(java.lang.Object);
  Signature: (Ljava/lang/Object;)D
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	invokestatic	Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
	invokeinterface	InterfaceMethod scala/math/Numeric$FloatIsFractional.toDouble:(F)D
	dreturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      11      1    x       Ljava/lang/Object;


public scala.math.Numeric$Ops mkNumericOps(java.lang.Object);
  Signature: (Ljava/lang/Object;)Lscala/math/Numeric$Ops;
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	invokeinterface	InterfaceMethod scala/math/Fractional.mkNumericOps:(Ljava/lang/Object;)Lscala/math/Fractional$FractionalOps;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      8      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      8      1    lhs       Ljava/lang/Object;

  Signature: length = 0x2
   00 77 

public scala.Option tryCompare(java.lang.Object, java.lang.Object);
  Signature: (Ljava/lang/Object;Ljava/lang/Object;)Lscala/Option;
  Code:
   Stack=3, Locals=3, Args_size=3
	aload_0
	aload_1
	aload_2
	invokeinterface	InterfaceMethod scala/math/Ordering.tryCompare:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      9      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      9      1    x       Ljava/lang/Object;
   0      9      2    y       Ljava/lang/Object;


public scala.math.PartialOrdering reverse();
  Signature: ()Lscala/math/PartialOrdering;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokeinterface	InterfaceMethod scala/math/Ordering.reverse:()Lscala/math/Ordering;
	areturn
  Labels:

public scala.math.Ordering$Ops mkOrderingOps(java.lang.Object);
  Signature: (Ljava/lang/Object;)Lscala/math/Ordering$Ops;
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	invokestatic	Method scala/math/Ordering$class.mkOrderingOps:(Lscala/math/Ordering;Ljava/lang/Object;)Lscala/math/Ordering$Ops;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      6      1    lhs       Ljava/lang/Object;

  Signature: length = 0x2
   00 FFFFFF8C 

public scala.math.Ordering on(scala.Function1);
  Signature: (Lscala/Function1;)Lscala/math/Ordering;
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	invokestatic	Method scala/math/Ordering$class.on:(Lscala/math/Ordering;Lscala/Function1;)Lscala/math/Ordering;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      6      1    f       Lscala/Function1;


public scala.math.Ordering reverse();
  Signature: ()Lscala/math/Ordering;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/math/Ordering$class.reverse:(Lscala/math/Ordering;)Lscala/math/Ordering;
	areturn
  Labels:

public java.lang.Object min(java.lang.Object, java.lang.Object);
  Signature: (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  Code:
   Stack=3, Locals=3, Args_size=3
	aload_0
	aload_1
	aload_2
	invokestatic	Method scala/math/Ordering$class.min:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public java.lang.Object max(java.lang.Object, java.lang.Object);
  Signature: (Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
  Code:
   Stack=3, Locals=3, Args_size=3
	aload_0
	aload_1
	aload_2
	invokestatic	Method scala/math/Ordering$class.max:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public boolean equiv(java.lang.Object, java.lang.Object);
  Signature: (Ljava/lang/Object;Ljava/lang/Object;)Z
  Code:
   Stack=3, Locals=3, Args_size=3
	aload_0
	aload_1
	aload_2
	invokestatic	Method scala/math/Ordering$class.equiv:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
	ireturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public boolean gt(java.lang.Object, java.lang.Object);
  Signature: (Ljava/lang/Object;Ljava/lang/Object;)Z
  Code:
   Stack=3, Locals=3, Args_size=3
	aload_0
	aload_1
	aload_2
	invokestatic	Method scala/math/Ordering$class.gt:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
	ireturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public boolean lt(java.lang.Object, java.lang.Object);
  Signature: (Ljava/lang/Object;Ljava/lang/Object;)Z
  Code:
   Stack=3, Locals=3, Args_size=3
	aload_0
	aload_1
	aload_2
	invokestatic	Method scala/math/Ordering$class.lt:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
	ireturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public boolean gteq(java.lang.Object, java.lang.Object);
  Signature: (Ljava/lang/Object;Ljava/lang/Object;)Z
  Code:
   Stack=3, Locals=3, Args_size=3
	aload_0
	aload_1
	aload_2
	invokestatic	Method scala/math/Ordering$class.gteq:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
	ireturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public boolean lteq(java.lang.Object, java.lang.Object);
  Signature: (Ljava/lang/Object;Ljava/lang/Object;)Z
  Code:
   Stack=3, Locals=3, Args_size=3
	aload_0
	aload_1
	aload_2
	invokestatic	Method scala/math/Ordering$class.lteq:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
	ireturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public scala.Some tryCompare(java.lang.Object, java.lang.Object);
  Signature: (Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
  Code:
   Stack=3, Locals=3, Args_size=3
	aload_0
	aload_1
	aload_2
	invokestatic	Method scala/math/Ordering$class.tryCompare:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public int signum(java.lang.Object);
  Signature: (Ljava/lang/Object;)I
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	invokestatic	Method scala/math/Numeric$class.signum:(Lscala/math/Numeric;Ljava/lang/Object;)I
	ireturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      6      1    x       Ljava/lang/Object;


public java.lang.Object abs(java.lang.Object);
  Signature: (Ljava/lang/Object;)Ljava/lang/Object;
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	invokestatic	Method scala/math/Numeric$class.abs:(Lscala/math/Numeric;Ljava/lang/Object;)Ljava/lang/Object;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      6      1    x       Ljava/lang/Object;


public java.lang.Object one();
  Signature: ()Ljava/lang/Object;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/math/Numeric$class.one:(Lscala/math/Numeric;)Ljava/lang/Object;
	areturn
  Labels:

public java.lang.Object zero();
  Signature: ()Ljava/lang/Object;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/math/Numeric$class.zero:(Lscala/math/Numeric;)Ljava/lang/Object;
	areturn
  Labels:

public scala.math.Fractional$FractionalOps mkNumericOps(java.lang.Object);
  Signature: (Ljava/lang/Object;)Lscala/math/Fractional$FractionalOps;
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	invokestatic	Method scala/math/Fractional$class.mkNumericOps:(Lscala/math/Fractional;Ljava/lang/Object;)Lscala/math/Fractional$FractionalOps;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      6      1    lhs       Ljava/lang/Object;

  Signature: length = 0x2
   00 7A 

public double toDouble(float);
  Signature: (F)D
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	fload_1
	invokestatic	Method scala/math/Numeric$FloatIsFractional$class.toDouble:(Lscala/math/Numeric$FloatIsFractional;F)D
	dreturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      6      1    x       F


public float toFloat(float);
  Signature: (F)F
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	fload_1
	invokestatic	Method scala/math/Numeric$FloatIsFractional$class.toFloat:(Lscala/math/Numeric$FloatIsFractional;F)F
	freturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      6      1    x       F


public long toLong(float);
  Signature: (F)J
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	fload_1
	invokestatic	Method scala/math/Numeric$FloatIsFractional$class.toLong:(Lscala/math/Numeric$FloatIsFractional;F)J
	lreturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      6      1    x       F


public int toInt(float);
  Signature: (F)I
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	fload_1
	invokestatic	Method scala/math/Numeric$FloatIsFractional$class.toInt:(Lscala/math/Numeric$FloatIsFractional;F)I
	ireturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      6      1    x       F


public float fromInt(int);
  Signature: (I)F
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	iload_1
	invokestatic	Method scala/math/Numeric$FloatIsFractional$class.fromInt:(Lscala/math/Numeric$FloatIsFractional;I)F
	freturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      6      1    x       I


public float negate(float);
  Signature: (F)F
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	fload_1
	invokestatic	Method scala/math/Numeric$FloatIsFractional$class.negate:(Lscala/math/Numeric$FloatIsFractional;F)F
	freturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      6      1    x       F


public float div(float, float);
  Signature: (FF)F
  Code:
   Stack=3, Locals=3, Args_size=3
	aload_0
	fload_1
	fload_2
	invokestatic	Method scala/math/Numeric$FloatIsFractional$class.div:(Lscala/math/Numeric$FloatIsFractional;FF)F
	freturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      7      1    x       F
   0      7      2    y       F


public float times(float, float);
  Signature: (FF)F
  Code:
   Stack=3, Locals=3, Args_size=3
	aload_0
	fload_1
	fload_2
	invokestatic	Method scala/math/Numeric$FloatIsFractional$class.times:(Lscala/math/Numeric$FloatIsFractional;FF)F
	freturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      7      1    x       F
   0      7      2    y       F


public float minus(float, float);
  Signature: (FF)F
  Code:
   Stack=3, Locals=3, Args_size=3
	aload_0
	fload_1
	fload_2
	invokestatic	Method scala/math/Numeric$FloatIsFractional$class.minus:(Lscala/math/Numeric$FloatIsFractional;FF)F
	freturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      7      1    x       F
   0      7      2    y       F


public float plus(float, float);
  Signature: (FF)F
  Code:
   Stack=3, Locals=3, Args_size=3
	aload_0
	fload_1
	fload_2
	invokestatic	Method scala/math/Numeric$FloatIsFractional$class.plus:(Lscala/math/Numeric$FloatIsFractional;FF)F
	freturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      7      1    x       F
   0      7      2    y       F


public int compare(float, float);
  Signature: (FF)I
  Code:
   Stack=3, Locals=3, Args_size=3
	aload_0
	fload_1
	fload_2
	invokestatic	Method scala/math/Ordering$FloatOrdering$class.compare:(Lscala/math/Ordering$FloatOrdering;FF)I
	ireturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      7      1    x       F
   0      7      2    y       F


}

