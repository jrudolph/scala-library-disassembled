Compiled from "Numeric.scala"
public final class scala.math.Numeric$FloatIsFractional$ extends java.lang.Object implements scala.math.Numeric$FloatIsFractional,scala.math.Ordering$FloatOrdering,scala.ScalaObject
  SourceFile: "Numeric.scala"
  Scala: length = 0x
   
  InnerClass: 
   public #235= #232 of #234; //Ops=class scala/math/Numeric$Ops of class scala/math/Numeric
   public #235= #237 of #130; //Ops=class scala/math/Ordering$Ops of class scala/math/Ordering
   public abstract #238= #60 of #130; //FloatOrdering=class scala/math/Ordering$FloatOrdering of class scala/math/Ordering
   public #241= #240 of #121; //FractionalOps=class scala/math/Fractional$FractionalOps of class scala/math/Fractional
   public abstract #242= #72 of #234; //FloatIsFractional=class scala/math/Numeric$FloatIsFractional of class scala/math/Numeric
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	Numeric.scala;
const #3 = Asciz	Scala;
const #4 = Asciz	MODULE$;
const #5 = Asciz	Lscala/math/Numeric$FloatIsFractional$;;
const #6 = Asciz	<clinit>;
const #7 = Asciz	()V;
const #8 = Asciz	Code;
const #9 = Asciz	scala/math/Numeric$FloatIsFractional$;
const #10 = class	#9;	//  scala/math/Numeric$FloatIsFractional$
const #11 = Asciz	<init>;
const #12 = NameAndType	#11:#7;//  "<init>":()V
const #13 = Method	#10.#12;	//  scala/math/Numeric$FloatIsFractional$."<init>":()V
const #14 = Asciz	LineNumberTable;
const #15 = Asciz	java/lang/Object;
const #16 = class	#15;	//  java/lang/Object
const #17 = Method	#16.#12;	//  java/lang/Object."<init>":()V
const #18 = NameAndType	#4:#5;//  MODULE$:Lscala/math/Numeric$FloatIsFractional$;
const #19 = Field	#10.#18;	//  scala/math/Numeric$FloatIsFractional$.MODULE$:Lscala/math/Numeric$FloatIsFractional$;
const #20 = Asciz	scala/math/PartialOrdering$class;
const #21 = class	#20;	//  scala/math/PartialOrdering$class
const #22 = Asciz	$init$;
const #23 = Asciz	(Lscala/math/PartialOrdering;)V;
const #24 = NameAndType	#22:#23;//  $init$:(Lscala/math/PartialOrdering;)V
const #25 = Method	#21.#24;	//  scala/math/PartialOrdering$class.$init$:(Lscala/math/PartialOrdering;)V
const #26 = Asciz	scala/math/Ordering$class;
const #27 = class	#26;	//  scala/math/Ordering$class
const #28 = Asciz	(Lscala/math/Ordering;)V;
const #29 = NameAndType	#22:#28;//  $init$:(Lscala/math/Ordering;)V
const #30 = Method	#27.#29;	//  scala/math/Ordering$class.$init$:(Lscala/math/Ordering;)V
const #31 = Asciz	scala/math/Numeric$class;
const #32 = class	#31;	//  scala/math/Numeric$class
const #33 = Asciz	(Lscala/math/Numeric;)V;
const #34 = NameAndType	#22:#33;//  $init$:(Lscala/math/Numeric;)V
const #35 = Method	#32.#34;	//  scala/math/Numeric$class.$init$:(Lscala/math/Numeric;)V
const #36 = Asciz	scala/math/Fractional$class;
const #37 = class	#36;	//  scala/math/Fractional$class
const #38 = Asciz	(Lscala/math/Fractional;)V;
const #39 = NameAndType	#22:#38;//  $init$:(Lscala/math/Fractional;)V
const #40 = Method	#37.#39;	//  scala/math/Fractional$class.$init$:(Lscala/math/Fractional;)V
const #41 = Asciz	scala/math/Numeric$FloatIsFractional$class;
const #42 = class	#41;	//  scala/math/Numeric$FloatIsFractional$class
const #43 = Asciz	(Lscala/math/Numeric$FloatIsFractional;)V;
const #44 = NameAndType	#22:#43;//  $init$:(Lscala/math/Numeric$FloatIsFractional;)V
const #45 = Method	#42.#44;	//  scala/math/Numeric$FloatIsFractional$class.$init$:(Lscala/math/Numeric$FloatIsFractional;)V
const #46 = Asciz	scala/math/Ordering$FloatOrdering$class;
const #47 = class	#46;	//  scala/math/Ordering$FloatOrdering$class
const #48 = Asciz	(Lscala/math/Ordering$FloatOrdering;)V;
const #49 = NameAndType	#22:#48;//  $init$:(Lscala/math/Ordering$FloatOrdering;)V
const #50 = Method	#47.#49;	//  scala/math/Ordering$FloatOrdering$class.$init$:(Lscala/math/Ordering$FloatOrdering;)V
const #51 = Asciz	compare;
const #52 = Asciz	(Ljava/lang/Object;Ljava/lang/Object;)I;
const #53 = Asciz	scala/runtime/BoxesRunTime;
const #54 = class	#53;	//  scala/runtime/BoxesRunTime
const #55 = Asciz	unboxToFloat;
const #56 = Asciz	(Ljava/lang/Object;)F;
const #57 = NameAndType	#55:#56;//  unboxToFloat:(Ljava/lang/Object;)F
const #58 = Method	#54.#57;	//  scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
const #59 = Asciz	scala/math/Ordering$FloatOrdering;
const #60 = class	#59;	//  scala/math/Ordering$FloatOrdering
const #61 = Asciz	(FF)I;
const #62 = NameAndType	#51:#61;//  compare:(FF)I
const #63 = InterfaceMethod	#60.#62;	//  scala/math/Ordering$FloatOrdering.compare:(FF)I
const #64 = Asciz	this;
const #65 = Asciz	x;
const #66 = Asciz	Ljava/lang/Object;;
const #67 = Asciz	y;
const #68 = Asciz	LocalVariableTable;
const #69 = Asciz	plus;
const #70 = Asciz	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;;
const #71 = Asciz	scala/math/Numeric$FloatIsFractional;
const #72 = class	#71;	//  scala/math/Numeric$FloatIsFractional
const #73 = Asciz	(FF)F;
const #74 = NameAndType	#69:#73;//  plus:(FF)F
const #75 = InterfaceMethod	#72.#74;	//  scala/math/Numeric$FloatIsFractional.plus:(FF)F
const #76 = Asciz	boxToFloat;
const #77 = Asciz	(F)Ljava/lang/Float;;
const #78 = NameAndType	#76:#77;//  boxToFloat:(F)Ljava/lang/Float;
const #79 = Method	#54.#78;	//  scala/runtime/BoxesRunTime.boxToFloat:(F)Ljava/lang/Float;
const #80 = Asciz	minus;
const #81 = NameAndType	#80:#73;//  minus:(FF)F
const #82 = InterfaceMethod	#72.#81;	//  scala/math/Numeric$FloatIsFractional.minus:(FF)F
const #83 = Asciz	times;
const #84 = NameAndType	#83:#73;//  times:(FF)F
const #85 = InterfaceMethod	#72.#84;	//  scala/math/Numeric$FloatIsFractional.times:(FF)F
const #86 = Asciz	div;
const #87 = NameAndType	#86:#73;//  div:(FF)F
const #88 = InterfaceMethod	#72.#87;	//  scala/math/Numeric$FloatIsFractional.div:(FF)F
const #89 = Asciz	negate;
const #90 = Asciz	(Ljava/lang/Object;)Ljava/lang/Object;;
const #91 = Asciz	(F)F;
const #92 = NameAndType	#89:#91;//  negate:(F)F
const #93 = InterfaceMethod	#72.#92;	//  scala/math/Numeric$FloatIsFractional.negate:(F)F
const #94 = Asciz	fromInt;
const #95 = Asciz	(I)Ljava/lang/Object;;
const #96 = Asciz	(I)F;
const #97 = NameAndType	#94:#96;//  fromInt:(I)F
const #98 = InterfaceMethod	#72.#97;	//  scala/math/Numeric$FloatIsFractional.fromInt:(I)F
const #99 = Asciz	I;
const #100 = Asciz	toInt;
const #101 = Asciz	(Ljava/lang/Object;)I;
const #102 = Asciz	(F)I;
const #103 = NameAndType	#100:#102;//  toInt:(F)I
const #104 = InterfaceMethod	#72.#103;	//  scala/math/Numeric$FloatIsFractional.toInt:(F)I
const #105 = Asciz	toLong;
const #106 = Asciz	(Ljava/lang/Object;)J;
const #107 = Asciz	(F)J;
const #108 = NameAndType	#105:#107;//  toLong:(F)J
const #109 = InterfaceMethod	#72.#108;	//  scala/math/Numeric$FloatIsFractional.toLong:(F)J
const #110 = Asciz	toFloat;
const #111 = NameAndType	#110:#91;//  toFloat:(F)F
const #112 = InterfaceMethod	#72.#111;	//  scala/math/Numeric$FloatIsFractional.toFloat:(F)F
const #113 = Asciz	toDouble;
const #114 = Asciz	(Ljava/lang/Object;)D;
const #115 = Asciz	(F)D;
const #116 = NameAndType	#113:#115;//  toDouble:(F)D
const #117 = InterfaceMethod	#72.#116;	//  scala/math/Numeric$FloatIsFractional.toDouble:(F)D
const #118 = Asciz	mkNumericOps;
const #119 = Asciz	(Ljava/lang/Object;)Lscala/math/Numeric$Ops;;
const #120 = Asciz	scala/math/Fractional;
const #121 = class	#120;	//  scala/math/Fractional
const #122 = Asciz	(Ljava/lang/Object;)Lscala/math/Fractional$FractionalOps;;
const #123 = NameAndType	#118:#122;//  mkNumericOps:(Ljava/lang/Object;)Lscala/math/Fractional$FractionalOps;
const #124 = InterfaceMethod	#121.#123;	//  scala/math/Fractional.mkNumericOps:(Ljava/lang/Object;)Lscala/math/Fractional$FractionalOps;
const #125 = Asciz	lhs;
const #126 = Asciz	Signature;
const #127 = Asciz	tryCompare;
const #128 = Asciz	(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Option;;
const #129 = Asciz	scala/math/Ordering;
const #130 = class	#129;	//  scala/math/Ordering
const #131 = Asciz	(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;;
const #132 = NameAndType	#127:#131;//  tryCompare:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
const #133 = InterfaceMethod	#130.#132;	//  scala/math/Ordering.tryCompare:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
const #134 = Asciz	reverse;
const #135 = Asciz	()Lscala/math/PartialOrdering;;
const #136 = Asciz	()Lscala/math/Ordering;;
const #137 = NameAndType	#134:#136;//  reverse:()Lscala/math/Ordering;
const #138 = InterfaceMethod	#130.#137;	//  scala/math/Ordering.reverse:()Lscala/math/Ordering;
const #139 = Asciz	mkOrderingOps;
const #140 = Asciz	(Ljava/lang/Object;)Lscala/math/Ordering$Ops;;
const #141 = Asciz	(Lscala/math/Ordering;Ljava/lang/Object;)Lscala/math/Ordering$Ops;;
const #142 = NameAndType	#139:#141;//  mkOrderingOps:(Lscala/math/Ordering;Ljava/lang/Object;)Lscala/math/Ordering$Ops;
const #143 = Method	#27.#142;	//  scala/math/Ordering$class.mkOrderingOps:(Lscala/math/Ordering;Ljava/lang/Object;)Lscala/math/Ordering$Ops;
const #144 = Asciz	on;
const #145 = Asciz	(Lscala/Function1;)Lscala/math/Ordering;;
const #146 = Asciz	(Lscala/math/Ordering;Lscala/Function1;)Lscala/math/Ordering;;
const #147 = NameAndType	#144:#146;//  on:(Lscala/math/Ordering;Lscala/Function1;)Lscala/math/Ordering;
const #148 = Method	#27.#147;	//  scala/math/Ordering$class.on:(Lscala/math/Ordering;Lscala/Function1;)Lscala/math/Ordering;
const #149 = Asciz	f;
const #150 = Asciz	Lscala/Function1;;
const #151 = Asciz	(Lscala/math/Ordering;)Lscala/math/Ordering;;
const #152 = NameAndType	#134:#151;//  reverse:(Lscala/math/Ordering;)Lscala/math/Ordering;
const #153 = Method	#27.#152;	//  scala/math/Ordering$class.reverse:(Lscala/math/Ordering;)Lscala/math/Ordering;
const #154 = Asciz	min;
const #155 = Asciz	(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;;
const #156 = NameAndType	#154:#155;//  min:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
const #157 = Method	#27.#156;	//  scala/math/Ordering$class.min:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
const #158 = Asciz	max;
const #159 = NameAndType	#158:#155;//  max:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
const #160 = Method	#27.#159;	//  scala/math/Ordering$class.max:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
const #161 = Asciz	equiv;
const #162 = Asciz	(Ljava/lang/Object;Ljava/lang/Object;)Z;
const #163 = Asciz	(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z;
const #164 = NameAndType	#161:#163;//  equiv:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #165 = Method	#27.#164;	//  scala/math/Ordering$class.equiv:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #166 = Asciz	gt;
const #167 = NameAndType	#166:#163;//  gt:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #168 = Method	#27.#167;	//  scala/math/Ordering$class.gt:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #169 = Asciz	lt;
const #170 = NameAndType	#169:#163;//  lt:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #171 = Method	#27.#170;	//  scala/math/Ordering$class.lt:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #172 = Asciz	gteq;
const #173 = NameAndType	#172:#163;//  gteq:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #174 = Method	#27.#173;	//  scala/math/Ordering$class.gteq:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #175 = Asciz	lteq;
const #176 = NameAndType	#175:#163;//  lteq:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #177 = Method	#27.#176;	//  scala/math/Ordering$class.lteq:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #178 = Asciz	(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;;
const #179 = NameAndType	#127:#178;//  tryCompare:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
const #180 = Method	#27.#179;	//  scala/math/Ordering$class.tryCompare:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
const #181 = Asciz	signum;
const #182 = Asciz	(Lscala/math/Numeric;Ljava/lang/Object;)I;
const #183 = NameAndType	#181:#182;//  signum:(Lscala/math/Numeric;Ljava/lang/Object;)I
const #184 = Method	#32.#183;	//  scala/math/Numeric$class.signum:(Lscala/math/Numeric;Ljava/lang/Object;)I
const #185 = Asciz	abs;
const #186 = Asciz	(Lscala/math/Numeric;Ljava/lang/Object;)Ljava/lang/Object;;
const #187 = NameAndType	#185:#186;//  abs:(Lscala/math/Numeric;Ljava/lang/Object;)Ljava/lang/Object;
const #188 = Method	#32.#187;	//  scala/math/Numeric$class.abs:(Lscala/math/Numeric;Ljava/lang/Object;)Ljava/lang/Object;
const #189 = Asciz	one;
const #190 = Asciz	()Ljava/lang/Object;;
const #191 = Asciz	(Lscala/math/Numeric;)Ljava/lang/Object;;
const #192 = NameAndType	#189:#191;//  one:(Lscala/math/Numeric;)Ljava/lang/Object;
const #193 = Method	#32.#192;	//  scala/math/Numeric$class.one:(Lscala/math/Numeric;)Ljava/lang/Object;
const #194 = Asciz	zero;
const #195 = NameAndType	#194:#191;//  zero:(Lscala/math/Numeric;)Ljava/lang/Object;
const #196 = Method	#32.#195;	//  scala/math/Numeric$class.zero:(Lscala/math/Numeric;)Ljava/lang/Object;
const #197 = Asciz	(Lscala/math/Fractional;Ljava/lang/Object;)Lscala/math/Fractional$FractionalOps;;
const #198 = NameAndType	#118:#197;//  mkNumericOps:(Lscala/math/Fractional;Ljava/lang/Object;)Lscala/math/Fractional$FractionalOps;
const #199 = Method	#37.#198;	//  scala/math/Fractional$class.mkNumericOps:(Lscala/math/Fractional;Ljava/lang/Object;)Lscala/math/Fractional$FractionalOps;
const #200 = Asciz	(Lscala/math/Numeric$FloatIsFractional;F)D;
const #201 = NameAndType	#113:#200;//  toDouble:(Lscala/math/Numeric$FloatIsFractional;F)D
const #202 = Method	#42.#201;	//  scala/math/Numeric$FloatIsFractional$class.toDouble:(Lscala/math/Numeric$FloatIsFractional;F)D
const #203 = Asciz	F;
const #204 = Asciz	(Lscala/math/Numeric$FloatIsFractional;F)F;
const #205 = NameAndType	#110:#204;//  toFloat:(Lscala/math/Numeric$FloatIsFractional;F)F
const #206 = Method	#42.#205;	//  scala/math/Numeric$FloatIsFractional$class.toFloat:(Lscala/math/Numeric$FloatIsFractional;F)F
const #207 = Asciz	(Lscala/math/Numeric$FloatIsFractional;F)J;
const #208 = NameAndType	#105:#207;//  toLong:(Lscala/math/Numeric$FloatIsFractional;F)J
const #209 = Method	#42.#208;	//  scala/math/Numeric$FloatIsFractional$class.toLong:(Lscala/math/Numeric$FloatIsFractional;F)J
const #210 = Asciz	(Lscala/math/Numeric$FloatIsFractional;F)I;
const #211 = NameAndType	#100:#210;//  toInt:(Lscala/math/Numeric$FloatIsFractional;F)I
const #212 = Method	#42.#211;	//  scala/math/Numeric$FloatIsFractional$class.toInt:(Lscala/math/Numeric$FloatIsFractional;F)I
const #213 = Asciz	(Lscala/math/Numeric$FloatIsFractional;I)F;
const #214 = NameAndType	#94:#213;//  fromInt:(Lscala/math/Numeric$FloatIsFractional;I)F
const #215 = Method	#42.#214;	//  scala/math/Numeric$FloatIsFractional$class.fromInt:(Lscala/math/Numeric$FloatIsFractional;I)F
const #216 = NameAndType	#89:#204;//  negate:(Lscala/math/Numeric$FloatIsFractional;F)F
const #217 = Method	#42.#216;	//  scala/math/Numeric$FloatIsFractional$class.negate:(Lscala/math/Numeric$FloatIsFractional;F)F
const #218 = Asciz	(Lscala/math/Numeric$FloatIsFractional;FF)F;
const #219 = NameAndType	#86:#218;//  div:(Lscala/math/Numeric$FloatIsFractional;FF)F
const #220 = Method	#42.#219;	//  scala/math/Numeric$FloatIsFractional$class.div:(Lscala/math/Numeric$FloatIsFractional;FF)F
const #221 = NameAndType	#83:#218;//  times:(Lscala/math/Numeric$FloatIsFractional;FF)F
const #222 = Method	#42.#221;	//  scala/math/Numeric$FloatIsFractional$class.times:(Lscala/math/Numeric$FloatIsFractional;FF)F
const #223 = NameAndType	#80:#218;//  minus:(Lscala/math/Numeric$FloatIsFractional;FF)F
const #224 = Method	#42.#223;	//  scala/math/Numeric$FloatIsFractional$class.minus:(Lscala/math/Numeric$FloatIsFractional;FF)F
const #225 = NameAndType	#69:#218;//  plus:(Lscala/math/Numeric$FloatIsFractional;FF)F
const #226 = Method	#42.#225;	//  scala/math/Numeric$FloatIsFractional$class.plus:(Lscala/math/Numeric$FloatIsFractional;FF)F
const #227 = Asciz	(Lscala/math/Ordering$FloatOrdering;FF)I;
const #228 = NameAndType	#51:#227;//  compare:(Lscala/math/Ordering$FloatOrdering;FF)I
const #229 = Method	#47.#228;	//  scala/math/Ordering$FloatOrdering$class.compare:(Lscala/math/Ordering$FloatOrdering;FF)I
const #230 = Asciz	InnerClasses;
const #231 = Asciz	scala/math/Numeric$Ops;
const #232 = class	#231;	//  scala/math/Numeric$Ops
const #233 = Asciz	scala/math/Numeric;
const #234 = class	#233;	//  scala/math/Numeric
const #235 = Asciz	Ops;
const #236 = Asciz	scala/math/Ordering$Ops;
const #237 = class	#236;	//  scala/math/Ordering$Ops
const #238 = Asciz	FloatOrdering;
const #239 = Asciz	scala/math/Fractional$FractionalOps;
const #240 = class	#239;	//  scala/math/Fractional$FractionalOps
const #241 = Asciz	FractionalOps;
const #242 = Asciz	FloatIsFractional;
const #243 = Asciz	scala/ScalaObject;
const #244 = class	#243;	//  scala/ScalaObject

{
public static final scala.math.Numeric$FloatIsFractional$ MODULE$;

public static {};
  Code:
   Stack=1, Locals=0, Args_size=0
   0:	new	#10; //class scala/math/Numeric$FloatIsFractional$
   3:	invokespecial	#13; //Method "<init>":()V
   6:	return

public scala.math.Numeric$FloatIsFractional$();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokespecial	#17; //Method java/lang/Object."<init>":()V
   4:	aload_0
   5:	putstatic	#19; //Field MODULE$:Lscala/math/Numeric$FloatIsFractional$;
   8:	aload_0
   9:	invokestatic	#25; //Method scala/math/PartialOrdering$class.$init$:(Lscala/math/PartialOrdering;)V
   12:	aload_0
   13:	invokestatic	#30; //Method scala/math/Ordering$class.$init$:(Lscala/math/Ordering;)V
   16:	aload_0
   17:	invokestatic	#35; //Method scala/math/Numeric$class.$init$:(Lscala/math/Numeric;)V
   20:	aload_0
   21:	invokestatic	#40; //Method scala/math/Fractional$class.$init$:(Lscala/math/Fractional;)V
   24:	aload_0
   25:	invokestatic	#45; //Method scala/math/Numeric$FloatIsFractional$class.$init$:(Lscala/math/Numeric$FloatIsFractional;)V
   28:	aload_0
   29:	invokestatic	#50; //Method scala/math/Ordering$FloatOrdering$class.$init$:(Lscala/math/Ordering$FloatOrdering;)V
   32:	return
  LineNumberTable: 
   line 105: 0


public int compare(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#58; //Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
   5:	aload_2
   6:	invokestatic	#58; //Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
   9:	invokeinterface	#63,  3; //InterfaceMethod scala/math/Ordering$FloatOrdering.compare:(FF)I
   14:	ireturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      15      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      15      1    x       Ljava/lang/Object;
   0      15      2    y       Ljava/lang/Object;


public java.lang.Object plus(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=4, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#58; //Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
   5:	aload_2
   6:	invokestatic	#58; //Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
   9:	invokeinterface	#75,  3; //InterfaceMethod scala/math/Numeric$FloatIsFractional.plus:(FF)F
   14:	fstore_3
   15:	fload_3
   16:	invokestatic	#79; //Method scala/runtime/BoxesRunTime.boxToFloat:(F)Ljava/lang/Float;
   19:	areturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      20      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      20      1    x       Ljava/lang/Object;
   0      20      2    y       Ljava/lang/Object;


public java.lang.Object minus(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=4, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#58; //Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
   5:	aload_2
   6:	invokestatic	#58; //Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
   9:	invokeinterface	#82,  3; //InterfaceMethod scala/math/Numeric$FloatIsFractional.minus:(FF)F
   14:	fstore_3
   15:	fload_3
   16:	invokestatic	#79; //Method scala/runtime/BoxesRunTime.boxToFloat:(F)Ljava/lang/Float;
   19:	areturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      20      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      20      1    x       Ljava/lang/Object;
   0      20      2    y       Ljava/lang/Object;


public java.lang.Object times(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=4, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#58; //Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
   5:	aload_2
   6:	invokestatic	#58; //Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
   9:	invokeinterface	#85,  3; //InterfaceMethod scala/math/Numeric$FloatIsFractional.times:(FF)F
   14:	fstore_3
   15:	fload_3
   16:	invokestatic	#79; //Method scala/runtime/BoxesRunTime.boxToFloat:(F)Ljava/lang/Float;
   19:	areturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      20      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      20      1    x       Ljava/lang/Object;
   0      20      2    y       Ljava/lang/Object;


public java.lang.Object div(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=4, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#58; //Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
   5:	aload_2
   6:	invokestatic	#58; //Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
   9:	invokeinterface	#88,  3; //InterfaceMethod scala/math/Numeric$FloatIsFractional.div:(FF)F
   14:	fstore_3
   15:	fload_3
   16:	invokestatic	#79; //Method scala/runtime/BoxesRunTime.boxToFloat:(F)Ljava/lang/Float;
   19:	areturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      20      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      20      1    x       Ljava/lang/Object;
   0      20      2    y       Ljava/lang/Object;


public java.lang.Object negate(java.lang.Object);
  Code:
   Stack=2, Locals=3, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#58; //Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
   5:	invokeinterface	#93,  2; //InterfaceMethod scala/math/Numeric$FloatIsFractional.negate:(F)F
   10:	fstore_2
   11:	fload_2
   12:	invokestatic	#79; //Method scala/runtime/BoxesRunTime.boxToFloat:(F)Ljava/lang/Float;
   15:	areturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      16      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      16      1    x       Ljava/lang/Object;


public java.lang.Object fromInt(int);
  Code:
   Stack=2, Locals=3, Args_size=2
   0:	aload_0
   1:	iload_1
   2:	invokeinterface	#98,  2; //InterfaceMethod scala/math/Numeric$FloatIsFractional.fromInt:(I)F
   7:	fstore_2
   8:	fload_2
   9:	invokestatic	#79; //Method scala/runtime/BoxesRunTime.boxToFloat:(F)Ljava/lang/Float;
   12:	areturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      13      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      13      1    x       I


public int toInt(java.lang.Object);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#58; //Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
   5:	invokeinterface	#104,  2; //InterfaceMethod scala/math/Numeric$FloatIsFractional.toInt:(F)I
   10:	ireturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      11      1    x       Ljava/lang/Object;


public long toLong(java.lang.Object);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#58; //Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
   5:	invokeinterface	#109,  2; //InterfaceMethod scala/math/Numeric$FloatIsFractional.toLong:(F)J
   10:	lreturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      11      1    x       Ljava/lang/Object;


public float toFloat(java.lang.Object);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#58; //Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
   5:	invokeinterface	#112,  2; //InterfaceMethod scala/math/Numeric$FloatIsFractional.toFloat:(F)F
   10:	freturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      11      1    x       Ljava/lang/Object;


public double toDouble(java.lang.Object);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#58; //Method scala/runtime/BoxesRunTime.unboxToFloat:(Ljava/lang/Object;)F
   5:	invokeinterface	#117,  2; //InterfaceMethod scala/math/Numeric$FloatIsFractional.toDouble:(F)D
   10:	dreturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      11      1    x       Ljava/lang/Object;


public scala.math.Numeric$Ops mkNumericOps(java.lang.Object);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokeinterface	#124,  2; //InterfaceMethod scala/math/Fractional.mkNumericOps:(Ljava/lang/Object;)Lscala/math/Fractional$FractionalOps;
   7:	areturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      8      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      8      1    lhs       Ljava/lang/Object;

  Signature: length = 0x2
   00 77 

public scala.Option tryCompare(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokeinterface	#133,  3; //InterfaceMethod scala/math/Ordering.tryCompare:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
   8:	areturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      9      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      9      1    x       Ljava/lang/Object;
   0      9      2    y       Ljava/lang/Object;


public scala.math.PartialOrdering reverse();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokeinterface	#138,  1; //InterfaceMethod scala/math/Ordering.reverse:()Lscala/math/Ordering;
   6:	areturn
  LineNumberTable: 
   line 105: 0


public scala.math.Ordering$Ops mkOrderingOps(java.lang.Object);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#143; //Method scala/math/Ordering$class.mkOrderingOps:(Lscala/math/Ordering;Ljava/lang/Object;)Lscala/math/Ordering$Ops;
   5:	areturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      6      1    lhs       Ljava/lang/Object;

  Signature: length = 0x2
   00 FFFFFF8C 

public scala.math.Ordering on(scala.Function1);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#148; //Method scala/math/Ordering$class.on:(Lscala/math/Ordering;Lscala/Function1;)Lscala/math/Ordering;
   5:	areturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      6      1    f       Lscala/Function1;


public scala.math.Ordering reverse();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokestatic	#153; //Method scala/math/Ordering$class.reverse:(Lscala/math/Ordering;)Lscala/math/Ordering;
   4:	areturn
  LineNumberTable: 
   line 105: 0


public java.lang.Object min(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokestatic	#157; //Method scala/math/Ordering$class.min:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   6:	areturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public java.lang.Object max(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokestatic	#160; //Method scala/math/Ordering$class.max:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   6:	areturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public boolean equiv(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokestatic	#165; //Method scala/math/Ordering$class.equiv:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
   6:	ireturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public boolean gt(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokestatic	#168; //Method scala/math/Ordering$class.gt:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
   6:	ireturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public boolean lt(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokestatic	#171; //Method scala/math/Ordering$class.lt:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
   6:	ireturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public boolean gteq(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokestatic	#174; //Method scala/math/Ordering$class.gteq:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
   6:	ireturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public boolean lteq(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokestatic	#177; //Method scala/math/Ordering$class.lteq:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
   6:	ireturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public scala.Some tryCompare(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokestatic	#180; //Method scala/math/Ordering$class.tryCompare:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
   6:	areturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public int signum(java.lang.Object);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#184; //Method scala/math/Numeric$class.signum:(Lscala/math/Numeric;Ljava/lang/Object;)I
   5:	ireturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      6      1    x       Ljava/lang/Object;


public java.lang.Object abs(java.lang.Object);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#188; //Method scala/math/Numeric$class.abs:(Lscala/math/Numeric;Ljava/lang/Object;)Ljava/lang/Object;
   5:	areturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      6      1    x       Ljava/lang/Object;


public java.lang.Object one();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokestatic	#193; //Method scala/math/Numeric$class.one:(Lscala/math/Numeric;)Ljava/lang/Object;
   4:	areturn
  LineNumberTable: 
   line 105: 0


public java.lang.Object zero();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokestatic	#196; //Method scala/math/Numeric$class.zero:(Lscala/math/Numeric;)Ljava/lang/Object;
   4:	areturn
  LineNumberTable: 
   line 105: 0


public scala.math.Fractional$FractionalOps mkNumericOps(java.lang.Object);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#199; //Method scala/math/Fractional$class.mkNumericOps:(Lscala/math/Fractional;Ljava/lang/Object;)Lscala/math/Fractional$FractionalOps;
   5:	areturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      6      1    lhs       Ljava/lang/Object;

  Signature: length = 0x2
   00 7A 

public double toDouble(float);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	fload_1
   2:	invokestatic	#202; //Method scala/math/Numeric$FloatIsFractional$class.toDouble:(Lscala/math/Numeric$FloatIsFractional;F)D
   5:	dreturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      6      1    x       F


public float toFloat(float);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	fload_1
   2:	invokestatic	#206; //Method scala/math/Numeric$FloatIsFractional$class.toFloat:(Lscala/math/Numeric$FloatIsFractional;F)F
   5:	freturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      6      1    x       F


public long toLong(float);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	fload_1
   2:	invokestatic	#209; //Method scala/math/Numeric$FloatIsFractional$class.toLong:(Lscala/math/Numeric$FloatIsFractional;F)J
   5:	lreturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      6      1    x       F


public int toInt(float);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	fload_1
   2:	invokestatic	#212; //Method scala/math/Numeric$FloatIsFractional$class.toInt:(Lscala/math/Numeric$FloatIsFractional;F)I
   5:	ireturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      6      1    x       F


public float fromInt(int);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	iload_1
   2:	invokestatic	#215; //Method scala/math/Numeric$FloatIsFractional$class.fromInt:(Lscala/math/Numeric$FloatIsFractional;I)F
   5:	freturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      6      1    x       I


public float negate(float);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	fload_1
   2:	invokestatic	#217; //Method scala/math/Numeric$FloatIsFractional$class.negate:(Lscala/math/Numeric$FloatIsFractional;F)F
   5:	freturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      6      1    x       F


public float div(float, float);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	fload_1
   2:	fload_2
   3:	invokestatic	#220; //Method scala/math/Numeric$FloatIsFractional$class.div:(Lscala/math/Numeric$FloatIsFractional;FF)F
   6:	freturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      7      1    x       F
   0      7      2    y       F


public float times(float, float);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	fload_1
   2:	fload_2
   3:	invokestatic	#222; //Method scala/math/Numeric$FloatIsFractional$class.times:(Lscala/math/Numeric$FloatIsFractional;FF)F
   6:	freturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      7      1    x       F
   0      7      2    y       F


public float minus(float, float);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	fload_1
   2:	fload_2
   3:	invokestatic	#224; //Method scala/math/Numeric$FloatIsFractional$class.minus:(Lscala/math/Numeric$FloatIsFractional;FF)F
   6:	freturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      7      1    x       F
   0      7      2    y       F


public float plus(float, float);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	fload_1
   2:	fload_2
   3:	invokestatic	#226; //Method scala/math/Numeric$FloatIsFractional$class.plus:(Lscala/math/Numeric$FloatIsFractional;FF)F
   6:	freturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      7      1    x       F
   0      7      2    y       F


public int compare(float, float);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	fload_1
   2:	fload_2
   3:	invokestatic	#229; //Method scala/math/Ordering$FloatOrdering$class.compare:(Lscala/math/Ordering$FloatOrdering;FF)I
   6:	ireturn
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$FloatIsFractional$;
   0      7      1    x       F
   0      7      2    y       F


}

