Compiled from "Numeric.scala"
public interface scala.math.Numeric$ByteIsIntegral extends scala.math.Integral,scala.ScalaObject
  SourceFile: "Numeric.scala"
  Signature: length = 0x2
   00 15 
  Scala: length = 0x
   
  InnerClass: 
   public abstract ByteIsIntegral=class scala/math/Numeric$ByteIsIntegral of class scala/math/Numeric
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	Numeric.scala;
Asciz	toDouble;
Asciz	(B)D;
Asciz	toFloat;
Asciz	(B)F;
Asciz	toLong;
Asciz	(B)J;
Asciz	toInt;
Asciz	(B)I;
Asciz	fromInt;
Asciz	(I)B;
Asciz	negate;
Asciz	(B)B;
Asciz	rem;
Asciz	(BB)B;
Asciz	quot;
Asciz	times;
Asciz	minus;
Asciz	plus;
Asciz	Ljava/lang/Object;Lscala/math/Integral<Ljava/lang/Byte;>;Lscala/ScalaObject;;
Asciz	Signature;
Asciz	Scala;
Asciz	InnerClasses;
Asciz	scala/math/Numeric$ByteIsIntegral;
class	scala/math/Numeric$ByteIsIntegral
Asciz	scala/math/Numeric;
class	scala/math/Numeric
Asciz	ByteIsIntegral;
Asciz	java/lang/Object;
class	java/lang/Object
Asciz	scala/math/Integral;
class	scala/math/Integral
Asciz	scala/ScalaObject;
class	scala/ScalaObject

{
public abstract double toDouble(byte);
  Signature: (B)D

public abstract float toFloat(byte);
  Signature: (B)F

public abstract long toLong(byte);
  Signature: (B)J

public abstract int toInt(byte);
  Signature: (B)I

public abstract byte fromInt(int);
  Signature: (I)B

public abstract byte negate(byte);
  Signature: (B)B

public abstract byte rem(byte, byte);
  Signature: (BB)B

public abstract byte quot(byte, byte);
  Signature: (BB)B

public abstract byte times(byte, byte);
  Signature: (BB)B

public abstract byte minus(byte, byte);
  Signature: (BB)B

public abstract byte plus(byte, byte);
  Signature: (BB)B

}

