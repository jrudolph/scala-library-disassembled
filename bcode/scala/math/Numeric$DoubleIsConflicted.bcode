Compiled from "Numeric.scala"
public interface scala.math.Numeric$DoubleIsConflicted extends scala.math.Numeric,scala.ScalaObject
  SourceFile: "Numeric.scala"
  Signature: length = 0x2
   00 12 
  Scala: length = 0x
   
  InnerClass: 
   public abstract DoubleIsConflicted=class scala/math/Numeric$DoubleIsConflicted of class scala/math/Numeric
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	Numeric.scala;
Asciz	toDouble;
Asciz	(D)D;
Asciz	toFloat;
Asciz	(D)F;
Asciz	toLong;
Asciz	(D)J;
Asciz	toInt;
Asciz	(D)I;
Asciz	fromInt;
Asciz	(I)D;
Asciz	negate;
Asciz	times;
Asciz	(DD)D;
Asciz	minus;
Asciz	plus;
Asciz	Ljava/lang/Object;Lscala/math/Numeric<Ljava/lang/Double;>;Lscala/ScalaObject;;
Asciz	Signature;
Asciz	Scala;
Asciz	InnerClasses;
Asciz	scala/math/Numeric$DoubleIsConflicted;
class	scala/math/Numeric$DoubleIsConflicted
Asciz	scala/math/Numeric;
class	scala/math/Numeric
Asciz	DoubleIsConflicted;
Asciz	java/lang/Object;
class	java/lang/Object
Asciz	scala/ScalaObject;
class	scala/ScalaObject

{
public abstract double toDouble(double);
  Signature: (D)D

public abstract float toFloat(double);
  Signature: (D)F

public abstract long toLong(double);
  Signature: (D)J

public abstract int toInt(double);
  Signature: (D)I

public abstract double fromInt(int);
  Signature: (I)D

public abstract double negate(double);
  Signature: (D)D

public abstract double times(double, double);
  Signature: (DD)D

public abstract double minus(double, double);
  Signature: (DD)D

public abstract double plus(double, double);
  Signature: (DD)D

}

