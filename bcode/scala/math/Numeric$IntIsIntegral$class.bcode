Compiled from "Numeric.scala"
public abstract class scala.math.Numeric$IntIsIntegral$class extends java.lang.Object
  InnerClass: 
   public abstract IntIsIntegral=class scala/math/Numeric$IntIsIntegral of class scala/math/Numeric
  Scala: length = 0x
   
  SourceFile: "Numeric.scala"
  minor version: 0
  major version: 49
  Constant pool:
class	java/lang/Object
class	scala/math/Numeric
class	scala/math/Numeric$IntIsIntegral
class	scala/math/Numeric$IntIsIntegral$class
Asciz	$init$;
Asciz	$this;
Asciz	(Lscala/math/Numeric$IntIsIntegral;)V;
Asciz	(Lscala/math/Numeric$IntIsIntegral;I)I;
Asciz	(Lscala/math/Numeric$IntIsIntegral;II)I;
Asciz	Code;
Asciz	I;
Asciz	InnerClasses;
Asciz	IntIsIntegral;
Asciz	LineNumberTable;
Asciz	LocalVariableTable;
Asciz	Lscala/math/Numeric$IntIsIntegral;;
Asciz	Numeric.scala;
Asciz	Scala;
Asciz	SourceFile;
Asciz	fromInt;
Asciz	java/lang/Object;
Asciz	plus;
Asciz	scala/math/Numeric;
Asciz	scala/math/Numeric$IntIsIntegral;
Asciz	scala/math/Numeric$IntIsIntegral$class;
Asciz	x;
Asciz	y;

{
public static int plus(scala.math.Numeric$IntIsIntegral, int, int);
  Signature: (Lscala/math/Numeric$IntIsIntegral;II)I
  Code:
   Stack=2, Locals=3, Args_size=3
	iload_1
	iload_2
	iadd
	ireturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      4      0    $this       Lscala/math/Numeric$IntIsIntegral;
   0      4      1    x       I
   0      4      2    y       I


public static int fromInt(scala.math.Numeric$IntIsIntegral, int);
  Signature: (Lscala/math/Numeric$IntIsIntegral;I)I
  Code:
   Stack=1, Locals=2, Args_size=2
	iload_1
	ireturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      2      0    $this       Lscala/math/Numeric$IntIsIntegral;
   0      2      1    x       I


public static void $init$(scala.math.Numeric$IntIsIntegral);
  Signature: (Lscala/math/Numeric$IntIsIntegral;)V
  Code:
   Stack=0, Locals=1, Args_size=1
	return
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      1      0    $this       Lscala/math/Numeric$IntIsIntegral;


}

