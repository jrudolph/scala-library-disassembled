Compiled from "Numeric.scala"
public abstract class scala.math.Numeric$ShortIsIntegral$class extends java.lang.Object
  SourceFile: "Numeric.scala"
  Scala: length = 0x
   
  InnerClass: 
   public abstract ShortIsIntegral=class scala/math/Numeric$ShortIsIntegral of class scala/math/Numeric
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	Numeric.scala;
Asciz	plus;
Asciz	(Lscala/math/Numeric$ShortIsIntegral;SS)S;
Asciz	Code;
Asciz	LineNumberTable;
Asciz	$this;
Asciz	Lscala/math/Numeric$ShortIsIntegral;;
Asciz	x;
Asciz	S;
Asciz	y;
Asciz	LocalVariableTable;
Asciz	minus;
Asciz	times;
Asciz	quot;
Asciz	rem;
Asciz	negate;
Asciz	(Lscala/math/Numeric$ShortIsIntegral;S)S;
Asciz	fromInt;
Asciz	(Lscala/math/Numeric$ShortIsIntegral;I)S;
Asciz	I;
Asciz	toInt;
Asciz	(Lscala/math/Numeric$ShortIsIntegral;S)I;
Asciz	toLong;
Asciz	(Lscala/math/Numeric$ShortIsIntegral;S)J;
Asciz	toFloat;
Asciz	(Lscala/math/Numeric$ShortIsIntegral;S)F;
Asciz	toDouble;
Asciz	(Lscala/math/Numeric$ShortIsIntegral;S)D;
Asciz	$init$;
Asciz	(Lscala/math/Numeric$ShortIsIntegral;)V;
Asciz	Scala;
Asciz	InnerClasses;
Asciz	scala/math/Numeric$ShortIsIntegral;
class	scala/math/Numeric$ShortIsIntegral
Asciz	scala/math/Numeric;
class	scala/math/Numeric
Asciz	ShortIsIntegral;
Asciz	scala/math/Numeric$ShortIsIntegral$class;
class	scala/math/Numeric$ShortIsIntegral$class
Asciz	java/lang/Object;
class	java/lang/Object

{
public static short plus(scala.math.Numeric$ShortIsIntegral, short, short);
  Signature: (Lscala/math/Numeric$ShortIsIntegral;SS)S
  Code:
   Stack=2, Locals=3, Args_size=3
	iload_1
	iload_2
	iadd
	i2s
	ireturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      5      0    $this       Lscala/math/Numeric$ShortIsIntegral;
   0      5      1    x       S
   0      5      2    y       S


public static short minus(scala.math.Numeric$ShortIsIntegral, short, short);
  Signature: (Lscala/math/Numeric$ShortIsIntegral;SS)S
  Code:
   Stack=2, Locals=3, Args_size=3
	iload_1
	iload_2
	isub
	i2s
	ireturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      5      0    $this       Lscala/math/Numeric$ShortIsIntegral;
   0      5      1    x       S
   0      5      2    y       S


public static short times(scala.math.Numeric$ShortIsIntegral, short, short);
  Signature: (Lscala/math/Numeric$ShortIsIntegral;SS)S
  Code:
   Stack=2, Locals=3, Args_size=3
	iload_1
	iload_2
	imul
	i2s
	ireturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      5      0    $this       Lscala/math/Numeric$ShortIsIntegral;
   0      5      1    x       S
   0      5      2    y       S


public static short quot(scala.math.Numeric$ShortIsIntegral, short, short);
  Signature: (Lscala/math/Numeric$ShortIsIntegral;SS)S
  Code:
   Stack=2, Locals=3, Args_size=3
	iload_1
	iload_2
	idiv
	i2s
	ireturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      5      0    $this       Lscala/math/Numeric$ShortIsIntegral;
   0      5      1    x       S
   0      5      2    y       S


public static short rem(scala.math.Numeric$ShortIsIntegral, short, short);
  Signature: (Lscala/math/Numeric$ShortIsIntegral;SS)S
  Code:
   Stack=2, Locals=3, Args_size=3
	iload_1
	iload_2
	irem
	i2s
	ireturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      5      0    $this       Lscala/math/Numeric$ShortIsIntegral;
   0      5      1    x       S
   0      5      2    y       S


public static short negate(scala.math.Numeric$ShortIsIntegral, short);
  Signature: (Lscala/math/Numeric$ShortIsIntegral;S)S
  Code:
   Stack=1, Locals=2, Args_size=2
	iload_1
	ineg
	i2s
	ireturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      4      0    $this       Lscala/math/Numeric$ShortIsIntegral;
   0      4      1    x       S


public static short fromInt(scala.math.Numeric$ShortIsIntegral, int);
  Signature: (Lscala/math/Numeric$ShortIsIntegral;I)S
  Code:
   Stack=1, Locals=2, Args_size=2
	iload_1
	i2s
	ireturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      3      0    $this       Lscala/math/Numeric$ShortIsIntegral;
   0      3      1    x       I


public static int toInt(scala.math.Numeric$ShortIsIntegral, short);
  Signature: (Lscala/math/Numeric$ShortIsIntegral;S)I
  Code:
   Stack=1, Locals=2, Args_size=2
	iload_1
	ireturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      2      0    $this       Lscala/math/Numeric$ShortIsIntegral;
   0      2      1    x       S


public static long toLong(scala.math.Numeric$ShortIsIntegral, short);
  Signature: (Lscala/math/Numeric$ShortIsIntegral;S)J
  Code:
   Stack=2, Locals=2, Args_size=2
	iload_1
	i2l
	lreturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      3      0    $this       Lscala/math/Numeric$ShortIsIntegral;
   0      3      1    x       S


public static float toFloat(scala.math.Numeric$ShortIsIntegral, short);
  Signature: (Lscala/math/Numeric$ShortIsIntegral;S)F
  Code:
   Stack=1, Locals=2, Args_size=2
	iload_1
	i2f
	freturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      3      0    $this       Lscala/math/Numeric$ShortIsIntegral;
   0      3      1    x       S


public static double toDouble(scala.math.Numeric$ShortIsIntegral, short);
  Signature: (Lscala/math/Numeric$ShortIsIntegral;S)D
  Code:
   Stack=2, Locals=2, Args_size=2
	iload_1
	i2d
	dreturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      3      0    $this       Lscala/math/Numeric$ShortIsIntegral;
   0      3      1    x       S


public static void $init$(scala.math.Numeric$ShortIsIntegral);
  Signature: (Lscala/math/Numeric$ShortIsIntegral;)V
  Code:
   Stack=0, Locals=1, Args_size=1
	return
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      1      0    $this       Lscala/math/Numeric$ShortIsIntegral;


}

