Compiled from "Numeric.scala"
public abstract class scala.math.Numeric$ShortIsIntegral$class extends java.lang.Object
  SourceFile: "Numeric.scala"
  Scala: length = 0x
   
  InnerClass: 
   public abstract #38= #35 of #37; //ShortIsIntegral=class scala/math/Numeric$ShortIsIntegral of class scala/math/Numeric
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	Numeric.scala;
const #3 = Asciz	$init$;
const #4 = Asciz	(Lscala/math/Numeric$ShortIsIntegral;)V;
const #5 = Asciz	Code;
const #6 = Asciz	LineNumberTable;
const #7 = Asciz	$this;
const #8 = Asciz	Lscala/math/Numeric$ShortIsIntegral;;
const #9 = Asciz	LocalVariableTable;
const #10 = Asciz	toDouble;
const #11 = Asciz	(Lscala/math/Numeric$ShortIsIntegral;S)D;
const #12 = Asciz	x;
const #13 = Asciz	S;
const #14 = Asciz	toFloat;
const #15 = Asciz	(Lscala/math/Numeric$ShortIsIntegral;S)F;
const #16 = Asciz	toLong;
const #17 = Asciz	(Lscala/math/Numeric$ShortIsIntegral;S)J;
const #18 = Asciz	toInt;
const #19 = Asciz	(Lscala/math/Numeric$ShortIsIntegral;S)I;
const #20 = Asciz	fromInt;
const #21 = Asciz	(Lscala/math/Numeric$ShortIsIntegral;I)S;
const #22 = Asciz	I;
const #23 = Asciz	negate;
const #24 = Asciz	(Lscala/math/Numeric$ShortIsIntegral;S)S;
const #25 = Asciz	rem;
const #26 = Asciz	(Lscala/math/Numeric$ShortIsIntegral;SS)S;
const #27 = Asciz	y;
const #28 = Asciz	quot;
const #29 = Asciz	times;
const #30 = Asciz	minus;
const #31 = Asciz	plus;
const #32 = Asciz	Scala;
const #33 = Asciz	InnerClasses;
const #34 = Asciz	scala/math/Numeric$ShortIsIntegral;
const #35 = class	#34;	//  scala/math/Numeric$ShortIsIntegral
const #36 = Asciz	scala/math/Numeric;
const #37 = class	#36;	//  scala/math/Numeric
const #38 = Asciz	ShortIsIntegral;
const #39 = Asciz	scala/math/Numeric$ShortIsIntegral$class;
const #40 = class	#39;	//  scala/math/Numeric$ShortIsIntegral$class
const #41 = Asciz	java/lang/Object;
const #42 = class	#41;	//  java/lang/Object

{
public static void $init$(scala.math.Numeric$ShortIsIntegral);
  Code:
   Stack=0, Locals=1, Args_size=1
   0:	return
  LineNumberTable: 
   line 48: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      1      0    $this       Lscala/math/Numeric$ShortIsIntegral;


public static double toDouble(scala.math.Numeric$ShortIsIntegral, short);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	iload_1
   1:	i2d
   2:	dreturn
  LineNumberTable: 
   line 59: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      3      0    $this       Lscala/math/Numeric$ShortIsIntegral;
   0      3      1    x       S


public static float toFloat(scala.math.Numeric$ShortIsIntegral, short);
  Code:
   Stack=1, Locals=2, Args_size=2
   0:	iload_1
   1:	i2f
   2:	freturn
  LineNumberTable: 
   line 58: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      3      0    $this       Lscala/math/Numeric$ShortIsIntegral;
   0      3      1    x       S


public static long toLong(scala.math.Numeric$ShortIsIntegral, short);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	iload_1
   1:	i2l
   2:	lreturn
  LineNumberTable: 
   line 57: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      3      0    $this       Lscala/math/Numeric$ShortIsIntegral;
   0      3      1    x       S


public static int toInt(scala.math.Numeric$ShortIsIntegral, short);
  Code:
   Stack=1, Locals=2, Args_size=2
   0:	iload_1
   1:	ireturn
  LineNumberTable: 
   line 56: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      2      0    $this       Lscala/math/Numeric$ShortIsIntegral;
   0      2      1    x       S


public static short fromInt(scala.math.Numeric$ShortIsIntegral, int);
  Code:
   Stack=1, Locals=2, Args_size=2
   0:	iload_1
   1:	i2s
   2:	ireturn
  LineNumberTable: 
   line 55: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      3      0    $this       Lscala/math/Numeric$ShortIsIntegral;
   0      3      1    x       I


public static short negate(scala.math.Numeric$ShortIsIntegral, short);
  Code:
   Stack=1, Locals=2, Args_size=2
   0:	iload_1
   1:	ineg
   2:	i2s
   3:	ireturn
  LineNumberTable: 
   line 54: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      4      0    $this       Lscala/math/Numeric$ShortIsIntegral;
   0      4      1    x       S


public static short rem(scala.math.Numeric$ShortIsIntegral, short, short);
  Code:
   Stack=2, Locals=3, Args_size=3
   0:	iload_1
   1:	iload_2
   2:	irem
   3:	i2s
   4:	ireturn
  LineNumberTable: 
   line 53: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      5      0    $this       Lscala/math/Numeric$ShortIsIntegral;
   0      5      1    x       S
   0      5      2    y       S


public static short quot(scala.math.Numeric$ShortIsIntegral, short, short);
  Code:
   Stack=2, Locals=3, Args_size=3
   0:	iload_1
   1:	iload_2
   2:	idiv
   3:	i2s
   4:	ireturn
  LineNumberTable: 
   line 52: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      5      0    $this       Lscala/math/Numeric$ShortIsIntegral;
   0      5      1    x       S
   0      5      2    y       S


public static short times(scala.math.Numeric$ShortIsIntegral, short, short);
  Code:
   Stack=2, Locals=3, Args_size=3
   0:	iload_1
   1:	iload_2
   2:	imul
   3:	i2s
   4:	ireturn
  LineNumberTable: 
   line 51: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      5      0    $this       Lscala/math/Numeric$ShortIsIntegral;
   0      5      1    x       S
   0      5      2    y       S


public static short minus(scala.math.Numeric$ShortIsIntegral, short, short);
  Code:
   Stack=2, Locals=3, Args_size=3
   0:	iload_1
   1:	iload_2
   2:	isub
   3:	i2s
   4:	ireturn
  LineNumberTable: 
   line 50: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      5      0    $this       Lscala/math/Numeric$ShortIsIntegral;
   0      5      1    x       S
   0      5      2    y       S


public static short plus(scala.math.Numeric$ShortIsIntegral, short, short);
  Code:
   Stack=2, Locals=3, Args_size=3
   0:	iload_1
   1:	iload_2
   2:	iadd
   3:	i2s
   4:	ireturn
  LineNumberTable: 
   line 49: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      5      0    $this       Lscala/math/Numeric$ShortIsIntegral;
   0      5      1    x       S
   0      5      2    y       S


}

