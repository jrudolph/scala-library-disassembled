Compiled from "Numeric.scala"
public final class scala.math.Numeric$DoubleIsFractional$ extends java.lang.Object implements scala.math.Numeric$DoubleIsFractional,scala.math.Ordering$DoubleOrdering,scala.ScalaObject
  SourceFile: "Numeric.scala"
  Scala: length = 0x
   
  InnerClass: 
   public #243= #240 of #242; //Ops=class scala/math/Numeric$Ops of class scala/math/Numeric
   public #243= #245 of #137; //Ops=class scala/math/Ordering$Ops of class scala/math/Ordering
   public abstract #246= #65 of #137; //DoubleOrdering=class scala/math/Ordering$DoubleOrdering of class scala/math/Ordering
   public #249= #248 of #88; //FractionalOps=class scala/math/Fractional$FractionalOps of class scala/math/Fractional
   public abstract #250= #96 of #242; //DoubleIsConflicted=class scala/math/Numeric$DoubleIsConflicted of class scala/math/Numeric
   public abstract #251= #77 of #242; //DoubleIsFractional=class scala/math/Numeric$DoubleIsFractional of class scala/math/Numeric
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	Numeric.scala;
const #3 = Asciz	Scala;
const #4 = Asciz	MODULE$;
const #5 = Asciz	Lscala/math/Numeric$DoubleIsFractional$;;
const #6 = Asciz	<clinit>;
const #7 = Asciz	()V;
const #8 = Asciz	Code;
const #9 = Asciz	scala/math/Numeric$DoubleIsFractional$;
const #10 = class	#9;	//  scala/math/Numeric$DoubleIsFractional$
const #11 = Asciz	<init>;
const #12 = NameAndType	#11:#7;//  "<init>":()V
const #13 = Method	#10.#12;	//  scala/math/Numeric$DoubleIsFractional$."<init>":()V
const #14 = Asciz	LineNumberTable;
const #15 = Asciz	java/lang/Object;
const #16 = class	#15;	//  java/lang/Object
const #17 = Method	#16.#12;	//  java/lang/Object."<init>":()V
const #18 = NameAndType	#4:#5;//  MODULE$:Lscala/math/Numeric$DoubleIsFractional$;
const #19 = Field	#10.#18;	//  scala/math/Numeric$DoubleIsFractional$.MODULE$:Lscala/math/Numeric$DoubleIsFractional$;
const #20 = Asciz	scala/math/PartialOrdering$class;
const #21 = class	#20;	//  scala/math/PartialOrdering$class
const #22 = Asciz	$init$;
const #23 = Asciz	(Lscala/math/PartialOrdering;)V;
const #24 = NameAndType	#22:#23;//  $init$:(Lscala/math/PartialOrdering;)V
const #25 = Method	#21.#24;	//  scala/math/PartialOrdering$class.$init$:(Lscala/math/PartialOrdering;)V
const #26 = Asciz	scala/math/Ordering$class;
const #27 = class	#26;	//  scala/math/Ordering$class
const #28 = Asciz	(Lscala/math/Ordering;)V;
const #29 = NameAndType	#22:#28;//  $init$:(Lscala/math/Ordering;)V
const #30 = Method	#27.#29;	//  scala/math/Ordering$class.$init$:(Lscala/math/Ordering;)V
const #31 = Asciz	scala/math/Numeric$class;
const #32 = class	#31;	//  scala/math/Numeric$class
const #33 = Asciz	(Lscala/math/Numeric;)V;
const #34 = NameAndType	#22:#33;//  $init$:(Lscala/math/Numeric;)V
const #35 = Method	#32.#34;	//  scala/math/Numeric$class.$init$:(Lscala/math/Numeric;)V
const #36 = Asciz	scala/math/Numeric$DoubleIsConflicted$class;
const #37 = class	#36;	//  scala/math/Numeric$DoubleIsConflicted$class
const #38 = Asciz	(Lscala/math/Numeric$DoubleIsConflicted;)V;
const #39 = NameAndType	#22:#38;//  $init$:(Lscala/math/Numeric$DoubleIsConflicted;)V
const #40 = Method	#37.#39;	//  scala/math/Numeric$DoubleIsConflicted$class.$init$:(Lscala/math/Numeric$DoubleIsConflicted;)V
const #41 = Asciz	scala/math/Fractional$class;
const #42 = class	#41;	//  scala/math/Fractional$class
const #43 = Asciz	(Lscala/math/Fractional;)V;
const #44 = NameAndType	#22:#43;//  $init$:(Lscala/math/Fractional;)V
const #45 = Method	#42.#44;	//  scala/math/Fractional$class.$init$:(Lscala/math/Fractional;)V
const #46 = Asciz	scala/math/Numeric$DoubleIsFractional$class;
const #47 = class	#46;	//  scala/math/Numeric$DoubleIsFractional$class
const #48 = Asciz	(Lscala/math/Numeric$DoubleIsFractional;)V;
const #49 = NameAndType	#22:#48;//  $init$:(Lscala/math/Numeric$DoubleIsFractional;)V
const #50 = Method	#47.#49;	//  scala/math/Numeric$DoubleIsFractional$class.$init$:(Lscala/math/Numeric$DoubleIsFractional;)V
const #51 = Asciz	scala/math/Ordering$DoubleOrdering$class;
const #52 = class	#51;	//  scala/math/Ordering$DoubleOrdering$class
const #53 = Asciz	(Lscala/math/Ordering$DoubleOrdering;)V;
const #54 = NameAndType	#22:#53;//  $init$:(Lscala/math/Ordering$DoubleOrdering;)V
const #55 = Method	#52.#54;	//  scala/math/Ordering$DoubleOrdering$class.$init$:(Lscala/math/Ordering$DoubleOrdering;)V
const #56 = Asciz	compare;
const #57 = Asciz	(Ljava/lang/Object;Ljava/lang/Object;)I;
const #58 = Asciz	scala/runtime/BoxesRunTime;
const #59 = class	#58;	//  scala/runtime/BoxesRunTime
const #60 = Asciz	unboxToDouble;
const #61 = Asciz	(Ljava/lang/Object;)D;
const #62 = NameAndType	#60:#61;//  unboxToDouble:(Ljava/lang/Object;)D
const #63 = Method	#59.#62;	//  scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
const #64 = Asciz	scala/math/Ordering$DoubleOrdering;
const #65 = class	#64;	//  scala/math/Ordering$DoubleOrdering
const #66 = Asciz	(DD)I;
const #67 = NameAndType	#56:#66;//  compare:(DD)I
const #68 = InterfaceMethod	#65.#67;	//  scala/math/Ordering$DoubleOrdering.compare:(DD)I
const #69 = Asciz	this;
const #70 = Asciz	x;
const #71 = Asciz	Ljava/lang/Object;;
const #72 = Asciz	y;
const #73 = Asciz	LocalVariableTable;
const #74 = Asciz	div;
const #75 = Asciz	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;;
const #76 = Asciz	scala/math/Numeric$DoubleIsFractional;
const #77 = class	#76;	//  scala/math/Numeric$DoubleIsFractional
const #78 = Asciz	(DD)D;
const #79 = NameAndType	#74:#78;//  div:(DD)D
const #80 = InterfaceMethod	#77.#79;	//  scala/math/Numeric$DoubleIsFractional.div:(DD)D
const #81 = Asciz	boxToDouble;
const #82 = Asciz	(D)Ljava/lang/Double;;
const #83 = NameAndType	#81:#82;//  boxToDouble:(D)Ljava/lang/Double;
const #84 = Method	#59.#83;	//  scala/runtime/BoxesRunTime.boxToDouble:(D)Ljava/lang/Double;
const #85 = Asciz	mkNumericOps;
const #86 = Asciz	(Ljava/lang/Object;)Lscala/math/Numeric$Ops;;
const #87 = Asciz	scala/math/Fractional;
const #88 = class	#87;	//  scala/math/Fractional
const #89 = Asciz	(Ljava/lang/Object;)Lscala/math/Fractional$FractionalOps;;
const #90 = NameAndType	#85:#89;//  mkNumericOps:(Ljava/lang/Object;)Lscala/math/Fractional$FractionalOps;
const #91 = InterfaceMethod	#88.#90;	//  scala/math/Fractional.mkNumericOps:(Ljava/lang/Object;)Lscala/math/Fractional$FractionalOps;
const #92 = Asciz	lhs;
const #93 = Asciz	Signature;
const #94 = Asciz	plus;
const #95 = Asciz	scala/math/Numeric$DoubleIsConflicted;
const #96 = class	#95;	//  scala/math/Numeric$DoubleIsConflicted
const #97 = NameAndType	#94:#78;//  plus:(DD)D
const #98 = InterfaceMethod	#96.#97;	//  scala/math/Numeric$DoubleIsConflicted.plus:(DD)D
const #99 = Asciz	minus;
const #100 = NameAndType	#99:#78;//  minus:(DD)D
const #101 = InterfaceMethod	#96.#100;	//  scala/math/Numeric$DoubleIsConflicted.minus:(DD)D
const #102 = Asciz	times;
const #103 = NameAndType	#102:#78;//  times:(DD)D
const #104 = InterfaceMethod	#96.#103;	//  scala/math/Numeric$DoubleIsConflicted.times:(DD)D
const #105 = Asciz	negate;
const #106 = Asciz	(Ljava/lang/Object;)Ljava/lang/Object;;
const #107 = Asciz	(D)D;
const #108 = NameAndType	#105:#107;//  negate:(D)D
const #109 = InterfaceMethod	#96.#108;	//  scala/math/Numeric$DoubleIsConflicted.negate:(D)D
const #110 = Asciz	fromInt;
const #111 = Asciz	(I)Ljava/lang/Object;;
const #112 = Asciz	(I)D;
const #113 = NameAndType	#110:#112;//  fromInt:(I)D
const #114 = InterfaceMethod	#96.#113;	//  scala/math/Numeric$DoubleIsConflicted.fromInt:(I)D
const #115 = Asciz	I;
const #116 = Asciz	toInt;
const #117 = Asciz	(Ljava/lang/Object;)I;
const #118 = Asciz	(D)I;
const #119 = NameAndType	#116:#118;//  toInt:(D)I
const #120 = InterfaceMethod	#96.#119;	//  scala/math/Numeric$DoubleIsConflicted.toInt:(D)I
const #121 = Asciz	toLong;
const #122 = Asciz	(Ljava/lang/Object;)J;
const #123 = Asciz	(D)J;
const #124 = NameAndType	#121:#123;//  toLong:(D)J
const #125 = InterfaceMethod	#96.#124;	//  scala/math/Numeric$DoubleIsConflicted.toLong:(D)J
const #126 = Asciz	toFloat;
const #127 = Asciz	(Ljava/lang/Object;)F;
const #128 = Asciz	(D)F;
const #129 = NameAndType	#126:#128;//  toFloat:(D)F
const #130 = InterfaceMethod	#96.#129;	//  scala/math/Numeric$DoubleIsConflicted.toFloat:(D)F
const #131 = Asciz	toDouble;
const #132 = NameAndType	#131:#107;//  toDouble:(D)D
const #133 = InterfaceMethod	#96.#132;	//  scala/math/Numeric$DoubleIsConflicted.toDouble:(D)D
const #134 = Asciz	tryCompare;
const #135 = Asciz	(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Option;;
const #136 = Asciz	scala/math/Ordering;
const #137 = class	#136;	//  scala/math/Ordering
const #138 = Asciz	(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;;
const #139 = NameAndType	#134:#138;//  tryCompare:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
const #140 = InterfaceMethod	#137.#139;	//  scala/math/Ordering.tryCompare:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
const #141 = Asciz	reverse;
const #142 = Asciz	()Lscala/math/PartialOrdering;;
const #143 = Asciz	()Lscala/math/Ordering;;
const #144 = NameAndType	#141:#143;//  reverse:()Lscala/math/Ordering;
const #145 = InterfaceMethod	#137.#144;	//  scala/math/Ordering.reverse:()Lscala/math/Ordering;
const #146 = Asciz	mkOrderingOps;
const #147 = Asciz	(Ljava/lang/Object;)Lscala/math/Ordering$Ops;;
const #148 = Asciz	(Lscala/math/Ordering;Ljava/lang/Object;)Lscala/math/Ordering$Ops;;
const #149 = NameAndType	#146:#148;//  mkOrderingOps:(Lscala/math/Ordering;Ljava/lang/Object;)Lscala/math/Ordering$Ops;
const #150 = Method	#27.#149;	//  scala/math/Ordering$class.mkOrderingOps:(Lscala/math/Ordering;Ljava/lang/Object;)Lscala/math/Ordering$Ops;
const #151 = Asciz	on;
const #152 = Asciz	(Lscala/Function1;)Lscala/math/Ordering;;
const #153 = Asciz	(Lscala/math/Ordering;Lscala/Function1;)Lscala/math/Ordering;;
const #154 = NameAndType	#151:#153;//  on:(Lscala/math/Ordering;Lscala/Function1;)Lscala/math/Ordering;
const #155 = Method	#27.#154;	//  scala/math/Ordering$class.on:(Lscala/math/Ordering;Lscala/Function1;)Lscala/math/Ordering;
const #156 = Asciz	f;
const #157 = Asciz	Lscala/Function1;;
const #158 = Asciz	(Lscala/math/Ordering;)Lscala/math/Ordering;;
const #159 = NameAndType	#141:#158;//  reverse:(Lscala/math/Ordering;)Lscala/math/Ordering;
const #160 = Method	#27.#159;	//  scala/math/Ordering$class.reverse:(Lscala/math/Ordering;)Lscala/math/Ordering;
const #161 = Asciz	min;
const #162 = Asciz	(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;;
const #163 = NameAndType	#161:#162;//  min:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
const #164 = Method	#27.#163;	//  scala/math/Ordering$class.min:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
const #165 = Asciz	max;
const #166 = NameAndType	#165:#162;//  max:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
const #167 = Method	#27.#166;	//  scala/math/Ordering$class.max:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
const #168 = Asciz	equiv;
const #169 = Asciz	(Ljava/lang/Object;Ljava/lang/Object;)Z;
const #170 = Asciz	(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z;
const #171 = NameAndType	#168:#170;//  equiv:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #172 = Method	#27.#171;	//  scala/math/Ordering$class.equiv:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #173 = Asciz	gt;
const #174 = NameAndType	#173:#170;//  gt:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #175 = Method	#27.#174;	//  scala/math/Ordering$class.gt:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #176 = Asciz	lt;
const #177 = NameAndType	#176:#170;//  lt:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #178 = Method	#27.#177;	//  scala/math/Ordering$class.lt:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #179 = Asciz	gteq;
const #180 = NameAndType	#179:#170;//  gteq:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #181 = Method	#27.#180;	//  scala/math/Ordering$class.gteq:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #182 = Asciz	lteq;
const #183 = NameAndType	#182:#170;//  lteq:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #184 = Method	#27.#183;	//  scala/math/Ordering$class.lteq:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
const #185 = Asciz	(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;;
const #186 = NameAndType	#134:#185;//  tryCompare:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
const #187 = Method	#27.#186;	//  scala/math/Ordering$class.tryCompare:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
const #188 = Asciz	signum;
const #189 = Asciz	(Lscala/math/Numeric;Ljava/lang/Object;)I;
const #190 = NameAndType	#188:#189;//  signum:(Lscala/math/Numeric;Ljava/lang/Object;)I
const #191 = Method	#32.#190;	//  scala/math/Numeric$class.signum:(Lscala/math/Numeric;Ljava/lang/Object;)I
const #192 = Asciz	abs;
const #193 = Asciz	(Lscala/math/Numeric;Ljava/lang/Object;)Ljava/lang/Object;;
const #194 = NameAndType	#192:#193;//  abs:(Lscala/math/Numeric;Ljava/lang/Object;)Ljava/lang/Object;
const #195 = Method	#32.#194;	//  scala/math/Numeric$class.abs:(Lscala/math/Numeric;Ljava/lang/Object;)Ljava/lang/Object;
const #196 = Asciz	one;
const #197 = Asciz	()Ljava/lang/Object;;
const #198 = Asciz	(Lscala/math/Numeric;)Ljava/lang/Object;;
const #199 = NameAndType	#196:#198;//  one:(Lscala/math/Numeric;)Ljava/lang/Object;
const #200 = Method	#32.#199;	//  scala/math/Numeric$class.one:(Lscala/math/Numeric;)Ljava/lang/Object;
const #201 = Asciz	zero;
const #202 = NameAndType	#201:#198;//  zero:(Lscala/math/Numeric;)Ljava/lang/Object;
const #203 = Method	#32.#202;	//  scala/math/Numeric$class.zero:(Lscala/math/Numeric;)Ljava/lang/Object;
const #204 = Asciz	(Lscala/math/Numeric$DoubleIsConflicted;D)D;
const #205 = NameAndType	#131:#204;//  toDouble:(Lscala/math/Numeric$DoubleIsConflicted;D)D
const #206 = Method	#37.#205;	//  scala/math/Numeric$DoubleIsConflicted$class.toDouble:(Lscala/math/Numeric$DoubleIsConflicted;D)D
const #207 = Asciz	D;
const #208 = Asciz	(Lscala/math/Numeric$DoubleIsConflicted;D)F;
const #209 = NameAndType	#126:#208;//  toFloat:(Lscala/math/Numeric$DoubleIsConflicted;D)F
const #210 = Method	#37.#209;	//  scala/math/Numeric$DoubleIsConflicted$class.toFloat:(Lscala/math/Numeric$DoubleIsConflicted;D)F
const #211 = Asciz	(Lscala/math/Numeric$DoubleIsConflicted;D)J;
const #212 = NameAndType	#121:#211;//  toLong:(Lscala/math/Numeric$DoubleIsConflicted;D)J
const #213 = Method	#37.#212;	//  scala/math/Numeric$DoubleIsConflicted$class.toLong:(Lscala/math/Numeric$DoubleIsConflicted;D)J
const #214 = Asciz	(Lscala/math/Numeric$DoubleIsConflicted;D)I;
const #215 = NameAndType	#116:#214;//  toInt:(Lscala/math/Numeric$DoubleIsConflicted;D)I
const #216 = Method	#37.#215;	//  scala/math/Numeric$DoubleIsConflicted$class.toInt:(Lscala/math/Numeric$DoubleIsConflicted;D)I
const #217 = Asciz	(Lscala/math/Numeric$DoubleIsConflicted;I)D;
const #218 = NameAndType	#110:#217;//  fromInt:(Lscala/math/Numeric$DoubleIsConflicted;I)D
const #219 = Method	#37.#218;	//  scala/math/Numeric$DoubleIsConflicted$class.fromInt:(Lscala/math/Numeric$DoubleIsConflicted;I)D
const #220 = NameAndType	#105:#204;//  negate:(Lscala/math/Numeric$DoubleIsConflicted;D)D
const #221 = Method	#37.#220;	//  scala/math/Numeric$DoubleIsConflicted$class.negate:(Lscala/math/Numeric$DoubleIsConflicted;D)D
const #222 = Asciz	(Lscala/math/Numeric$DoubleIsConflicted;DD)D;
const #223 = NameAndType	#102:#222;//  times:(Lscala/math/Numeric$DoubleIsConflicted;DD)D
const #224 = Method	#37.#223;	//  scala/math/Numeric$DoubleIsConflicted$class.times:(Lscala/math/Numeric$DoubleIsConflicted;DD)D
const #225 = NameAndType	#99:#222;//  minus:(Lscala/math/Numeric$DoubleIsConflicted;DD)D
const #226 = Method	#37.#225;	//  scala/math/Numeric$DoubleIsConflicted$class.minus:(Lscala/math/Numeric$DoubleIsConflicted;DD)D
const #227 = NameAndType	#94:#222;//  plus:(Lscala/math/Numeric$DoubleIsConflicted;DD)D
const #228 = Method	#37.#227;	//  scala/math/Numeric$DoubleIsConflicted$class.plus:(Lscala/math/Numeric$DoubleIsConflicted;DD)D
const #229 = Asciz	(Lscala/math/Fractional;Ljava/lang/Object;)Lscala/math/Fractional$FractionalOps;;
const #230 = NameAndType	#85:#229;//  mkNumericOps:(Lscala/math/Fractional;Ljava/lang/Object;)Lscala/math/Fractional$FractionalOps;
const #231 = Method	#42.#230;	//  scala/math/Fractional$class.mkNumericOps:(Lscala/math/Fractional;Ljava/lang/Object;)Lscala/math/Fractional$FractionalOps;
const #232 = Asciz	(Lscala/math/Numeric$DoubleIsFractional;DD)D;
const #233 = NameAndType	#74:#232;//  div:(Lscala/math/Numeric$DoubleIsFractional;DD)D
const #234 = Method	#47.#233;	//  scala/math/Numeric$DoubleIsFractional$class.div:(Lscala/math/Numeric$DoubleIsFractional;DD)D
const #235 = Asciz	(Lscala/math/Ordering$DoubleOrdering;DD)I;
const #236 = NameAndType	#56:#235;//  compare:(Lscala/math/Ordering$DoubleOrdering;DD)I
const #237 = Method	#52.#236;	//  scala/math/Ordering$DoubleOrdering$class.compare:(Lscala/math/Ordering$DoubleOrdering;DD)I
const #238 = Asciz	InnerClasses;
const #239 = Asciz	scala/math/Numeric$Ops;
const #240 = class	#239;	//  scala/math/Numeric$Ops
const #241 = Asciz	scala/math/Numeric;
const #242 = class	#241;	//  scala/math/Numeric
const #243 = Asciz	Ops;
const #244 = Asciz	scala/math/Ordering$Ops;
const #245 = class	#244;	//  scala/math/Ordering$Ops
const #246 = Asciz	DoubleOrdering;
const #247 = Asciz	scala/math/Fractional$FractionalOps;
const #248 = class	#247;	//  scala/math/Fractional$FractionalOps
const #249 = Asciz	FractionalOps;
const #250 = Asciz	DoubleIsConflicted;
const #251 = Asciz	DoubleIsFractional;
const #252 = Asciz	scala/ScalaObject;
const #253 = class	#252;	//  scala/ScalaObject

{
public static final scala.math.Numeric$DoubleIsFractional$ MODULE$;

public static {};
  Code:
   Stack=1, Locals=0, Args_size=0
   0:	new	#10; //class scala/math/Numeric$DoubleIsFractional$
   3:	invokespecial	#13; //Method "<init>":()V
   6:	return

public scala.math.Numeric$DoubleIsFractional$();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokespecial	#17; //Method java/lang/Object."<init>":()V
   4:	aload_0
   5:	putstatic	#19; //Field MODULE$:Lscala/math/Numeric$DoubleIsFractional$;
   8:	aload_0
   9:	invokestatic	#25; //Method scala/math/PartialOrdering$class.$init$:(Lscala/math/PartialOrdering;)V
   12:	aload_0
   13:	invokestatic	#30; //Method scala/math/Ordering$class.$init$:(Lscala/math/Ordering;)V
   16:	aload_0
   17:	invokestatic	#35; //Method scala/math/Numeric$class.$init$:(Lscala/math/Numeric;)V
   20:	aload_0
   21:	invokestatic	#40; //Method scala/math/Numeric$DoubleIsConflicted$class.$init$:(Lscala/math/Numeric$DoubleIsConflicted;)V
   24:	aload_0
   25:	invokestatic	#45; //Method scala/math/Fractional$class.$init$:(Lscala/math/Fractional;)V
   28:	aload_0
   29:	invokestatic	#50; //Method scala/math/Numeric$DoubleIsFractional$class.$init$:(Lscala/math/Numeric$DoubleIsFractional;)V
   32:	aload_0
   33:	invokestatic	#55; //Method scala/math/Ordering$DoubleOrdering$class.$init$:(Lscala/math/Ordering$DoubleOrdering;)V
   36:	return
  LineNumberTable: 
   line 151: 0


public int compare(java.lang.Object, java.lang.Object);
  Code:
   Stack=5, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   5:	aload_2
   6:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   9:	invokeinterface	#68,  5; //InterfaceMethod scala/math/Ordering$DoubleOrdering.compare:(DD)I
   14:	ireturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      15      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      15      1    x       Ljava/lang/Object;
   0      15      2    y       Ljava/lang/Object;


public java.lang.Object div(java.lang.Object, java.lang.Object);
  Code:
   Stack=5, Locals=5, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   5:	aload_2
   6:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   9:	invokeinterface	#80,  5; //InterfaceMethod scala/math/Numeric$DoubleIsFractional.div:(DD)D
   14:	dstore_3
   15:	dload_3
   16:	invokestatic	#84; //Method scala/runtime/BoxesRunTime.boxToDouble:(D)Ljava/lang/Double;
   19:	areturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      20      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      20      1    x       Ljava/lang/Object;
   0      20      2    y       Ljava/lang/Object;


public scala.math.Numeric$Ops mkNumericOps(java.lang.Object);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokeinterface	#91,  2; //InterfaceMethod scala/math/Fractional.mkNumericOps:(Ljava/lang/Object;)Lscala/math/Fractional$FractionalOps;
   7:	areturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      8      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      8      1    lhs       Ljava/lang/Object;

  Signature: length = 0x2
   00 56 

public java.lang.Object plus(java.lang.Object, java.lang.Object);
  Code:
   Stack=5, Locals=5, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   5:	aload_2
   6:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   9:	invokeinterface	#98,  5; //InterfaceMethod scala/math/Numeric$DoubleIsConflicted.plus:(DD)D
   14:	dstore_3
   15:	dload_3
   16:	invokestatic	#84; //Method scala/runtime/BoxesRunTime.boxToDouble:(D)Ljava/lang/Double;
   19:	areturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      20      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      20      1    x       Ljava/lang/Object;
   0      20      2    y       Ljava/lang/Object;


public java.lang.Object minus(java.lang.Object, java.lang.Object);
  Code:
   Stack=5, Locals=5, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   5:	aload_2
   6:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   9:	invokeinterface	#101,  5; //InterfaceMethod scala/math/Numeric$DoubleIsConflicted.minus:(DD)D
   14:	dstore_3
   15:	dload_3
   16:	invokestatic	#84; //Method scala/runtime/BoxesRunTime.boxToDouble:(D)Ljava/lang/Double;
   19:	areturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      20      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      20      1    x       Ljava/lang/Object;
   0      20      2    y       Ljava/lang/Object;


public java.lang.Object times(java.lang.Object, java.lang.Object);
  Code:
   Stack=5, Locals=5, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   5:	aload_2
   6:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   9:	invokeinterface	#104,  5; //InterfaceMethod scala/math/Numeric$DoubleIsConflicted.times:(DD)D
   14:	dstore_3
   15:	dload_3
   16:	invokestatic	#84; //Method scala/runtime/BoxesRunTime.boxToDouble:(D)Ljava/lang/Double;
   19:	areturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      20      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      20      1    x       Ljava/lang/Object;
   0      20      2    y       Ljava/lang/Object;


public java.lang.Object negate(java.lang.Object);
  Code:
   Stack=3, Locals=4, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   5:	invokeinterface	#109,  3; //InterfaceMethod scala/math/Numeric$DoubleIsConflicted.negate:(D)D
   10:	dstore_2
   11:	dload_2
   12:	invokestatic	#84; //Method scala/runtime/BoxesRunTime.boxToDouble:(D)Ljava/lang/Double;
   15:	areturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      16      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      16      1    x       Ljava/lang/Object;


public java.lang.Object fromInt(int);
  Code:
   Stack=2, Locals=4, Args_size=2
   0:	aload_0
   1:	iload_1
   2:	invokeinterface	#114,  2; //InterfaceMethod scala/math/Numeric$DoubleIsConflicted.fromInt:(I)D
   7:	dstore_2
   8:	dload_2
   9:	invokestatic	#84; //Method scala/runtime/BoxesRunTime.boxToDouble:(D)Ljava/lang/Double;
   12:	areturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      13      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      13      1    x       I


public int toInt(java.lang.Object);
  Code:
   Stack=3, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   5:	invokeinterface	#120,  3; //InterfaceMethod scala/math/Numeric$DoubleIsConflicted.toInt:(D)I
   10:	ireturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      11      1    x       Ljava/lang/Object;


public long toLong(java.lang.Object);
  Code:
   Stack=3, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   5:	invokeinterface	#125,  3; //InterfaceMethod scala/math/Numeric$DoubleIsConflicted.toLong:(D)J
   10:	lreturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      11      1    x       Ljava/lang/Object;


public float toFloat(java.lang.Object);
  Code:
   Stack=3, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   5:	invokeinterface	#130,  3; //InterfaceMethod scala/math/Numeric$DoubleIsConflicted.toFloat:(D)F
   10:	freturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      11      1    x       Ljava/lang/Object;


public double toDouble(java.lang.Object);
  Code:
   Stack=3, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#63; //Method scala/runtime/BoxesRunTime.unboxToDouble:(Ljava/lang/Object;)D
   5:	invokeinterface	#133,  3; //InterfaceMethod scala/math/Numeric$DoubleIsConflicted.toDouble:(D)D
   10:	dreturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      11      1    x       Ljava/lang/Object;


public scala.Option tryCompare(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokeinterface	#140,  3; //InterfaceMethod scala/math/Ordering.tryCompare:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
   8:	areturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      9      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      9      1    x       Ljava/lang/Object;
   0      9      2    y       Ljava/lang/Object;


public scala.math.PartialOrdering reverse();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokeinterface	#145,  1; //InterfaceMethod scala/math/Ordering.reverse:()Lscala/math/Ordering;
   6:	areturn
  LineNumberTable: 
   line 151: 0


public scala.math.Ordering$Ops mkOrderingOps(java.lang.Object);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#150; //Method scala/math/Ordering$class.mkOrderingOps:(Lscala/math/Ordering;Ljava/lang/Object;)Lscala/math/Ordering$Ops;
   5:	areturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      6      1    lhs       Ljava/lang/Object;

  Signature: length = 0x2
   00 FFFFFF93 

public scala.math.Ordering on(scala.Function1);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#155; //Method scala/math/Ordering$class.on:(Lscala/math/Ordering;Lscala/Function1;)Lscala/math/Ordering;
   5:	areturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      6      1    f       Lscala/Function1;


public scala.math.Ordering reverse();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokestatic	#160; //Method scala/math/Ordering$class.reverse:(Lscala/math/Ordering;)Lscala/math/Ordering;
   4:	areturn
  LineNumberTable: 
   line 151: 0


public java.lang.Object min(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokestatic	#164; //Method scala/math/Ordering$class.min:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   6:	areturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public java.lang.Object max(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokestatic	#167; //Method scala/math/Ordering$class.max:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   6:	areturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public boolean equiv(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokestatic	#172; //Method scala/math/Ordering$class.equiv:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
   6:	ireturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public boolean gt(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokestatic	#175; //Method scala/math/Ordering$class.gt:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
   6:	ireturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public boolean lt(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokestatic	#178; //Method scala/math/Ordering$class.lt:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
   6:	ireturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public boolean gteq(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokestatic	#181; //Method scala/math/Ordering$class.gteq:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
   6:	ireturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public boolean lteq(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokestatic	#184; //Method scala/math/Ordering$class.lteq:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Z
   6:	ireturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public scala.Some tryCompare(java.lang.Object, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokestatic	#187; //Method scala/math/Ordering$class.tryCompare:(Lscala/math/Ordering;Ljava/lang/Object;Ljava/lang/Object;)Lscala/Some;
   6:	areturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      7      1    x       Ljava/lang/Object;
   0      7      2    y       Ljava/lang/Object;


public int signum(java.lang.Object);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#191; //Method scala/math/Numeric$class.signum:(Lscala/math/Numeric;Ljava/lang/Object;)I
   5:	ireturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      6      1    x       Ljava/lang/Object;


public java.lang.Object abs(java.lang.Object);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#195; //Method scala/math/Numeric$class.abs:(Lscala/math/Numeric;Ljava/lang/Object;)Ljava/lang/Object;
   5:	areturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      6      1    x       Ljava/lang/Object;


public java.lang.Object one();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokestatic	#200; //Method scala/math/Numeric$class.one:(Lscala/math/Numeric;)Ljava/lang/Object;
   4:	areturn
  LineNumberTable: 
   line 151: 0


public java.lang.Object zero();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokestatic	#203; //Method scala/math/Numeric$class.zero:(Lscala/math/Numeric;)Ljava/lang/Object;
   4:	areturn
  LineNumberTable: 
   line 151: 0


public double toDouble(double);
  Code:
   Stack=3, Locals=3, Args_size=2
   0:	aload_0
   1:	dload_1
   2:	invokestatic	#206; //Method scala/math/Numeric$DoubleIsConflicted$class.toDouble:(Lscala/math/Numeric$DoubleIsConflicted;D)D
   5:	dreturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      6      1    x       D


public float toFloat(double);
  Code:
   Stack=3, Locals=3, Args_size=2
   0:	aload_0
   1:	dload_1
   2:	invokestatic	#210; //Method scala/math/Numeric$DoubleIsConflicted$class.toFloat:(Lscala/math/Numeric$DoubleIsConflicted;D)F
   5:	freturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      6      1    x       D


public long toLong(double);
  Code:
   Stack=3, Locals=3, Args_size=2
   0:	aload_0
   1:	dload_1
   2:	invokestatic	#213; //Method scala/math/Numeric$DoubleIsConflicted$class.toLong:(Lscala/math/Numeric$DoubleIsConflicted;D)J
   5:	lreturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      6      1    x       D


public int toInt(double);
  Code:
   Stack=3, Locals=3, Args_size=2
   0:	aload_0
   1:	dload_1
   2:	invokestatic	#216; //Method scala/math/Numeric$DoubleIsConflicted$class.toInt:(Lscala/math/Numeric$DoubleIsConflicted;D)I
   5:	ireturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      6      1    x       D


public double fromInt(int);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	iload_1
   2:	invokestatic	#219; //Method scala/math/Numeric$DoubleIsConflicted$class.fromInt:(Lscala/math/Numeric$DoubleIsConflicted;I)D
   5:	dreturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      6      1    x       I


public double negate(double);
  Code:
   Stack=3, Locals=3, Args_size=2
   0:	aload_0
   1:	dload_1
   2:	invokestatic	#221; //Method scala/math/Numeric$DoubleIsConflicted$class.negate:(Lscala/math/Numeric$DoubleIsConflicted;D)D
   5:	dreturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      6      1    x       D


public double times(double, double);
  Code:
   Stack=5, Locals=5, Args_size=3
   0:	aload_0
   1:	dload_1
   2:	dload_3
   3:	invokestatic	#224; //Method scala/math/Numeric$DoubleIsConflicted$class.times:(Lscala/math/Numeric$DoubleIsConflicted;DD)D
   6:	dreturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      7      1    x       D
   0      7      3    y       D


public double minus(double, double);
  Code:
   Stack=5, Locals=5, Args_size=3
   0:	aload_0
   1:	dload_1
   2:	dload_3
   3:	invokestatic	#226; //Method scala/math/Numeric$DoubleIsConflicted$class.minus:(Lscala/math/Numeric$DoubleIsConflicted;DD)D
   6:	dreturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      7      1    x       D
   0      7      3    y       D


public double plus(double, double);
  Code:
   Stack=5, Locals=5, Args_size=3
   0:	aload_0
   1:	dload_1
   2:	dload_3
   3:	invokestatic	#228; //Method scala/math/Numeric$DoubleIsConflicted$class.plus:(Lscala/math/Numeric$DoubleIsConflicted;DD)D
   6:	dreturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      7      1    x       D
   0      7      3    y       D


public scala.math.Fractional$FractionalOps mkNumericOps(java.lang.Object);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#231; //Method scala/math/Fractional$class.mkNumericOps:(Lscala/math/Fractional;Ljava/lang/Object;)Lscala/math/Fractional$FractionalOps;
   5:	areturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      6      1    lhs       Ljava/lang/Object;

  Signature: length = 0x2
   00 59 

public double div(double, double);
  Code:
   Stack=5, Locals=5, Args_size=3
   0:	aload_0
   1:	dload_1
   2:	dload_3
   3:	invokestatic	#234; //Method scala/math/Numeric$DoubleIsFractional$class.div:(Lscala/math/Numeric$DoubleIsFractional;DD)D
   6:	dreturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      7      1    x       D
   0      7      3    y       D


public int compare(double, double);
  Code:
   Stack=5, Locals=5, Args_size=3
   0:	aload_0
   1:	dload_1
   2:	dload_3
   3:	invokestatic	#237; //Method scala/math/Ordering$DoubleOrdering$class.compare:(Lscala/math/Ordering$DoubleOrdering;DD)I
   6:	ireturn
  LineNumberTable: 
   line 151: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/math/Numeric$DoubleIsFractional$;
   0      7      1    x       D
   0      7      3    y       D


}

