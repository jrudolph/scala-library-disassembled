Compiled from "TokenTests.scala"
public final class scala.xml.parsing.TokenTests$$anonfun$checkSysID$1 extends scala.runtime.AbstractFunction1 implements java.io.Serializable
  SourceFile: "TokenTests.scala"
  Scala: length = 0x
   
  InnerClass: 
   public final #66= #9 of #65; //$anonfun$checkSysID$1=class scala/xml/parsing/TokenTests$$anonfun$checkSysID$1 of class scala/xml/parsing/TokenTests
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	TokenTests.scala;
const #3 = Asciz	<clinit>;
const #4 = Asciz	()V;
const #5 = Asciz	Code;
const #6 = Asciz	serialVersionUID;
const #7 = Asciz	J;
const #8 = Asciz	scala/xml/parsing/TokenTests$$anonfun$checkSysID$1;
const #9 = class	#8;	//  scala/xml/parsing/TokenTests$$anonfun$checkSysID$1
const #10 = NameAndType	#6:#7;//  serialVersionUID:J
const #11 = Field	#9.#10;	//  scala/xml/parsing/TokenTests$$anonfun$checkSysID$1.serialVersionUID:J
const #12 = Asciz	s$1;
const #13 = Asciz	Ljava/lang/String;;
const #14 = Asciz	<init>;
const #15 = Asciz	(Lscala/xml/parsing/TokenTests;Ljava/lang/String;)V;
const #16 = Asciz	LineNumberTable;
const #17 = NameAndType	#12:#13;//  s$1:Ljava/lang/String;
const #18 = Field	#9.#17;	//  scala/xml/parsing/TokenTests$$anonfun$checkSysID$1.s$1:Ljava/lang/String;
const #19 = Asciz	scala/runtime/AbstractFunction1;
const #20 = class	#19;	//  scala/runtime/AbstractFunction1
const #21 = NameAndType	#14:#4;//  "<init>":()V
const #22 = Method	#20.#21;	//  scala/runtime/AbstractFunction1."<init>":()V
const #23 = Asciz	this;
const #24 = Asciz	Lscala/xml/parsing/TokenTests$$anonfun$checkSysID$1;;
const #25 = Asciz	$outer;
const #26 = Asciz	Lscala/xml/parsing/TokenTests;;
const #27 = Asciz	LocalVariableTable;
const #28 = Asciz	apply;
const #29 = Asciz	(Ljava/lang/Object;)Ljava/lang/Object;;
const #30 = Asciz	scala/runtime/BoxesRunTime;
const #31 = class	#30;	//  scala/runtime/BoxesRunTime
const #32 = Asciz	unboxToChar;
const #33 = Asciz	(Ljava/lang/Object;)C;
const #34 = NameAndType	#32:#33;//  unboxToChar:(Ljava/lang/Object;)C
const #35 = Method	#31.#34;	//  scala/runtime/BoxesRunTime.unboxToChar:(Ljava/lang/Object;)C
const #36 = Asciz	(C)Z;
const #37 = NameAndType	#28:#36;//  apply:(C)Z
const #38 = Method	#9.#37;	//  scala/xml/parsing/TokenTests$$anonfun$checkSysID$1.apply:(C)Z
const #39 = Asciz	boxToBoolean;
const #40 = Asciz	(Z)Ljava/lang/Boolean;;
const #41 = NameAndType	#39:#40;//  boxToBoolean:(Z)Ljava/lang/Boolean;
const #42 = Method	#31.#41;	//  scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
const #43 = Asciz	v1;
const #44 = Asciz	Ljava/lang/Object;;
const #45 = Asciz	scala/collection/immutable/StringOps;
const #46 = class	#45;	//  scala/collection/immutable/StringOps
const #47 = Asciz	(Ljava/lang/String;)V;
const #48 = NameAndType	#14:#47;//  "<init>":(Ljava/lang/String;)V
const #49 = Method	#46.#48;	//  scala/collection/immutable/StringOps."<init>":(Ljava/lang/String;)V
const #50 = Asciz	boxToCharacter;
const #51 = Asciz	(C)Ljava/lang/Character;;
const #52 = NameAndType	#50:#51;//  boxToCharacter:(C)Ljava/lang/Character;
const #53 = Method	#31.#52;	//  scala/runtime/BoxesRunTime.boxToCharacter:(C)Ljava/lang/Character;
const #54 = Asciz	scala/collection/SeqLike;
const #55 = class	#54;	//  scala/collection/SeqLike
const #56 = Asciz	contains;
const #57 = Asciz	(Ljava/lang/Object;)Z;
const #58 = NameAndType	#56:#57;//  contains:(Ljava/lang/Object;)Z
const #59 = InterfaceMethod	#55.#58;	//  scala/collection/SeqLike.contains:(Ljava/lang/Object;)Z
const #60 = Asciz	c;
const #61 = Asciz	C;
const #62 = Asciz	Scala;
const #63 = Asciz	InnerClasses;
const #64 = Asciz	scala/xml/parsing/TokenTests;
const #65 = class	#64;	//  scala/xml/parsing/TokenTests
const #66 = Asciz	$anonfun$checkSysID$1;
const #67 = Asciz	java/io/Serializable;
const #68 = class	#67;	//  java/io/Serializable

{
public static final long serialVersionUID;

public static {};
  Code:
   Stack=2, Locals=0, Args_size=0
   0:	lconst_0
   1:	putstatic	#11; //Field serialVersionUID:J
   4:	return

public scala.xml.parsing.TokenTests$$anonfun$checkSysID$1(scala.xml.parsing.TokenTests, java.lang.String);
  Code:
   Stack=2, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_2
   2:	putfield	#18; //Field s$1:Ljava/lang/String;
   5:	aload_0
   6:	invokespecial	#22; //Method scala/runtime/AbstractFunction1."<init>":()V
   9:	return
  LineNumberTable: 
   line 95: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      10      0    this       Lscala/xml/parsing/TokenTests$$anonfun$checkSysID$1;
   0      10      1    $outer       Lscala/xml/parsing/TokenTests;


public final java.lang.Object apply(java.lang.Object);
  Code:
   Stack=2, Locals=3, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#35; //Method scala/runtime/BoxesRunTime.unboxToChar:(Ljava/lang/Object;)C
   5:	invokevirtual	#38; //Method apply:(C)Z
   8:	istore_2
   9:	iload_2
   10:	invokestatic	#42; //Method scala/runtime/BoxesRunTime.boxToBoolean:(Z)Ljava/lang/Boolean;
   13:	areturn
  LineNumberTable: 
   line 95: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      14      0    this       Lscala/xml/parsing/TokenTests$$anonfun$checkSysID$1;
   0      14      1    v1       Ljava/lang/Object;


public final boolean apply(char);
  Code:
   Stack=3, Locals=3, Args_size=2
   0:	aload_0
   1:	getfield	#18; //Field s$1:Ljava/lang/String;
   4:	astore_2
   5:	new	#46; //class scala/collection/immutable/StringOps
   8:	dup
   9:	aload_2
   10:	invokespecial	#49; //Method scala/collection/immutable/StringOps."<init>":(Ljava/lang/String;)V
   13:	iload_1
   14:	invokestatic	#53; //Method scala/runtime/BoxesRunTime.boxToCharacter:(C)Ljava/lang/Character;
   17:	invokeinterface	#59,  2; //InterfaceMethod scala/collection/SeqLike.contains:(Ljava/lang/Object;)Z
   22:	ifeq	29
   25:	iconst_0
   26:	goto	30
   29:	iconst_1
   30:	ireturn
  LineNumberTable: 
   line 95: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      31      0    this       Lscala/xml/parsing/TokenTests$$anonfun$checkSysID$1;
   0      31      1    c       C


}

