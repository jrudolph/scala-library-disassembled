Compiled from "MarkupParser.scala"
public final class scala.xml.parsing.MarkupParser$$anonfun$appendText$1 extends scala.runtime.AbstractFunction1 implements java.io.Serializable
  SourceFile: "MarkupParser.scala"
  Scala: length = 0x
   
  InnerClass: 
   public final #71= #9 of #47; //$anonfun$appendText$1=class scala/xml/parsing/MarkupParser$$anonfun$appendText$1 of class scala/xml/parsing/MarkupParser
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	MarkupParser.scala;
const #3 = Asciz	<clinit>;
const #4 = Asciz	()V;
const #5 = Asciz	Code;
const #6 = Asciz	serialVersionUID;
const #7 = Asciz	J;
const #8 = Asciz	scala/xml/parsing/MarkupParser$$anonfun$appendText$1;
const #9 = class	#8;	//  scala/xml/parsing/MarkupParser$$anonfun$appendText$1
const #10 = NameAndType	#6:#7;//  serialVersionUID:J
const #11 = Field	#9.#10;	//  scala/xml/parsing/MarkupParser$$anonfun$appendText$1.serialVersionUID:J
const #12 = Asciz	ts$1;
const #13 = Asciz	Lscala/xml/NodeBuffer;;
const #14 = Asciz	pos$1;
const #15 = Asciz	I;
const #16 = Asciz	$outer;
const #17 = Asciz	Lscala/xml/parsing/MarkupParser;;
const #18 = Asciz	<init>;
const #19 = Asciz	(Lscala/xml/parsing/MarkupParser;ILscala/xml/NodeBuffer;)V;
const #20 = Asciz	LineNumberTable;
const #21 = Asciz	java/lang/NullPointerException;
const #22 = class	#21;	//  java/lang/NullPointerException
const #23 = NameAndType	#18:#4;//  "<init>":()V
const #24 = Method	#22.#23;	//  java/lang/NullPointerException."<init>":()V
const #25 = NameAndType	#16:#17;//  $outer:Lscala/xml/parsing/MarkupParser;
const #26 = Field	#9.#25;	//  scala/xml/parsing/MarkupParser$$anonfun$appendText$1.$outer:Lscala/xml/parsing/MarkupParser;
const #27 = NameAndType	#14:#15;//  pos$1:I
const #28 = Field	#9.#27;	//  scala/xml/parsing/MarkupParser$$anonfun$appendText$1.pos$1:I
const #29 = NameAndType	#12:#13;//  ts$1:Lscala/xml/NodeBuffer;
const #30 = Field	#9.#29;	//  scala/xml/parsing/MarkupParser$$anonfun$appendText$1.ts$1:Lscala/xml/NodeBuffer;
const #31 = Asciz	scala/runtime/AbstractFunction1;
const #32 = class	#31;	//  scala/runtime/AbstractFunction1
const #33 = Method	#32.#23;	//  scala/runtime/AbstractFunction1."<init>":()V
const #34 = Asciz	this;
const #35 = Asciz	Lscala/xml/parsing/MarkupParser$$anonfun$appendText$1;;
const #36 = Asciz	LocalVariableTable;
const #37 = Asciz	apply;
const #38 = Asciz	(Ljava/lang/Object;)Ljava/lang/Object;;
const #39 = Asciz	scala/xml/Text;
const #40 = class	#39;	//  scala/xml/Text
const #41 = Asciz	(Lscala/xml/Text;)Lscala/xml/NodeBuffer;;
const #42 = NameAndType	#37:#41;//  apply:(Lscala/xml/Text;)Lscala/xml/NodeBuffer;
const #43 = Method	#9.#42;	//  scala/xml/parsing/MarkupParser$$anonfun$appendText$1.apply:(Lscala/xml/Text;)Lscala/xml/NodeBuffer;
const #44 = Asciz	v1;
const #45 = Asciz	Ljava/lang/Object;;
const #46 = Asciz	scala/xml/parsing/MarkupParser;
const #47 = class	#46;	//  scala/xml/parsing/MarkupParser
const #48 = Asciz	scala$xml$parsing$MarkupParser$$handle;
const #49 = Asciz	()Lscala/xml/parsing/MarkupHandler;;
const #50 = NameAndType	#48:#49;//  scala$xml$parsing$MarkupParser$$handle:()Lscala/xml/parsing/MarkupHandler;
const #51 = InterfaceMethod	#47.#50;	//  scala/xml/parsing/MarkupParser.scala$xml$parsing$MarkupParser$$handle:()Lscala/xml/parsing/MarkupHandler;
const #52 = Asciz	text;
const #53 = Asciz	()Ljava/lang/String;;
const #54 = NameAndType	#52:#53;//  text:()Ljava/lang/String;
const #55 = Method	#40.#54;	//  scala/xml/Text.text:()Ljava/lang/String;
const #56 = Asciz	scala/xml/parsing/MarkupHandler;
const #57 = class	#56;	//  scala/xml/parsing/MarkupHandler
const #58 = Asciz	(ILjava/lang/String;)Lscala/xml/NodeSeq;;
const #59 = NameAndType	#52:#58;//  text:(ILjava/lang/String;)Lscala/xml/NodeSeq;
const #60 = Method	#57.#59;	//  scala/xml/parsing/MarkupHandler.text:(ILjava/lang/String;)Lscala/xml/NodeSeq;
const #61 = Asciz	scala/xml/NodeBuffer;
const #62 = class	#61;	//  scala/xml/NodeBuffer
const #63 = Asciz	$amp$plus;
const #64 = Asciz	(Ljava/lang/Object;)Lscala/xml/NodeBuffer;;
const #65 = NameAndType	#63:#64;//  $amp$plus:(Ljava/lang/Object;)Lscala/xml/NodeBuffer;
const #66 = Method	#62.#65;	//  scala/xml/NodeBuffer.$amp$plus:(Ljava/lang/Object;)Lscala/xml/NodeBuffer;
const #67 = Asciz	t;
const #68 = Asciz	Lscala/xml/Text;;
const #69 = Asciz	Scala;
const #70 = Asciz	InnerClasses;
const #71 = Asciz	$anonfun$appendText$1;
const #72 = Asciz	java/io/Serializable;
const #73 = class	#72;	//  java/io/Serializable

{
public static final long serialVersionUID;

public static {};
  Code:
   Stack=2, Locals=0, Args_size=0
   0:	lconst_0
   1:	putstatic	#11; //Field serialVersionUID:J
   4:	return

public scala.xml.parsing.MarkupParser$$anonfun$appendText$1(scala.xml.parsing.MarkupParser, int, scala.xml.NodeBuffer);
  Code:
   Stack=2, Locals=4, Args_size=4
   0:	aload_1
   1:	ifnonnull	12
   4:	new	#22; //class java/lang/NullPointerException
   7:	dup
   8:	invokespecial	#24; //Method java/lang/NullPointerException."<init>":()V
   11:	athrow
   12:	aload_0
   13:	aload_1
   14:	putfield	#26; //Field $outer:Lscala/xml/parsing/MarkupParser;
   17:	aload_0
   18:	iload_2
   19:	putfield	#28; //Field pos$1:I
   22:	aload_0
   23:	aload_3
   24:	putfield	#30; //Field ts$1:Lscala/xml/NodeBuffer;
   27:	aload_0
   28:	invokespecial	#33; //Method scala/runtime/AbstractFunction1."<init>":()V
   31:	return
  LineNumberTable: 
   line 445: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      32      0    this       Lscala/xml/parsing/MarkupParser$$anonfun$appendText$1;
   0      32      1    $outer       Lscala/xml/parsing/MarkupParser;


public final java.lang.Object apply(java.lang.Object);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	checkcast	#40; //class scala/xml/Text
   5:	invokevirtual	#43; //Method apply:(Lscala/xml/Text;)Lscala/xml/NodeBuffer;
   8:	areturn
  LineNumberTable: 
   line 445: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      9      0    this       Lscala/xml/parsing/MarkupParser$$anonfun$appendText$1;
   0      9      1    v1       Ljava/lang/Object;


public final scala.xml.NodeBuffer apply(scala.xml.Text);
  Code:
   Stack=4, Locals=2, Args_size=2
   0:	aload_0
   1:	getfield	#30; //Field ts$1:Lscala/xml/NodeBuffer;
   4:	aload_0
   5:	getfield	#26; //Field $outer:Lscala/xml/parsing/MarkupParser;
   8:	invokeinterface	#51,  1; //InterfaceMethod scala/xml/parsing/MarkupParser.scala$xml$parsing$MarkupParser$$handle:()Lscala/xml/parsing/MarkupHandler;
   13:	aload_0
   14:	getfield	#28; //Field pos$1:I
   17:	aload_1
   18:	invokevirtual	#55; //Method scala/xml/Text.text:()Ljava/lang/String;
   21:	invokevirtual	#60; //Method scala/xml/parsing/MarkupHandler.text:(ILjava/lang/String;)Lscala/xml/NodeSeq;
   24:	invokevirtual	#66; //Method scala/xml/NodeBuffer.$amp$plus:(Ljava/lang/Object;)Lscala/xml/NodeBuffer;
   27:	areturn
  LineNumberTable: 
   line 446: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      28      0    this       Lscala/xml/parsing/MarkupParser$$anonfun$appendText$1;
   0      28      1    t       Lscala/xml/Text;


}

