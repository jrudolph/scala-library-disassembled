Compiled from "MarkupParser.scala"
public final class scala.xml.parsing.MarkupParser$$anonfun$appendText$1 extends java.lang.Object implements scala.Function1,scala.ScalaObject,java.io.Serializable
  SourceFile: "MarkupParser.scala"
  Scala: length = 0x
   
  InnerClass: 
   public final $anonfun$appendText$1=class scala/xml/parsing/MarkupParser$$anonfun$appendText$1 of class scala/xml/parsing/MarkupParser
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	MarkupParser.scala;
Asciz	<clinit>;
Asciz	()V;
Asciz	Code;
Asciz	serialVersionUID;
Asciz	J;
Asciz	scala/xml/parsing/MarkupParser$$anonfun$appendText$1;
class	scala/xml/parsing/MarkupParser$$anonfun$appendText$1
NameAndType	serialVersionUID:J
Field	scala/xml/parsing/MarkupParser$$anonfun$appendText$1.serialVersionUID:J
Asciz	ts$1;
Asciz	Lscala/xml/NodeBuffer;;
Asciz	pos$1;
Asciz	I;
Asciz	$outer;
Asciz	Lscala/xml/parsing/MarkupParser;;
Asciz	<init>;
Asciz	(Lscala/xml/parsing/MarkupParser;ILscala/xml/NodeBuffer;)V;
Asciz	LineNumberTable;
Asciz	java/lang/NullPointerException;
class	java/lang/NullPointerException
NameAndType	"<init>":()V
Method	java/lang/NullPointerException."<init>":()V
NameAndType	$outer:Lscala/xml/parsing/MarkupParser;
Field	scala/xml/parsing/MarkupParser$$anonfun$appendText$1.$outer:Lscala/xml/parsing/MarkupParser;
NameAndType	pos$1:I
Field	scala/xml/parsing/MarkupParser$$anonfun$appendText$1.pos$1:I
NameAndType	ts$1:Lscala/xml/NodeBuffer;
Field	scala/xml/parsing/MarkupParser$$anonfun$appendText$1.ts$1:Lscala/xml/NodeBuffer;
Asciz	java/lang/Object;
class	java/lang/Object
Method	java/lang/Object."<init>":()V
Asciz	scala/Function1$class;
class	scala/Function1$class
Asciz	$init$;
Asciz	(Lscala/Function1;)V;
NameAndType	$init$:(Lscala/Function1;)V
Method	scala/Function1$class.$init$:(Lscala/Function1;)V
Asciz	this;
Asciz	Lscala/xml/parsing/MarkupParser$$anonfun$appendText$1;;
Asciz	LocalVariableTable;
Asciz	apply;
Asciz	(Ljava/lang/Object;)Ljava/lang/Object;;
Asciz	scala/xml/Text;
class	scala/xml/Text
Asciz	(Lscala/xml/Text;)Lscala/xml/NodeBuffer;;
NameAndType	apply:(Lscala/xml/Text;)Lscala/xml/NodeBuffer;
Method	scala/xml/parsing/MarkupParser$$anonfun$appendText$1.apply:(Lscala/xml/Text;)Lscala/xml/NodeBuffer;
Asciz	v1;
Asciz	Ljava/lang/Object;;
Asciz	scala/xml/parsing/MarkupParser;
class	scala/xml/parsing/MarkupParser
Asciz	scala$xml$parsing$MarkupParser$$handle;
Asciz	()Lscala/xml/parsing/MarkupHandler;;
NameAndType	scala$xml$parsing$MarkupParser$$handle:()Lscala/xml/parsing/MarkupHandler;
InterfaceMethod	scala/xml/parsing/MarkupParser.scala$xml$parsing$MarkupParser$$handle:()Lscala/xml/parsing/MarkupHandler;
Asciz	text;
Asciz	()Ljava/lang/String;;
NameAndType	text:()Ljava/lang/String;
Method	scala/xml/Text.text:()Ljava/lang/String;
Asciz	scala/xml/parsing/MarkupHandler;
class	scala/xml/parsing/MarkupHandler
Asciz	(ILjava/lang/String;)Lscala/xml/NodeSeq;;
NameAndType	text:(ILjava/lang/String;)Lscala/xml/NodeSeq;
Method	scala/xml/parsing/MarkupHandler.text:(ILjava/lang/String;)Lscala/xml/NodeSeq;
Asciz	scala/xml/NodeBuffer;
class	scala/xml/NodeBuffer
Asciz	$amp$plus;
Asciz	(Ljava/lang/Object;)Lscala/xml/NodeBuffer;;
NameAndType	$amp$plus:(Ljava/lang/Object;)Lscala/xml/NodeBuffer;
Method	scala/xml/NodeBuffer.$amp$plus:(Ljava/lang/Object;)Lscala/xml/NodeBuffer;
Asciz	t;
Asciz	Lscala/xml/Text;;
Asciz	andThen;
Asciz	(Lscala/Function1;)Lscala/Function1;;
Asciz	(Lscala/Function1;Lscala/Function1;)Lscala/Function1;;
NameAndType	andThen:(Lscala/Function1;Lscala/Function1;)Lscala/Function1;
Method	scala/Function1$class.andThen:(Lscala/Function1;Lscala/Function1;)Lscala/Function1;
Asciz	g;
Asciz	Lscala/Function1;;
Asciz	compose;
NameAndType	compose:(Lscala/Function1;Lscala/Function1;)Lscala/Function1;
Method	scala/Function1$class.compose:(Lscala/Function1;Lscala/Function1;)Lscala/Function1;
Asciz	toString;
Asciz	(Lscala/Function1;)Ljava/lang/String;;
NameAndType	toString:(Lscala/Function1;)Ljava/lang/String;
Method	scala/Function1$class.toString:(Lscala/Function1;)Ljava/lang/String;
Asciz	Scala;
Asciz	InnerClasses;
Asciz	$anonfun$appendText$1;
Asciz	scala/Function1;
class	scala/Function1
Asciz	scala/ScalaObject;
class	scala/ScalaObject
Asciz	java/io/Serializable;
class	java/io/Serializable

{
public static final long serialVersionUID;
  Signature: J

private final scala.xml.NodeBuffer ts$1;
  Signature: Lscala/xml/NodeBuffer;

private final int pos$1;
  Signature: I

private final scala.xml.parsing.MarkupParser $outer;
  Signature: Lscala/xml/parsing/MarkupParser;

public static {};
  Signature: ()V
  Code:
   Stack=2, Locals=0, Args_size=0
	lconst_0
	putstatic	Field serialVersionUID:J
	return
  Labels:

public scala.xml.parsing.MarkupParser$$anonfun$appendText$1(scala.xml.parsing.MarkupParser, int, scala.xml.NodeBuffer);
  Signature: (Lscala/xml/parsing/MarkupParser;ILscala/xml/NodeBuffer;)V
  Code:
   Stack=2, Locals=4, Args_size=4
	aload_1
	ifnonnull	l1 // aload_0
	new	class java/lang/NullPointerException
	dup
	invokespecial	Method java/lang/NullPointerException."<init>":()V
	athrow
l1	aload_0
	aload_1
	putfield	Field $outer:Lscala/xml/parsing/MarkupParser;
	aload_0
	iload_2
	putfield	Field pos$1:I
	aload_0
	aload_3
	putfield	Field ts$1:Lscala/xml/NodeBuffer;
	aload_0
	invokespecial	Method java/lang/Object."<init>":()V
	aload_0
	invokestatic	Method scala/Function1$class.$init$:(Lscala/Function1;)V
	return
  Labels:
   	l1 = 12 // aload_0
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      36      0    this       Lscala/xml/parsing/MarkupParser$$anonfun$appendText$1;
   0      36      1    $outer       Lscala/xml/parsing/MarkupParser;


public final java.lang.Object apply(java.lang.Object);
  Signature: (Ljava/lang/Object;)Ljava/lang/Object;
  Code:
   Stack=2, Locals=3, Args_size=2
	aload_0
	getfield	Field $outer:Lscala/xml/parsing/MarkupParser;
	astore_2
	aload_0
	aload_1
	checkcast	class scala/xml/Text
	invokevirtual	Method apply:(Lscala/xml/Text;)Lscala/xml/NodeBuffer;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      14      0    this       Lscala/xml/parsing/MarkupParser$$anonfun$appendText$1;
   5      9      1    v1       Ljava/lang/Object;


public final scala.xml.NodeBuffer apply(scala.xml.Text);
  Signature: (Lscala/xml/Text;)Lscala/xml/NodeBuffer;
  Code:
   Stack=4, Locals=3, Args_size=2
	aload_0
	getfield	Field $outer:Lscala/xml/parsing/MarkupParser;
	astore_2
	aload_0
	getfield	Field ts$1:Lscala/xml/NodeBuffer;
	aload_0
	getfield	Field $outer:Lscala/xml/parsing/MarkupParser;
	invokeinterface	InterfaceMethod scala/xml/parsing/MarkupParser.scala$xml$parsing$MarkupParser$$handle:()Lscala/xml/parsing/MarkupHandler;
	aload_0
	getfield	Field pos$1:I
	aload_1
	invokevirtual	Method scala/xml/Text.text:()Ljava/lang/String;
	invokevirtual	Method scala/xml/parsing/MarkupHandler.text:(ILjava/lang/String;)Lscala/xml/NodeSeq;
	invokevirtual	Method scala/xml/NodeBuffer.$amp$plus:(Ljava/lang/Object;)Lscala/xml/NodeBuffer;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      33      0    this       Lscala/xml/parsing/MarkupParser$$anonfun$appendText$1;
   5      28      1    t       Lscala/xml/Text;


public scala.Function1 andThen(scala.Function1);
  Signature: (Lscala/Function1;)Lscala/Function1;
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	invokestatic	Method scala/Function1$class.andThen:(Lscala/Function1;Lscala/Function1;)Lscala/Function1;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/xml/parsing/MarkupParser$$anonfun$appendText$1;
   0      6      1    g       Lscala/Function1;


public scala.Function1 compose(scala.Function1);
  Signature: (Lscala/Function1;)Lscala/Function1;
  Code:
   Stack=2, Locals=2, Args_size=2
	aload_0
	aload_1
	invokestatic	Method scala/Function1$class.compose:(Lscala/Function1;Lscala/Function1;)Lscala/Function1;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/xml/parsing/MarkupParser$$anonfun$appendText$1;
   0      6      1    g       Lscala/Function1;


public java.lang.String toString();
  Signature: ()Ljava/lang/String;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	invokestatic	Method scala/Function1$class.toString:(Lscala/Function1;)Ljava/lang/String;
	areturn
  Labels:

}

