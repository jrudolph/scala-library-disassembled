Compiled from "MarkupParser.scala"
public final class scala.xml.parsing.MarkupParser$$anonfun$appendText$1 extends java.lang.Object implements scala.Function1,scala.ScalaObject,java.io.Serializable
  SourceFile: "MarkupParser.scala"
  Scala: length = 0x
   
  InnerClass: 
   public final #91= #9 of #53; //$anonfun$appendText$1=class scala/xml/parsing/MarkupParser$$anonfun$appendText$1 of class scala/xml/parsing/MarkupParser
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	MarkupParser.scala;
const #3 = Asciz	<clinit>;
const #4 = Asciz	()V;
const #5 = Asciz	Code;
const #6 = Asciz	serialVersionUID;
const #7 = Asciz	J;
const #8 = Asciz	scala/xml/parsing/MarkupParser$$anonfun$appendText$1;
const #9 = class	#8;	//  scala/xml/parsing/MarkupParser$$anonfun$appendText$1
const #10 = NameAndType	#6:#7;//  serialVersionUID:J
const #11 = Field	#9.#10;	//  scala/xml/parsing/MarkupParser$$anonfun$appendText$1.serialVersionUID:J
const #12 = Asciz	ts$1;
const #13 = Asciz	Lscala/xml/NodeBuffer;;
const #14 = Asciz	pos$1;
const #15 = Asciz	I;
const #16 = Asciz	$outer;
const #17 = Asciz	Lscala/xml/parsing/MarkupParser;;
const #18 = Asciz	<init>;
const #19 = Asciz	(Lscala/xml/parsing/MarkupParser;ILscala/xml/NodeBuffer;)V;
const #20 = Asciz	LineNumberTable;
const #21 = Asciz	java/lang/NullPointerException;
const #22 = class	#21;	//  java/lang/NullPointerException
const #23 = NameAndType	#18:#4;//  "<init>":()V
const #24 = Method	#22.#23;	//  java/lang/NullPointerException."<init>":()V
const #25 = NameAndType	#16:#17;//  $outer:Lscala/xml/parsing/MarkupParser;
const #26 = Field	#9.#25;	//  scala/xml/parsing/MarkupParser$$anonfun$appendText$1.$outer:Lscala/xml/parsing/MarkupParser;
const #27 = NameAndType	#14:#15;//  pos$1:I
const #28 = Field	#9.#27;	//  scala/xml/parsing/MarkupParser$$anonfun$appendText$1.pos$1:I
const #29 = NameAndType	#12:#13;//  ts$1:Lscala/xml/NodeBuffer;
const #30 = Field	#9.#29;	//  scala/xml/parsing/MarkupParser$$anonfun$appendText$1.ts$1:Lscala/xml/NodeBuffer;
const #31 = Asciz	java/lang/Object;
const #32 = class	#31;	//  java/lang/Object
const #33 = Method	#32.#23;	//  java/lang/Object."<init>":()V
const #34 = Asciz	scala/Function1$class;
const #35 = class	#34;	//  scala/Function1$class
const #36 = Asciz	$init$;
const #37 = Asciz	(Lscala/Function1;)V;
const #38 = NameAndType	#36:#37;//  $init$:(Lscala/Function1;)V
const #39 = Method	#35.#38;	//  scala/Function1$class.$init$:(Lscala/Function1;)V
const #40 = Asciz	this;
const #41 = Asciz	Lscala/xml/parsing/MarkupParser$$anonfun$appendText$1;;
const #42 = Asciz	LocalVariableTable;
const #43 = Asciz	apply;
const #44 = Asciz	(Ljava/lang/Object;)Ljava/lang/Object;;
const #45 = Asciz	scala/xml/Text;
const #46 = class	#45;	//  scala/xml/Text
const #47 = Asciz	(Lscala/xml/Text;)Lscala/xml/NodeBuffer;;
const #48 = NameAndType	#43:#47;//  apply:(Lscala/xml/Text;)Lscala/xml/NodeBuffer;
const #49 = Method	#9.#48;	//  scala/xml/parsing/MarkupParser$$anonfun$appendText$1.apply:(Lscala/xml/Text;)Lscala/xml/NodeBuffer;
const #50 = Asciz	v1;
const #51 = Asciz	Ljava/lang/Object;;
const #52 = Asciz	scala/xml/parsing/MarkupParser;
const #53 = class	#52;	//  scala/xml/parsing/MarkupParser
const #54 = Asciz	scala$xml$parsing$MarkupParser$$handle;
const #55 = Asciz	()Lscala/xml/parsing/MarkupHandler;;
const #56 = NameAndType	#54:#55;//  scala$xml$parsing$MarkupParser$$handle:()Lscala/xml/parsing/MarkupHandler;
const #57 = InterfaceMethod	#53.#56;	//  scala/xml/parsing/MarkupParser.scala$xml$parsing$MarkupParser$$handle:()Lscala/xml/parsing/MarkupHandler;
const #58 = Asciz	text;
const #59 = Asciz	()Ljava/lang/String;;
const #60 = NameAndType	#58:#59;//  text:()Ljava/lang/String;
const #61 = Method	#46.#60;	//  scala/xml/Text.text:()Ljava/lang/String;
const #62 = Asciz	scala/xml/parsing/MarkupHandler;
const #63 = class	#62;	//  scala/xml/parsing/MarkupHandler
const #64 = Asciz	(ILjava/lang/String;)Lscala/xml/NodeSeq;;
const #65 = NameAndType	#58:#64;//  text:(ILjava/lang/String;)Lscala/xml/NodeSeq;
const #66 = Method	#63.#65;	//  scala/xml/parsing/MarkupHandler.text:(ILjava/lang/String;)Lscala/xml/NodeSeq;
const #67 = Asciz	scala/xml/NodeBuffer;
const #68 = class	#67;	//  scala/xml/NodeBuffer
const #69 = Asciz	$amp$plus;
const #70 = Asciz	(Ljava/lang/Object;)Lscala/xml/NodeBuffer;;
const #71 = NameAndType	#69:#70;//  $amp$plus:(Ljava/lang/Object;)Lscala/xml/NodeBuffer;
const #72 = Method	#68.#71;	//  scala/xml/NodeBuffer.$amp$plus:(Ljava/lang/Object;)Lscala/xml/NodeBuffer;
const #73 = Asciz	t;
const #74 = Asciz	Lscala/xml/Text;;
const #75 = Asciz	andThen;
const #76 = Asciz	(Lscala/Function1;)Lscala/Function1;;
const #77 = Asciz	(Lscala/Function1;Lscala/Function1;)Lscala/Function1;;
const #78 = NameAndType	#75:#77;//  andThen:(Lscala/Function1;Lscala/Function1;)Lscala/Function1;
const #79 = Method	#35.#78;	//  scala/Function1$class.andThen:(Lscala/Function1;Lscala/Function1;)Lscala/Function1;
const #80 = Asciz	g;
const #81 = Asciz	Lscala/Function1;;
const #82 = Asciz	compose;
const #83 = NameAndType	#82:#77;//  compose:(Lscala/Function1;Lscala/Function1;)Lscala/Function1;
const #84 = Method	#35.#83;	//  scala/Function1$class.compose:(Lscala/Function1;Lscala/Function1;)Lscala/Function1;
const #85 = Asciz	toString;
const #86 = Asciz	(Lscala/Function1;)Ljava/lang/String;;
const #87 = NameAndType	#85:#86;//  toString:(Lscala/Function1;)Ljava/lang/String;
const #88 = Method	#35.#87;	//  scala/Function1$class.toString:(Lscala/Function1;)Ljava/lang/String;
const #89 = Asciz	Scala;
const #90 = Asciz	InnerClasses;
const #91 = Asciz	$anonfun$appendText$1;
const #92 = Asciz	scala/Function1;
const #93 = class	#92;	//  scala/Function1
const #94 = Asciz	scala/ScalaObject;
const #95 = class	#94;	//  scala/ScalaObject
const #96 = Asciz	java/io/Serializable;
const #97 = class	#96;	//  java/io/Serializable

{
public static final long serialVersionUID;

public static {};
  Code:
   Stack=2, Locals=0, Args_size=0
   0:	lconst_0
   1:	putstatic	#11; //Field serialVersionUID:J
   4:	return

public scala.xml.parsing.MarkupParser$$anonfun$appendText$1(scala.xml.parsing.MarkupParser, int, scala.xml.NodeBuffer);
  Code:
   Stack=2, Locals=4, Args_size=4
   0:	aload_1
   1:	ifnonnull	12
   4:	new	#22; //class java/lang/NullPointerException
   7:	dup
   8:	invokespecial	#24; //Method java/lang/NullPointerException."<init>":()V
   11:	athrow
   12:	aload_0
   13:	aload_1
   14:	putfield	#26; //Field $outer:Lscala/xml/parsing/MarkupParser;
   17:	aload_0
   18:	iload_2
   19:	putfield	#28; //Field pos$1:I
   22:	aload_0
   23:	aload_3
   24:	putfield	#30; //Field ts$1:Lscala/xml/NodeBuffer;
   27:	aload_0
   28:	invokespecial	#33; //Method java/lang/Object."<init>":()V
   31:	aload_0
   32:	invokestatic	#39; //Method scala/Function1$class.$init$:(Lscala/Function1;)V
   35:	return
  LineNumberTable: 
   line 445: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      36      0    this       Lscala/xml/parsing/MarkupParser$$anonfun$appendText$1;
   0      36      1    $outer       Lscala/xml/parsing/MarkupParser;


public final java.lang.Object apply(java.lang.Object);
  Code:
   Stack=2, Locals=3, Args_size=2
   0:	aload_0
   1:	getfield	#26; //Field $outer:Lscala/xml/parsing/MarkupParser;
   4:	astore_2
   5:	aload_0
   6:	aload_1
   7:	checkcast	#46; //class scala/xml/Text
   10:	invokevirtual	#49; //Method apply:(Lscala/xml/Text;)Lscala/xml/NodeBuffer;
   13:	areturn
  LineNumberTable: 
   line 445: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      14      0    this       Lscala/xml/parsing/MarkupParser$$anonfun$appendText$1;
   5      9      1    v1       Ljava/lang/Object;


public final scala.xml.NodeBuffer apply(scala.xml.Text);
  Code:
   Stack=4, Locals=3, Args_size=2
   0:	aload_0
   1:	getfield	#26; //Field $outer:Lscala/xml/parsing/MarkupParser;
   4:	astore_2
   5:	aload_0
   6:	getfield	#30; //Field ts$1:Lscala/xml/NodeBuffer;
   9:	aload_0
   10:	getfield	#26; //Field $outer:Lscala/xml/parsing/MarkupParser;
   13:	invokeinterface	#57,  1; //InterfaceMethod scala/xml/parsing/MarkupParser.scala$xml$parsing$MarkupParser$$handle:()Lscala/xml/parsing/MarkupHandler;
   18:	aload_0
   19:	getfield	#28; //Field pos$1:I
   22:	aload_1
   23:	invokevirtual	#61; //Method scala/xml/Text.text:()Ljava/lang/String;
   26:	invokevirtual	#66; //Method scala/xml/parsing/MarkupHandler.text:(ILjava/lang/String;)Lscala/xml/NodeSeq;
   29:	invokevirtual	#72; //Method scala/xml/NodeBuffer.$amp$plus:(Ljava/lang/Object;)Lscala/xml/NodeBuffer;
   32:	areturn
  LineNumberTable: 
   line 446: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      33      0    this       Lscala/xml/parsing/MarkupParser$$anonfun$appendText$1;
   5      28      1    t       Lscala/xml/Text;


public scala.Function1 andThen(scala.Function1);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#79; //Method scala/Function1$class.andThen:(Lscala/Function1;Lscala/Function1;)Lscala/Function1;
   5:	areturn
  LineNumberTable: 
   line 445: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/xml/parsing/MarkupParser$$anonfun$appendText$1;
   0      6      1    g       Lscala/Function1;


public scala.Function1 compose(scala.Function1);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#84; //Method scala/Function1$class.compose:(Lscala/Function1;Lscala/Function1;)Lscala/Function1;
   5:	areturn
  LineNumberTable: 
   line 445: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/xml/parsing/MarkupParser$$anonfun$appendText$1;
   0      6      1    g       Lscala/Function1;


public java.lang.String toString();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokestatic	#88; //Method scala/Function1$class.toString:(Lscala/Function1;)Ljava/lang/String;
   4:	areturn
  LineNumberTable: 
   line 445: 0


}

