Compiled from "ForkJoinPool.java"
public class scala.concurrent.forkjoin.ForkJoinPool extends java.lang.Object
  SourceFile: "ForkJoinPool.java"
  InnerClass: 
   public abstract #230= #229 of #200; //ManagedBlocker=class scala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker of class scala/concurrent/forkjoin/ForkJoinPool
   final #232= #166 of #200; //WaitQueueNode=class scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode of class scala/concurrent/forkjoin/ForkJoinPool
   final #233= #95 of #200; //InvokeAll=class scala/concurrent/forkjoin/ForkJoinPool$InvokeAll of class scala/concurrent/forkjoin/ForkJoinPool
   final #234= #85 of #200; //AdaptedCallable=class scala/concurrent/forkjoin/ForkJoinPool$AdaptedCallable of class scala/concurrent/forkjoin/ForkJoinPool
   final #235= #83 of #200; //AdaptedRunnable=class scala/concurrent/forkjoin/ForkJoinPool$AdaptedRunnable of class scala/concurrent/forkjoin/ForkJoinPool
   #236= #210 of #200; //DefaultForkJoinWorkerThreadFactory=class scala/concurrent/forkjoin/ForkJoinPool$DefaultForkJoinWorkerThreadFactory of class scala/concurrent/forkjoin/ForkJoinPool
   public abstract #238= #237 of #200; //ForkJoinWorkerThreadFactory=class scala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory of class scala/concurrent/forkjoin/ForkJoinPool
   abstract #240= #239 of #200; //RunnableFuture=class scala/concurrent/forkjoin/ForkJoinPool$RunnableFuture of class scala/concurrent/forkjoin/ForkJoinPool
   public abstract #260= #259 of #729; //UncaughtExceptionHandler=class java/lang/Thread$UncaughtExceptionHandler of class java/lang/Thread
   #189; //class scala/concurrent/forkjoin/ForkJoinPool$1
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Method	#200.#563;	//  scala/concurrent/forkjoin/ForkJoinPool.getUnsafePrivileged:()Lsun/misc/Unsafe;
const #2 = Method	#564.#565;	//  java/lang/System.getSecurityManager:()Ljava/lang/SecurityManager;
const #3 = Field	#200.#566;	//  scala/concurrent/forkjoin/ForkJoinPool.modifyThreadPermission:Ljava/lang/RuntimePermission;
const #4 = Method	#567.#568;	//  java/lang/SecurityManager.checkPermission:(Ljava/security/Permission;)V
const #5 = int	65535;
const #6 = Field	#200.#569;	//  scala/concurrent/forkjoin/ForkJoinPool.workerCounts:I
const #7 = Method	#200.#570;	//  scala/concurrent/forkjoin/ForkJoinPool.casWorkerCounts:(II)Z
const #8 = Field	#200.#571;	//  scala/concurrent/forkjoin/ForkJoinPool.runControl:I
const #9 = Method	#200.#572;	//  scala/concurrent/forkjoin/ForkJoinPool.casRunControl:(II)Z
const #10 = Method	#200.#573;	//  scala/concurrent/forkjoin/ForkJoinPool.canTerminateOnShutdown:(I)Z
const #11 = Method	#200.#574;	//  scala/concurrent/forkjoin/ForkJoinPool.terminateOnShutdown:()V
const #12 = Method	#200.#575;	//  scala/concurrent/forkjoin/ForkJoinPool.runStateOf:(I)I
const #13 = Method	#200.#576;	//  scala/concurrent/forkjoin/ForkJoinPool.activeCountOf:(I)I
const #14 = Method	#200.#577;	//  scala/concurrent/forkjoin/ForkJoinPool.runControlFor:(II)I
const #15 = Method	#578.#579;	//  java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
const #16 = Method	#578.#580;	//  java/lang/Runtime.availableProcessors:()I
const #17 = Field	#200.#581;	//  scala/concurrent/forkjoin/ForkJoinPool.defaultForkJoinWorkerThreadFactory:Lscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;
const #18 = Method	#200.#582;	//  scala/concurrent/forkjoin/ForkJoinPool."<init>":(ILscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;)V
const #19 = Method	#228.#583;	//  java/lang/Object."<init>":()V
const #20 = class	#584;	//  java/lang/IllegalArgumentException
const #21 = Method	#20.#583;	//  java/lang/IllegalArgumentException."<init>":()V
const #22 = class	#585;	//  java/lang/NullPointerException
const #23 = Method	#22.#583;	//  java/lang/NullPointerException."<init>":()V
const #24 = Method	#200.#586;	//  scala/concurrent/forkjoin/ForkJoinPool.checkPermission:()V
const #25 = Field	#200.#587;	//  scala/concurrent/forkjoin/ForkJoinPool.factory:Lscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;
const #26 = Field	#200.#588;	//  scala/concurrent/forkjoin/ForkJoinPool.parallelism:I
const #27 = Field	#200.#589;	//  scala/concurrent/forkjoin/ForkJoinPool.maxPoolSize:I
const #28 = Field	#200.#590;	//  scala/concurrent/forkjoin/ForkJoinPool.maintainsParallelism:Z
const #29 = Field	#200.#591;	//  scala/concurrent/forkjoin/ForkJoinPool.poolNumberGenerator:Ljava/util/concurrent/atomic/AtomicInteger;
const #30 = Method	#215.#592;	//  java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
const #31 = Field	#200.#593;	//  scala/concurrent/forkjoin/ForkJoinPool.poolNumber:I
const #32 = class	#594;	//  java/util/concurrent/locks/ReentrantLock
const #33 = Method	#32.#583;	//  java/util/concurrent/locks/ReentrantLock."<init>":()V
const #34 = Field	#200.#595;	//  scala/concurrent/forkjoin/ForkJoinPool.workerLock:Ljava/util/concurrent/locks/ReentrantLock;
const #35 = Method	#32.#596;	//  java/util/concurrent/locks/ReentrantLock.newCondition:()Ljava/util/concurrent/locks/Condition;
const #36 = Field	#200.#597;	//  scala/concurrent/forkjoin/ForkJoinPool.termination:Ljava/util/concurrent/locks/Condition;
const #37 = class	#598;	//  java/util/concurrent/atomic/AtomicLong
const #38 = Method	#37.#583;	//  java/util/concurrent/atomic/AtomicLong."<init>":()V
const #39 = Field	#200.#599;	//  scala/concurrent/forkjoin/ForkJoinPool.stealCount:Ljava/util/concurrent/atomic/AtomicLong;
const #40 = class	#600;	//  scala/concurrent/forkjoin/LinkedTransferQueue
const #41 = Method	#40.#583;	//  scala/concurrent/forkjoin/LinkedTransferQueue."<init>":()V
const #42 = Field	#200.#601;	//  scala/concurrent/forkjoin/ForkJoinPool.submissionQueue:Lscala/concurrent/forkjoin/LinkedTransferQueue;
const #43 = Field	#200.#602;	//  scala/concurrent/forkjoin/ForkJoinPool.ueh:Ljava/lang/Thread$UncaughtExceptionHandler;
const #44 = InterfaceMethod	#237.#603;	//  scala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory.newThread:(Lscala/concurrent/forkjoin/ForkJoinPool;)Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
const #45 = Field	#59.#604;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.poolIndex:I
const #46 = Method	#59.#605;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.setDaemon:(Z)V
const #47 = Field	#200.#606;	//  scala/concurrent/forkjoin/ForkJoinPool.locallyFifo:Z
const #48 = Method	#59.#607;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.setAsyncMode:(Z)V
const #49 = class	#608;	//  java/lang/StringBuilder
const #50 = Method	#49.#583;	//  java/lang/StringBuilder."<init>":()V
const #51 = String	#609;	//  ForkJoinPool-
const #52 = Method	#49.#610;	//  java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
const #53 = Method	#49.#611;	//  java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
const #54 = String	#612;	//  -worker-
const #55 = Method	#49.#613;	//  java/lang/StringBuilder.toString:()Ljava/lang/String;
const #56 = Method	#59.#614;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.setName:(Ljava/lang/String;)V
const #57 = Method	#59.#615;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.setUncaughtExceptionHandler:(Ljava/lang/Thread$UncaughtExceptionHandler;)V
const #58 = Method	#616.#617;	//  java/lang/Integer.numberOfLeadingZeros:(I)I
const #59 = class	#618;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread
const #60 = Method	#619.#620;	//  java/lang/Math.min:(II)I
const #61 = Method	#564.#621;	//  java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
const #62 = Field	#200.#622;	//  scala/concurrent/forkjoin/ForkJoinPool.workers:[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
const #63 = Method	#200.#623;	//  scala/concurrent/forkjoin/ForkJoinPool.arraySizeFor:(I)I
const #64 = Method	#200.#624;	//  scala/concurrent/forkjoin/ForkJoinPool.copyOfWorkers:([Lscala/concurrent/forkjoin/ForkJoinWorkerThread;I)[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
const #65 = Method	#32.#625;	//  java/util/concurrent/locks/ReentrantLock.lock:()V
const #66 = Method	#200.#626;	//  scala/concurrent/forkjoin/ForkJoinPool.ensureWorkerArrayCapacity:(I)[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
const #67 = Method	#200.#627;	//  scala/concurrent/forkjoin/ForkJoinPool.createWorker:(I)Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
const #68 = Method	#59.#628;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.start:()V
const #69 = Method	#200.#629;	//  scala/concurrent/forkjoin/ForkJoinPool.updateWorkerCount:(I)V
const #70 = Method	#32.#630;	//  java/util/concurrent/locks/ReentrantLock.unlock:()V
const #71 = Method	#200.#631;	//  scala/concurrent/forkjoin/ForkJoinPool.resumeAllSpares:()Z
const #72 = Method	#200.#632;	//  scala/concurrent/forkjoin/ForkJoinPool.totalCountOf:(I)I
const #73 = Method	#200.#633;	//  scala/concurrent/forkjoin/ForkJoinPool.runningCountOf:(I)I
const #74 = Method	#200.#634;	//  scala/concurrent/forkjoin/ForkJoinPool.workerCountsFor:(II)I
const #75 = Method	#200.#635;	//  scala/concurrent/forkjoin/ForkJoinPool.isShutdown:()Z
const #76 = class	#636;	//  java/util/concurrent/RejectedExecutionException
const #77 = Method	#76.#583;	//  java/util/concurrent/RejectedExecutionException."<init>":()V
const #78 = Method	#200.#637;	//  scala/concurrent/forkjoin/ForkJoinPool.ensureWorkerInitialization:()V
const #79 = Method	#40.#638;	//  scala/concurrent/forkjoin/LinkedTransferQueue.offer:(Ljava/lang/Object;)Z
const #80 = Method	#200.#639;	//  scala/concurrent/forkjoin/ForkJoinPool.signalIdleWorkers:()V
const #81 = Method	#200.#640;	//  scala/concurrent/forkjoin/ForkJoinPool.doSubmit:(Lscala/concurrent/forkjoin/ForkJoinTask;)V
const #82 = Method	#108.#641;	//  scala/concurrent/forkjoin/ForkJoinTask.join:()Ljava/lang/Object;
const #83 = class	#642;	//  scala/concurrent/forkjoin/ForkJoinPool$AdaptedRunnable
const #84 = Method	#83.#643;	//  scala/concurrent/forkjoin/ForkJoinPool$AdaptedRunnable."<init>":(Ljava/lang/Runnable;Ljava/lang/Object;)V
const #85 = class	#644;	//  scala/concurrent/forkjoin/ForkJoinPool$AdaptedCallable
const #86 = Method	#85.#645;	//  scala/concurrent/forkjoin/ForkJoinPool$AdaptedCallable."<init>":(Ljava/util/concurrent/Callable;)V
const #87 = class	#646;	//  java/util/ArrayList
const #88 = InterfaceMethod	#647.#648;	//  java/util/Collection.size:()I
const #89 = Method	#87.#649;	//  java/util/ArrayList."<init>":(I)V
const #90 = InterfaceMethod	#647.#650;	//  java/util/Collection.iterator:()Ljava/util/Iterator;
const #91 = InterfaceMethod	#651.#652;	//  java/util/Iterator.hasNext:()Z
const #92 = InterfaceMethod	#651.#653;	//  java/util/Iterator.next:()Ljava/lang/Object;
const #93 = class	#654;	//  java/util/concurrent/Callable
const #94 = Method	#87.#655;	//  java/util/ArrayList.add:(Ljava/lang/Object;)Z
const #95 = class	#656;	//  scala/concurrent/forkjoin/ForkJoinPool$InvokeAll
const #96 = Method	#95.#657;	//  scala/concurrent/forkjoin/ForkJoinPool$InvokeAll."<init>":(Ljava/util/ArrayList;)V
const #97 = Method	#200.#658;	//  scala/concurrent/forkjoin/ForkJoinPool.invoke:(Lscala/concurrent/forkjoin/ForkJoinTask;)Ljava/lang/Object;
const #98 = Method	#200.#659;	//  scala/concurrent/forkjoin/ForkJoinPool.isTerminating:()Z
const #99 = Method	#200.#660;	//  scala/concurrent/forkjoin/ForkJoinPool.createAndStartAddedWorkers:()V
const #100 = Method	#200.#661;	//  scala/concurrent/forkjoin/ForkJoinPool.trimSpares:()V
const #101 = Method	#37.#662;	//  java/util/concurrent/atomic/AtomicLong.get:()J
const #102 = Method	#59.#663;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.getAndClearStealCount:()I
const #103 = Method	#37.#664;	//  java/util/concurrent/atomic/AtomicLong.addAndGet:(J)J
const #104 = Method	#59.#665;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.getQueueSize:()I
const #105 = Method	#40.#648;	//  scala/concurrent/forkjoin/LinkedTransferQueue.size:()I
const #106 = Method	#40.#666;	//  scala/concurrent/forkjoin/LinkedTransferQueue.isEmpty:()Z
const #107 = Method	#40.#667;	//  scala/concurrent/forkjoin/LinkedTransferQueue.poll:()Ljava/lang/Object;
const #108 = class	#668;	//  scala/concurrent/forkjoin/ForkJoinTask
const #109 = Method	#40.#669;	//  scala/concurrent/forkjoin/LinkedTransferQueue.drainTo:(Ljava/util/Collection;)I
const #110 = Method	#59.#670;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.drainTasksTo:(Ljava/util/Collection;)I
const #111 = Method	#200.#671;	//  scala/concurrent/forkjoin/ForkJoinPool.getStealCount:()J
const #112 = Method	#200.#672;	//  scala/concurrent/forkjoin/ForkJoinPool.getQueuedTaskCount:()J
const #113 = Method	#200.#673;	//  scala/concurrent/forkjoin/ForkJoinPool.getQueuedSubmissionCount:()I
const #114 = Method	#228.#613;	//  java/lang/Object.toString:()Ljava/lang/String;
const #115 = String	#674;	//  [
const #116 = Method	#200.#675;	//  scala/concurrent/forkjoin/ForkJoinPool.runStateToString:(I)Ljava/lang/String;
const #117 = String	#676;	//  , parallelism = 
const #118 = String	#677;	//  , size = 
const #119 = String	#678;	//  , active = 
const #120 = String	#679;	//  , running = 
const #121 = String	#680;	//  , steals = 
const #122 = Method	#49.#681;	//  java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
const #123 = String	#682;	//  , tasks = 
const #124 = String	#683;	//  , submissions = 
const #125 = String	#684;	//  ]
const #126 = String	#685;	//  Running
const #127 = String	#686;	//  Shutting down
const #128 = String	#687;	//  Terminating
const #129 = String	#688;	//  Terminated
const #130 = class	#689;	//  java/lang/Error
const #131 = String	#690;	//  Unknown run state
const #132 = Method	#130.#691;	//  java/lang/Error."<init>":(Ljava/lang/String;)V
const #133 = Method	#200.#692;	//  scala/concurrent/forkjoin/ForkJoinPool.transitionRunStateTo:(I)Z
const #134 = Method	#200.#693;	//  scala/concurrent/forkjoin/ForkJoinPool.terminate:()V
const #135 = Method	#694.#695;	//  java/util/Collections.emptyList:()Ljava/util/List;
const #136 = Method	#696.#697;	//  java/util/concurrent/TimeUnit.toNanos:(J)J
const #137 = Method	#200.#698;	//  scala/concurrent/forkjoin/ForkJoinPool.isTerminated:()Z
const #138 = InterfaceMethod	#699.#700;	//  java/util/concurrent/locks/Condition.awaitNanos:(J)J
const #139 = Method	#200.#701;	//  scala/concurrent/forkjoin/ForkJoinPool.updateStealCount:(Lscala/concurrent/forkjoin/ForkJoinWorkerThread;)V
const #140 = InterfaceMethod	#699.#702;	//  java/util/concurrent/locks/Condition.signalAll:()V
const #141 = Method	#200.#703;	//  scala/concurrent/forkjoin/ForkJoinPool.tryShrinkWorkerArray:()V
const #142 = Method	#200.#704;	//  scala/concurrent/forkjoin/ForkJoinPool.tryResumeSpare:(Z)Z
const #143 = Method	#200.#705;	//  scala/concurrent/forkjoin/ForkJoinPool.stopAllWorkers:()V
const #144 = Method	#200.#706;	//  scala/concurrent/forkjoin/ForkJoinPool.cancelQueuedSubmissions:()V
const #145 = Method	#200.#707;	//  scala/concurrent/forkjoin/ForkJoinPool.cancelQueuedWorkerTasks:()V
const #146 = Method	#200.#708;	//  scala/concurrent/forkjoin/ForkJoinPool.interruptUnterminatedWorkers:()V
const #147 = Method	#200.#709;	//  scala/concurrent/forkjoin/ForkJoinPool.hasQueuedSubmissions:()Z
const #148 = Method	#200.#710;	//  scala/concurrent/forkjoin/ForkJoinPool.pollSubmission:()Lscala/concurrent/forkjoin/ForkJoinTask;
const #149 = Method	#108.#711;	//  scala/concurrent/forkjoin/ForkJoinTask.cancel:(Z)Z
const #150 = Method	#59.#712;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.cancelTasks:()V
const #151 = Method	#59.#713;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.shutdownNow:()Z
const #152 = Method	#59.#698;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.isTerminated:()Z
const #153 = Method	#59.#714;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.interrupt:()V
const #154 = class	#715;	//  java/lang/SecurityException
const #155 = Field	#200.#716;	//  scala/concurrent/forkjoin/ForkJoinPool.eventCount:J
const #156 = Field	#200.#717;	//  scala/concurrent/forkjoin/ForkJoinPool.syncStack:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
const #157 = Field	#166.#718;	//  scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.count:J
const #158 = Method	#200.#719;	//  scala/concurrent/forkjoin/ForkJoinPool.casBarrierStack:(Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;)Z
const #159 = Method	#166.#720;	//  scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.signal:()Z
const #160 = Field	#166.#721;	//  scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.next:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
const #161 = Method	#200.#722;	//  scala/concurrent/forkjoin/ForkJoinPool.casEventCount:(JJ)Z
const #162 = Method	#200.#723;	//  scala/concurrent/forkjoin/ForkJoinPool.ensureSync:()J
const #163 = Method	#59.#635;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.isShutdown:()Z
const #164 = Method	#200.#724;	//  scala/concurrent/forkjoin/ForkJoinPool.suspendIfSpare:(Lscala/concurrent/forkjoin/ForkJoinWorkerThread;)Z
const #165 = Field	#59.#725;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.lastEventCount:J
const #166 = class	#726;	//  scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode
const #167 = Method	#166.#727;	//  scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode."<init>":(JLscala/concurrent/forkjoin/ForkJoinWorkerThread;)V
const #168 = Method	#166.#728;	//  scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.awaitSyncRelease:(Lscala/concurrent/forkjoin/ForkJoinPool;)V
const #169 = Method	#729.#730;	//  java/lang/Thread.interrupted:()Z
const #170 = Field	#166.#731;	//  scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.thread:Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
const #171 = Method	#59.#732;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.hasQueuedTasks:([Lscala/concurrent/forkjoin/ForkJoinWorkerThread;)Z
const #172 = Field	#200.#733;	//  scala/concurrent/forkjoin/ForkJoinPool.spareStack:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
const #173 = Method	#200.#734;	//  scala/concurrent/forkjoin/ForkJoinPool.needSpare:(IZ)Z
const #174 = Field	#108.#735;	//  scala/concurrent/forkjoin/ForkJoinTask.status:I
const #175 = Method	#200.#736;	//  scala/concurrent/forkjoin/ForkJoinPool.tryAddSpare:(I)Z
const #176 = InterfaceMethod	#229.#737;	//  scala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker.isReleasable:()Z
const #177 = Method	#32.#738;	//  java/util/concurrent/locks/ReentrantLock.tryLock:()Z
const #178 = Method	#200.#739;	//  scala/concurrent/forkjoin/ForkJoinPool.createAndStartSpare:(I)V
const #179 = Method	#200.#740;	//  scala/concurrent/forkjoin/ForkJoinPool.casSpareStack:(Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;)Z
const #180 = Method	#166.#741;	//  scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.awaitSpareRelease:()V
const #181 = Method	#200.#742;	//  scala/concurrent/forkjoin/ForkJoinPool.updateRunningCount:(I)V
const #182 = Method	#59.#743;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.shutdown:()Z
const #183 = Method	#729.#744;	//  java/lang/Thread.currentThread:()Ljava/lang/Thread;
const #184 = Field	#59.#745;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.pool:Lscala/concurrent/forkjoin/ForkJoinPool;
const #185 = Method	#200.#746;	//  scala/concurrent/forkjoin/ForkJoinPool.preBlock:(Lscala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;Z)Z
const #186 = Method	#200.#747;	//  scala/concurrent/forkjoin/ForkJoinPool.awaitBlocker:(Lscala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;)V
const #187 = InterfaceMethod	#229.#748;	//  scala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker.block:()Z
const #188 = Method	#192.#749;	//  sun/misc/Unsafe.getUnsafe:()Lsun/misc/Unsafe;
const #189 = class	#750;	//  scala/concurrent/forkjoin/ForkJoinPool$1
const #190 = Method	#189.#583;	//  scala/concurrent/forkjoin/ForkJoinPool$1."<init>":()V
const #191 = Method	#752.#753;	//  java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;
const #192 = class	#754;	//  sun/misc/Unsafe
const #193 = class	#755;	//  java/security/PrivilegedActionException
const #194 = Method	#193.#756;	//  java/security/PrivilegedActionException.getCause:()Ljava/lang/Throwable;
const #195 = String	#757;	//  theUnsafe
const #196 = Method	#758.#759;	//  java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
const #197 = Method	#760.#761;	//  java/lang/reflect/Field.setAccessible:(Z)V
const #198 = Method	#760.#762;	//  java/lang/reflect/Field.get:(Ljava/lang/Object;)Ljava/lang/Object;
const #199 = Field	#200.#763;	//  scala/concurrent/forkjoin/ForkJoinPool._unsafe:Lsun/misc/Unsafe;
const #200 = class	#764;	//  scala/concurrent/forkjoin/ForkJoinPool
const #201 = Method	#192.#765;	//  sun/misc/Unsafe.objectFieldOffset:(Ljava/lang/reflect/Field;)J
const #202 = Field	#200.#766;	//  scala/concurrent/forkjoin/ForkJoinPool.eventCountOffset:J
const #203 = Method	#192.#767;	//  sun/misc/Unsafe.compareAndSwapLong:(Ljava/lang/Object;JJJ)Z
const #204 = Field	#200.#768;	//  scala/concurrent/forkjoin/ForkJoinPool.workerCountsOffset:J
const #205 = Method	#192.#769;	//  sun/misc/Unsafe.compareAndSwapInt:(Ljava/lang/Object;JII)Z
const #206 = Field	#200.#770;	//  scala/concurrent/forkjoin/ForkJoinPool.runControlOffset:J
const #207 = Field	#200.#771;	//  scala/concurrent/forkjoin/ForkJoinPool.spareStackOffset:J
const #208 = Method	#192.#772;	//  sun/misc/Unsafe.compareAndSwapObject:(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z
const #209 = Field	#200.#773;	//  scala/concurrent/forkjoin/ForkJoinPool.syncStackOffset:J
const #210 = class	#774;	//  scala/concurrent/forkjoin/ForkJoinPool$DefaultForkJoinWorkerThreadFactory
const #211 = Method	#210.#583;	//  scala/concurrent/forkjoin/ForkJoinPool$DefaultForkJoinWorkerThreadFactory."<init>":()V
const #212 = class	#775;	//  java/lang/RuntimePermission
const #213 = String	#776;	//  modifyThread
const #214 = Method	#212.#691;	//  java/lang/RuntimePermission."<init>":(Ljava/lang/String;)V
const #215 = class	#777;	//  java/util/concurrent/atomic/AtomicInteger
const #216 = Method	#215.#583;	//  java/util/concurrent/atomic/AtomicInteger."<init>":()V
const #217 = Method	#200.#749;	//  scala/concurrent/forkjoin/ForkJoinPool.getUnsafe:()Lsun/misc/Unsafe;
const #218 = String	#272;	//  eventCount
const #219 = Method	#200.#778;	//  scala/concurrent/forkjoin/ForkJoinPool.fieldOffset:(Ljava/lang/String;)J
const #220 = String	#279;	//  workerCounts
const #221 = String	#280;	//  runControl
const #222 = String	#271;	//  syncStack
const #223 = String	#263;	//  spareStack
const #224 = class	#779;	//  java/lang/Throwable
const #225 = class	#780;	//  java/lang/RuntimeException
const #226 = String	#781;	//  Could not initialize intrinsics
const #227 = Method	#225.#782;	//  java/lang/RuntimeException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
const #228 = class	#783;	//  java/lang/Object
const #229 = class	#784;	//  scala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker
const #230 = Asciz	ManagedBlocker;
const #231 = Asciz	InnerClasses;
const #232 = Asciz	WaitQueueNode;
const #233 = Asciz	InvokeAll;
const #234 = Asciz	AdaptedCallable;
const #235 = Asciz	AdaptedRunnable;
const #236 = Asciz	DefaultForkJoinWorkerThreadFactory;
const #237 = class	#785;	//  scala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory
const #238 = Asciz	ForkJoinWorkerThreadFactory;
const #239 = class	#786;	//  scala/concurrent/forkjoin/ForkJoinPool$RunnableFuture
const #240 = Asciz	RunnableFuture;
const #241 = Asciz	shortMask;
const #242 = Asciz	I;
const #243 = Asciz	ConstantValue;
const #244 = Asciz	MAX_THREADS;
const #245 = int	32767;
const #246 = Asciz	defaultForkJoinWorkerThreadFactory;
const #247 = Asciz	Lscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;;
const #248 = Asciz	modifyThreadPermission;
const #249 = Asciz	Ljava/lang/RuntimePermission;;
const #250 = Asciz	poolNumberGenerator;
const #251 = Asciz	Ljava/util/concurrent/atomic/AtomicInteger;;
const #252 = Asciz	workers;
const #253 = Asciz	[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;;
const #254 = Asciz	workerLock;
const #255 = Asciz	Ljava/util/concurrent/locks/ReentrantLock;;
const #256 = Asciz	termination;
const #257 = Asciz	Ljava/util/concurrent/locks/Condition;;
const #258 = Asciz	ueh;
const #259 = class	#787;	//  java/lang/Thread$UncaughtExceptionHandler
const #260 = Asciz	UncaughtExceptionHandler;
const #261 = Asciz	Ljava/lang/Thread$UncaughtExceptionHandler;;
const #262 = Asciz	factory;
const #263 = Asciz	spareStack;
const #264 = Asciz	Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;;
const #265 = Asciz	stealCount;
const #266 = Asciz	Ljava/util/concurrent/atomic/AtomicLong;;
const #267 = Asciz	submissionQueue;
const #268 = Asciz	Lscala/concurrent/forkjoin/LinkedTransferQueue;;
const #269 = Asciz	Signature;
const #270 = Asciz	Lscala/concurrent/forkjoin/LinkedTransferQueue<Lscala/concurrent/forkjoin/ForkJoinTask<*>;>;;
const #271 = Asciz	syncStack;
const #272 = Asciz	eventCount;
const #273 = Asciz	J;
const #274 = Asciz	poolNumber;
const #275 = Asciz	maxPoolSize;
const #276 = Asciz	parallelism;
const #277 = Asciz	locallyFifo;
const #278 = Asciz	Z;
const #279 = Asciz	workerCounts;
const #280 = Asciz	runControl;
const #281 = Asciz	RUNNING;
const #282 = int	0;
const #283 = Asciz	SHUTDOWN;
const #284 = int	1;
const #285 = Asciz	TERMINATING;
const #286 = int	2;
const #287 = Asciz	TERMINATED;
const #288 = int	3;
const #289 = Asciz	maintainsParallelism;
const #290 = Asciz	_unsafe;
const #291 = Asciz	Lsun/misc/Unsafe;;
const #292 = Asciz	eventCountOffset;
const #293 = Asciz	workerCountsOffset;
const #294 = Asciz	runControlOffset;
const #295 = Asciz	syncStackOffset;
const #296 = Asciz	spareStackOffset;
const #297 = Asciz	checkPermission;
const #298 = Asciz	()V;
const #299 = Asciz	Code;
const #300 = Asciz	LineNumberTable;
const #301 = Asciz	LocalVariableTable;
const #302 = Asciz	security;
const #303 = Asciz	Ljava/lang/SecurityManager;;
const #304 = Asciz	totalCountOf;
const #305 = Asciz	(I)I;
const #306 = Asciz	s;
const #307 = Asciz	runningCountOf;
const #308 = Asciz	workerCountsFor;
const #309 = Asciz	(II)I;
const #310 = Asciz	t;
const #311 = Asciz	r;
const #312 = Asciz	updateRunningCount;
const #313 = Asciz	(I)V;
const #314 = Asciz	this;
const #315 = Asciz	Lscala/concurrent/forkjoin/ForkJoinPool;;
const #316 = Asciz	delta;
const #317 = Asciz	updateWorkerCount;
const #318 = Asciz	d;
const #319 = Asciz	runStateOf;
const #320 = Asciz	c;
const #321 = Asciz	activeCountOf;
const #322 = Asciz	runControlFor;
const #323 = Asciz	a;
const #324 = Asciz	tryIncrementActiveCount;
const #325 = Asciz	()Z;
const #326 = Asciz	tryDecrementActiveCount;
const #327 = Asciz	nextc;
const #328 = Asciz	canTerminateOnShutdown;
const #329 = Asciz	(I)Z;
const #330 = Asciz	transitionRunStateTo;
const #331 = Asciz	state;
const #332 = Asciz	<init>;
const #333 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;)V;
const #334 = Asciz	(ILscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;)V;
const #335 = Asciz	createWorker;
const #336 = Asciz	(I)Lscala/concurrent/forkjoin/ForkJoinWorkerThread;;
const #337 = Asciz	index;
const #338 = Asciz	h;
const #339 = Asciz	w;
const #340 = Asciz	Lscala/concurrent/forkjoin/ForkJoinWorkerThread;;
const #341 = Asciz	arraySizeFor;
const #342 = Asciz	ps;
const #343 = Asciz	copyOfWorkers;
const #344 = Asciz	([Lscala/concurrent/forkjoin/ForkJoinWorkerThread;I)[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;;
const #345 = Asciz	original;
const #346 = Asciz	newLength;
const #347 = Asciz	copy;
const #348 = Asciz	ensureWorkerArrayCapacity;
const #349 = Asciz	(I)[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;;
const #350 = Asciz	ws;
const #351 = Asciz	tryShrinkWorkerArray;
const #352 = Asciz	len;
const #353 = Asciz	last;
const #354 = Asciz	ensureWorkerInitialization;
const #355 = Asciz	i;
const #356 = Asciz	lock;
const #357 = Asciz	createAndStartAddedWorkers;
const #358 = Asciz	tc;
const #359 = Asciz	rc;
const #360 = Asciz	k;
const #361 = Asciz	doSubmit;
const #362 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinTask;)V;
const #363 = Asciz	task;
const #364 = Asciz	Lscala/concurrent/forkjoin/ForkJoinTask;;
const #365 = Asciz	LocalVariableTypeTable;
const #366 = Asciz	Lscala/concurrent/forkjoin/ForkJoinTask<TT;>;;
const #367 = Asciz	<T:Ljava/lang/Object;>(Lscala/concurrent/forkjoin/ForkJoinTask<TT;>;)V;
const #368 = Asciz	invoke;
const #369 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinTask;)Ljava/lang/Object;;
const #370 = Asciz	<T:Ljava/lang/Object;>(Lscala/concurrent/forkjoin/ForkJoinTask<TT;>;)TT;;
const #371 = Asciz	execute;
const #372 = Asciz	(Ljava/lang/Runnable;)V;
const #373 = Asciz	Ljava/lang/Runnable;;
const #374 = Asciz	submit;
const #375 = Asciz	(Ljava/util/concurrent/Callable;)Lscala/concurrent/forkjoin/ForkJoinTask;;
const #376 = Asciz	Ljava/util/concurrent/Callable;;
const #377 = Asciz	job;
const #378 = Asciz	Ljava/util/concurrent/Callable<TT;>;;
const #379 = Asciz	<T:Ljava/lang/Object;>(Ljava/util/concurrent/Callable<TT;>;)Lscala/concurrent/forkjoin/ForkJoinTask<TT;>;;
const #380 = Asciz	(Ljava/lang/Runnable;Ljava/lang/Object;)Lscala/concurrent/forkjoin/ForkJoinTask;;
const #381 = Asciz	result;
const #382 = Asciz	Ljava/lang/Object;;
const #383 = Asciz	TT;;
const #384 = Asciz	<T:Ljava/lang/Object;>(Ljava/lang/Runnable;TT;)Lscala/concurrent/forkjoin/ForkJoinTask<TT;>;;
const #385 = Asciz	(Ljava/lang/Runnable;)Lscala/concurrent/forkjoin/ForkJoinTask;;
const #386 = Asciz	Lscala/concurrent/forkjoin/ForkJoinTask<Ljava/lang/Void;>;;
const #387 = Asciz	(Ljava/lang/Runnable;)Lscala/concurrent/forkjoin/ForkJoinTask<*>;;
const #388 = Asciz	invokeAll;
const #389 = Asciz	(Ljava/util/Collection;)Ljava/util/List;;
const #390 = Asciz	i$;
const #391 = Asciz	Ljava/util/Iterator;;
const #392 = Asciz	tasks;
const #393 = Asciz	Ljava/util/Collection;;
const #394 = Asciz	ts;
const #395 = Asciz	Ljava/util/ArrayList;;
const #396 = Asciz	Ljava/util/Collection<+Ljava/util/concurrent/Callable<TT;>;>;;
const #397 = Asciz	Ljava/util/ArrayList<Lscala/concurrent/forkjoin/ForkJoinTask<TT;>;>;;
const #398 = Asciz	<T:Ljava/lang/Object;>(Ljava/util/Collection<+Ljava/util/concurrent/Callable<TT;>;>;)Ljava/util/List<Ljava/util/concurrent/Future<TT;>;>;;
const #399 = Asciz	getFactory;
const #400 = Asciz	()Lscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;;
const #401 = Asciz	getUncaughtExceptionHandler;
const #402 = Asciz	()Ljava/lang/Thread$UncaughtExceptionHandler;;
const #403 = Asciz	setUncaughtExceptionHandler;
const #404 = Asciz	(Ljava/lang/Thread$UncaughtExceptionHandler;)Ljava/lang/Thread$UncaughtExceptionHandler;;
const #405 = Asciz	old;
const #406 = Asciz	setParallelism;
const #407 = Asciz	p;
const #408 = Asciz	getParallelism;
const #409 = Asciz	()I;
const #410 = Asciz	getPoolSize;
const #411 = Asciz	getMaximumPoolSize;
const #412 = Asciz	setMaximumPoolSize;
const #413 = Asciz	newMax;
const #414 = Asciz	getMaintainsParallelism;
const #415 = Asciz	setMaintainsParallelism;
const #416 = Asciz	(Z)V;
const #417 = Asciz	enable;
const #418 = Asciz	setAsyncMode;
const #419 = Asciz	(Z)Z;
const #420 = Asciz	async;
const #421 = Asciz	oldMode;
const #422 = Asciz	getAsyncMode;
const #423 = Asciz	getRunningThreadCount;
const #424 = Asciz	getActiveThreadCount;
const #425 = Asciz	getIdleThreadCount;
const #426 = Asciz	isQuiescent;
const #427 = Asciz	getStealCount;
const #428 = Asciz	()J;
const #429 = Asciz	updateStealCount;
const #430 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinWorkerThread;)V;
const #431 = Asciz	sc;
const #432 = Asciz	getQueuedTaskCount;
const #433 = Asciz	count;
const #434 = Asciz	getQueuedSubmissionCount;
const #435 = Asciz	hasQueuedSubmissions;
const #436 = Asciz	pollSubmission;
const #437 = Asciz	()Lscala/concurrent/forkjoin/ForkJoinTask;;
const #438 = Asciz	()Lscala/concurrent/forkjoin/ForkJoinTask<*>;;
const #439 = Asciz	drainTasksTo;
const #440 = Asciz	(Ljava/util/Collection;)I;
const #441 = Asciz	n;
const #442 = Asciz	Ljava/util/Collection<Lscala/concurrent/forkjoin/ForkJoinTask<*>;>;;
const #443 = Asciz	(Ljava/util/Collection<Lscala/concurrent/forkjoin/ForkJoinTask<*>;>;)I;
const #444 = Asciz	toString;
const #445 = Asciz	()Ljava/lang/String;;
const #446 = Asciz	wc;
const #447 = Asciz	st;
const #448 = Asciz	qt;
const #449 = Asciz	qs;
const #450 = Asciz	runStateToString;
const #451 = Asciz	(I)Ljava/lang/String;;
const #452 = Asciz	rs;
const #453 = Asciz	shutdown;
const #454 = Asciz	shutdownNow;
const #455 = Asciz	()Ljava/util/List;;
const #456 = Asciz	()Ljava/util/List<Ljava/lang/Runnable;>;;
const #457 = Asciz	isTerminated;
const #458 = Asciz	isTerminating;
const #459 = Asciz	isShutdown;
const #460 = Asciz	awaitTermination;
const #461 = Asciz	(JLjava/util/concurrent/TimeUnit;)Z;
const #462 = Asciz	timeout;
const #463 = Asciz	unit;
const #464 = Asciz	Ljava/util/concurrent/TimeUnit;;
const #465 = Asciz	nanos;
const #466 = Asciz	Exceptions;
const #467 = class	#788;	//  java/lang/InterruptedException
const #468 = Asciz	workerTerminated;
const #469 = Asciz	idx;
const #470 = Asciz	terminate;
const #471 = Asciz	terminateOnShutdown;
const #472 = Asciz	cancelQueuedSubmissions;
const #473 = Asciz	Lscala/concurrent/forkjoin/ForkJoinTask<*>;;
const #474 = Asciz	cancelQueuedWorkerTasks;
const #475 = Asciz	stopAllWorkers;
const #476 = Asciz	interruptUnterminatedWorkers;
const #477 = Asciz	ignore;
const #478 = Asciz	Ljava/lang/SecurityException;;
const #479 = Asciz	ensureSync;
const #480 = Asciz	q;
const #481 = Asciz	signalIdleWorkers;
const #482 = Asciz	signalWork;
const #483 = Asciz	sync;
const #484 = Asciz	prev;
const #485 = Asciz	node;
const #486 = Asciz	ec;
const #487 = Asciz	syncIsReleasable;
const #488 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;)Z;
const #489 = Asciz	hasNewSyncEvent;
const #490 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinWorkerThread;)Z;
const #491 = Asciz	lc;
const #492 = Asciz	preJoin;
const #493 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinTask;Z)Z;
const #494 = Asciz	counts;
const #495 = Asciz	joinMe;
const #496 = Asciz	maintainParallelism;
const #497 = Asciz	dec;
const #498 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinTask<*>;Z)Z;
const #499 = Asciz	preBlock;
const #500 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;Z)Z;
const #501 = Asciz	blocker;
const #502 = Asciz	Lscala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;;
const #503 = Asciz	needSpare;
const #504 = Asciz	(IZ)Z;
const #505 = Asciz	runningDeficit;
const #506 = Asciz	totalSurplus;
const #507 = Asciz	tryAddSpare;
const #508 = Asciz	expectedCounts;
const #509 = Asciz	expectedRunning;
const #510 = Asciz	expectedTotal;
const #511 = Asciz	success;
const #512 = Asciz	locked;
const #513 = Asciz	createAndStartSpare;
const #514 = Asciz	suspendIfSpare;
const #515 = Asciz	tryResumeSpare;
const #516 = Asciz	updateCount;
const #517 = Asciz	resumeAllSpares;
const #518 = Asciz	trimSpares;
const #519 = Asciz	surplus;
const #520 = Asciz	managedBlock;
const #521 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;Z)V;
const #522 = Asciz	Ljava/lang/Thread;;
const #523 = Asciz	pool;
const #524 = Asciz	awaitBlocker;
const #525 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;)V;
const #526 = Asciz	newTaskFor;
const #527 = Asciz	(Ljava/lang/Runnable;Ljava/lang/Object;)Lscala/concurrent/forkjoin/ForkJoinPool$RunnableFuture;;
const #528 = Asciz	runnable;
const #529 = Asciz	value;
const #530 = Asciz	<T:Ljava/lang/Object;>(Ljava/lang/Runnable;TT;)Lscala/concurrent/forkjoin/ForkJoinPool$RunnableFuture<TT;>;;
const #531 = Asciz	(Ljava/util/concurrent/Callable;)Lscala/concurrent/forkjoin/ForkJoinPool$RunnableFuture;;
const #532 = Asciz	callable;
const #533 = Asciz	<T:Ljava/lang/Object;>(Ljava/util/concurrent/Callable<TT;>;)Lscala/concurrent/forkjoin/ForkJoinPool$RunnableFuture<TT;>;;
const #534 = Asciz	getUnsafe;
const #535 = Asciz	()Lsun/misc/Unsafe;;
const #536 = Asciz	e;
const #537 = Asciz	Ljava/security/PrivilegedActionException;;
const #538 = Asciz	se;
const #539 = Asciz	getUnsafePrivileged;
const #540 = Asciz	f;
const #541 = Asciz	Ljava/lang/reflect/Field;;
const #542 = class	#789;	//  java/lang/NoSuchFieldException
const #543 = class	#790;	//  java/lang/IllegalAccessException
const #544 = Asciz	fieldOffset;
const #545 = Asciz	(Ljava/lang/String;)J;
const #546 = Asciz	fieldName;
const #547 = Asciz	Ljava/lang/String;;
const #548 = Asciz	casEventCount;
const #549 = Asciz	(JJ)Z;
const #550 = Asciz	cmp;
const #551 = Asciz	val;
const #552 = Asciz	casWorkerCounts;
const #553 = Asciz	(II)Z;
const #554 = Asciz	casRunControl;
const #555 = Asciz	casSpareStack;
const #556 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;)Z;
const #557 = Asciz	casBarrierStack;
const #558 = Asciz	access$000;
const #559 = Asciz	<clinit>;
const #560 = Asciz	Ljava/lang/Throwable;;
const #561 = Asciz	SourceFile;
const #562 = Asciz	ForkJoinPool.java;
const #563 = NameAndType	#539:#535;//  getUnsafePrivileged:()Lsun/misc/Unsafe;
const #564 = class	#791;	//  java/lang/System
const #565 = NameAndType	#792:#793;//  getSecurityManager:()Ljava/lang/SecurityManager;
const #566 = NameAndType	#248:#249;//  modifyThreadPermission:Ljava/lang/RuntimePermission;
const #567 = class	#794;	//  java/lang/SecurityManager
const #568 = NameAndType	#297:#795;//  checkPermission:(Ljava/security/Permission;)V
const #569 = NameAndType	#279:#242;//  workerCounts:I
const #570 = NameAndType	#552:#553;//  casWorkerCounts:(II)Z
const #571 = NameAndType	#280:#242;//  runControl:I
const #572 = NameAndType	#554:#553;//  casRunControl:(II)Z
const #573 = NameAndType	#328:#329;//  canTerminateOnShutdown:(I)Z
const #574 = NameAndType	#471:#298;//  terminateOnShutdown:()V
const #575 = NameAndType	#319:#305;//  runStateOf:(I)I
const #576 = NameAndType	#321:#305;//  activeCountOf:(I)I
const #577 = NameAndType	#322:#309;//  runControlFor:(II)I
const #578 = class	#796;	//  java/lang/Runtime
const #579 = NameAndType	#797:#798;//  getRuntime:()Ljava/lang/Runtime;
const #580 = NameAndType	#799:#409;//  availableProcessors:()I
const #581 = NameAndType	#246:#247;//  defaultForkJoinWorkerThreadFactory:Lscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;
const #582 = NameAndType	#332:#334;//  "<init>":(ILscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;)V
const #583 = NameAndType	#332:#298;//  "<init>":()V
const #584 = Asciz	java/lang/IllegalArgumentException;
const #585 = Asciz	java/lang/NullPointerException;
const #586 = NameAndType	#297:#298;//  checkPermission:()V
const #587 = NameAndType	#262:#247;//  factory:Lscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;
const #588 = NameAndType	#276:#242;//  parallelism:I
const #589 = NameAndType	#275:#242;//  maxPoolSize:I
const #590 = NameAndType	#289:#278;//  maintainsParallelism:Z
const #591 = NameAndType	#250:#251;//  poolNumberGenerator:Ljava/util/concurrent/atomic/AtomicInteger;
const #592 = NameAndType	#800:#409;//  incrementAndGet:()I
const #593 = NameAndType	#274:#242;//  poolNumber:I
const #594 = Asciz	java/util/concurrent/locks/ReentrantLock;
const #595 = NameAndType	#254:#255;//  workerLock:Ljava/util/concurrent/locks/ReentrantLock;
const #596 = NameAndType	#801:#802;//  newCondition:()Ljava/util/concurrent/locks/Condition;
const #597 = NameAndType	#256:#257;//  termination:Ljava/util/concurrent/locks/Condition;
const #598 = Asciz	java/util/concurrent/atomic/AtomicLong;
const #599 = NameAndType	#265:#266;//  stealCount:Ljava/util/concurrent/atomic/AtomicLong;
const #600 = Asciz	scala/concurrent/forkjoin/LinkedTransferQueue;
const #601 = NameAndType	#267:#268;//  submissionQueue:Lscala/concurrent/forkjoin/LinkedTransferQueue;
const #602 = NameAndType	#258:#261;//  ueh:Ljava/lang/Thread$UncaughtExceptionHandler;
const #603 = NameAndType	#803:#804;//  newThread:(Lscala/concurrent/forkjoin/ForkJoinPool;)Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
const #604 = NameAndType	#805:#242;//  poolIndex:I
const #605 = NameAndType	#806:#416;//  setDaemon:(Z)V
const #606 = NameAndType	#277:#278;//  locallyFifo:Z
const #607 = NameAndType	#418:#416;//  setAsyncMode:(Z)V
const #608 = Asciz	java/lang/StringBuilder;
const #609 = Asciz	ForkJoinPool-;
const #610 = NameAndType	#807:#808;//  append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
const #611 = NameAndType	#807:#809;//  append:(I)Ljava/lang/StringBuilder;
const #612 = Asciz	-worker-;
const #613 = NameAndType	#444:#445;//  toString:()Ljava/lang/String;
const #614 = NameAndType	#810:#811;//  setName:(Ljava/lang/String;)V
const #615 = NameAndType	#403:#812;//  setUncaughtExceptionHandler:(Ljava/lang/Thread$UncaughtExceptionHandler;)V
const #616 = class	#813;	//  java/lang/Integer
const #617 = NameAndType	#814:#305;//  numberOfLeadingZeros:(I)I
const #618 = Asciz	scala/concurrent/forkjoin/ForkJoinWorkerThread;
const #619 = class	#815;	//  java/lang/Math
const #620 = NameAndType	#816:#309;//  min:(II)I
const #621 = NameAndType	#817:#818;//  arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
const #622 = NameAndType	#252:#253;//  workers:[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
const #623 = NameAndType	#341:#305;//  arraySizeFor:(I)I
const #624 = NameAndType	#343:#344;//  copyOfWorkers:([Lscala/concurrent/forkjoin/ForkJoinWorkerThread;I)[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
const #625 = NameAndType	#356:#298;//  lock:()V
const #626 = NameAndType	#348:#349;//  ensureWorkerArrayCapacity:(I)[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
const #627 = NameAndType	#335:#336;//  createWorker:(I)Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
const #628 = NameAndType	#819:#298;//  start:()V
const #629 = NameAndType	#317:#313;//  updateWorkerCount:(I)V
const #630 = NameAndType	#820:#298;//  unlock:()V
const #631 = NameAndType	#517:#325;//  resumeAllSpares:()Z
const #632 = NameAndType	#304:#305;//  totalCountOf:(I)I
const #633 = NameAndType	#307:#305;//  runningCountOf:(I)I
const #634 = NameAndType	#308:#309;//  workerCountsFor:(II)I
const #635 = NameAndType	#459:#325;//  isShutdown:()Z
const #636 = Asciz	java/util/concurrent/RejectedExecutionException;
const #637 = NameAndType	#354:#298;//  ensureWorkerInitialization:()V
const #638 = NameAndType	#821:#822;//  offer:(Ljava/lang/Object;)Z
const #639 = NameAndType	#481:#298;//  signalIdleWorkers:()V
const #640 = NameAndType	#361:#362;//  doSubmit:(Lscala/concurrent/forkjoin/ForkJoinTask;)V
const #641 = NameAndType	#823:#824;//  join:()Ljava/lang/Object;
const #642 = Asciz	scala/concurrent/forkjoin/ForkJoinPool$AdaptedRunnable;
const #643 = NameAndType	#332:#825;//  "<init>":(Ljava/lang/Runnable;Ljava/lang/Object;)V
const #644 = Asciz	scala/concurrent/forkjoin/ForkJoinPool$AdaptedCallable;
const #645 = NameAndType	#332:#826;//  "<init>":(Ljava/util/concurrent/Callable;)V
const #646 = Asciz	java/util/ArrayList;
const #647 = class	#827;	//  java/util/Collection
const #648 = NameAndType	#828:#409;//  size:()I
const #649 = NameAndType	#332:#313;//  "<init>":(I)V
const #650 = NameAndType	#829:#830;//  iterator:()Ljava/util/Iterator;
const #651 = class	#831;	//  java/util/Iterator
const #652 = NameAndType	#832:#325;//  hasNext:()Z
const #653 = NameAndType	#833:#824;//  next:()Ljava/lang/Object;
const #654 = Asciz	java/util/concurrent/Callable;
const #655 = NameAndType	#834:#822;//  add:(Ljava/lang/Object;)Z
const #656 = Asciz	scala/concurrent/forkjoin/ForkJoinPool$InvokeAll;
const #657 = NameAndType	#332:#835;//  "<init>":(Ljava/util/ArrayList;)V
const #658 = NameAndType	#368:#369;//  invoke:(Lscala/concurrent/forkjoin/ForkJoinTask;)Ljava/lang/Object;
const #659 = NameAndType	#458:#325;//  isTerminating:()Z
const #660 = NameAndType	#357:#298;//  createAndStartAddedWorkers:()V
const #661 = NameAndType	#518:#298;//  trimSpares:()V
const #662 = NameAndType	#836:#428;//  get:()J
const #663 = NameAndType	#837:#409;//  getAndClearStealCount:()I
const #664 = NameAndType	#838:#839;//  addAndGet:(J)J
const #665 = NameAndType	#840:#409;//  getQueueSize:()I
const #666 = NameAndType	#841:#325;//  isEmpty:()Z
const #667 = NameAndType	#842:#824;//  poll:()Ljava/lang/Object;
const #668 = Asciz	scala/concurrent/forkjoin/ForkJoinTask;
const #669 = NameAndType	#843:#440;//  drainTo:(Ljava/util/Collection;)I
const #670 = NameAndType	#439:#440;//  drainTasksTo:(Ljava/util/Collection;)I
const #671 = NameAndType	#427:#428;//  getStealCount:()J
const #672 = NameAndType	#432:#428;//  getQueuedTaskCount:()J
const #673 = NameAndType	#434:#409;//  getQueuedSubmissionCount:()I
const #674 = Asciz	[;
const #675 = NameAndType	#450:#451;//  runStateToString:(I)Ljava/lang/String;
const #676 = Asciz	, parallelism = ;
const #677 = Asciz	, size = ;
const #678 = Asciz	, active = ;
const #679 = Asciz	, running = ;
const #680 = Asciz	, steals = ;
const #681 = NameAndType	#807:#844;//  append:(J)Ljava/lang/StringBuilder;
const #682 = Asciz	, tasks = ;
const #683 = Asciz	, submissions = ;
const #684 = Asciz	];
const #685 = Asciz	Running;
const #686 = Asciz	Shutting down;
const #687 = Asciz	Terminating;
const #688 = Asciz	Terminated;
const #689 = Asciz	java/lang/Error;
const #690 = Asciz	Unknown run state;
const #691 = NameAndType	#332:#811;//  "<init>":(Ljava/lang/String;)V
const #692 = NameAndType	#330:#329;//  transitionRunStateTo:(I)Z
const #693 = NameAndType	#470:#298;//  terminate:()V
const #694 = class	#845;	//  java/util/Collections
const #695 = NameAndType	#846:#455;//  emptyList:()Ljava/util/List;
const #696 = class	#847;	//  java/util/concurrent/TimeUnit
const #697 = NameAndType	#848:#839;//  toNanos:(J)J
const #698 = NameAndType	#457:#325;//  isTerminated:()Z
const #699 = class	#849;	//  java/util/concurrent/locks/Condition
const #700 = NameAndType	#850:#839;//  awaitNanos:(J)J
const #701 = NameAndType	#429:#430;//  updateStealCount:(Lscala/concurrent/forkjoin/ForkJoinWorkerThread;)V
const #702 = NameAndType	#851:#298;//  signalAll:()V
const #703 = NameAndType	#351:#298;//  tryShrinkWorkerArray:()V
const #704 = NameAndType	#515:#419;//  tryResumeSpare:(Z)Z
const #705 = NameAndType	#475:#298;//  stopAllWorkers:()V
const #706 = NameAndType	#472:#298;//  cancelQueuedSubmissions:()V
const #707 = NameAndType	#474:#298;//  cancelQueuedWorkerTasks:()V
const #708 = NameAndType	#476:#298;//  interruptUnterminatedWorkers:()V
const #709 = NameAndType	#435:#325;//  hasQueuedSubmissions:()Z
const #710 = NameAndType	#436:#437;//  pollSubmission:()Lscala/concurrent/forkjoin/ForkJoinTask;
const #711 = NameAndType	#852:#419;//  cancel:(Z)Z
const #712 = NameAndType	#853:#298;//  cancelTasks:()V
const #713 = NameAndType	#454:#325;//  shutdownNow:()Z
const #714 = NameAndType	#854:#298;//  interrupt:()V
const #715 = Asciz	java/lang/SecurityException;
const #716 = NameAndType	#272:#273;//  eventCount:J
const #717 = NameAndType	#271:#264;//  syncStack:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
const #718 = NameAndType	#433:#273;//  count:J
const #719 = NameAndType	#557:#556;//  casBarrierStack:(Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;)Z
const #720 = NameAndType	#855:#325;//  signal:()Z
const #721 = NameAndType	#833:#264;//  next:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
const #722 = NameAndType	#548:#549;//  casEventCount:(JJ)Z
const #723 = NameAndType	#479:#428;//  ensureSync:()J
const #724 = NameAndType	#514:#490;//  suspendIfSpare:(Lscala/concurrent/forkjoin/ForkJoinWorkerThread;)Z
const #725 = NameAndType	#856:#273;//  lastEventCount:J
const #726 = Asciz	scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
const #727 = NameAndType	#332:#857;//  "<init>":(JLscala/concurrent/forkjoin/ForkJoinWorkerThread;)V
const #728 = NameAndType	#858:#859;//  awaitSyncRelease:(Lscala/concurrent/forkjoin/ForkJoinPool;)V
const #729 = class	#860;	//  java/lang/Thread
const #730 = NameAndType	#861:#325;//  interrupted:()Z
const #731 = NameAndType	#862:#340;//  thread:Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
const #732 = NameAndType	#863:#864;//  hasQueuedTasks:([Lscala/concurrent/forkjoin/ForkJoinWorkerThread;)Z
const #733 = NameAndType	#263:#264;//  spareStack:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
const #734 = NameAndType	#503:#504;//  needSpare:(IZ)Z
const #735 = NameAndType	#865:#242;//  status:I
const #736 = NameAndType	#507:#329;//  tryAddSpare:(I)Z
const #737 = NameAndType	#866:#325;//  isReleasable:()Z
const #738 = NameAndType	#867:#325;//  tryLock:()Z
const #739 = NameAndType	#513:#313;//  createAndStartSpare:(I)V
const #740 = NameAndType	#555:#556;//  casSpareStack:(Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;)Z
const #741 = NameAndType	#868:#298;//  awaitSpareRelease:()V
const #742 = NameAndType	#312:#313;//  updateRunningCount:(I)V
const #743 = NameAndType	#453:#325;//  shutdown:()Z
const #744 = NameAndType	#869:#870;//  currentThread:()Ljava/lang/Thread;
const #745 = NameAndType	#523:#315;//  pool:Lscala/concurrent/forkjoin/ForkJoinPool;
const #746 = NameAndType	#499:#500;//  preBlock:(Lscala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;Z)Z
const #747 = NameAndType	#524:#525;//  awaitBlocker:(Lscala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;)V
const #748 = NameAndType	#871:#325;//  block:()Z
const #749 = NameAndType	#534:#535;//  getUnsafe:()Lsun/misc/Unsafe;
const #750 = Asciz	scala/concurrent/forkjoin/ForkJoinPool$1;
const #751 = Asciz	;
const #752 = class	#872;	//  java/security/AccessController
const #753 = NameAndType	#873:#874;//  doPrivileged:(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;
const #754 = Asciz	sun/misc/Unsafe;
const #755 = Asciz	java/security/PrivilegedActionException;
const #756 = NameAndType	#875:#876;//  getCause:()Ljava/lang/Throwable;
const #757 = Asciz	theUnsafe;
const #758 = class	#877;	//  java/lang/Class
const #759 = NameAndType	#878:#879;//  getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
const #760 = class	#880;	//  java/lang/reflect/Field
const #761 = NameAndType	#881:#416;//  setAccessible:(Z)V
const #762 = NameAndType	#836:#882;//  get:(Ljava/lang/Object;)Ljava/lang/Object;
const #763 = NameAndType	#290:#291;//  _unsafe:Lsun/misc/Unsafe;
const #764 = Asciz	scala/concurrent/forkjoin/ForkJoinPool;
const #765 = NameAndType	#883:#884;//  objectFieldOffset:(Ljava/lang/reflect/Field;)J
const #766 = NameAndType	#292:#273;//  eventCountOffset:J
const #767 = NameAndType	#885:#886;//  compareAndSwapLong:(Ljava/lang/Object;JJJ)Z
const #768 = NameAndType	#293:#273;//  workerCountsOffset:J
const #769 = NameAndType	#887:#888;//  compareAndSwapInt:(Ljava/lang/Object;JII)Z
const #770 = NameAndType	#294:#273;//  runControlOffset:J
const #771 = NameAndType	#296:#273;//  spareStackOffset:J
const #772 = NameAndType	#889:#890;//  compareAndSwapObject:(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z
const #773 = NameAndType	#295:#273;//  syncStackOffset:J
const #774 = Asciz	scala/concurrent/forkjoin/ForkJoinPool$DefaultForkJoinWorkerThreadFactory;
const #775 = Asciz	java/lang/RuntimePermission;
const #776 = Asciz	modifyThread;
const #777 = Asciz	java/util/concurrent/atomic/AtomicInteger;
const #778 = NameAndType	#544:#545;//  fieldOffset:(Ljava/lang/String;)J
const #779 = Asciz	java/lang/Throwable;
const #780 = Asciz	java/lang/RuntimeException;
const #781 = Asciz	Could not initialize intrinsics;
const #782 = NameAndType	#332:#891;//  "<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
const #783 = Asciz	java/lang/Object;
const #784 = Asciz	scala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;
const #785 = Asciz	scala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;
const #786 = Asciz	scala/concurrent/forkjoin/ForkJoinPool$RunnableFuture;
const #787 = Asciz	java/lang/Thread$UncaughtExceptionHandler;
const #788 = Asciz	java/lang/InterruptedException;
const #789 = Asciz	java/lang/NoSuchFieldException;
const #790 = Asciz	java/lang/IllegalAccessException;
const #791 = Asciz	java/lang/System;
const #792 = Asciz	getSecurityManager;
const #793 = Asciz	()Ljava/lang/SecurityManager;;
const #794 = Asciz	java/lang/SecurityManager;
const #795 = Asciz	(Ljava/security/Permission;)V;
const #796 = Asciz	java/lang/Runtime;
const #797 = Asciz	getRuntime;
const #798 = Asciz	()Ljava/lang/Runtime;;
const #799 = Asciz	availableProcessors;
const #800 = Asciz	incrementAndGet;
const #801 = Asciz	newCondition;
const #802 = Asciz	()Ljava/util/concurrent/locks/Condition;;
const #803 = Asciz	newThread;
const #804 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinPool;)Lscala/concurrent/forkjoin/ForkJoinWorkerThread;;
const #805 = Asciz	poolIndex;
const #806 = Asciz	setDaemon;
const #807 = Asciz	append;
const #808 = Asciz	(Ljava/lang/String;)Ljava/lang/StringBuilder;;
const #809 = Asciz	(I)Ljava/lang/StringBuilder;;
const #810 = Asciz	setName;
const #811 = Asciz	(Ljava/lang/String;)V;
const #812 = Asciz	(Ljava/lang/Thread$UncaughtExceptionHandler;)V;
const #813 = Asciz	java/lang/Integer;
const #814 = Asciz	numberOfLeadingZeros;
const #815 = Asciz	java/lang/Math;
const #816 = Asciz	min;
const #817 = Asciz	arraycopy;
const #818 = Asciz	(Ljava/lang/Object;ILjava/lang/Object;II)V;
const #819 = Asciz	start;
const #820 = Asciz	unlock;
const #821 = Asciz	offer;
const #822 = Asciz	(Ljava/lang/Object;)Z;
const #823 = Asciz	join;
const #824 = Asciz	()Ljava/lang/Object;;
const #825 = Asciz	(Ljava/lang/Runnable;Ljava/lang/Object;)V;
const #826 = Asciz	(Ljava/util/concurrent/Callable;)V;
const #827 = Asciz	java/util/Collection;
const #828 = Asciz	size;
const #829 = Asciz	iterator;
const #830 = Asciz	()Ljava/util/Iterator;;
const #831 = Asciz	java/util/Iterator;
const #832 = Asciz	hasNext;
const #833 = Asciz	next;
const #834 = Asciz	add;
const #835 = Asciz	(Ljava/util/ArrayList;)V;
const #836 = Asciz	get;
const #837 = Asciz	getAndClearStealCount;
const #838 = Asciz	addAndGet;
const #839 = Asciz	(J)J;
const #840 = Asciz	getQueueSize;
const #841 = Asciz	isEmpty;
const #842 = Asciz	poll;
const #843 = Asciz	drainTo;
const #844 = Asciz	(J)Ljava/lang/StringBuilder;;
const #845 = Asciz	java/util/Collections;
const #846 = Asciz	emptyList;
const #847 = Asciz	java/util/concurrent/TimeUnit;
const #848 = Asciz	toNanos;
const #849 = Asciz	java/util/concurrent/locks/Condition;
const #850 = Asciz	awaitNanos;
const #851 = Asciz	signalAll;
const #852 = Asciz	cancel;
const #853 = Asciz	cancelTasks;
const #854 = Asciz	interrupt;
const #855 = Asciz	signal;
const #856 = Asciz	lastEventCount;
const #857 = Asciz	(JLscala/concurrent/forkjoin/ForkJoinWorkerThread;)V;
const #858 = Asciz	awaitSyncRelease;
const #859 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinPool;)V;
const #860 = Asciz	java/lang/Thread;
const #861 = Asciz	interrupted;
const #862 = Asciz	thread;
const #863 = Asciz	hasQueuedTasks;
const #864 = Asciz	([Lscala/concurrent/forkjoin/ForkJoinWorkerThread;)Z;
const #865 = Asciz	status;
const #866 = Asciz	isReleasable;
const #867 = Asciz	tryLock;
const #868 = Asciz	awaitSpareRelease;
const #869 = Asciz	currentThread;
const #870 = Asciz	()Ljava/lang/Thread;;
const #871 = Asciz	block;
const #872 = Asciz	java/security/AccessController;
const #873 = Asciz	doPrivileged;
const #874 = Asciz	(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;;
const #875 = Asciz	getCause;
const #876 = Asciz	()Ljava/lang/Throwable;;
const #877 = Asciz	java/lang/Class;
const #878 = Asciz	getDeclaredField;
const #879 = Asciz	(Ljava/lang/String;)Ljava/lang/reflect/Field;;
const #880 = Asciz	java/lang/reflect/Field;
const #881 = Asciz	setAccessible;
const #882 = Asciz	(Ljava/lang/Object;)Ljava/lang/Object;;
const #883 = Asciz	objectFieldOffset;
const #884 = Asciz	(Ljava/lang/reflect/Field;)J;
const #885 = Asciz	compareAndSwapLong;
const #886 = Asciz	(Ljava/lang/Object;JJJ)Z;
const #887 = Asciz	compareAndSwapInt;
const #888 = Asciz	(Ljava/lang/Object;JII)Z;
const #889 = Asciz	compareAndSwapObject;
const #890 = Asciz	(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z;
const #891 = Asciz	(Ljava/lang/String;Ljava/lang/Throwable;)V;

{
public static final scala.concurrent.forkjoin.ForkJoinPool$ForkJoinWorkerThreadFactory defaultForkJoinWorkerThreadFactory;

public volatile scala.concurrent.forkjoin.ForkJoinWorkerThread[] workers;

static final sun.misc.Unsafe _unsafe;

static final long eventCountOffset;

static final long workerCountsOffset;

static final long runControlOffset;

static final long syncStackOffset;

static final long spareStackOffset;

final void updateRunningCount(int);
  Code:
   Stack=4, Locals=3, Args_size=2
   0:	aload_0
   1:	aload_0
   2:	getfield	#6; //Field workerCounts:I
   5:	dup
   6:	istore_2
   7:	iload_2
   8:	iload_1
   9:	iadd
   10:	invokespecial	#7; //Method casWorkerCounts:(II)Z
   13:	ifeq	0
   16:	return
  LineNumberTable: 
   line 240: 0
   line 241: 16

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      17      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   0      17      1    delta       I
   7      10      2    s       I


final boolean tryIncrementActiveCount();
  Code:
   Stack=4, Locals=2, Args_size=1
   0:	aload_0
   1:	getfield	#8; //Field runControl:I
   4:	istore_1
   5:	aload_0
   6:	iload_1
   7:	iload_1
   8:	iconst_1
   9:	iadd
   10:	invokespecial	#9; //Method casRunControl:(II)Z
   13:	ireturn
  LineNumberTable: 
   line 283: 0
   line 284: 5

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      14      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   5      9      1    c       I


final boolean tryDecrementActiveCount();
  Code:
   Stack=3, Locals=3, Args_size=1
   0:	aload_0
   1:	getfield	#8; //Field runControl:I
   4:	istore_1
   5:	iload_1
   6:	iconst_1
   7:	isub
   8:	istore_2
   9:	aload_0
   10:	iload_1
   11:	iload_2
   12:	invokespecial	#9; //Method casRunControl:(II)Z
   15:	ifne	20
   18:	iconst_0
   19:	ireturn
   20:	iload_2
   21:	invokestatic	#10; //Method canTerminateOnShutdown:(I)Z
   24:	ifeq	31
   27:	aload_0
   28:	invokespecial	#11; //Method terminateOnShutdown:()V
   31:	iconst_1
   32:	ireturn
  LineNumberTable: 
   line 294: 0
   line 295: 5
   line 296: 9
   line 297: 18
   line 298: 20
   line 299: 27
   line 300: 31

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      33      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   5      28      1    c       I
   9      24      2    nextc       I


public scala.concurrent.forkjoin.ForkJoinPool();
  Code:
   Stack=3, Locals=1, Args_size=1
   0:	aload_0
   1:	invokestatic	#15; //Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
   4:	invokevirtual	#16; //Method java/lang/Runtime.availableProcessors:()I
   7:	getstatic	#17; //Field defaultForkJoinWorkerThreadFactory:Lscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;
   10:	invokespecial	#18; //Method "<init>":(ILscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;)V
   13:	return
  LineNumberTable: 
   line 343: 0
   line 345: 13

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      14      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;


public scala.concurrent.forkjoin.ForkJoinPool(int);
  Code:
   Stack=3, Locals=2, Args_size=2
   0:	aload_0
   1:	iload_1
   2:	getstatic	#17; //Field defaultForkJoinWorkerThreadFactory:Lscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;
   5:	invokespecial	#18; //Method "<init>":(ILscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;)V
   8:	return
  LineNumberTable: 
   line 359: 0
   line 360: 8

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      9      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   0      9      1    parallelism       I


public scala.concurrent.forkjoin.ForkJoinPool(scala.concurrent.forkjoin.ForkJoinPool$ForkJoinWorkerThreadFactory);
  Code:
   Stack=3, Locals=2, Args_size=2
   0:	aload_0
   1:	invokestatic	#15; //Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
   4:	invokevirtual	#16; //Method java/lang/Runtime.availableProcessors:()I
   7:	aload_1
   8:	invokespecial	#18; //Method "<init>":(ILscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;)V
   11:	return
  LineNumberTable: 
   line 374: 0
   line 375: 11

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      12      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   0      12      1    factory       Lscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;


public scala.concurrent.forkjoin.ForkJoinPool(int, scala.concurrent.forkjoin.ForkJoinPool$ForkJoinWorkerThreadFactory);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	invokespecial	#19; //Method java/lang/Object."<init>":()V
   4:	iload_1
   5:	ifle	15
   8:	iload_1
   9:	sipush	32767
   12:	if_icmple	23
   15:	new	#20; //class java/lang/IllegalArgumentException
   18:	dup
   19:	invokespecial	#21; //Method java/lang/IllegalArgumentException."<init>":()V
   22:	athrow
   23:	aload_2
   24:	ifnonnull	35
   27:	new	#22; //class java/lang/NullPointerException
   30:	dup
   31:	invokespecial	#23; //Method java/lang/NullPointerException."<init>":()V
   34:	athrow
   35:	invokestatic	#24; //Method checkPermission:()V
   38:	aload_0
   39:	aload_2
   40:	putfield	#25; //Field factory:Lscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;
   43:	aload_0
   44:	iload_1
   45:	putfield	#26; //Field parallelism:I
   48:	aload_0
   49:	sipush	32767
   52:	putfield	#27; //Field maxPoolSize:I
   55:	aload_0
   56:	iconst_1
   57:	putfield	#28; //Field maintainsParallelism:Z
   60:	aload_0
   61:	getstatic	#29; //Field poolNumberGenerator:Ljava/util/concurrent/atomic/AtomicInteger;
   64:	invokevirtual	#30; //Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
   67:	putfield	#31; //Field poolNumber:I
   70:	aload_0
   71:	new	#32; //class java/util/concurrent/locks/ReentrantLock
   74:	dup
   75:	invokespecial	#33; //Method java/util/concurrent/locks/ReentrantLock."<init>":()V
   78:	putfield	#34; //Field workerLock:Ljava/util/concurrent/locks/ReentrantLock;
   81:	aload_0
   82:	aload_0
   83:	getfield	#34; //Field workerLock:Ljava/util/concurrent/locks/ReentrantLock;
   86:	invokevirtual	#35; //Method java/util/concurrent/locks/ReentrantLock.newCondition:()Ljava/util/concurrent/locks/Condition;
   89:	putfield	#36; //Field termination:Ljava/util/concurrent/locks/Condition;
   92:	aload_0
   93:	new	#37; //class java/util/concurrent/atomic/AtomicLong
   96:	dup
   97:	invokespecial	#38; //Method java/util/concurrent/atomic/AtomicLong."<init>":()V
   100:	putfield	#39; //Field stealCount:Ljava/util/concurrent/atomic/AtomicLong;
   103:	aload_0
   104:	new	#40; //class scala/concurrent/forkjoin/LinkedTransferQueue
   107:	dup
   108:	invokespecial	#41; //Method scala/concurrent/forkjoin/LinkedTransferQueue."<init>":()V
   111:	putfield	#42; //Field submissionQueue:Lscala/concurrent/forkjoin/LinkedTransferQueue;
   114:	return
  LineNumberTable: 
   line 390: 0
   line 391: 4
   line 392: 15
   line 393: 23
   line 394: 27
   line 395: 35
   line 396: 38
   line 397: 43
   line 398: 48
   line 399: 55
   line 400: 60
   line 401: 70
   line 402: 81
   line 403: 92
   line 404: 103
   line 406: 114

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      115      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   0      115      1    parallelism       I
   0      115      2    factory       Lscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;


public static scala.concurrent.forkjoin.ForkJoinWorkerThread[] copyOfWorkers(scala.concurrent.forkjoin.ForkJoinWorkerThread[], int);
  Code:
   Stack=6, Locals=3, Args_size=2
   0:	iload_1
   1:	anewarray	#59; //class scala/concurrent/forkjoin/ForkJoinWorkerThread
   4:	astore_2
   5:	aload_0
   6:	iconst_0
   7:	aload_2
   8:	iconst_0
   9:	iload_1
   10:	aload_0
   11:	arraylength
   12:	invokestatic	#60; //Method java/lang/Math.min:(II)I
   15:	invokestatic	#61; //Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
   18:	aload_2
   19:	areturn
  LineNumberTable: 
   line 436: 0
   line 437: 5
   line 438: 18

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      20      0    original       [Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   0      20      1    newLength       I
   5      15      2    copy       [Lscala/concurrent/forkjoin/ForkJoinWorkerThread;


final void ensureWorkerInitialization();
  Code:
   Stack=3, Locals=7, Args_size=1
   0:	aload_0
   1:	getfield	#62; //Field workers:[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   4:	astore_1
   5:	aload_1
   6:	ifnonnull	98
   9:	aload_0
   10:	getfield	#34; //Field workerLock:Ljava/util/concurrent/locks/ReentrantLock;
   13:	astore_2
   14:	aload_2
   15:	invokevirtual	#65; //Method java/util/concurrent/locks/ReentrantLock.lock:()V
   18:	aload_0
   19:	getfield	#62; //Field workers:[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   22:	astore_1
   23:	aload_1
   24:	ifnonnull	82
   27:	aload_0
   28:	getfield	#26; //Field parallelism:I
   31:	istore_3
   32:	aload_0
   33:	iload_3
   34:	invokespecial	#66; //Method ensureWorkerArrayCapacity:(I)[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   37:	astore_1
   38:	iconst_0
   39:	istore	4
   41:	iload	4
   43:	iload_3
   44:	if_icmpge	82
   47:	aload_0
   48:	iload	4
   50:	invokespecial	#67; //Method createWorker:(I)Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   53:	astore	5
   55:	aload	5
   57:	ifnull	76
   60:	aload_1
   61:	iload	4
   63:	aload	5
   65:	aastore
   66:	aload	5
   68:	invokevirtual	#68; //Method scala/concurrent/forkjoin/ForkJoinWorkerThread.start:()V
   71:	aload_0
   72:	iconst_1
   73:	invokespecial	#69; //Method updateWorkerCount:(I)V
   76:	iinc	4, 1
   79:	goto	41
   82:	aload_2
   83:	invokevirtual	#70; //Method java/util/concurrent/locks/ReentrantLock.unlock:()V
   86:	goto	98
   89:	astore	6
   91:	aload_2
   92:	invokevirtual	#70; //Method java/util/concurrent/locks/ReentrantLock.unlock:()V
   95:	aload	6
   97:	athrow
   98:	return
  Exception table:
   from   to  target type
    18    82    89   any
    89    91    89   any
  LineNumberTable: 
   line 476: 0
   line 477: 5
   line 478: 9
   line 479: 14
   line 481: 18
   line 482: 23
   line 483: 27
   line 484: 32
   line 485: 38
   line 486: 47
   line 487: 55
   line 488: 60
   line 489: 66
   line 490: 71
   line 485: 76
   line 495: 82
   line 496: 86
   line 495: 89
   line 498: 98

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   55      21      5    w       Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   41      41      4    i       I
   32      50      3    ps       I
   14      84      2    lock       Ljava/util/concurrent/locks/ReentrantLock;
   0      99      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   5      94      1    ws       [Lscala/concurrent/forkjoin/ForkJoinWorkerThread;


public java.lang.Object invoke(scala.concurrent.forkjoin.ForkJoinTask);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokespecial	#81; //Method doSubmit:(Lscala/concurrent/forkjoin/ForkJoinTask;)V
   5:	aload_1
   6:	invokevirtual	#82; //Method scala/concurrent/forkjoin/ForkJoinTask.join:()Ljava/lang/Object;
   9:	areturn
  LineNumberTable: 
   line 556: 0
   line 557: 5

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      10      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   0      10      1    task       Lscala/concurrent/forkjoin/ForkJoinTask;

  LocalVariableTypeTable: length = 0xC
   00 01 00 00 00 0A 01 6B 01 6E 00 01 
  Signature: length = 0x2
   01 72 

public void execute(scala.concurrent.forkjoin.ForkJoinTask);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokespecial	#81; //Method doSubmit:(Lscala/concurrent/forkjoin/ForkJoinTask;)V
   5:	return
  LineNumberTable: 
   line 567: 0
   line 568: 5

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   0      6      1    task       Lscala/concurrent/forkjoin/ForkJoinTask;

  LocalVariableTypeTable: length = 0xC
   00 01 00 00 00 06 01 6B 01 6E 00 01 
  Signature: length = 0x2
   01 6F 

public void execute(java.lang.Runnable);
  Code:
   Stack=5, Locals=2, Args_size=2
   0:	aload_0
   1:	new	#83; //class scala/concurrent/forkjoin/ForkJoinPool$AdaptedRunnable
   4:	dup
   5:	aload_1
   6:	aconst_null
   7:	invokespecial	#84; //Method scala/concurrent/forkjoin/ForkJoinPool$AdaptedRunnable."<init>":(Ljava/lang/Runnable;Ljava/lang/Object;)V
   10:	invokespecial	#81; //Method doSubmit:(Lscala/concurrent/forkjoin/ForkJoinTask;)V
   13:	return
  LineNumberTable: 
   line 573: 0
   line 574: 13

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      14      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   0      14      1    task       Ljava/lang/Runnable;


public scala.concurrent.forkjoin.ForkJoinTask submit(java.util.concurrent.Callable);
  Code:
   Stack=3, Locals=3, Args_size=2
   0:	new	#85; //class scala/concurrent/forkjoin/ForkJoinPool$AdaptedCallable
   3:	dup
   4:	aload_1
   5:	invokespecial	#86; //Method scala/concurrent/forkjoin/ForkJoinPool$AdaptedCallable."<init>":(Ljava/util/concurrent/Callable;)V
   8:	astore_2
   9:	aload_0
   10:	aload_2
   11:	invokespecial	#81; //Method doSubmit:(Lscala/concurrent/forkjoin/ForkJoinTask;)V
   14:	aload_2
   15:	areturn
  LineNumberTable: 
   line 577: 0
   line 578: 9
   line 579: 14

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      16      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   0      16      1    task       Ljava/util/concurrent/Callable;
   9      7      2    job       Lscala/concurrent/forkjoin/ForkJoinTask;

  LocalVariableTypeTable: length = 0x16
   00 02 00 00 00 10 01 6B 01 7A 00 01 00 09 00 07
   01 79 01 6E 00 02 
  Signature: length = 0x2
   01 7B 

public scala.concurrent.forkjoin.ForkJoinTask submit(java.lang.Runnable, java.lang.Object);
  Code:
   Stack=4, Locals=4, Args_size=3
   0:	new	#83; //class scala/concurrent/forkjoin/ForkJoinPool$AdaptedRunnable
   3:	dup
   4:	aload_1
   5:	aload_2
   6:	invokespecial	#84; //Method scala/concurrent/forkjoin/ForkJoinPool$AdaptedRunnable."<init>":(Ljava/lang/Runnable;Ljava/lang/Object;)V
   9:	astore_3
   10:	aload_0
   11:	aload_3
   12:	invokespecial	#81; //Method doSubmit:(Lscala/concurrent/forkjoin/ForkJoinTask;)V
   15:	aload_3
   16:	areturn
  LineNumberTable: 
   line 583: 0
   line 584: 10
   line 585: 15

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      17      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   0      17      1    task       Ljava/lang/Runnable;
   0      17      2    result       Ljava/lang/Object;
   10      7      3    job       Lscala/concurrent/forkjoin/ForkJoinTask;

  LocalVariableTypeTable: length = 0x16
   00 02 00 00 00 11 01 7D 01 7F 00 02 00 0A 00 07
   01 79 01 6E 00 03 
  Signature: length = 0x2
   01 FFFFFF80 

public scala.concurrent.forkjoin.ForkJoinTask submit(java.lang.Runnable);
  Code:
   Stack=4, Locals=3, Args_size=2
   0:	new	#83; //class scala/concurrent/forkjoin/ForkJoinPool$AdaptedRunnable
   3:	dup
   4:	aload_1
   5:	aconst_null
   6:	invokespecial	#84; //Method scala/concurrent/forkjoin/ForkJoinPool$AdaptedRunnable."<init>":(Ljava/lang/Runnable;Ljava/lang/Object;)V
   9:	astore_2
   10:	aload_0
   11:	aload_2
   12:	invokespecial	#81; //Method doSubmit:(Lscala/concurrent/forkjoin/ForkJoinTask;)V
   15:	aload_2
   16:	areturn
  LineNumberTable: 
   line 589: 0
   line 590: 10
   line 591: 15

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      17      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   0      17      1    task       Ljava/lang/Runnable;
   10      7      2    job       Lscala/concurrent/forkjoin/ForkJoinTask;

  LocalVariableTypeTable: length = 0xC
   00 01 00 0A 00 07 01 79 01 FFFFFF82 00 02 
  Signature: length = 0x2
   01 FFFFFF83 

public java.util.List invokeAll(java.util.Collection);
  Code:
   Stack=4, Locals=5, Args_size=2
   0:	new	#87; //class java/util/ArrayList
   3:	dup
   4:	aload_1
   5:	invokeinterface	#88,  1; //InterfaceMethod java/util/Collection.size:()I
   10:	invokespecial	#89; //Method java/util/ArrayList."<init>":(I)V
   13:	astore_2
   14:	aload_1
   15:	invokeinterface	#90,  1; //InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
   20:	astore_3
   21:	aload_3
   22:	invokeinterface	#91,  1; //InterfaceMethod java/util/Iterator.hasNext:()Z
   27:	ifeq	58
   30:	aload_3
   31:	invokeinterface	#92,  1; //InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
   36:	checkcast	#93; //class java/util/concurrent/Callable
   39:	astore	4
   41:	aload_2
   42:	new	#85; //class scala/concurrent/forkjoin/ForkJoinPool$AdaptedCallable
   45:	dup
   46:	aload	4
   48:	invokespecial	#86; //Method scala/concurrent/forkjoin/ForkJoinPool$AdaptedCallable."<init>":(Ljava/util/concurrent/Callable;)V
   51:	invokevirtual	#94; //Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
   54:	pop
   55:	goto	21
   58:	aload_0
   59:	new	#95; //class scala/concurrent/forkjoin/ForkJoinPool$InvokeAll
   62:	dup
   63:	aload_2
   64:	invokespecial	#96; //Method scala/concurrent/forkjoin/ForkJoinPool$InvokeAll."<init>":(Ljava/util/ArrayList;)V
   67:	invokevirtual	#97; //Method invoke:(Lscala/concurrent/forkjoin/ForkJoinTask;)Ljava/lang/Object;
   70:	pop
   71:	aload_2
   72:	areturn
  LineNumberTable: 
   line 647: 0
   line 649: 14
   line 650: 41
   line 651: 58
   line 652: 71

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   41      14      4    c       Ljava/util/concurrent/Callable;
   21      37      3    i$       Ljava/util/Iterator;
   0      73      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   0      73      1    tasks       Ljava/util/Collection;
   14      59      2    ts       Ljava/util/ArrayList;

  LocalVariableTypeTable: length = 0x20
   00 03 00 29 00 0E 01 40 01 7A 00 04 00 00 00 49
   01 FFFFFF88 01 FFFFFF8C 00 01 00 0E 00 3B 01 FFFFFF8A 01 FFFFFF8D 00 02
   
  Signature: length = 0x2
   01 FFFFFF8E 

public scala.concurrent.forkjoin.ForkJoinPool$ForkJoinWorkerThreadFactory getFactory();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#25; //Field factory:Lscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;
   4:	areturn
  LineNumberTable: 
   line 671: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      5      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;


public java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler();
  Code:
   Stack=1, Locals=4, Args_size=1
   0:	aload_0
   1:	getfield	#34; //Field workerLock:Ljava/util/concurrent/locks/ReentrantLock;
   4:	astore_2
   5:	aload_2
   6:	invokevirtual	#65; //Method java/util/concurrent/locks/ReentrantLock.lock:()V
   9:	aload_0
   10:	getfield	#43; //Field ueh:Ljava/lang/Thread$UncaughtExceptionHandler;
   13:	astore_1
   14:	aload_2
   15:	invokevirtual	#70; //Method java/util/concurrent/locks/ReentrantLock.unlock:()V
   18:	goto	28
   21:	astore_3
   22:	aload_2
   23:	invokevirtual	#70; //Method java/util/concurrent/locks/ReentrantLock.unlock:()V
   26:	aload_3
   27:	athrow
   28:	aload_1
   29:	areturn
  Exception table:
   from   to  target type
     9    14    21   any
    21    22    21   any
  LineNumberTable: 
   line 681: 0
   line 682: 5
   line 684: 9
   line 686: 14
   line 687: 18
   line 686: 21
   line 688: 28

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      30      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   14      16      1    h       Ljava/lang/Thread$UncaughtExceptionHandler;
   5      25      2    lock       Ljava/util/concurrent/locks/ReentrantLock;


public java.lang.Thread$UncaughtExceptionHandler setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler);
  Code:
   Stack=2, Locals=8, Args_size=2
   0:	invokestatic	#24; //Method checkPermission:()V
   3:	aconst_null
   4:	astore_2
   5:	aload_0
   6:	getfield	#34; //Field workerLock:Ljava/util/concurrent/locks/ReentrantLock;
   9:	astore_3
   10:	aload_3
   11:	invokevirtual	#65; //Method java/util/concurrent/locks/ReentrantLock.lock:()V
   14:	aload_0
   15:	getfield	#43; //Field ueh:Ljava/lang/Thread$UncaughtExceptionHandler;
   18:	astore_2
   19:	aload_0
   20:	aload_1
   21:	putfield	#43; //Field ueh:Ljava/lang/Thread$UncaughtExceptionHandler;
   24:	aload_0
   25:	getfield	#62; //Field workers:[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   28:	astore	4
   30:	aload	4
   32:	ifnull	70
   35:	iconst_0
   36:	istore	5
   38:	iload	5
   40:	aload	4
   42:	arraylength
   43:	if_icmpge	70
   46:	aload	4
   48:	iload	5
   50:	aaload
   51:	astore	6
   53:	aload	6
   55:	ifnull	64
   58:	aload	6
   60:	aload_1
   61:	invokevirtual	#57; //Method scala/concurrent/forkjoin/ForkJoinWorkerThread.setUncaughtExceptionHandler:(Ljava/lang/Thread$UncaughtExceptionHandler;)V
   64:	iinc	5, 1
   67:	goto	38
   70:	aload_3
   71:	invokevirtual	#70; //Method java/util/concurrent/locks/ReentrantLock.unlock:()V
   74:	goto	86
   77:	astore	7
   79:	aload_3
   80:	invokevirtual	#70; //Method java/util/concurrent/locks/ReentrantLock.unlock:()V
   83:	aload	7
   85:	athrow
   86:	aload_2
   87:	areturn
  Exception table:
   from   to  target type
    14    70    77   any
    77    79    77   any
  LineNumberTable: 
   line 706: 0
   line 707: 3
   line 708: 5
   line 709: 10
   line 711: 14
   line 712: 19
   line 713: 24
   line 714: 30
   line 715: 35
   line 716: 46
   line 717: 53
   line 718: 58
   line 715: 64
   line 722: 70
   line 723: 74
   line 722: 77
   line 724: 86

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   53      11      6    w       Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   38      32      5    i       I
   30      40      4    ws       [Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   0      88      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   0      88      1    h       Ljava/lang/Thread$UncaughtExceptionHandler;
   5      83      2    old       Ljava/lang/Thread$UncaughtExceptionHandler;
   10      78      3    lock       Ljava/util/concurrent/locks/ReentrantLock;


public void setParallelism(int);
  Code:
   Stack=2, Locals=5, Args_size=2
   0:	invokestatic	#24; //Method checkPermission:()V
   3:	iload_1
   4:	ifle	15
   7:	iload_1
   8:	aload_0
   9:	getfield	#27; //Field maxPoolSize:I
   12:	if_icmple	23
   15:	new	#20; //class java/lang/IllegalArgumentException
   18:	dup
   19:	invokespecial	#21; //Method java/lang/IllegalArgumentException."<init>":()V
   22:	athrow
   23:	aload_0
   24:	getfield	#34; //Field workerLock:Ljava/util/concurrent/locks/ReentrantLock;
   27:	astore_2
   28:	aload_2
   29:	invokevirtual	#65; //Method java/util/concurrent/locks/ReentrantLock.lock:()V
   32:	aload_0
   33:	invokevirtual	#98; //Method isTerminating:()Z
   36:	ifne	65
   39:	aload_0
   40:	getfield	#26; //Field parallelism:I
   43:	istore_3
   44:	aload_0
   45:	iload_1
   46:	putfield	#26; //Field parallelism:I
   49:	iload_1
   50:	iload_3
   51:	if_icmple	61
   54:	aload_0
   55:	invokespecial	#99; //Method createAndStartAddedWorkers:()V
   58:	goto	65
   61:	aload_0
   62:	invokespecial	#100; //Method trimSpares:()V
   65:	aload_2
   66:	invokevirtual	#70; //Method java/util/concurrent/locks/ReentrantLock.unlock:()V
   69:	goto	81
   72:	astore	4
   74:	aload_2
   75:	invokevirtual	#70; //Method java/util/concurrent/locks/ReentrantLock.unlock:()V
   78:	aload	4
   80:	athrow
   81:	aload_0
   82:	invokespecial	#80; //Method signalIdleWorkers:()V
   85:	return
  Exception table:
   from   to  target type
    32    65    72   any
    72    74    72   any
  LineNumberTable: 
   line 739: 0
   line 740: 3
   line 741: 15
   line 742: 23
   line 743: 28
   line 745: 32
   line 746: 39
   line 747: 44
   line 748: 49
   line 749: 54
   line 751: 61
   line 754: 65
   line 755: 69
   line 754: 72
   line 756: 81
   line 757: 85

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   44      21      3    p       I
   0      86      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   0      86      1    parallelism       I
   28      58      2    lock       Ljava/util/concurrent/locks/ReentrantLock;


public int getParallelism();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#26; //Field parallelism:I
   4:	ireturn
  LineNumberTable: 
   line 765: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      5      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;


public int getPoolSize();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#6; //Field workerCounts:I
   4:	invokestatic	#72; //Method totalCountOf:(I)I
   7:	ireturn
  LineNumberTable: 
   line 777: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      8      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;


public int getMaximumPoolSize();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#27; //Field maxPoolSize:I
   4:	ireturn
  LineNumberTable: 
   line 786: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      5      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;


public void setMaximumPoolSize(int);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	iload_1
   1:	iflt	11
   4:	iload_1
   5:	sipush	32767
   8:	if_icmple	19
   11:	new	#20; //class java/lang/IllegalArgumentException
   14:	dup
   15:	invokespecial	#21; //Method java/lang/IllegalArgumentException."<init>":()V
   18:	athrow
   19:	aload_0
   20:	iload_1
   21:	putfield	#27; //Field maxPoolSize:I
   24:	return
  LineNumberTable: 
   line 798: 0
   line 799: 11
   line 800: 19
   line 801: 24

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      25      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   0      25      1    newMax       I


public boolean getMaintainsParallelism();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#28; //Field maintainsParallelism:Z
   4:	ireturn
  LineNumberTable: 
   line 812: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      5      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;


public void setMaintainsParallelism(boolean);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	iload_1
   2:	putfield	#28; //Field maintainsParallelism:Z
   5:	return
  LineNumberTable: 
   line 822: 0
   line 823: 5

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   0      6      1    enable       Z


public boolean setAsyncMode(boolean);
  Code:
   Stack=2, Locals=6, Args_size=2
   0:	aload_0
   1:	getfield	#47; //Field locallyFifo:Z
   4:	istore_2
   5:	aload_0
   6:	iload_1
   7:	putfield	#47; //Field locallyFifo:Z
   10:	aload_0
   11:	getfield	#62; //Field workers:[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   14:	astore_3
   15:	aload_3
   16:	ifnull	52
   19:	iconst_0
   20:	istore	4
   22:	iload	4
   24:	aload_3
   25:	arraylength
   26:	if_icmpge	52
   29:	aload_3
   30:	iload	4
   32:	aaload
   33:	astore	5
   35:	aload	5
   37:	ifnull	46
   40:	aload	5
   42:	iload_1
   43:	invokevirtual	#48; //Method scala/concurrent/forkjoin/ForkJoinWorkerThread.setAsyncMode:(Z)V
   46:	iinc	4, 1
   49:	goto	22
   52:	iload_2
   53:	ireturn
  LineNumberTable: 
   line 838: 0
   line 839: 5
   line 840: 10
   line 841: 15
   line 842: 19
   line 843: 29
   line 844: 35
   line 845: 40
   line 842: 46
   line 848: 52

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   35      11      5    t       Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   22      30      4    i       I
   0      54      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   0      54      1    async       Z
   5      49      2    oldMode       Z
   15      39      3    ws       [Lscala/concurrent/forkjoin/ForkJoinWorkerThread;


public boolean getAsyncMode();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#47; //Field locallyFifo:Z
   4:	ireturn
  LineNumberTable: 
   line 858: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      5      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;


public int getRunningThreadCount();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#6; //Field workerCounts:I
   4:	invokestatic	#73; //Method runningCountOf:(I)I
   7:	ireturn
  LineNumberTable: 
   line 869: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      8      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;


public int getActiveThreadCount();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#8; //Field runControl:I
   4:	invokestatic	#13; //Method activeCountOf:(I)I
   7:	ireturn
  LineNumberTable: 
   line 879: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      8      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;


final int getIdleThreadCount();
  Code:
   Stack=2, Locals=2, Args_size=1
   0:	aload_0
   1:	getfield	#6; //Field workerCounts:I
   4:	invokestatic	#73; //Method runningCountOf:(I)I
   7:	aload_0
   8:	getfield	#8; //Field runControl:I
   11:	invokestatic	#13; //Method activeCountOf:(I)I
   14:	isub
   15:	istore_1
   16:	iload_1
   17:	ifgt	24
   20:	iconst_0
   21:	goto	25
   24:	iload_1
   25:	ireturn
  LineNumberTable: 
   line 889: 0
   line 890: 16

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      26      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   16      10      1    c       I


public boolean isQuiescent();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#8; //Field runControl:I
   4:	invokestatic	#13; //Method activeCountOf:(I)I
   7:	ifne	14
   10:	iconst_1
   11:	goto	15
   14:	iconst_0
   15:	ireturn
  LineNumberTable: 
   line 904: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      16      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;


public long getStealCount();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#39; //Field stealCount:Ljava/util/concurrent/atomic/AtomicLong;
   4:	invokevirtual	#101; //Method java/util/concurrent/atomic/AtomicLong.get:()J
   7:	lreturn
  LineNumberTable: 
   line 918: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      8      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;


public long getQueuedTaskCount();
  Code:
   Stack=4, Locals=6, Args_size=1
   0:	lconst_0
   1:	lstore_1
   2:	aload_0
   3:	getfield	#62; //Field workers:[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   6:	astore_3
   7:	aload_3
   8:	ifnull	47
   11:	iconst_0
   12:	istore	4
   14:	iload	4
   16:	aload_3
   17:	arraylength
   18:	if_icmpge	47
   21:	aload_3
   22:	iload	4
   24:	aaload
   25:	astore	5
   27:	aload	5
   29:	ifnull	41
   32:	lload_1
   33:	aload	5
   35:	invokevirtual	#104; //Method scala/concurrent/forkjoin/ForkJoinWorkerThread.getQueueSize:()I
   38:	i2l
   39:	ladd
   40:	lstore_1
   41:	iinc	4, 1
   44:	goto	14
   47:	lload_1
   48:	lreturn
  LineNumberTable: 
   line 941: 0
   line 942: 2
   line 943: 7
   line 944: 11
   line 945: 21
   line 946: 27
   line 947: 32
   line 944: 41
   line 950: 47

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   27      14      5    t       Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   14      33      4    i       I
   0      49      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   2      47      1    count       J
   7      42      3    ws       [Lscala/concurrent/forkjoin/ForkJoinWorkerThread;


public int getQueuedSubmissionCount();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#42; //Field submissionQueue:Lscala/concurrent/forkjoin/LinkedTransferQueue;
   4:	invokevirtual	#105; //Method scala/concurrent/forkjoin/LinkedTransferQueue.size:()I
   7:	ireturn
  LineNumberTable: 
   line 960: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      8      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;


public boolean hasQueuedSubmissions();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#42; //Field submissionQueue:Lscala/concurrent/forkjoin/LinkedTransferQueue;
   4:	invokevirtual	#106; //Method scala/concurrent/forkjoin/LinkedTransferQueue.isEmpty:()Z
   7:	ifne	14
   10:	iconst_1
   11:	goto	15
   14:	iconst_0
   15:	ireturn
  LineNumberTable: 
   line 969: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      16      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;


protected scala.concurrent.forkjoin.ForkJoinTask pollSubmission();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#42; //Field submissionQueue:Lscala/concurrent/forkjoin/LinkedTransferQueue;
   4:	invokevirtual	#107; //Method scala/concurrent/forkjoin/LinkedTransferQueue.poll:()Ljava/lang/Object;
   7:	checkcast	#108; //class scala/concurrent/forkjoin/ForkJoinTask
   10:	areturn
  LineNumberTable: 
   line 979: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;

  Signature: length = 0x2
   01 FFFFFFB6 

protected int drainTasksTo(java.util.Collection);
  Code:
   Stack=3, Locals=6, Args_size=2
   0:	aload_0
   1:	getfield	#42; //Field submissionQueue:Lscala/concurrent/forkjoin/LinkedTransferQueue;
   4:	aload_1
   5:	invokevirtual	#109; //Method scala/concurrent/forkjoin/LinkedTransferQueue.drainTo:(Ljava/util/Collection;)I
   8:	istore_2
   9:	aload_0
   10:	getfield	#62; //Field workers:[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   13:	astore_3
   14:	aload_3
   15:	ifnull	54
   18:	iconst_0
   19:	istore	4
   21:	iload	4
   23:	aload_3
   24:	arraylength
   25:	if_icmpge	54
   28:	aload_3
   29:	iload	4
   31:	aaload
   32:	astore	5
   34:	aload	5
   36:	ifnull	48
   39:	iload_2
   40:	aload	5
   42:	aload_1
   43:	invokevirtual	#110; //Method scala/concurrent/forkjoin/ForkJoinWorkerThread.drainTasksTo:(Ljava/util/Collection;)I
   46:	iadd
   47:	istore_2
   48:	iinc	4, 1
   51:	goto	21
   54:	iload_2
   55:	ireturn
  LineNumberTable: 
   line 999: 0
   line 1000: 9
   line 1001: 14
   line 1002: 18
   line 1003: 28
   line 1004: 34
   line 1005: 39
   line 1002: 48
   line 1008: 54

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   34      14      5    w       Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   21      33      4    i       I
   0      56      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   0      56      1    c       Ljava/util/Collection;
   9      47      2    n       I
   14      42      3    ws       [Lscala/concurrent/forkjoin/ForkJoinWorkerThread;

  LocalVariableTypeTable: length = 0xC
   00 01 00 00 00 38 01 40 01 FFFFFFBA 00 01 
  Signature: length = 0x2
   01 FFFFFFBB 

public java.lang.String toString();
  Code:
   Stack=3, Locals=10, Args_size=1
   0:	aload_0
   1:	getfield	#26; //Field parallelism:I
   4:	istore_1
   5:	aload_0
   6:	getfield	#6; //Field workerCounts:I
   9:	istore_2
   10:	aload_0
   11:	getfield	#8; //Field runControl:I
   14:	istore_3
   15:	aload_0
   16:	invokevirtual	#111; //Method getStealCount:()J
   19:	lstore	4
   21:	aload_0
   22:	invokevirtual	#112; //Method getQueuedTaskCount:()J
   25:	lstore	6
   27:	aload_0
   28:	invokevirtual	#113; //Method getQueuedSubmissionCount:()I
   31:	i2l
   32:	lstore	8
   34:	new	#49; //class java/lang/StringBuilder
   37:	dup
   38:	invokespecial	#50; //Method java/lang/StringBuilder."<init>":()V
   41:	aload_0
   42:	invokespecial	#114; //Method java/lang/Object.toString:()Ljava/lang/String;
   45:	invokevirtual	#52; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   48:	ldc	#115; //String [
   50:	invokevirtual	#52; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   53:	iload_3
   54:	invokestatic	#12; //Method runStateOf:(I)I
   57:	invokestatic	#116; //Method runStateToString:(I)Ljava/lang/String;
   60:	invokevirtual	#52; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   63:	ldc	#117; //String , parallelism = 
   65:	invokevirtual	#52; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   68:	iload_1
   69:	invokevirtual	#53; //Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
   72:	ldc	#118; //String , size = 
   74:	invokevirtual	#52; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   77:	iload_2
   78:	invokestatic	#72; //Method totalCountOf:(I)I
   81:	invokevirtual	#53; //Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
   84:	ldc	#119; //String , active = 
   86:	invokevirtual	#52; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   89:	iload_3
   90:	invokestatic	#13; //Method activeCountOf:(I)I
   93:	invokevirtual	#53; //Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
   96:	ldc	#120; //String , running = 
   98:	invokevirtual	#52; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   101:	iload_2
   102:	invokestatic	#73; //Method runningCountOf:(I)I
   105:	invokevirtual	#53; //Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
   108:	ldc	#121; //String , steals = 
   110:	invokevirtual	#52; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   113:	lload	4
   115:	invokevirtual	#122; //Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
   118:	ldc	#123; //String , tasks = 
   120:	invokevirtual	#52; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   123:	lload	6
   125:	invokevirtual	#122; //Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
   128:	ldc	#124; //String , submissions = 
   130:	invokevirtual	#52; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   133:	lload	8
   135:	invokevirtual	#122; //Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
   138:	ldc	#125; //String ]
   140:	invokevirtual	#52; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   143:	invokevirtual	#55; //Method java/lang/StringBuilder.toString:()Ljava/lang/String;
   146:	areturn
  LineNumberTable: 
   line 1019: 0
   line 1020: 5
   line 1021: 10
   line 1022: 15
   line 1023: 21
   line 1024: 27
   line 1025: 34

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      147      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   5      142      1    ps       I
   10      137      2    wc       I
   15      132      3    rc       I
   21      126      4    st       J
   27      120      6    qt       J
   34      113      8    qs       J


public void shutdown();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	invokestatic	#24; //Method checkPermission:()V
   3:	aload_0
   4:	iconst_1
   5:	invokespecial	#133; //Method transitionRunStateTo:(I)Z
   8:	pop
   9:	aload_0
   10:	getfield	#8; //Field runControl:I
   13:	invokestatic	#10; //Method canTerminateOnShutdown:(I)Z
   16:	ifeq	23
   19:	aload_0
   20:	invokespecial	#11; //Method terminateOnShutdown:()V
   23:	return
  LineNumberTable: 
   line 1061: 0
   line 1062: 3
   line 1063: 9
   line 1064: 19
   line 1065: 23

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      24      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;


public java.util.List shutdownNow();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	invokestatic	#24; //Method checkPermission:()V
   3:	aload_0
   4:	invokespecial	#134; //Method terminate:()V
   7:	invokestatic	#135; //Method java/util/Collections.emptyList:()Ljava/util/List;
   10:	areturn
  LineNumberTable: 
   line 1083: 0
   line 1084: 3
   line 1085: 7

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;

  Signature: length = 0x2
   01 FFFFFFC8 

public boolean isTerminated();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#8; //Field runControl:I
   4:	invokestatic	#12; //Method runStateOf:(I)I
   7:	iconst_3
   8:	if_icmpne	15
   11:	iconst_1
   12:	goto	16
   15:	iconst_0
   16:	ireturn
  LineNumberTable: 
   line 1094: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      17      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;


public boolean isTerminating();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#8; //Field runControl:I
   4:	invokestatic	#12; //Method runStateOf:(I)I
   7:	iconst_2
   8:	if_icmplt	15
   11:	iconst_1
   12:	goto	16
   15:	iconst_0
   16:	ireturn
  LineNumberTable: 
   line 1104: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      17      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;


public boolean isShutdown();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#8; //Field runControl:I
   4:	invokestatic	#12; //Method runStateOf:(I)I
   7:	iconst_1
   8:	if_icmplt	15
   11:	iconst_1
   12:	goto	16
   15:	iconst_0
   16:	ireturn
  LineNumberTable: 
   line 1113: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      17      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;


public boolean awaitTermination(long, java.util.concurrent.TimeUnit)   throws java.lang.InterruptedException;
  Code:
   Stack=4, Locals=9, Args_size=3
   0:	aload_3
   1:	lload_1
   2:	invokevirtual	#136; //Method java/util/concurrent/TimeUnit.toNanos:(J)J
   5:	lstore	4
   7:	aload_0
   8:	getfield	#34; //Field workerLock:Ljava/util/concurrent/locks/ReentrantLock;
   11:	astore	6
   13:	aload	6
   15:	invokevirtual	#65; //Method java/util/concurrent/locks/ReentrantLock.lock:()V
   18:	aload_0
   19:	invokevirtual	#137; //Method isTerminated:()Z
   22:	ifeq	36
   25:	iconst_1
   26:	istore	7
   28:	aload	6
   30:	invokevirtual	#70; //Method java/util/concurrent/locks/ReentrantLock.unlock:()V
   33:	iload	7
   35:	ireturn
   36:	lload	4
   38:	lconst_0
   39:	lcmp
   40:	ifgt	54
   43:	iconst_0
   44:	istore	7
   46:	aload	6
   48:	invokevirtual	#70; //Method java/util/concurrent/locks/ReentrantLock.unlock:()V
   51:	iload	7
   53:	ireturn
   54:	aload_0
   55:	getfield	#36; //Field termination:Ljava/util/concurrent/locks/Condition;
   58:	lload	4
   60:	invokeinterface	#138,  3; //InterfaceMethod java/util/concurrent/locks/Condition.awaitNanos:(J)J
   65:	lstore	4
   67:	goto	18
   70:	astore	8
   72:	aload	6
   74:	invokevirtual	#70; //Method java/util/concurrent/locks/ReentrantLock.unlock:()V
   77:	aload	8
   79:	athrow
  Exception table:
   from   to  target type
    18    28    70   any
    36    46    70   any
    54    72    70   any
  LineNumberTable: 
   line 1129: 0
   line 1130: 7
   line 1131: 13
   line 1134: 18
   line 1135: 25
   line 1141: 28
   line 1136: 36
   line 1137: 43
   line 1141: 46
   line 1138: 54
   line 1141: 70

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      80      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   0      80      1    timeout       J
   0      80      3    unit       Ljava/util/concurrent/TimeUnit;
   7      73      4    nanos       J
   13      67      6    lock       Ljava/util/concurrent/locks/ReentrantLock;

  Exceptions: 
   throws java.lang.InterruptedException
final void workerTerminated(scala.concurrent.forkjoin.ForkJoinWorkerThread);
  Code:
   Stack=3, Locals=6, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokespecial	#139; //Method updateStealCount:(Lscala/concurrent/forkjoin/ForkJoinWorkerThread;)V
   5:	aload_0
   6:	iconst_m1
   7:	invokespecial	#69; //Method updateWorkerCount:(I)V
   10:	aload_0
   11:	getfield	#34; //Field workerLock:Ljava/util/concurrent/locks/ReentrantLock;
   14:	astore_2
   15:	aload_2
   16:	invokevirtual	#65; //Method java/util/concurrent/locks/ReentrantLock.lock:()V
   19:	aload_0
   20:	getfield	#62; //Field workers:[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   23:	astore_3
   24:	aload_3
   25:	ifnull	108
   28:	aload_1
   29:	getfield	#45; //Field scala/concurrent/forkjoin/ForkJoinWorkerThread.poolIndex:I
   32:	istore	4
   34:	iload	4
   36:	iflt	59
   39:	iload	4
   41:	aload_3
   42:	arraylength
   43:	if_icmpge	59
   46:	aload_3
   47:	iload	4
   49:	aaload
   50:	aload_1
   51:	if_acmpne	59
   54:	aload_3
   55:	iload	4
   57:	aconst_null
   58:	aastore
   59:	aload_0
   60:	getfield	#6; //Field workerCounts:I
   63:	invokestatic	#72; //Method totalCountOf:(I)I
   66:	ifne	91
   69:	aload_0
   70:	invokespecial	#134; //Method terminate:()V
   73:	aload_0
   74:	iconst_3
   75:	invokespecial	#133; //Method transitionRunStateTo:(I)Z
   78:	pop
   79:	aload_0
   80:	getfield	#36; //Field termination:Ljava/util/concurrent/locks/Condition;
   83:	invokeinterface	#140,  1; //InterfaceMethod java/util/concurrent/locks/Condition.signalAll:()V
   88:	goto	108
   91:	aload_0
   92:	invokevirtual	#98; //Method isTerminating:()Z
   95:	ifne	108
   98:	aload_0
   99:	invokespecial	#141; //Method tryShrinkWorkerArray:()V
   102:	aload_0
   103:	iconst_1
   104:	invokespecial	#142; //Method tryResumeSpare:(Z)Z
   107:	pop
   108:	aload_2
   109:	invokevirtual	#70; //Method java/util/concurrent/locks/ReentrantLock.unlock:()V
   112:	goto	124
   115:	astore	5
   117:	aload_2
   118:	invokevirtual	#70; //Method java/util/concurrent/locks/ReentrantLock.unlock:()V
   121:	aload	5
   123:	athrow
   124:	aload_0
   125:	invokespecial	#80; //Method signalIdleWorkers:()V
   128:	return
  Exception table:
   from   to  target type
    19   108   115   any
   115   117   115   any
  LineNumberTable: 
   line 1154: 0
   line 1155: 5
   line 1156: 10
   line 1157: 15
   line 1159: 19
   line 1160: 24
   line 1161: 28
   line 1162: 34
   line 1163: 54
   line 1164: 59
   line 1165: 69
   line 1166: 73
   line 1167: 79
   line 1169: 91
   line 1170: 98
   line 1171: 102
   line 1175: 108
   line 1176: 112
   line 1175: 115
   line 1177: 124
   line 1178: 128

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   34      74      4    idx       I
   24      84      3    ws       [Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   0      129      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   0      129      1    w       Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   15      114      2    lock       Ljava/util/concurrent/locks/ReentrantLock;


final long ensureSync();
  Code:
   Stack=4, Locals=4, Args_size=1
   0:	aload_0
   1:	getfield	#155; //Field eventCount:J
   4:	lstore_1
   5:	aload_0
   6:	getfield	#156; //Field syncStack:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
   9:	dup
   10:	astore_3
   11:	ifnull	49
   14:	aload_3
   15:	getfield	#157; //Field scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.count:J
   18:	lload_1
   19:	lcmp
   20:	ifge	49
   23:	aload_0
   24:	aload_3
   25:	aconst_null
   26:	invokespecial	#158; //Method casBarrierStack:(Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;)Z
   29:	ifeq	5
   32:	aload_3
   33:	invokevirtual	#159; //Method scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.signal:()Z
   36:	pop
   37:	aload_3
   38:	getfield	#160; //Field scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.next:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
   41:	dup
   42:	astore_3
   43:	ifnonnull	32
   46:	goto	49
   49:	lload_1
   50:	lreturn
  LineNumberTable: 
   line 1361: 0
   line 1363: 5
   line 1364: 23
   line 1366: 32
   line 1367: 37
   line 1368: 46
   line 1371: 49

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      51      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   5      46      1    c       J
   11      40      3    q       Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;


final void signalWork();
  Code:
   Stack=7, Locals=4, Args_size=1
   0:	aload_0
   1:	getfield	#156; //Field syncStack:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
   4:	ifnull	65
   7:	aload_0
   8:	aload_0
   9:	getfield	#155; //Field eventCount:J
   12:	dup2
   13:	lstore_1
   14:	lload_1
   15:	lconst_1
   16:	ladd
   17:	invokespecial	#161; //Method casEventCount:(JJ)Z
   20:	ifeq	65
   23:	aload_0
   24:	getfield	#156; //Field syncStack:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
   27:	dup
   28:	astore_3
   29:	ifnull	65
   32:	aload_3
   33:	getfield	#157; //Field scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.count:J
   36:	lload_1
   37:	lcmp
   38:	ifgt	65
   41:	aload_0
   42:	aload_3
   43:	aload_3
   44:	getfield	#160; //Field scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.next:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
   47:	invokespecial	#158; //Method casBarrierStack:(Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;)Z
   50:	ifeq	60
   53:	aload_3
   54:	invokevirtual	#159; //Method scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.signal:()Z
   57:	ifne	65
   60:	aload_0
   61:	invokevirtual	#162; //Method ensureSync:()J
   64:	pop2
   65:	return
  LineNumberTable: 
   line 1392: 0
   line 1396: 60
   line 1397: 65

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   14      51      1    c       J
   29      36      3    q       Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
   0      66      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;


final void sync(scala.concurrent.forkjoin.ForkJoinWorkerThread);
  Code:
   Stack=5, Locals=8, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokespecial	#139; //Method updateStealCount:(Lscala/concurrent/forkjoin/ForkJoinWorkerThread;)V
   5:	aload_1
   6:	invokevirtual	#163; //Method scala/concurrent/forkjoin/ForkJoinWorkerThread.isShutdown:()Z
   9:	ifne	131
   12:	aload_0
   13:	invokevirtual	#98; //Method isTerminating:()Z
   16:	ifne	131
   19:	aload_0
   20:	aload_1
   21:	invokespecial	#164; //Method suspendIfSpare:(Lscala/concurrent/forkjoin/ForkJoinWorkerThread;)Z
   24:	ifne	131
   27:	aload_1
   28:	getfield	#165; //Field scala/concurrent/forkjoin/ForkJoinWorkerThread.lastEventCount:J
   31:	lstore_2
   32:	aconst_null
   33:	astore	4
   35:	aload_0
   36:	getfield	#155; //Field eventCount:J
   39:	lload_2
   40:	lcmp
   41:	ifne	106
   44:	aload_0
   45:	getfield	#156; //Field syncStack:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
   48:	dup
   49:	astore	5
   51:	ifnull	64
   54:	aload	5
   56:	getfield	#157; //Field scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.count:J
   59:	lload_2
   60:	lcmp
   61:	ifne	106
   64:	aload	4
   66:	ifnonnull	80
   69:	new	#166; //class scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode
   72:	dup
   73:	lload_2
   74:	aload_1
   75:	invokespecial	#167; //Method scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode."<init>":(JLscala/concurrent/forkjoin/ForkJoinWorkerThread;)V
   78:	astore	4
   80:	aload_0
   81:	aload	4
   83:	aload	5
   85:	dup_x1
   86:	putfield	#160; //Field scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.next:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
   89:	aload	4
   91:	invokespecial	#158; //Method casBarrierStack:(Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;)Z
   94:	ifeq	35
   97:	aload	4
   99:	aload_0
   100:	invokevirtual	#168; //Method scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.awaitSyncRelease:(Lscala/concurrent/forkjoin/ForkJoinPool;)V
   103:	goto	106
   106:	aload_0
   107:	invokevirtual	#162; //Method ensureSync:()J
   110:	lstore	6
   112:	lload	6
   114:	lload_2
   115:	lcmp
   116:	ifeq	128
   119:	aload_1
   120:	lload	6
   122:	putfield	#165; //Field scala/concurrent/forkjoin/ForkJoinWorkerThread.lastEventCount:J
   125:	goto	131
   128:	goto	5
   131:	return
  LineNumberTable: 
   line 1406: 0
   line 1408: 5
   line 1409: 27
   line 1410: 32
   line 1412: 35
   line 1414: 64
   line 1415: 69
   line 1416: 80
   line 1417: 97
   line 1418: 103
   line 1421: 106
   line 1422: 112
   line 1423: 119
   line 1424: 125
   line 1426: 128
   line 1427: 131

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   51      55      5    h       Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
   32      96      2    prev       J
   35      93      4    node       Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
   112      16      6    ec       J
   0      132      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   0      132      1    w       Lscala/concurrent/forkjoin/ForkJoinWorkerThread;


final boolean syncIsReleasable(scala.concurrent.forkjoin.ForkJoinPool$WaitQueueNode);
  Code:
   Stack=7, Locals=6, Args_size=2
   0:	aload_1
   1:	getfield	#157; //Field scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.count:J
   4:	lstore_2
   5:	invokestatic	#169; //Method java/lang/Thread.interrupted:()Z
   8:	ifne	46
   11:	aload_1
   12:	getfield	#170; //Field scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.thread:Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   15:	ifnull	46
   18:	aload_1
   19:	getfield	#160; //Field scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.next:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
   22:	ifnonnull	35
   25:	aload_0
   26:	getfield	#62; //Field workers:[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   29:	invokestatic	#171; //Method scala/concurrent/forkjoin/ForkJoinWorkerThread.hasQueuedTasks:([Lscala/concurrent/forkjoin/ForkJoinWorkerThread;)Z
   32:	ifne	46
   35:	aload_0
   36:	getfield	#155; //Field eventCount:J
   39:	lload_2
   40:	lcmp
   41:	ifne	46
   44:	iconst_0
   45:	ireturn
   46:	aload_1
   47:	getfield	#170; //Field scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.thread:Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   50:	ifnull	82
   53:	aload_1
   54:	aconst_null
   55:	putfield	#170; //Field scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.thread:Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   58:	aload_0
   59:	getfield	#155; //Field eventCount:J
   62:	lstore	4
   64:	lload_2
   65:	lload	4
   67:	lcmp
   68:	ifgt	82
   71:	aload_0
   72:	lload	4
   74:	lload	4
   76:	lconst_1
   77:	ladd
   78:	invokespecial	#161; //Method casEventCount:(JJ)Z
   81:	pop
   82:	iconst_1
   83:	ireturn
  LineNumberTable: 
   line 1440: 0
   line 1441: 5
   line 1445: 44
   line 1446: 46
   line 1447: 53
   line 1448: 58
   line 1449: 64
   line 1450: 71
   line 1452: 82

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   64      18      4    ec       J
   0      84      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   0      84      1    node       Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
   5      79      2    prev       J


final boolean hasNewSyncEvent(scala.concurrent.forkjoin.ForkJoinWorkerThread);
  Code:
   Stack=4, Locals=6, Args_size=2
   0:	aload_1
   1:	getfield	#165; //Field scala/concurrent/forkjoin/ForkJoinWorkerThread.lastEventCount:J
   4:	lstore_2
   5:	aload_0
   6:	invokevirtual	#162; //Method ensureSync:()J
   9:	lstore	4
   11:	lload	4
   13:	lload_2
   14:	lcmp
   15:	ifne	20
   18:	iconst_0
   19:	ireturn
   20:	aload_1
   21:	lload	4
   23:	putfield	#165; //Field scala/concurrent/forkjoin/ForkJoinWorkerThread.lastEventCount:J
   26:	iconst_1
   27:	ireturn
  LineNumberTable: 
   line 1460: 0
   line 1461: 5
   line 1462: 11
   line 1463: 18
   line 1464: 20
   line 1465: 26

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      28      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   0      28      1    w       Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   5      23      2    lc       J
   11      17      4    ec       J


final boolean preJoin(scala.concurrent.forkjoin.ForkJoinTask, boolean);
  Code:
   Stack=3, Locals=5, Args_size=3
   0:	iload_2
   1:	aload_0
   2:	getfield	#28; //Field maintainsParallelism:Z
   5:	iand
   6:	istore_2
   7:	iconst_0
   8:	istore_3
   9:	aload_0
   10:	getfield	#172; //Field spareStack:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
   13:	ifnull	24
   16:	aload_0
   17:	iload_3
   18:	invokespecial	#142; //Method tryResumeSpare:(Z)Z
   21:	ifne	87
   24:	aload_0
   25:	getfield	#6; //Field workerCounts:I
   28:	istore	4
   30:	iload_3
   31:	ifne	50
   34:	aload_0
   35:	iload	4
   37:	iinc	4, -1
   40:	iload	4
   42:	invokespecial	#7; //Method casWorkerCounts:(II)Z
   45:	dup
   46:	istore_3
   47:	ifeq	84
   50:	aload_0
   51:	iload	4
   53:	iload_2
   54:	invokespecial	#173; //Method needSpare:(IZ)Z
   57:	ifne	63
   60:	goto	87
   63:	aload_1
   64:	getfield	#174; //Field scala/concurrent/forkjoin/ForkJoinTask.status:I
   67:	ifge	72
   70:	iconst_1
   71:	ireturn
   72:	aload_0
   73:	iload	4
   75:	invokespecial	#175; //Method tryAddSpare:(I)Z
   78:	ifeq	84
   81:	goto	87
   84:	goto	9
   87:	iconst_0
   88:	ireturn
  LineNumberTable: 
   line 1501: 0
   line 1502: 7
   line 1503: 9
   line 1504: 24
   line 1505: 30
   line 1506: 50
   line 1507: 60
   line 1508: 63
   line 1509: 70
   line 1510: 72
   line 1511: 81
   line 1513: 84
   line 1514: 87

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   30      54      4    counts       I
   0      89      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   0      89      1    joinMe       Lscala/concurrent/forkjoin/ForkJoinTask;
   0      89      2    maintainParallelism       Z
   9      80      3    dec       Z

  LocalVariableTypeTable: length = 0xC
   00 01 00 00 00 59 01 FFFFFFEF 01 FFFFFFD9 00 01 
  Signature: length = 0x2
   01 FFFFFFF2 

final boolean preBlock(scala.concurrent.forkjoin.ForkJoinPool$ManagedBlocker, boolean);
  Code:
   Stack=3, Locals=5, Args_size=3
   0:	iload_2
   1:	aload_0
   2:	getfield	#28; //Field maintainsParallelism:Z
   5:	iand
   6:	istore_2
   7:	iconst_0
   8:	istore_3
   9:	aload_0
   10:	getfield	#172; //Field spareStack:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
   13:	ifnull	24
   16:	aload_0
   17:	iload_3
   18:	invokespecial	#142; //Method tryResumeSpare:(Z)Z
   21:	ifne	89
   24:	aload_0
   25:	getfield	#6; //Field workerCounts:I
   28:	istore	4
   30:	iload_3
   31:	ifne	50
   34:	aload_0
   35:	iload	4
   37:	iinc	4, -1
   40:	iload	4
   42:	invokespecial	#7; //Method casWorkerCounts:(II)Z
   45:	dup
   46:	istore_3
   47:	ifeq	86
   50:	aload_0
   51:	iload	4
   53:	iload_2
   54:	invokespecial	#173; //Method needSpare:(IZ)Z
   57:	ifne	63
   60:	goto	89
   63:	aload_1
   64:	invokeinterface	#176,  1; //InterfaceMethod scala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker.isReleasable:()Z
   69:	ifeq	74
   72:	iconst_1
   73:	ireturn
   74:	aload_0
   75:	iload	4
   77:	invokespecial	#175; //Method tryAddSpare:(I)Z
   80:	ifeq	86
   83:	goto	89
   86:	goto	9
   89:	iconst_0
   90:	ireturn
  LineNumberTable: 
   line 1521: 0
   line 1522: 7
   line 1523: 9
   line 1524: 24
   line 1525: 30
   line 1526: 50
   line 1527: 60
   line 1528: 63
   line 1529: 72
   line 1530: 74
   line 1531: 83
   line 1533: 86
   line 1534: 89

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   30      56      4    counts       I
   0      91      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   0      91      1    blocker       Lscala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;
   0      91      2    maintainParallelism       Z
   9      82      3    dec       Z


public static void managedBlock(scala.concurrent.forkjoin.ForkJoinPool$ManagedBlocker, boolean)   throws java.lang.InterruptedException;
  Code:
   Stack=3, Locals=5, Args_size=2
   0:	invokestatic	#183; //Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
   3:	astore_2
   4:	aload_2
   5:	instanceof	#59; //class scala/concurrent/forkjoin/ForkJoinWorkerThread
   8:	ifeq	21
   11:	aload_2
   12:	checkcast	#59; //class scala/concurrent/forkjoin/ForkJoinWorkerThread
   15:	getfield	#184; //Field scala/concurrent/forkjoin/ForkJoinWorkerThread.pool:Lscala/concurrent/forkjoin/ForkJoinPool;
   18:	goto	22
   21:	aconst_null
   22:	astore_3
   23:	aload_0
   24:	invokeinterface	#176,  1; //InterfaceMethod scala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker.isReleasable:()Z
   29:	ifne	75
   32:	aload_3
   33:	ifnull	45
   36:	aload_3
   37:	aload_0
   38:	iload_1
   39:	invokevirtual	#185; //Method preBlock:(Lscala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;Z)Z
   42:	ifne	49
   45:	aload_0
   46:	invokestatic	#186; //Method awaitBlocker:(Lscala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;)V
   49:	aload_3
   50:	ifnull	75
   53:	aload_3
   54:	iconst_1
   55:	invokevirtual	#181; //Method updateRunningCount:(I)V
   58:	goto	75
   61:	astore	4
   63:	aload_3
   64:	ifnull	72
   67:	aload_3
   68:	iconst_1
   69:	invokevirtual	#181; //Method updateRunningCount:(I)V
   72:	aload	4
   74:	athrow
   75:	return
  Exception table:
   from   to  target type
    32    49    61   any
    61    63    61   any
  LineNumberTable: 
   line 1774: 0
   line 1775: 4
   line 1777: 23
   line 1779: 32
   line 1781: 45
   line 1783: 49
   line 1784: 53
   line 1783: 61
   line 1784: 67
   line 1787: 75

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      76      0    blocker       Lscala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;
   0      76      1    maintainParallelism       Z
   4      72      2    t       Ljava/lang/Thread;
   23      53      3    pool       Lscala/concurrent/forkjoin/ForkJoinPool;

  Exceptions: 
   throws java.lang.InterruptedException
protected scala.concurrent.forkjoin.ForkJoinPool$RunnableFuture newTaskFor(java.lang.Runnable, java.lang.Object);
  Code:
   Stack=4, Locals=3, Args_size=3
   0:	new	#83; //class scala/concurrent/forkjoin/ForkJoinPool$AdaptedRunnable
   3:	dup
   4:	aload_1
   5:	aload_2
   6:	invokespecial	#84; //Method scala/concurrent/forkjoin/ForkJoinPool$AdaptedRunnable."<init>":(Ljava/lang/Runnable;Ljava/lang/Object;)V
   9:	areturn
  LineNumberTable: 
   line 1797: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      10      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   0      10      1    runnable       Ljava/lang/Runnable;
   0      10      2    value       Ljava/lang/Object;

  LocalVariableTypeTable: length = 0xC
   00 01 00 00 00 0A 02 11 01 7F 00 02 
  Signature: length = 0x2
   02 12 

protected scala.concurrent.forkjoin.ForkJoinPool$RunnableFuture newTaskFor(java.util.concurrent.Callable);
  Code:
   Stack=3, Locals=2, Args_size=2
   0:	new	#85; //class scala/concurrent/forkjoin/ForkJoinPool$AdaptedCallable
   3:	dup
   4:	aload_1
   5:	invokespecial	#86; //Method scala/concurrent/forkjoin/ForkJoinPool$AdaptedCallable."<init>":(Ljava/util/concurrent/Callable;)V
   8:	areturn
  LineNumberTable: 
   line 1801: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      9      0    this       Lscala/concurrent/forkjoin/ForkJoinPool;
   0      9      1    callable       Ljava/util/concurrent/Callable;

  LocalVariableTypeTable: length = 0xC
   00 01 00 00 00 09 02 14 01 7A 00 01 
  Signature: length = 0x2
   02 15 

static sun.misc.Unsafe access$000()   throws java.lang.NoSuchFieldException, java.lang.IllegalAccessException;
  Code:
   Stack=1, Locals=0, Args_size=0
   0:	invokestatic	#1; //Method getUnsafePrivileged:()Lsun/misc/Unsafe;
   3:	areturn
  LineNumberTable: 
   line 60: 0

  Exceptions: 
   throws java.lang.NoSuchFieldException, java.lang.IllegalAccessException
static {};
  Code:
   Stack=4, Locals=1, Args_size=0
   0:	new	#210; //class scala/concurrent/forkjoin/ForkJoinPool$DefaultForkJoinWorkerThreadFactory
   3:	dup
   4:	invokespecial	#211; //Method scala/concurrent/forkjoin/ForkJoinPool$DefaultForkJoinWorkerThreadFactory."<init>":()V
   7:	putstatic	#17; //Field defaultForkJoinWorkerThreadFactory:Lscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;
   10:	new	#212; //class java/lang/RuntimePermission
   13:	dup
   14:	ldc	#213; //String modifyThread
   16:	invokespecial	#214; //Method java/lang/RuntimePermission."<init>":(Ljava/lang/String;)V
   19:	putstatic	#3; //Field modifyThreadPermission:Ljava/lang/RuntimePermission;
   22:	new	#215; //class java/util/concurrent/atomic/AtomicInteger
   25:	dup
   26:	invokespecial	#216; //Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
   29:	putstatic	#29; //Field poolNumberGenerator:Ljava/util/concurrent/atomic/AtomicInteger;
   32:	invokestatic	#217; //Method getUnsafe:()Lsun/misc/Unsafe;
   35:	putstatic	#199; //Field _unsafe:Lsun/misc/Unsafe;
   38:	ldc	#218; //String eventCount
   40:	invokestatic	#219; //Method fieldOffset:(Ljava/lang/String;)J
   43:	putstatic	#202; //Field eventCountOffset:J
   46:	ldc	#220; //String workerCounts
   48:	invokestatic	#219; //Method fieldOffset:(Ljava/lang/String;)J
   51:	putstatic	#204; //Field workerCountsOffset:J
   54:	ldc	#221; //String runControl
   56:	invokestatic	#219; //Method fieldOffset:(Ljava/lang/String;)J
   59:	putstatic	#206; //Field runControlOffset:J
   62:	ldc	#222; //String syncStack
   64:	invokestatic	#219; //Method fieldOffset:(Ljava/lang/String;)J
   67:	putstatic	#209; //Field syncStackOffset:J
   70:	ldc	#223; //String spareStack
   72:	invokestatic	#219; //Method fieldOffset:(Ljava/lang/String;)J
   75:	putstatic	#207; //Field spareStackOffset:J
   78:	goto	93
   81:	astore_0
   82:	new	#225; //class java/lang/RuntimeException
   85:	dup
   86:	ldc	#226; //String Could not initialize intrinsics
   88:	aload_0
   89:	invokespecial	#227; //Method java/lang/RuntimeException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
   92:	athrow
   93:	return
  Exception table:
   from   to  target type
    32    78    81   Class java/lang/Throwable

  LineNumberTable: 
   line 113: 0
   line 120: 10
   line 136: 22
   line 1844: 32
   line 1845: 38
   line 1846: 46
   line 1847: 54
   line 1848: 62
   line 1849: 70
   line 1852: 78
   line 1850: 81
   line 1851: 82
   line 1853: 93

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   82      11      0    e       Ljava/lang/Throwable;


}

