public class scala.concurrent.forkjoin.ForkJoinPool extends java.util.concurrent.AbstractExecutorService
  InnerClass: 
   public abstract #233= #232 of #200; //ManagedBlocker=class scala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker of class scala/concurrent/forkjoin/ForkJoinPool
   final #235= #166 of #200; //WaitQueueNode=class scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode of class scala/concurrent/forkjoin/ForkJoinPool
   final #236= #95 of #200; //InvokeAll=class scala/concurrent/forkjoin/ForkJoinPool$InvokeAll of class scala/concurrent/forkjoin/ForkJoinPool
   final #237= #85 of #200; //AdaptedCallable=class scala/concurrent/forkjoin/ForkJoinPool$AdaptedCallable of class scala/concurrent/forkjoin/ForkJoinPool
   final #238= #83 of #200; //AdaptedRunnable=class scala/concurrent/forkjoin/ForkJoinPool$AdaptedRunnable of class scala/concurrent/forkjoin/ForkJoinPool
   #239= #213 of #200; //DefaultForkJoinWorkerThreadFactory=class scala/concurrent/forkjoin/ForkJoinPool$DefaultForkJoinWorkerThreadFactory of class scala/concurrent/forkjoin/ForkJoinPool
   public abstract #241= #240 of #200; //ForkJoinWorkerThreadFactory=class scala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory of class scala/concurrent/forkjoin/ForkJoinPool
   public abstract #261= #260 of #623; //UncaughtExceptionHandler=class java/lang/Thread$UncaughtExceptionHandler of class java/lang/Thread
   #189; //class scala/concurrent/forkjoin/ForkJoinPool$1
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Method	#200.#456;	//  scala/concurrent/forkjoin/ForkJoinPool.getUnsafePrivileged:()Lsun/misc/Unsafe;
const #2 = Method	#457.#458;	//  java/lang/System.getSecurityManager:()Ljava/lang/SecurityManager;
const #3 = Field	#200.#459;	//  scala/concurrent/forkjoin/ForkJoinPool.modifyThreadPermission:Ljava/lang/RuntimePermission;
const #4 = Method	#460.#461;	//  java/lang/SecurityManager.checkPermission:(Ljava/security/Permission;)V
const #5 = int	65535;
const #6 = Field	#200.#462;	//  scala/concurrent/forkjoin/ForkJoinPool.workerCounts:I
const #7 = Method	#200.#463;	//  scala/concurrent/forkjoin/ForkJoinPool.casWorkerCounts:(II)Z
const #8 = Field	#200.#464;	//  scala/concurrent/forkjoin/ForkJoinPool.runControl:I
const #9 = Method	#200.#465;	//  scala/concurrent/forkjoin/ForkJoinPool.casRunControl:(II)Z
const #10 = Method	#200.#466;	//  scala/concurrent/forkjoin/ForkJoinPool.canTerminateOnShutdown:(I)Z
const #11 = Method	#200.#467;	//  scala/concurrent/forkjoin/ForkJoinPool.terminateOnShutdown:()V
const #12 = Method	#200.#468;	//  scala/concurrent/forkjoin/ForkJoinPool.runStateOf:(I)I
const #13 = Method	#200.#469;	//  scala/concurrent/forkjoin/ForkJoinPool.activeCountOf:(I)I
const #14 = Method	#200.#470;	//  scala/concurrent/forkjoin/ForkJoinPool.runControlFor:(II)I
const #15 = Method	#471.#472;	//  java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
const #16 = Method	#471.#473;	//  java/lang/Runtime.availableProcessors:()I
const #17 = Field	#200.#474;	//  scala/concurrent/forkjoin/ForkJoinPool.defaultForkJoinWorkerThreadFactory:Lscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;
const #18 = Method	#200.#475;	//  scala/concurrent/forkjoin/ForkJoinPool."<init>":(ILscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;)V
const #19 = Method	#231.#476;	//  java/util/concurrent/AbstractExecutorService."<init>":()V
const #20 = class	#477;	//  java/lang/IllegalArgumentException
const #21 = Method	#20.#476;	//  java/lang/IllegalArgumentException."<init>":()V
const #22 = class	#478;	//  java/lang/NullPointerException
const #23 = Method	#22.#476;	//  java/lang/NullPointerException."<init>":()V
const #24 = Method	#200.#479;	//  scala/concurrent/forkjoin/ForkJoinPool.checkPermission:()V
const #25 = Field	#200.#480;	//  scala/concurrent/forkjoin/ForkJoinPool.factory:Lscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;
const #26 = Field	#200.#481;	//  scala/concurrent/forkjoin/ForkJoinPool.parallelism:I
const #27 = Field	#200.#482;	//  scala/concurrent/forkjoin/ForkJoinPool.maxPoolSize:I
const #28 = Field	#200.#483;	//  scala/concurrent/forkjoin/ForkJoinPool.maintainsParallelism:Z
const #29 = Field	#200.#484;	//  scala/concurrent/forkjoin/ForkJoinPool.poolNumberGenerator:Ljava/util/concurrent/atomic/AtomicInteger;
const #30 = Method	#218.#485;	//  java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
const #31 = Field	#200.#486;	//  scala/concurrent/forkjoin/ForkJoinPool.poolNumber:I
const #32 = class	#487;	//  java/util/concurrent/locks/ReentrantLock
const #33 = Method	#32.#476;	//  java/util/concurrent/locks/ReentrantLock."<init>":()V
const #34 = Field	#200.#488;	//  scala/concurrent/forkjoin/ForkJoinPool.workerLock:Ljava/util/concurrent/locks/ReentrantLock;
const #35 = Method	#32.#489;	//  java/util/concurrent/locks/ReentrantLock.newCondition:()Ljava/util/concurrent/locks/Condition;
const #36 = Field	#200.#490;	//  scala/concurrent/forkjoin/ForkJoinPool.termination:Ljava/util/concurrent/locks/Condition;
const #37 = class	#491;	//  java/util/concurrent/atomic/AtomicLong
const #38 = Method	#37.#476;	//  java/util/concurrent/atomic/AtomicLong."<init>":()V
const #39 = Field	#200.#492;	//  scala/concurrent/forkjoin/ForkJoinPool.stealCount:Ljava/util/concurrent/atomic/AtomicLong;
const #40 = class	#493;	//  scala/concurrent/forkjoin/LinkedTransferQueue
const #41 = Method	#40.#476;	//  scala/concurrent/forkjoin/LinkedTransferQueue."<init>":()V
const #42 = Field	#200.#494;	//  scala/concurrent/forkjoin/ForkJoinPool.submissionQueue:Lscala/concurrent/forkjoin/LinkedTransferQueue;
const #43 = Field	#200.#495;	//  scala/concurrent/forkjoin/ForkJoinPool.ueh:Ljava/lang/Thread$UncaughtExceptionHandler;
const #44 = InterfaceMethod	#240.#496;	//  scala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory.newThread:(Lscala/concurrent/forkjoin/ForkJoinPool;)Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
const #45 = Field	#59.#497;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.poolIndex:I
const #46 = Method	#59.#498;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.setDaemon:(Z)V
const #47 = Field	#200.#499;	//  scala/concurrent/forkjoin/ForkJoinPool.locallyFifo:Z
const #48 = Method	#59.#500;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.setAsyncMode:(Z)V
const #49 = class	#501;	//  java/lang/StringBuilder
const #50 = Method	#49.#476;	//  java/lang/StringBuilder."<init>":()V
const #51 = String	#502;	//  ForkJoinPool-
const #52 = Method	#49.#503;	//  java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
const #53 = Method	#49.#504;	//  java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
const #54 = String	#505;	//  -worker-
const #55 = Method	#49.#506;	//  java/lang/StringBuilder.toString:()Ljava/lang/String;
const #56 = Method	#59.#507;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.setName:(Ljava/lang/String;)V
const #57 = Method	#59.#508;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.setUncaughtExceptionHandler:(Ljava/lang/Thread$UncaughtExceptionHandler;)V
const #58 = Method	#509.#510;	//  java/lang/Integer.numberOfLeadingZeros:(I)I
const #59 = class	#511;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread
const #60 = Method	#512.#513;	//  java/lang/Math.min:(II)I
const #61 = Method	#457.#514;	//  java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
const #62 = Field	#200.#515;	//  scala/concurrent/forkjoin/ForkJoinPool.workers:[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
const #63 = Method	#200.#516;	//  scala/concurrent/forkjoin/ForkJoinPool.arraySizeFor:(I)I
const #64 = Method	#200.#517;	//  scala/concurrent/forkjoin/ForkJoinPool.copyOfWorkers:([Lscala/concurrent/forkjoin/ForkJoinWorkerThread;I)[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
const #65 = Method	#32.#518;	//  java/util/concurrent/locks/ReentrantLock.lock:()V
const #66 = Method	#200.#519;	//  scala/concurrent/forkjoin/ForkJoinPool.ensureWorkerArrayCapacity:(I)[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
const #67 = Method	#200.#520;	//  scala/concurrent/forkjoin/ForkJoinPool.createWorker:(I)Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
const #68 = Method	#59.#521;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.start:()V
const #69 = Method	#200.#522;	//  scala/concurrent/forkjoin/ForkJoinPool.updateWorkerCount:(I)V
const #70 = Method	#32.#523;	//  java/util/concurrent/locks/ReentrantLock.unlock:()V
const #71 = Method	#200.#524;	//  scala/concurrent/forkjoin/ForkJoinPool.resumeAllSpares:()Z
const #72 = Method	#200.#525;	//  scala/concurrent/forkjoin/ForkJoinPool.totalCountOf:(I)I
const #73 = Method	#200.#526;	//  scala/concurrent/forkjoin/ForkJoinPool.runningCountOf:(I)I
const #74 = Method	#200.#527;	//  scala/concurrent/forkjoin/ForkJoinPool.workerCountsFor:(II)I
const #75 = Method	#200.#528;	//  scala/concurrent/forkjoin/ForkJoinPool.isShutdown:()Z
const #76 = class	#529;	//  java/util/concurrent/RejectedExecutionException
const #77 = Method	#76.#476;	//  java/util/concurrent/RejectedExecutionException."<init>":()V
const #78 = Method	#200.#530;	//  scala/concurrent/forkjoin/ForkJoinPool.ensureWorkerInitialization:()V
const #79 = Method	#40.#531;	//  scala/concurrent/forkjoin/LinkedTransferQueue.offer:(Ljava/lang/Object;)Z
const #80 = Method	#200.#532;	//  scala/concurrent/forkjoin/ForkJoinPool.signalIdleWorkers:()V
const #81 = Method	#200.#533;	//  scala/concurrent/forkjoin/ForkJoinPool.doSubmit:(Lscala/concurrent/forkjoin/ForkJoinTask;)V
const #82 = Method	#108.#534;	//  scala/concurrent/forkjoin/ForkJoinTask.join:()Ljava/lang/Object;
const #83 = class	#535;	//  scala/concurrent/forkjoin/ForkJoinPool$AdaptedRunnable
const #84 = Method	#83.#536;	//  scala/concurrent/forkjoin/ForkJoinPool$AdaptedRunnable."<init>":(Ljava/lang/Runnable;Ljava/lang/Object;)V
const #85 = class	#537;	//  scala/concurrent/forkjoin/ForkJoinPool$AdaptedCallable
const #86 = Method	#85.#538;	//  scala/concurrent/forkjoin/ForkJoinPool$AdaptedCallable."<init>":(Ljava/util/concurrent/Callable;)V
const #87 = class	#539;	//  java/util/ArrayList
const #88 = InterfaceMethod	#540.#541;	//  java/util/Collection.size:()I
const #89 = Method	#87.#542;	//  java/util/ArrayList."<init>":(I)V
const #90 = InterfaceMethod	#540.#543;	//  java/util/Collection.iterator:()Ljava/util/Iterator;
const #91 = InterfaceMethod	#544.#545;	//  java/util/Iterator.hasNext:()Z
const #92 = InterfaceMethod	#544.#546;	//  java/util/Iterator.next:()Ljava/lang/Object;
const #93 = class	#547;	//  java/util/concurrent/Callable
const #94 = Method	#87.#548;	//  java/util/ArrayList.add:(Ljava/lang/Object;)Z
const #95 = class	#549;	//  scala/concurrent/forkjoin/ForkJoinPool$InvokeAll
const #96 = Method	#95.#550;	//  scala/concurrent/forkjoin/ForkJoinPool$InvokeAll."<init>":(Ljava/util/ArrayList;)V
const #97 = Method	#200.#551;	//  scala/concurrent/forkjoin/ForkJoinPool.invoke:(Lscala/concurrent/forkjoin/ForkJoinTask;)Ljava/lang/Object;
const #98 = Method	#200.#552;	//  scala/concurrent/forkjoin/ForkJoinPool.isTerminating:()Z
const #99 = Method	#200.#553;	//  scala/concurrent/forkjoin/ForkJoinPool.createAndStartAddedWorkers:()V
const #100 = Method	#200.#554;	//  scala/concurrent/forkjoin/ForkJoinPool.trimSpares:()V
const #101 = Method	#37.#555;	//  java/util/concurrent/atomic/AtomicLong.get:()J
const #102 = Method	#59.#556;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.getAndClearStealCount:()I
const #103 = Method	#37.#557;	//  java/util/concurrent/atomic/AtomicLong.addAndGet:(J)J
const #104 = Method	#59.#558;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.getQueueSize:()I
const #105 = Method	#40.#541;	//  scala/concurrent/forkjoin/LinkedTransferQueue.size:()I
const #106 = Method	#40.#559;	//  scala/concurrent/forkjoin/LinkedTransferQueue.isEmpty:()Z
const #107 = Method	#40.#560;	//  scala/concurrent/forkjoin/LinkedTransferQueue.poll:()Ljava/lang/Object;
const #108 = class	#561;	//  scala/concurrent/forkjoin/ForkJoinTask
const #109 = Method	#40.#562;	//  scala/concurrent/forkjoin/LinkedTransferQueue.drainTo:(Ljava/util/Collection;)I
const #110 = Method	#59.#563;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.drainTasksTo:(Ljava/util/Collection;)I
const #111 = Method	#200.#564;	//  scala/concurrent/forkjoin/ForkJoinPool.getStealCount:()J
const #112 = Method	#200.#565;	//  scala/concurrent/forkjoin/ForkJoinPool.getQueuedTaskCount:()J
const #113 = Method	#200.#566;	//  scala/concurrent/forkjoin/ForkJoinPool.getQueuedSubmissionCount:()I
const #114 = Method	#567.#506;	//  java/lang/Object.toString:()Ljava/lang/String;
const #115 = String	#568;	//  [
const #116 = Method	#200.#569;	//  scala/concurrent/forkjoin/ForkJoinPool.runStateToString:(I)Ljava/lang/String;
const #117 = String	#570;	//  , parallelism = 
const #118 = String	#571;	//  , size = 
const #119 = String	#572;	//  , active = 
const #120 = String	#573;	//  , running = 
const #121 = String	#574;	//  , steals = 
const #122 = Method	#49.#575;	//  java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
const #123 = String	#576;	//  , tasks = 
const #124 = String	#577;	//  , submissions = 
const #125 = String	#578;	//  ]
const #126 = String	#579;	//  Running
const #127 = String	#580;	//  Shutting down
const #128 = String	#581;	//  Terminating
const #129 = String	#582;	//  Terminated
const #130 = class	#583;	//  java/lang/Error
const #131 = String	#584;	//  Unknown run state
const #132 = Method	#130.#585;	//  java/lang/Error."<init>":(Ljava/lang/String;)V
const #133 = Method	#200.#586;	//  scala/concurrent/forkjoin/ForkJoinPool.transitionRunStateTo:(I)Z
const #134 = Method	#200.#587;	//  scala/concurrent/forkjoin/ForkJoinPool.terminate:()V
const #135 = Method	#588.#589;	//  java/util/Collections.emptyList:()Ljava/util/List;
const #136 = Method	#590.#591;	//  java/util/concurrent/TimeUnit.toNanos:(J)J
const #137 = Method	#200.#592;	//  scala/concurrent/forkjoin/ForkJoinPool.isTerminated:()Z
const #138 = InterfaceMethod	#593.#594;	//  java/util/concurrent/locks/Condition.awaitNanos:(J)J
const #139 = Method	#200.#595;	//  scala/concurrent/forkjoin/ForkJoinPool.updateStealCount:(Lscala/concurrent/forkjoin/ForkJoinWorkerThread;)V
const #140 = InterfaceMethod	#593.#596;	//  java/util/concurrent/locks/Condition.signalAll:()V
const #141 = Method	#200.#597;	//  scala/concurrent/forkjoin/ForkJoinPool.tryShrinkWorkerArray:()V
const #142 = Method	#200.#598;	//  scala/concurrent/forkjoin/ForkJoinPool.tryResumeSpare:(Z)Z
const #143 = Method	#200.#599;	//  scala/concurrent/forkjoin/ForkJoinPool.stopAllWorkers:()V
const #144 = Method	#200.#600;	//  scala/concurrent/forkjoin/ForkJoinPool.cancelQueuedSubmissions:()V
const #145 = Method	#200.#601;	//  scala/concurrent/forkjoin/ForkJoinPool.cancelQueuedWorkerTasks:()V
const #146 = Method	#200.#602;	//  scala/concurrent/forkjoin/ForkJoinPool.interruptUnterminatedWorkers:()V
const #147 = Method	#200.#603;	//  scala/concurrent/forkjoin/ForkJoinPool.hasQueuedSubmissions:()Z
const #148 = Method	#200.#604;	//  scala/concurrent/forkjoin/ForkJoinPool.pollSubmission:()Lscala/concurrent/forkjoin/ForkJoinTask;
const #149 = Method	#108.#605;	//  scala/concurrent/forkjoin/ForkJoinTask.cancel:(Z)Z
const #150 = Method	#59.#606;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.cancelTasks:()V
const #151 = Method	#59.#607;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.shutdownNow:()Z
const #152 = Method	#59.#592;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.isTerminated:()Z
const #153 = Method	#59.#608;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.interrupt:()V
const #154 = class	#609;	//  java/lang/SecurityException
const #155 = Field	#200.#610;	//  scala/concurrent/forkjoin/ForkJoinPool.eventCount:J
const #156 = Field	#200.#611;	//  scala/concurrent/forkjoin/ForkJoinPool.syncStack:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
const #157 = Field	#166.#612;	//  scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.count:J
const #158 = Method	#200.#613;	//  scala/concurrent/forkjoin/ForkJoinPool.casBarrierStack:(Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;)Z
const #159 = Method	#166.#614;	//  scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.signal:()Z
const #160 = Field	#166.#615;	//  scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.next:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
const #161 = Method	#200.#616;	//  scala/concurrent/forkjoin/ForkJoinPool.casEventCount:(JJ)Z
const #162 = Method	#200.#617;	//  scala/concurrent/forkjoin/ForkJoinPool.ensureSync:()J
const #163 = Method	#59.#528;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.isShutdown:()Z
const #164 = Method	#200.#618;	//  scala/concurrent/forkjoin/ForkJoinPool.suspendIfSpare:(Lscala/concurrent/forkjoin/ForkJoinWorkerThread;)Z
const #165 = Field	#59.#619;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.lastEventCount:J
const #166 = class	#620;	//  scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode
const #167 = Method	#166.#621;	//  scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode."<init>":(JLscala/concurrent/forkjoin/ForkJoinWorkerThread;)V
const #168 = Method	#166.#622;	//  scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.awaitSyncRelease:(Lscala/concurrent/forkjoin/ForkJoinPool;)V
const #169 = Method	#623.#624;	//  java/lang/Thread.interrupted:()Z
const #170 = Field	#166.#625;	//  scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.thread:Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
const #171 = Method	#59.#626;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.hasQueuedTasks:([Lscala/concurrent/forkjoin/ForkJoinWorkerThread;)Z
const #172 = Field	#200.#627;	//  scala/concurrent/forkjoin/ForkJoinPool.spareStack:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
const #173 = Method	#200.#628;	//  scala/concurrent/forkjoin/ForkJoinPool.needSpare:(IZ)Z
const #174 = Field	#108.#629;	//  scala/concurrent/forkjoin/ForkJoinTask.status:I
const #175 = Method	#200.#630;	//  scala/concurrent/forkjoin/ForkJoinPool.tryAddSpare:(I)Z
const #176 = InterfaceMethod	#232.#631;	//  scala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker.isReleasable:()Z
const #177 = Method	#32.#632;	//  java/util/concurrent/locks/ReentrantLock.tryLock:()Z
const #178 = Method	#200.#633;	//  scala/concurrent/forkjoin/ForkJoinPool.createAndStartSpare:(I)V
const #179 = Method	#200.#634;	//  scala/concurrent/forkjoin/ForkJoinPool.casSpareStack:(Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;)Z
const #180 = Method	#166.#635;	//  scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.awaitSpareRelease:()V
const #181 = Method	#200.#636;	//  scala/concurrent/forkjoin/ForkJoinPool.updateRunningCount:(I)V
const #182 = Method	#59.#637;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.shutdown:()Z
const #183 = Method	#623.#638;	//  java/lang/Thread.currentThread:()Ljava/lang/Thread;
const #184 = Field	#59.#639;	//  scala/concurrent/forkjoin/ForkJoinWorkerThread.pool:Lscala/concurrent/forkjoin/ForkJoinPool;
const #185 = Method	#200.#640;	//  scala/concurrent/forkjoin/ForkJoinPool.preBlock:(Lscala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;Z)Z
const #186 = Method	#200.#641;	//  scala/concurrent/forkjoin/ForkJoinPool.awaitBlocker:(Lscala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;)V
const #187 = InterfaceMethod	#232.#642;	//  scala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker.block:()Z
const #188 = Method	#192.#643;	//  sun/misc/Unsafe.getUnsafe:()Lsun/misc/Unsafe;
const #189 = class	#644;	//  scala/concurrent/forkjoin/ForkJoinPool$1
const #190 = Method	#189.#476;	//  scala/concurrent/forkjoin/ForkJoinPool$1."<init>":()V
const #191 = Method	#646.#647;	//  java/security/AccessController.doPrivileged:(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;
const #192 = class	#648;	//  sun/misc/Unsafe
const #193 = class	#649;	//  java/security/PrivilegedActionException
const #194 = Method	#193.#650;	//  java/security/PrivilegedActionException.getCause:()Ljava/lang/Throwable;
const #195 = String	#651;	//  theUnsafe
const #196 = Method	#652.#653;	//  java/lang/Class.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
const #197 = Method	#654.#655;	//  java/lang/reflect/Field.setAccessible:(Z)V
const #198 = Method	#654.#656;	//  java/lang/reflect/Field.get:(Ljava/lang/Object;)Ljava/lang/Object;
const #199 = Field	#200.#657;	//  scala/concurrent/forkjoin/ForkJoinPool._unsafe:Lsun/misc/Unsafe;
const #200 = class	#658;	//  scala/concurrent/forkjoin/ForkJoinPool
const #201 = Method	#192.#659;	//  sun/misc/Unsafe.objectFieldOffset:(Ljava/lang/reflect/Field;)J
const #202 = Field	#200.#660;	//  scala/concurrent/forkjoin/ForkJoinPool.eventCountOffset:J
const #203 = Method	#192.#661;	//  sun/misc/Unsafe.compareAndSwapLong:(Ljava/lang/Object;JJJ)Z
const #204 = Field	#200.#662;	//  scala/concurrent/forkjoin/ForkJoinPool.workerCountsOffset:J
const #205 = Method	#192.#663;	//  sun/misc/Unsafe.compareAndSwapInt:(Ljava/lang/Object;JII)Z
const #206 = Field	#200.#664;	//  scala/concurrent/forkjoin/ForkJoinPool.runControlOffset:J
const #207 = Field	#200.#665;	//  scala/concurrent/forkjoin/ForkJoinPool.spareStackOffset:J
const #208 = Method	#192.#666;	//  sun/misc/Unsafe.compareAndSwapObject:(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z
const #209 = Field	#200.#667;	//  scala/concurrent/forkjoin/ForkJoinPool.syncStackOffset:J
const #210 = Method	#200.#668;	//  scala/concurrent/forkjoin/ForkJoinPool.submit:(Ljava/util/concurrent/Callable;)Lscala/concurrent/forkjoin/ForkJoinTask;
const #211 = Method	#200.#669;	//  scala/concurrent/forkjoin/ForkJoinPool.submit:(Ljava/lang/Runnable;Ljava/lang/Object;)Lscala/concurrent/forkjoin/ForkJoinTask;
const #212 = Method	#200.#670;	//  scala/concurrent/forkjoin/ForkJoinPool.submit:(Ljava/lang/Runnable;)Lscala/concurrent/forkjoin/ForkJoinTask;
const #213 = class	#671;	//  scala/concurrent/forkjoin/ForkJoinPool$DefaultForkJoinWorkerThreadFactory
const #214 = Method	#213.#476;	//  scala/concurrent/forkjoin/ForkJoinPool$DefaultForkJoinWorkerThreadFactory."<init>":()V
const #215 = class	#672;	//  java/lang/RuntimePermission
const #216 = String	#673;	//  modifyThread
const #217 = Method	#215.#585;	//  java/lang/RuntimePermission."<init>":(Ljava/lang/String;)V
const #218 = class	#674;	//  java/util/concurrent/atomic/AtomicInteger
const #219 = Method	#218.#476;	//  java/util/concurrent/atomic/AtomicInteger."<init>":()V
const #220 = Method	#200.#643;	//  scala/concurrent/forkjoin/ForkJoinPool.getUnsafe:()Lsun/misc/Unsafe;
const #221 = String	#273;	//  eventCount
const #222 = Method	#200.#675;	//  scala/concurrent/forkjoin/ForkJoinPool.fieldOffset:(Ljava/lang/String;)J
const #223 = String	#280;	//  workerCounts
const #224 = String	#281;	//  runControl
const #225 = String	#272;	//  syncStack
const #226 = String	#264;	//  spareStack
const #227 = class	#676;	//  java/lang/Throwable
const #228 = class	#677;	//  java/lang/RuntimeException
const #229 = String	#678;	//  Could not initialize intrinsics
const #230 = Method	#228.#679;	//  java/lang/RuntimeException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
const #231 = class	#680;	//  java/util/concurrent/AbstractExecutorService
const #232 = class	#681;	//  scala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker
const #233 = Asciz	ManagedBlocker;
const #234 = Asciz	InnerClasses;
const #235 = Asciz	WaitQueueNode;
const #236 = Asciz	InvokeAll;
const #237 = Asciz	AdaptedCallable;
const #238 = Asciz	AdaptedRunnable;
const #239 = Asciz	DefaultForkJoinWorkerThreadFactory;
const #240 = class	#682;	//  scala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory
const #241 = Asciz	ForkJoinWorkerThreadFactory;
const #242 = Asciz	shortMask;
const #243 = Asciz	I;
const #244 = Asciz	ConstantValue;
const #245 = Asciz	MAX_THREADS;
const #246 = int	32767;
const #247 = Asciz	defaultForkJoinWorkerThreadFactory;
const #248 = Asciz	Lscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;;
const #249 = Asciz	modifyThreadPermission;
const #250 = Asciz	Ljava/lang/RuntimePermission;;
const #251 = Asciz	poolNumberGenerator;
const #252 = Asciz	Ljava/util/concurrent/atomic/AtomicInteger;;
const #253 = Asciz	workers;
const #254 = Asciz	[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;;
const #255 = Asciz	workerLock;
const #256 = Asciz	Ljava/util/concurrent/locks/ReentrantLock;;
const #257 = Asciz	termination;
const #258 = Asciz	Ljava/util/concurrent/locks/Condition;;
const #259 = Asciz	ueh;
const #260 = class	#683;	//  java/lang/Thread$UncaughtExceptionHandler
const #261 = Asciz	UncaughtExceptionHandler;
const #262 = Asciz	Ljava/lang/Thread$UncaughtExceptionHandler;;
const #263 = Asciz	factory;
const #264 = Asciz	spareStack;
const #265 = Asciz	Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;;
const #266 = Asciz	stealCount;
const #267 = Asciz	Ljava/util/concurrent/atomic/AtomicLong;;
const #268 = Asciz	submissionQueue;
const #269 = Asciz	Lscala/concurrent/forkjoin/LinkedTransferQueue;;
const #270 = Asciz	Signature;
const #271 = Asciz	Lscala/concurrent/forkjoin/LinkedTransferQueue<Lscala/concurrent/forkjoin/ForkJoinTask<*>;>;;
const #272 = Asciz	syncStack;
const #273 = Asciz	eventCount;
const #274 = Asciz	J;
const #275 = Asciz	poolNumber;
const #276 = Asciz	maxPoolSize;
const #277 = Asciz	parallelism;
const #278 = Asciz	locallyFifo;
const #279 = Asciz	Z;
const #280 = Asciz	workerCounts;
const #281 = Asciz	runControl;
const #282 = Asciz	RUNNING;
const #283 = int	0;
const #284 = Asciz	SHUTDOWN;
const #285 = int	1;
const #286 = Asciz	TERMINATING;
const #287 = int	2;
const #288 = Asciz	TERMINATED;
const #289 = int	3;
const #290 = Asciz	maintainsParallelism;
const #291 = Asciz	_unsafe;
const #292 = Asciz	Lsun/misc/Unsafe;;
const #293 = Asciz	eventCountOffset;
const #294 = Asciz	workerCountsOffset;
const #295 = Asciz	runControlOffset;
const #296 = Asciz	syncStackOffset;
const #297 = Asciz	spareStackOffset;
const #298 = Asciz	checkPermission;
const #299 = Asciz	()V;
const #300 = Asciz	Code;
const #301 = Asciz	totalCountOf;
const #302 = Asciz	(I)I;
const #303 = Asciz	runningCountOf;
const #304 = Asciz	workerCountsFor;
const #305 = Asciz	(II)I;
const #306 = Asciz	updateRunningCount;
const #307 = Asciz	(I)V;
const #308 = Asciz	updateWorkerCount;
const #309 = Asciz	runStateOf;
const #310 = Asciz	activeCountOf;
const #311 = Asciz	runControlFor;
const #312 = Asciz	tryIncrementActiveCount;
const #313 = Asciz	()Z;
const #314 = Asciz	tryDecrementActiveCount;
const #315 = Asciz	canTerminateOnShutdown;
const #316 = Asciz	(I)Z;
const #317 = Asciz	transitionRunStateTo;
const #318 = Asciz	<init>;
const #319 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;)V;
const #320 = Asciz	(ILscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;)V;
const #321 = Asciz	createWorker;
const #322 = Asciz	(I)Lscala/concurrent/forkjoin/ForkJoinWorkerThread;;
const #323 = Asciz	arraySizeFor;
const #324 = Asciz	copyOfWorkers;
const #325 = Asciz	([Lscala/concurrent/forkjoin/ForkJoinWorkerThread;I)[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;;
const #326 = Asciz	ensureWorkerArrayCapacity;
const #327 = Asciz	(I)[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;;
const #328 = Asciz	tryShrinkWorkerArray;
const #329 = Asciz	ensureWorkerInitialization;
const #330 = Asciz	createAndStartAddedWorkers;
const #331 = Asciz	doSubmit;
const #332 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinTask;)V;
const #333 = Asciz	<T:Ljava/lang/Object;>(Lscala/concurrent/forkjoin/ForkJoinTask<TT;>;)V;
const #334 = Asciz	invoke;
const #335 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinTask;)Ljava/lang/Object;;
const #336 = Asciz	<T:Ljava/lang/Object;>(Lscala/concurrent/forkjoin/ForkJoinTask<TT;>;)TT;;
const #337 = Asciz	execute;
const #338 = Asciz	(Ljava/lang/Runnable;)V;
const #339 = Asciz	submit;
const #340 = Asciz	(Ljava/util/concurrent/Callable;)Lscala/concurrent/forkjoin/ForkJoinTask;;
const #341 = Asciz	<T:Ljava/lang/Object;>(Ljava/util/concurrent/Callable<TT;>;)Lscala/concurrent/forkjoin/ForkJoinTask<TT;>;;
const #342 = Asciz	(Ljava/lang/Runnable;Ljava/lang/Object;)Lscala/concurrent/forkjoin/ForkJoinTask;;
const #343 = Asciz	<T:Ljava/lang/Object;>(Ljava/lang/Runnable;TT;)Lscala/concurrent/forkjoin/ForkJoinTask<TT;>;;
const #344 = Asciz	(Ljava/lang/Runnable;)Lscala/concurrent/forkjoin/ForkJoinTask;;
const #345 = Asciz	(Ljava/lang/Runnable;)Lscala/concurrent/forkjoin/ForkJoinTask<*>;;
const #346 = Asciz	invokeAll;
const #347 = Asciz	(Ljava/util/Collection;)Ljava/util/List;;
const #348 = Asciz	<T:Ljava/lang/Object;>(Ljava/util/Collection<+Ljava/util/concurrent/Callable<TT;>;>;)Ljava/util/List<Ljava/util/concurrent/Future<TT;>;>;;
const #349 = Asciz	getFactory;
const #350 = Asciz	()Lscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;;
const #351 = Asciz	getUncaughtExceptionHandler;
const #352 = Asciz	()Ljava/lang/Thread$UncaughtExceptionHandler;;
const #353 = Asciz	setUncaughtExceptionHandler;
const #354 = Asciz	(Ljava/lang/Thread$UncaughtExceptionHandler;)Ljava/lang/Thread$UncaughtExceptionHandler;;
const #355 = Asciz	setParallelism;
const #356 = Asciz	getParallelism;
const #357 = Asciz	()I;
const #358 = Asciz	getPoolSize;
const #359 = Asciz	getMaximumPoolSize;
const #360 = Asciz	setMaximumPoolSize;
const #361 = Asciz	getMaintainsParallelism;
const #362 = Asciz	setMaintainsParallelism;
const #363 = Asciz	(Z)V;
const #364 = Asciz	setAsyncMode;
const #365 = Asciz	(Z)Z;
const #366 = Asciz	getAsyncMode;
const #367 = Asciz	getRunningThreadCount;
const #368 = Asciz	getActiveThreadCount;
const #369 = Asciz	getIdleThreadCount;
const #370 = Asciz	isQuiescent;
const #371 = Asciz	getStealCount;
const #372 = Asciz	()J;
const #373 = Asciz	updateStealCount;
const #374 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinWorkerThread;)V;
const #375 = Asciz	getQueuedTaskCount;
const #376 = Asciz	getQueuedSubmissionCount;
const #377 = Asciz	hasQueuedSubmissions;
const #378 = Asciz	pollSubmission;
const #379 = Asciz	()Lscala/concurrent/forkjoin/ForkJoinTask;;
const #380 = Asciz	()Lscala/concurrent/forkjoin/ForkJoinTask<*>;;
const #381 = Asciz	drainTasksTo;
const #382 = Asciz	(Ljava/util/Collection;)I;
const #383 = Asciz	(Ljava/util/Collection<Lscala/concurrent/forkjoin/ForkJoinTask<*>;>;)I;
const #384 = Asciz	toString;
const #385 = Asciz	()Ljava/lang/String;;
const #386 = Asciz	runStateToString;
const #387 = Asciz	(I)Ljava/lang/String;;
const #388 = Asciz	shutdown;
const #389 = Asciz	shutdownNow;
const #390 = Asciz	()Ljava/util/List;;
const #391 = Asciz	()Ljava/util/List<Ljava/lang/Runnable;>;;
const #392 = Asciz	isTerminated;
const #393 = Asciz	isTerminating;
const #394 = Asciz	isShutdown;
const #395 = Asciz	awaitTermination;
const #396 = Asciz	(JLjava/util/concurrent/TimeUnit;)Z;
const #397 = Asciz	Exceptions;
const #398 = class	#684;	//  java/lang/InterruptedException
const #399 = Asciz	workerTerminated;
const #400 = Asciz	terminate;
const #401 = Asciz	terminateOnShutdown;
const #402 = Asciz	cancelQueuedSubmissions;
const #403 = Asciz	cancelQueuedWorkerTasks;
const #404 = Asciz	stopAllWorkers;
const #405 = Asciz	interruptUnterminatedWorkers;
const #406 = Asciz	ensureSync;
const #407 = Asciz	signalIdleWorkers;
const #408 = Asciz	signalWork;
const #409 = Asciz	sync;
const #410 = Asciz	syncIsReleasable;
const #411 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;)Z;
const #412 = Asciz	hasNewSyncEvent;
const #413 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinWorkerThread;)Z;
const #414 = Asciz	preJoin;
const #415 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinTask;Z)Z;
const #416 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinTask<*>;Z)Z;
const #417 = Asciz	preBlock;
const #418 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;Z)Z;
const #419 = Asciz	needSpare;
const #420 = Asciz	(IZ)Z;
const #421 = Asciz	tryAddSpare;
const #422 = Asciz	createAndStartSpare;
const #423 = Asciz	suspendIfSpare;
const #424 = Asciz	tryResumeSpare;
const #425 = Asciz	resumeAllSpares;
const #426 = Asciz	trimSpares;
const #427 = Asciz	managedBlock;
const #428 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;Z)V;
const #429 = Asciz	awaitBlocker;
const #430 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;)V;
const #431 = Asciz	newTaskFor;
const #432 = Asciz	(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/RunnableFuture;;
const #433 = Asciz	<T:Ljava/lang/Object;>(Ljava/lang/Runnable;TT;)Ljava/util/concurrent/RunnableFuture<TT;>;;
const #434 = Asciz	(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/RunnableFuture;;
const #435 = Asciz	<T:Ljava/lang/Object;>(Ljava/util/concurrent/Callable<TT;>;)Ljava/util/concurrent/RunnableFuture<TT;>;;
const #436 = Asciz	getUnsafe;
const #437 = Asciz	()Lsun/misc/Unsafe;;
const #438 = Asciz	getUnsafePrivileged;
const #439 = class	#685;	//  java/lang/NoSuchFieldException
const #440 = class	#686;	//  java/lang/IllegalAccessException
const #441 = Asciz	fieldOffset;
const #442 = Asciz	(Ljava/lang/String;)J;
const #443 = Asciz	casEventCount;
const #444 = Asciz	(JJ)Z;
const #445 = Asciz	casWorkerCounts;
const #446 = Asciz	(II)Z;
const #447 = Asciz	casRunControl;
const #448 = Asciz	casSpareStack;
const #449 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;)Z;
const #450 = Asciz	casBarrierStack;
const #451 = Asciz	(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;;
const #452 = Asciz	(Ljava/lang/Runnable;Ljava/lang/Object;)Ljava/util/concurrent/Future;;
const #453 = Asciz	(Ljava/lang/Runnable;)Ljava/util/concurrent/Future;;
const #454 = Asciz	access$000;
const #455 = Asciz	<clinit>;
const #456 = NameAndType	#438:#437;//  getUnsafePrivileged:()Lsun/misc/Unsafe;
const #457 = class	#687;	//  java/lang/System
const #458 = NameAndType	#688:#689;//  getSecurityManager:()Ljava/lang/SecurityManager;
const #459 = NameAndType	#249:#250;//  modifyThreadPermission:Ljava/lang/RuntimePermission;
const #460 = class	#690;	//  java/lang/SecurityManager
const #461 = NameAndType	#298:#691;//  checkPermission:(Ljava/security/Permission;)V
const #462 = NameAndType	#280:#243;//  workerCounts:I
const #463 = NameAndType	#445:#446;//  casWorkerCounts:(II)Z
const #464 = NameAndType	#281:#243;//  runControl:I
const #465 = NameAndType	#447:#446;//  casRunControl:(II)Z
const #466 = NameAndType	#315:#316;//  canTerminateOnShutdown:(I)Z
const #467 = NameAndType	#401:#299;//  terminateOnShutdown:()V
const #468 = NameAndType	#309:#302;//  runStateOf:(I)I
const #469 = NameAndType	#310:#302;//  activeCountOf:(I)I
const #470 = NameAndType	#311:#305;//  runControlFor:(II)I
const #471 = class	#692;	//  java/lang/Runtime
const #472 = NameAndType	#693:#694;//  getRuntime:()Ljava/lang/Runtime;
const #473 = NameAndType	#695:#357;//  availableProcessors:()I
const #474 = NameAndType	#247:#248;//  defaultForkJoinWorkerThreadFactory:Lscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;
const #475 = NameAndType	#318:#320;//  "<init>":(ILscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;)V
const #476 = NameAndType	#318:#299;//  "<init>":()V
const #477 = Asciz	java/lang/IllegalArgumentException;
const #478 = Asciz	java/lang/NullPointerException;
const #479 = NameAndType	#298:#299;//  checkPermission:()V
const #480 = NameAndType	#263:#248;//  factory:Lscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;
const #481 = NameAndType	#277:#243;//  parallelism:I
const #482 = NameAndType	#276:#243;//  maxPoolSize:I
const #483 = NameAndType	#290:#279;//  maintainsParallelism:Z
const #484 = NameAndType	#251:#252;//  poolNumberGenerator:Ljava/util/concurrent/atomic/AtomicInteger;
const #485 = NameAndType	#696:#357;//  incrementAndGet:()I
const #486 = NameAndType	#275:#243;//  poolNumber:I
const #487 = Asciz	java/util/concurrent/locks/ReentrantLock;
const #488 = NameAndType	#255:#256;//  workerLock:Ljava/util/concurrent/locks/ReentrantLock;
const #489 = NameAndType	#697:#698;//  newCondition:()Ljava/util/concurrent/locks/Condition;
const #490 = NameAndType	#257:#258;//  termination:Ljava/util/concurrent/locks/Condition;
const #491 = Asciz	java/util/concurrent/atomic/AtomicLong;
const #492 = NameAndType	#266:#267;//  stealCount:Ljava/util/concurrent/atomic/AtomicLong;
const #493 = Asciz	scala/concurrent/forkjoin/LinkedTransferQueue;
const #494 = NameAndType	#268:#269;//  submissionQueue:Lscala/concurrent/forkjoin/LinkedTransferQueue;
const #495 = NameAndType	#259:#262;//  ueh:Ljava/lang/Thread$UncaughtExceptionHandler;
const #496 = NameAndType	#699:#700;//  newThread:(Lscala/concurrent/forkjoin/ForkJoinPool;)Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
const #497 = NameAndType	#701:#243;//  poolIndex:I
const #498 = NameAndType	#702:#363;//  setDaemon:(Z)V
const #499 = NameAndType	#278:#279;//  locallyFifo:Z
const #500 = NameAndType	#364:#363;//  setAsyncMode:(Z)V
const #501 = Asciz	java/lang/StringBuilder;
const #502 = Asciz	ForkJoinPool-;
const #503 = NameAndType	#703:#704;//  append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
const #504 = NameAndType	#703:#705;//  append:(I)Ljava/lang/StringBuilder;
const #505 = Asciz	-worker-;
const #506 = NameAndType	#384:#385;//  toString:()Ljava/lang/String;
const #507 = NameAndType	#706:#707;//  setName:(Ljava/lang/String;)V
const #508 = NameAndType	#353:#708;//  setUncaughtExceptionHandler:(Ljava/lang/Thread$UncaughtExceptionHandler;)V
const #509 = class	#709;	//  java/lang/Integer
const #510 = NameAndType	#710:#302;//  numberOfLeadingZeros:(I)I
const #511 = Asciz	scala/concurrent/forkjoin/ForkJoinWorkerThread;
const #512 = class	#711;	//  java/lang/Math
const #513 = NameAndType	#712:#305;//  min:(II)I
const #514 = NameAndType	#713:#714;//  arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
const #515 = NameAndType	#253:#254;//  workers:[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
const #516 = NameAndType	#323:#302;//  arraySizeFor:(I)I
const #517 = NameAndType	#324:#325;//  copyOfWorkers:([Lscala/concurrent/forkjoin/ForkJoinWorkerThread;I)[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
const #518 = NameAndType	#715:#299;//  lock:()V
const #519 = NameAndType	#326:#327;//  ensureWorkerArrayCapacity:(I)[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
const #520 = NameAndType	#321:#322;//  createWorker:(I)Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
const #521 = NameAndType	#716:#299;//  start:()V
const #522 = NameAndType	#308:#307;//  updateWorkerCount:(I)V
const #523 = NameAndType	#717:#299;//  unlock:()V
const #524 = NameAndType	#425:#313;//  resumeAllSpares:()Z
const #525 = NameAndType	#301:#302;//  totalCountOf:(I)I
const #526 = NameAndType	#303:#302;//  runningCountOf:(I)I
const #527 = NameAndType	#304:#305;//  workerCountsFor:(II)I
const #528 = NameAndType	#394:#313;//  isShutdown:()Z
const #529 = Asciz	java/util/concurrent/RejectedExecutionException;
const #530 = NameAndType	#329:#299;//  ensureWorkerInitialization:()V
const #531 = NameAndType	#718:#719;//  offer:(Ljava/lang/Object;)Z
const #532 = NameAndType	#407:#299;//  signalIdleWorkers:()V
const #533 = NameAndType	#331:#332;//  doSubmit:(Lscala/concurrent/forkjoin/ForkJoinTask;)V
const #534 = NameAndType	#720:#721;//  join:()Ljava/lang/Object;
const #535 = Asciz	scala/concurrent/forkjoin/ForkJoinPool$AdaptedRunnable;
const #536 = NameAndType	#318:#722;//  "<init>":(Ljava/lang/Runnable;Ljava/lang/Object;)V
const #537 = Asciz	scala/concurrent/forkjoin/ForkJoinPool$AdaptedCallable;
const #538 = NameAndType	#318:#723;//  "<init>":(Ljava/util/concurrent/Callable;)V
const #539 = Asciz	java/util/ArrayList;
const #540 = class	#724;	//  java/util/Collection
const #541 = NameAndType	#725:#357;//  size:()I
const #542 = NameAndType	#318:#307;//  "<init>":(I)V
const #543 = NameAndType	#726:#727;//  iterator:()Ljava/util/Iterator;
const #544 = class	#728;	//  java/util/Iterator
const #545 = NameAndType	#729:#313;//  hasNext:()Z
const #546 = NameAndType	#730:#721;//  next:()Ljava/lang/Object;
const #547 = Asciz	java/util/concurrent/Callable;
const #548 = NameAndType	#731:#719;//  add:(Ljava/lang/Object;)Z
const #549 = Asciz	scala/concurrent/forkjoin/ForkJoinPool$InvokeAll;
const #550 = NameAndType	#318:#732;//  "<init>":(Ljava/util/ArrayList;)V
const #551 = NameAndType	#334:#335;//  invoke:(Lscala/concurrent/forkjoin/ForkJoinTask;)Ljava/lang/Object;
const #552 = NameAndType	#393:#313;//  isTerminating:()Z
const #553 = NameAndType	#330:#299;//  createAndStartAddedWorkers:()V
const #554 = NameAndType	#426:#299;//  trimSpares:()V
const #555 = NameAndType	#733:#372;//  get:()J
const #556 = NameAndType	#734:#357;//  getAndClearStealCount:()I
const #557 = NameAndType	#735:#736;//  addAndGet:(J)J
const #558 = NameAndType	#737:#357;//  getQueueSize:()I
const #559 = NameAndType	#738:#313;//  isEmpty:()Z
const #560 = NameAndType	#739:#721;//  poll:()Ljava/lang/Object;
const #561 = Asciz	scala/concurrent/forkjoin/ForkJoinTask;
const #562 = NameAndType	#740:#382;//  drainTo:(Ljava/util/Collection;)I
const #563 = NameAndType	#381:#382;//  drainTasksTo:(Ljava/util/Collection;)I
const #564 = NameAndType	#371:#372;//  getStealCount:()J
const #565 = NameAndType	#375:#372;//  getQueuedTaskCount:()J
const #566 = NameAndType	#376:#357;//  getQueuedSubmissionCount:()I
const #567 = class	#741;	//  java/lang/Object
const #568 = Asciz	[;
const #569 = NameAndType	#386:#387;//  runStateToString:(I)Ljava/lang/String;
const #570 = Asciz	, parallelism = ;
const #571 = Asciz	, size = ;
const #572 = Asciz	, active = ;
const #573 = Asciz	, running = ;
const #574 = Asciz	, steals = ;
const #575 = NameAndType	#703:#742;//  append:(J)Ljava/lang/StringBuilder;
const #576 = Asciz	, tasks = ;
const #577 = Asciz	, submissions = ;
const #578 = Asciz	];
const #579 = Asciz	Running;
const #580 = Asciz	Shutting down;
const #581 = Asciz	Terminating;
const #582 = Asciz	Terminated;
const #583 = Asciz	java/lang/Error;
const #584 = Asciz	Unknown run state;
const #585 = NameAndType	#318:#707;//  "<init>":(Ljava/lang/String;)V
const #586 = NameAndType	#317:#316;//  transitionRunStateTo:(I)Z
const #587 = NameAndType	#400:#299;//  terminate:()V
const #588 = class	#743;	//  java/util/Collections
const #589 = NameAndType	#744:#390;//  emptyList:()Ljava/util/List;
const #590 = class	#745;	//  java/util/concurrent/TimeUnit
const #591 = NameAndType	#746:#736;//  toNanos:(J)J
const #592 = NameAndType	#392:#313;//  isTerminated:()Z
const #593 = class	#747;	//  java/util/concurrent/locks/Condition
const #594 = NameAndType	#748:#736;//  awaitNanos:(J)J
const #595 = NameAndType	#373:#374;//  updateStealCount:(Lscala/concurrent/forkjoin/ForkJoinWorkerThread;)V
const #596 = NameAndType	#749:#299;//  signalAll:()V
const #597 = NameAndType	#328:#299;//  tryShrinkWorkerArray:()V
const #598 = NameAndType	#424:#365;//  tryResumeSpare:(Z)Z
const #599 = NameAndType	#404:#299;//  stopAllWorkers:()V
const #600 = NameAndType	#402:#299;//  cancelQueuedSubmissions:()V
const #601 = NameAndType	#403:#299;//  cancelQueuedWorkerTasks:()V
const #602 = NameAndType	#405:#299;//  interruptUnterminatedWorkers:()V
const #603 = NameAndType	#377:#313;//  hasQueuedSubmissions:()Z
const #604 = NameAndType	#378:#379;//  pollSubmission:()Lscala/concurrent/forkjoin/ForkJoinTask;
const #605 = NameAndType	#750:#365;//  cancel:(Z)Z
const #606 = NameAndType	#751:#299;//  cancelTasks:()V
const #607 = NameAndType	#389:#313;//  shutdownNow:()Z
const #608 = NameAndType	#752:#299;//  interrupt:()V
const #609 = Asciz	java/lang/SecurityException;
const #610 = NameAndType	#273:#274;//  eventCount:J
const #611 = NameAndType	#272:#265;//  syncStack:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
const #612 = NameAndType	#753:#274;//  count:J
const #613 = NameAndType	#450:#449;//  casBarrierStack:(Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;)Z
const #614 = NameAndType	#754:#313;//  signal:()Z
const #615 = NameAndType	#730:#265;//  next:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
const #616 = NameAndType	#443:#444;//  casEventCount:(JJ)Z
const #617 = NameAndType	#406:#372;//  ensureSync:()J
const #618 = NameAndType	#423:#413;//  suspendIfSpare:(Lscala/concurrent/forkjoin/ForkJoinWorkerThread;)Z
const #619 = NameAndType	#755:#274;//  lastEventCount:J
const #620 = Asciz	scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
const #621 = NameAndType	#318:#756;//  "<init>":(JLscala/concurrent/forkjoin/ForkJoinWorkerThread;)V
const #622 = NameAndType	#757:#758;//  awaitSyncRelease:(Lscala/concurrent/forkjoin/ForkJoinPool;)V
const #623 = class	#759;	//  java/lang/Thread
const #624 = NameAndType	#760:#313;//  interrupted:()Z
const #625 = NameAndType	#761:#762;//  thread:Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
const #626 = NameAndType	#763:#764;//  hasQueuedTasks:([Lscala/concurrent/forkjoin/ForkJoinWorkerThread;)Z
const #627 = NameAndType	#264:#265;//  spareStack:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
const #628 = NameAndType	#419:#420;//  needSpare:(IZ)Z
const #629 = NameAndType	#765:#243;//  status:I
const #630 = NameAndType	#421:#316;//  tryAddSpare:(I)Z
const #631 = NameAndType	#766:#313;//  isReleasable:()Z
const #632 = NameAndType	#767:#313;//  tryLock:()Z
const #633 = NameAndType	#422:#307;//  createAndStartSpare:(I)V
const #634 = NameAndType	#448:#449;//  casSpareStack:(Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;)Z
const #635 = NameAndType	#768:#299;//  awaitSpareRelease:()V
const #636 = NameAndType	#306:#307;//  updateRunningCount:(I)V
const #637 = NameAndType	#388:#313;//  shutdown:()Z
const #638 = NameAndType	#769:#770;//  currentThread:()Ljava/lang/Thread;
const #639 = NameAndType	#771:#772;//  pool:Lscala/concurrent/forkjoin/ForkJoinPool;
const #640 = NameAndType	#417:#418;//  preBlock:(Lscala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;Z)Z
const #641 = NameAndType	#429:#430;//  awaitBlocker:(Lscala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;)V
const #642 = NameAndType	#773:#313;//  block:()Z
const #643 = NameAndType	#436:#437;//  getUnsafe:()Lsun/misc/Unsafe;
const #644 = Asciz	scala/concurrent/forkjoin/ForkJoinPool$1;
const #645 = Asciz	;
const #646 = class	#774;	//  java/security/AccessController
const #647 = NameAndType	#775:#776;//  doPrivileged:(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;
const #648 = Asciz	sun/misc/Unsafe;
const #649 = Asciz	java/security/PrivilegedActionException;
const #650 = NameAndType	#777:#778;//  getCause:()Ljava/lang/Throwable;
const #651 = Asciz	theUnsafe;
const #652 = class	#779;	//  java/lang/Class
const #653 = NameAndType	#780:#781;//  getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;
const #654 = class	#782;	//  java/lang/reflect/Field
const #655 = NameAndType	#783:#363;//  setAccessible:(Z)V
const #656 = NameAndType	#733:#784;//  get:(Ljava/lang/Object;)Ljava/lang/Object;
const #657 = NameAndType	#291:#292;//  _unsafe:Lsun/misc/Unsafe;
const #658 = Asciz	scala/concurrent/forkjoin/ForkJoinPool;
const #659 = NameAndType	#785:#786;//  objectFieldOffset:(Ljava/lang/reflect/Field;)J
const #660 = NameAndType	#293:#274;//  eventCountOffset:J
const #661 = NameAndType	#787:#788;//  compareAndSwapLong:(Ljava/lang/Object;JJJ)Z
const #662 = NameAndType	#294:#274;//  workerCountsOffset:J
const #663 = NameAndType	#789:#790;//  compareAndSwapInt:(Ljava/lang/Object;JII)Z
const #664 = NameAndType	#295:#274;//  runControlOffset:J
const #665 = NameAndType	#297:#274;//  spareStackOffset:J
const #666 = NameAndType	#791:#792;//  compareAndSwapObject:(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z
const #667 = NameAndType	#296:#274;//  syncStackOffset:J
const #668 = NameAndType	#339:#340;//  submit:(Ljava/util/concurrent/Callable;)Lscala/concurrent/forkjoin/ForkJoinTask;
const #669 = NameAndType	#339:#342;//  submit:(Ljava/lang/Runnable;Ljava/lang/Object;)Lscala/concurrent/forkjoin/ForkJoinTask;
const #670 = NameAndType	#339:#344;//  submit:(Ljava/lang/Runnable;)Lscala/concurrent/forkjoin/ForkJoinTask;
const #671 = Asciz	scala/concurrent/forkjoin/ForkJoinPool$DefaultForkJoinWorkerThreadFactory;
const #672 = Asciz	java/lang/RuntimePermission;
const #673 = Asciz	modifyThread;
const #674 = Asciz	java/util/concurrent/atomic/AtomicInteger;
const #675 = NameAndType	#441:#442;//  fieldOffset:(Ljava/lang/String;)J
const #676 = Asciz	java/lang/Throwable;
const #677 = Asciz	java/lang/RuntimeException;
const #678 = Asciz	Could not initialize intrinsics;
const #679 = NameAndType	#318:#793;//  "<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
const #680 = Asciz	java/util/concurrent/AbstractExecutorService;
const #681 = Asciz	scala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;
const #682 = Asciz	scala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;
const #683 = Asciz	java/lang/Thread$UncaughtExceptionHandler;
const #684 = Asciz	java/lang/InterruptedException;
const #685 = Asciz	java/lang/NoSuchFieldException;
const #686 = Asciz	java/lang/IllegalAccessException;
const #687 = Asciz	java/lang/System;
const #688 = Asciz	getSecurityManager;
const #689 = Asciz	()Ljava/lang/SecurityManager;;
const #690 = Asciz	java/lang/SecurityManager;
const #691 = Asciz	(Ljava/security/Permission;)V;
const #692 = Asciz	java/lang/Runtime;
const #693 = Asciz	getRuntime;
const #694 = Asciz	()Ljava/lang/Runtime;;
const #695 = Asciz	availableProcessors;
const #696 = Asciz	incrementAndGet;
const #697 = Asciz	newCondition;
const #698 = Asciz	()Ljava/util/concurrent/locks/Condition;;
const #699 = Asciz	newThread;
const #700 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinPool;)Lscala/concurrent/forkjoin/ForkJoinWorkerThread;;
const #701 = Asciz	poolIndex;
const #702 = Asciz	setDaemon;
const #703 = Asciz	append;
const #704 = Asciz	(Ljava/lang/String;)Ljava/lang/StringBuilder;;
const #705 = Asciz	(I)Ljava/lang/StringBuilder;;
const #706 = Asciz	setName;
const #707 = Asciz	(Ljava/lang/String;)V;
const #708 = Asciz	(Ljava/lang/Thread$UncaughtExceptionHandler;)V;
const #709 = Asciz	java/lang/Integer;
const #710 = Asciz	numberOfLeadingZeros;
const #711 = Asciz	java/lang/Math;
const #712 = Asciz	min;
const #713 = Asciz	arraycopy;
const #714 = Asciz	(Ljava/lang/Object;ILjava/lang/Object;II)V;
const #715 = Asciz	lock;
const #716 = Asciz	start;
const #717 = Asciz	unlock;
const #718 = Asciz	offer;
const #719 = Asciz	(Ljava/lang/Object;)Z;
const #720 = Asciz	join;
const #721 = Asciz	()Ljava/lang/Object;;
const #722 = Asciz	(Ljava/lang/Runnable;Ljava/lang/Object;)V;
const #723 = Asciz	(Ljava/util/concurrent/Callable;)V;
const #724 = Asciz	java/util/Collection;
const #725 = Asciz	size;
const #726 = Asciz	iterator;
const #727 = Asciz	()Ljava/util/Iterator;;
const #728 = Asciz	java/util/Iterator;
const #729 = Asciz	hasNext;
const #730 = Asciz	next;
const #731 = Asciz	add;
const #732 = Asciz	(Ljava/util/ArrayList;)V;
const #733 = Asciz	get;
const #734 = Asciz	getAndClearStealCount;
const #735 = Asciz	addAndGet;
const #736 = Asciz	(J)J;
const #737 = Asciz	getQueueSize;
const #738 = Asciz	isEmpty;
const #739 = Asciz	poll;
const #740 = Asciz	drainTo;
const #741 = Asciz	java/lang/Object;
const #742 = Asciz	(J)Ljava/lang/StringBuilder;;
const #743 = Asciz	java/util/Collections;
const #744 = Asciz	emptyList;
const #745 = Asciz	java/util/concurrent/TimeUnit;
const #746 = Asciz	toNanos;
const #747 = Asciz	java/util/concurrent/locks/Condition;
const #748 = Asciz	awaitNanos;
const #749 = Asciz	signalAll;
const #750 = Asciz	cancel;
const #751 = Asciz	cancelTasks;
const #752 = Asciz	interrupt;
const #753 = Asciz	count;
const #754 = Asciz	signal;
const #755 = Asciz	lastEventCount;
const #756 = Asciz	(JLscala/concurrent/forkjoin/ForkJoinWorkerThread;)V;
const #757 = Asciz	awaitSyncRelease;
const #758 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinPool;)V;
const #759 = Asciz	java/lang/Thread;
const #760 = Asciz	interrupted;
const #761 = Asciz	thread;
const #762 = Asciz	Lscala/concurrent/forkjoin/ForkJoinWorkerThread;;
const #763 = Asciz	hasQueuedTasks;
const #764 = Asciz	([Lscala/concurrent/forkjoin/ForkJoinWorkerThread;)Z;
const #765 = Asciz	status;
const #766 = Asciz	isReleasable;
const #767 = Asciz	tryLock;
const #768 = Asciz	awaitSpareRelease;
const #769 = Asciz	currentThread;
const #770 = Asciz	()Ljava/lang/Thread;;
const #771 = Asciz	pool;
const #772 = Asciz	Lscala/concurrent/forkjoin/ForkJoinPool;;
const #773 = Asciz	block;
const #774 = Asciz	java/security/AccessController;
const #775 = Asciz	doPrivileged;
const #776 = Asciz	(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;;
const #777 = Asciz	getCause;
const #778 = Asciz	()Ljava/lang/Throwable;;
const #779 = Asciz	java/lang/Class;
const #780 = Asciz	getDeclaredField;
const #781 = Asciz	(Ljava/lang/String;)Ljava/lang/reflect/Field;;
const #782 = Asciz	java/lang/reflect/Field;
const #783 = Asciz	setAccessible;
const #784 = Asciz	(Ljava/lang/Object;)Ljava/lang/Object;;
const #785 = Asciz	objectFieldOffset;
const #786 = Asciz	(Ljava/lang/reflect/Field;)J;
const #787 = Asciz	compareAndSwapLong;
const #788 = Asciz	(Ljava/lang/Object;JJJ)Z;
const #789 = Asciz	compareAndSwapInt;
const #790 = Asciz	(Ljava/lang/Object;JII)Z;
const #791 = Asciz	compareAndSwapObject;
const #792 = Asciz	(Ljava/lang/Object;JLjava/lang/Object;Ljava/lang/Object;)Z;
const #793 = Asciz	(Ljava/lang/String;Ljava/lang/Throwable;)V;

{
public static final scala.concurrent.forkjoin.ForkJoinPool$ForkJoinWorkerThreadFactory defaultForkJoinWorkerThreadFactory;

public volatile scala.concurrent.forkjoin.ForkJoinWorkerThread[] workers;

static final sun.misc.Unsafe _unsafe;

static final long eventCountOffset;

static final long workerCountsOffset;

static final long runControlOffset;

static final long syncStackOffset;

static final long spareStackOffset;

final void updateRunningCount(int);
  Code:
   Stack=4, Locals=3, Args_size=2
   0:	aload_0
   1:	aload_0
   2:	getfield	#6; //Field workerCounts:I
   5:	dup
   6:	istore_2
   7:	iload_2
   8:	iload_1
   9:	iadd
   10:	invokespecial	#7; //Method casWorkerCounts:(II)Z
   13:	ifeq	0
   16:	return

final boolean tryIncrementActiveCount();
  Code:
   Stack=4, Locals=2, Args_size=1
   0:	aload_0
   1:	getfield	#8; //Field runControl:I
   4:	istore_1
   5:	aload_0
   6:	iload_1
   7:	iload_1
   8:	iconst_1
   9:	iadd
   10:	invokespecial	#9; //Method casRunControl:(II)Z
   13:	ireturn

final boolean tryDecrementActiveCount();
  Code:
   Stack=3, Locals=3, Args_size=1
   0:	aload_0
   1:	getfield	#8; //Field runControl:I
   4:	istore_1
   5:	iload_1
   6:	iconst_1
   7:	isub
   8:	istore_2
   9:	aload_0
   10:	iload_1
   11:	iload_2
   12:	invokespecial	#9; //Method casRunControl:(II)Z
   15:	ifne	20
   18:	iconst_0
   19:	ireturn
   20:	iload_2
   21:	invokestatic	#10; //Method canTerminateOnShutdown:(I)Z
   24:	ifeq	31
   27:	aload_0
   28:	invokespecial	#11; //Method terminateOnShutdown:()V
   31:	iconst_1
   32:	ireturn

public scala.concurrent.forkjoin.ForkJoinPool();
  Code:
   Stack=3, Locals=1, Args_size=1
   0:	aload_0
   1:	invokestatic	#15; //Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
   4:	invokevirtual	#16; //Method java/lang/Runtime.availableProcessors:()I
   7:	getstatic	#17; //Field defaultForkJoinWorkerThreadFactory:Lscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;
   10:	invokespecial	#18; //Method "<init>":(ILscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;)V
   13:	return

public scala.concurrent.forkjoin.ForkJoinPool(int);
  Code:
   Stack=3, Locals=2, Args_size=2
   0:	aload_0
   1:	iload_1
   2:	getstatic	#17; //Field defaultForkJoinWorkerThreadFactory:Lscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;
   5:	invokespecial	#18; //Method "<init>":(ILscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;)V
   8:	return

public scala.concurrent.forkjoin.ForkJoinPool(scala.concurrent.forkjoin.ForkJoinPool$ForkJoinWorkerThreadFactory);
  Code:
   Stack=3, Locals=2, Args_size=2
   0:	aload_0
   1:	invokestatic	#15; //Method java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
   4:	invokevirtual	#16; //Method java/lang/Runtime.availableProcessors:()I
   7:	aload_1
   8:	invokespecial	#18; //Method "<init>":(ILscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;)V
   11:	return

public scala.concurrent.forkjoin.ForkJoinPool(int, scala.concurrent.forkjoin.ForkJoinPool$ForkJoinWorkerThreadFactory);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	invokespecial	#19; //Method java/util/concurrent/AbstractExecutorService."<init>":()V
   4:	iload_1
   5:	ifle	15
   8:	iload_1
   9:	sipush	32767
   12:	if_icmple	23
   15:	new	#20; //class java/lang/IllegalArgumentException
   18:	dup
   19:	invokespecial	#21; //Method java/lang/IllegalArgumentException."<init>":()V
   22:	athrow
   23:	aload_2
   24:	ifnonnull	35
   27:	new	#22; //class java/lang/NullPointerException
   30:	dup
   31:	invokespecial	#23; //Method java/lang/NullPointerException."<init>":()V
   34:	athrow
   35:	invokestatic	#24; //Method checkPermission:()V
   38:	aload_0
   39:	aload_2
   40:	putfield	#25; //Field factory:Lscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;
   43:	aload_0
   44:	iload_1
   45:	putfield	#26; //Field parallelism:I
   48:	aload_0
   49:	sipush	32767
   52:	putfield	#27; //Field maxPoolSize:I
   55:	aload_0
   56:	iconst_1
   57:	putfield	#28; //Field maintainsParallelism:Z
   60:	aload_0
   61:	getstatic	#29; //Field poolNumberGenerator:Ljava/util/concurrent/atomic/AtomicInteger;
   64:	invokevirtual	#30; //Method java/util/concurrent/atomic/AtomicInteger.incrementAndGet:()I
   67:	putfield	#31; //Field poolNumber:I
   70:	aload_0
   71:	new	#32; //class java/util/concurrent/locks/ReentrantLock
   74:	dup
   75:	invokespecial	#33; //Method java/util/concurrent/locks/ReentrantLock."<init>":()V
   78:	putfield	#34; //Field workerLock:Ljava/util/concurrent/locks/ReentrantLock;
   81:	aload_0
   82:	aload_0
   83:	getfield	#34; //Field workerLock:Ljava/util/concurrent/locks/ReentrantLock;
   86:	invokevirtual	#35; //Method java/util/concurrent/locks/ReentrantLock.newCondition:()Ljava/util/concurrent/locks/Condition;
   89:	putfield	#36; //Field termination:Ljava/util/concurrent/locks/Condition;
   92:	aload_0
   93:	new	#37; //class java/util/concurrent/atomic/AtomicLong
   96:	dup
   97:	invokespecial	#38; //Method java/util/concurrent/atomic/AtomicLong."<init>":()V
   100:	putfield	#39; //Field stealCount:Ljava/util/concurrent/atomic/AtomicLong;
   103:	aload_0
   104:	new	#40; //class scala/concurrent/forkjoin/LinkedTransferQueue
   107:	dup
   108:	invokespecial	#41; //Method scala/concurrent/forkjoin/LinkedTransferQueue."<init>":()V
   111:	putfield	#42; //Field submissionQueue:Lscala/concurrent/forkjoin/LinkedTransferQueue;
   114:	return

public static scala.concurrent.forkjoin.ForkJoinWorkerThread[] copyOfWorkers(scala.concurrent.forkjoin.ForkJoinWorkerThread[], int);
  Code:
   Stack=6, Locals=3, Args_size=2
   0:	iload_1
   1:	anewarray	#59; //class scala/concurrent/forkjoin/ForkJoinWorkerThread
   4:	astore_2
   5:	aload_0
   6:	iconst_0
   7:	aload_2
   8:	iconst_0
   9:	iload_1
   10:	aload_0
   11:	arraylength
   12:	invokestatic	#60; //Method java/lang/Math.min:(II)I
   15:	invokestatic	#61; //Method java/lang/System.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V
   18:	aload_2
   19:	areturn

final void ensureWorkerInitialization();
  Code:
   Stack=3, Locals=7, Args_size=1
   0:	aload_0
   1:	getfield	#62; //Field workers:[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   4:	astore_1
   5:	aload_1
   6:	ifnonnull	98
   9:	aload_0
   10:	getfield	#34; //Field workerLock:Ljava/util/concurrent/locks/ReentrantLock;
   13:	astore_2
   14:	aload_2
   15:	invokevirtual	#65; //Method java/util/concurrent/locks/ReentrantLock.lock:()V
   18:	aload_0
   19:	getfield	#62; //Field workers:[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   22:	astore_1
   23:	aload_1
   24:	ifnonnull	82
   27:	aload_0
   28:	getfield	#26; //Field parallelism:I
   31:	istore_3
   32:	aload_0
   33:	iload_3
   34:	invokespecial	#66; //Method ensureWorkerArrayCapacity:(I)[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   37:	astore_1
   38:	iconst_0
   39:	istore	4
   41:	iload	4
   43:	iload_3
   44:	if_icmpge	82
   47:	aload_0
   48:	iload	4
   50:	invokespecial	#67; //Method createWorker:(I)Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   53:	astore	5
   55:	aload	5
   57:	ifnull	76
   60:	aload_1
   61:	iload	4
   63:	aload	5
   65:	aastore
   66:	aload	5
   68:	invokevirtual	#68; //Method scala/concurrent/forkjoin/ForkJoinWorkerThread.start:()V
   71:	aload_0
   72:	iconst_1
   73:	invokespecial	#69; //Method updateWorkerCount:(I)V
   76:	iinc	4, 1
   79:	goto	41
   82:	aload_2
   83:	invokevirtual	#70; //Method java/util/concurrent/locks/ReentrantLock.unlock:()V
   86:	goto	98
   89:	astore	6
   91:	aload_2
   92:	invokevirtual	#70; //Method java/util/concurrent/locks/ReentrantLock.unlock:()V
   95:	aload	6
   97:	athrow
   98:	return
  Exception table:
   from   to  target type
    18    82    89   any
    89    91    89   any

public java.lang.Object invoke(scala.concurrent.forkjoin.ForkJoinTask);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokespecial	#81; //Method doSubmit:(Lscala/concurrent/forkjoin/ForkJoinTask;)V
   5:	aload_1
   6:	invokevirtual	#82; //Method scala/concurrent/forkjoin/ForkJoinTask.join:()Ljava/lang/Object;
   9:	areturn
  Signature: length = 0x2
   01 50 

public void execute(scala.concurrent.forkjoin.ForkJoinTask);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokespecial	#81; //Method doSubmit:(Lscala/concurrent/forkjoin/ForkJoinTask;)V
   5:	return
  Signature: length = 0x2
   01 4D 

public void execute(java.lang.Runnable);
  Code:
   Stack=5, Locals=2, Args_size=2
   0:	aload_0
   1:	new	#83; //class scala/concurrent/forkjoin/ForkJoinPool$AdaptedRunnable
   4:	dup
   5:	aload_1
   6:	aconst_null
   7:	invokespecial	#84; //Method scala/concurrent/forkjoin/ForkJoinPool$AdaptedRunnable."<init>":(Ljava/lang/Runnable;Ljava/lang/Object;)V
   10:	invokespecial	#81; //Method doSubmit:(Lscala/concurrent/forkjoin/ForkJoinTask;)V
   13:	return

public scala.concurrent.forkjoin.ForkJoinTask submit(java.util.concurrent.Callable);
  Code:
   Stack=3, Locals=3, Args_size=2
   0:	new	#85; //class scala/concurrent/forkjoin/ForkJoinPool$AdaptedCallable
   3:	dup
   4:	aload_1
   5:	invokespecial	#86; //Method scala/concurrent/forkjoin/ForkJoinPool$AdaptedCallable."<init>":(Ljava/util/concurrent/Callable;)V
   8:	astore_2
   9:	aload_0
   10:	aload_2
   11:	invokespecial	#81; //Method doSubmit:(Lscala/concurrent/forkjoin/ForkJoinTask;)V
   14:	aload_2
   15:	areturn
  Signature: length = 0x2
   01 55 

public scala.concurrent.forkjoin.ForkJoinTask submit(java.lang.Runnable, java.lang.Object);
  Code:
   Stack=4, Locals=4, Args_size=3
   0:	new	#83; //class scala/concurrent/forkjoin/ForkJoinPool$AdaptedRunnable
   3:	dup
   4:	aload_1
   5:	aload_2
   6:	invokespecial	#84; //Method scala/concurrent/forkjoin/ForkJoinPool$AdaptedRunnable."<init>":(Ljava/lang/Runnable;Ljava/lang/Object;)V
   9:	astore_3
   10:	aload_0
   11:	aload_3
   12:	invokespecial	#81; //Method doSubmit:(Lscala/concurrent/forkjoin/ForkJoinTask;)V
   15:	aload_3
   16:	areturn
  Signature: length = 0x2
   01 57 

public scala.concurrent.forkjoin.ForkJoinTask submit(java.lang.Runnable);
  Code:
   Stack=4, Locals=3, Args_size=2
   0:	new	#83; //class scala/concurrent/forkjoin/ForkJoinPool$AdaptedRunnable
   3:	dup
   4:	aload_1
   5:	aconst_null
   6:	invokespecial	#84; //Method scala/concurrent/forkjoin/ForkJoinPool$AdaptedRunnable."<init>":(Ljava/lang/Runnable;Ljava/lang/Object;)V
   9:	astore_2
   10:	aload_0
   11:	aload_2
   12:	invokespecial	#81; //Method doSubmit:(Lscala/concurrent/forkjoin/ForkJoinTask;)V
   15:	aload_2
   16:	areturn
  Signature: length = 0x2
   01 59 

public java.util.List invokeAll(java.util.Collection);
  Code:
   Stack=4, Locals=5, Args_size=2
   0:	new	#87; //class java/util/ArrayList
   3:	dup
   4:	aload_1
   5:	invokeinterface	#88,  1; //InterfaceMethod java/util/Collection.size:()I
   10:	invokespecial	#89; //Method java/util/ArrayList."<init>":(I)V
   13:	astore_2
   14:	aload_1
   15:	invokeinterface	#90,  1; //InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
   20:	astore_3
   21:	aload_3
   22:	invokeinterface	#91,  1; //InterfaceMethod java/util/Iterator.hasNext:()Z
   27:	ifeq	58
   30:	aload_3
   31:	invokeinterface	#92,  1; //InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
   36:	checkcast	#93; //class java/util/concurrent/Callable
   39:	astore	4
   41:	aload_2
   42:	new	#85; //class scala/concurrent/forkjoin/ForkJoinPool$AdaptedCallable
   45:	dup
   46:	aload	4
   48:	invokespecial	#86; //Method scala/concurrent/forkjoin/ForkJoinPool$AdaptedCallable."<init>":(Ljava/util/concurrent/Callable;)V
   51:	invokevirtual	#94; //Method java/util/ArrayList.add:(Ljava/lang/Object;)Z
   54:	pop
   55:	goto	21
   58:	aload_0
   59:	new	#95; //class scala/concurrent/forkjoin/ForkJoinPool$InvokeAll
   62:	dup
   63:	aload_2
   64:	invokespecial	#96; //Method scala/concurrent/forkjoin/ForkJoinPool$InvokeAll."<init>":(Ljava/util/ArrayList;)V
   67:	invokevirtual	#97; //Method invoke:(Lscala/concurrent/forkjoin/ForkJoinTask;)Ljava/lang/Object;
   70:	pop
   71:	aload_2
   72:	areturn
  Signature: length = 0x2
   01 5C 

public scala.concurrent.forkjoin.ForkJoinPool$ForkJoinWorkerThreadFactory getFactory();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#25; //Field factory:Lscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;
   4:	areturn

public java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler();
  Code:
   Stack=1, Locals=4, Args_size=1
   0:	aload_0
   1:	getfield	#34; //Field workerLock:Ljava/util/concurrent/locks/ReentrantLock;
   4:	astore_2
   5:	aload_2
   6:	invokevirtual	#65; //Method java/util/concurrent/locks/ReentrantLock.lock:()V
   9:	aload_0
   10:	getfield	#43; //Field ueh:Ljava/lang/Thread$UncaughtExceptionHandler;
   13:	astore_1
   14:	aload_2
   15:	invokevirtual	#70; //Method java/util/concurrent/locks/ReentrantLock.unlock:()V
   18:	goto	28
   21:	astore_3
   22:	aload_2
   23:	invokevirtual	#70; //Method java/util/concurrent/locks/ReentrantLock.unlock:()V
   26:	aload_3
   27:	athrow
   28:	aload_1
   29:	areturn
  Exception table:
   from   to  target type
     9    14    21   any
    21    22    21   any

public java.lang.Thread$UncaughtExceptionHandler setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler);
  Code:
   Stack=2, Locals=8, Args_size=2
   0:	invokestatic	#24; //Method checkPermission:()V
   3:	aconst_null
   4:	astore_2
   5:	aload_0
   6:	getfield	#34; //Field workerLock:Ljava/util/concurrent/locks/ReentrantLock;
   9:	astore_3
   10:	aload_3
   11:	invokevirtual	#65; //Method java/util/concurrent/locks/ReentrantLock.lock:()V
   14:	aload_0
   15:	getfield	#43; //Field ueh:Ljava/lang/Thread$UncaughtExceptionHandler;
   18:	astore_2
   19:	aload_0
   20:	aload_1
   21:	putfield	#43; //Field ueh:Ljava/lang/Thread$UncaughtExceptionHandler;
   24:	aload_0
   25:	getfield	#62; //Field workers:[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   28:	astore	4
   30:	aload	4
   32:	ifnull	70
   35:	iconst_0
   36:	istore	5
   38:	iload	5
   40:	aload	4
   42:	arraylength
   43:	if_icmpge	70
   46:	aload	4
   48:	iload	5
   50:	aaload
   51:	astore	6
   53:	aload	6
   55:	ifnull	64
   58:	aload	6
   60:	aload_1
   61:	invokevirtual	#57; //Method scala/concurrent/forkjoin/ForkJoinWorkerThread.setUncaughtExceptionHandler:(Ljava/lang/Thread$UncaughtExceptionHandler;)V
   64:	iinc	5, 1
   67:	goto	38
   70:	aload_3
   71:	invokevirtual	#70; //Method java/util/concurrent/locks/ReentrantLock.unlock:()V
   74:	goto	86
   77:	astore	7
   79:	aload_3
   80:	invokevirtual	#70; //Method java/util/concurrent/locks/ReentrantLock.unlock:()V
   83:	aload	7
   85:	athrow
   86:	aload_2
   87:	areturn
  Exception table:
   from   to  target type
    14    70    77   any
    77    79    77   any

public void setParallelism(int);
  Code:
   Stack=2, Locals=5, Args_size=2
   0:	invokestatic	#24; //Method checkPermission:()V
   3:	iload_1
   4:	ifle	15
   7:	iload_1
   8:	aload_0
   9:	getfield	#27; //Field maxPoolSize:I
   12:	if_icmple	23
   15:	new	#20; //class java/lang/IllegalArgumentException
   18:	dup
   19:	invokespecial	#21; //Method java/lang/IllegalArgumentException."<init>":()V
   22:	athrow
   23:	aload_0
   24:	getfield	#34; //Field workerLock:Ljava/util/concurrent/locks/ReentrantLock;
   27:	astore_2
   28:	aload_2
   29:	invokevirtual	#65; //Method java/util/concurrent/locks/ReentrantLock.lock:()V
   32:	aload_0
   33:	invokevirtual	#98; //Method isTerminating:()Z
   36:	ifne	65
   39:	aload_0
   40:	getfield	#26; //Field parallelism:I
   43:	istore_3
   44:	aload_0
   45:	iload_1
   46:	putfield	#26; //Field parallelism:I
   49:	iload_1
   50:	iload_3
   51:	if_icmple	61
   54:	aload_0
   55:	invokespecial	#99; //Method createAndStartAddedWorkers:()V
   58:	goto	65
   61:	aload_0
   62:	invokespecial	#100; //Method trimSpares:()V
   65:	aload_2
   66:	invokevirtual	#70; //Method java/util/concurrent/locks/ReentrantLock.unlock:()V
   69:	goto	81
   72:	astore	4
   74:	aload_2
   75:	invokevirtual	#70; //Method java/util/concurrent/locks/ReentrantLock.unlock:()V
   78:	aload	4
   80:	athrow
   81:	aload_0
   82:	invokespecial	#80; //Method signalIdleWorkers:()V
   85:	return
  Exception table:
   from   to  target type
    32    65    72   any
    72    74    72   any

public int getParallelism();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#26; //Field parallelism:I
   4:	ireturn

public int getPoolSize();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#6; //Field workerCounts:I
   4:	invokestatic	#72; //Method totalCountOf:(I)I
   7:	ireturn

public int getMaximumPoolSize();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#27; //Field maxPoolSize:I
   4:	ireturn

public void setMaximumPoolSize(int);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	iload_1
   1:	iflt	11
   4:	iload_1
   5:	sipush	32767
   8:	if_icmple	19
   11:	new	#20; //class java/lang/IllegalArgumentException
   14:	dup
   15:	invokespecial	#21; //Method java/lang/IllegalArgumentException."<init>":()V
   18:	athrow
   19:	aload_0
   20:	iload_1
   21:	putfield	#27; //Field maxPoolSize:I
   24:	return

public boolean getMaintainsParallelism();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#28; //Field maintainsParallelism:Z
   4:	ireturn

public void setMaintainsParallelism(boolean);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	iload_1
   2:	putfield	#28; //Field maintainsParallelism:Z
   5:	return

public boolean setAsyncMode(boolean);
  Code:
   Stack=2, Locals=6, Args_size=2
   0:	aload_0
   1:	getfield	#47; //Field locallyFifo:Z
   4:	istore_2
   5:	aload_0
   6:	iload_1
   7:	putfield	#47; //Field locallyFifo:Z
   10:	aload_0
   11:	getfield	#62; //Field workers:[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   14:	astore_3
   15:	aload_3
   16:	ifnull	52
   19:	iconst_0
   20:	istore	4
   22:	iload	4
   24:	aload_3
   25:	arraylength
   26:	if_icmpge	52
   29:	aload_3
   30:	iload	4
   32:	aaload
   33:	astore	5
   35:	aload	5
   37:	ifnull	46
   40:	aload	5
   42:	iload_1
   43:	invokevirtual	#48; //Method scala/concurrent/forkjoin/ForkJoinWorkerThread.setAsyncMode:(Z)V
   46:	iinc	4, 1
   49:	goto	22
   52:	iload_2
   53:	ireturn

public boolean getAsyncMode();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#47; //Field locallyFifo:Z
   4:	ireturn

public int getRunningThreadCount();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#6; //Field workerCounts:I
   4:	invokestatic	#73; //Method runningCountOf:(I)I
   7:	ireturn

public int getActiveThreadCount();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#8; //Field runControl:I
   4:	invokestatic	#13; //Method activeCountOf:(I)I
   7:	ireturn

final int getIdleThreadCount();
  Code:
   Stack=2, Locals=2, Args_size=1
   0:	aload_0
   1:	getfield	#6; //Field workerCounts:I
   4:	invokestatic	#73; //Method runningCountOf:(I)I
   7:	aload_0
   8:	getfield	#8; //Field runControl:I
   11:	invokestatic	#13; //Method activeCountOf:(I)I
   14:	isub
   15:	istore_1
   16:	iload_1
   17:	ifgt	24
   20:	iconst_0
   21:	goto	25
   24:	iload_1
   25:	ireturn

public boolean isQuiescent();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#8; //Field runControl:I
   4:	invokestatic	#13; //Method activeCountOf:(I)I
   7:	ifne	14
   10:	iconst_1
   11:	goto	15
   14:	iconst_0
   15:	ireturn

public long getStealCount();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#39; //Field stealCount:Ljava/util/concurrent/atomic/AtomicLong;
   4:	invokevirtual	#101; //Method java/util/concurrent/atomic/AtomicLong.get:()J
   7:	lreturn

public long getQueuedTaskCount();
  Code:
   Stack=4, Locals=6, Args_size=1
   0:	lconst_0
   1:	lstore_1
   2:	aload_0
   3:	getfield	#62; //Field workers:[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   6:	astore_3
   7:	aload_3
   8:	ifnull	47
   11:	iconst_0
   12:	istore	4
   14:	iload	4
   16:	aload_3
   17:	arraylength
   18:	if_icmpge	47
   21:	aload_3
   22:	iload	4
   24:	aaload
   25:	astore	5
   27:	aload	5
   29:	ifnull	41
   32:	lload_1
   33:	aload	5
   35:	invokevirtual	#104; //Method scala/concurrent/forkjoin/ForkJoinWorkerThread.getQueueSize:()I
   38:	i2l
   39:	ladd
   40:	lstore_1
   41:	iinc	4, 1
   44:	goto	14
   47:	lload_1
   48:	lreturn

public int getQueuedSubmissionCount();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#42; //Field submissionQueue:Lscala/concurrent/forkjoin/LinkedTransferQueue;
   4:	invokevirtual	#105; //Method scala/concurrent/forkjoin/LinkedTransferQueue.size:()I
   7:	ireturn

public boolean hasQueuedSubmissions();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#42; //Field submissionQueue:Lscala/concurrent/forkjoin/LinkedTransferQueue;
   4:	invokevirtual	#106; //Method scala/concurrent/forkjoin/LinkedTransferQueue.isEmpty:()Z
   7:	ifne	14
   10:	iconst_1
   11:	goto	15
   14:	iconst_0
   15:	ireturn

protected scala.concurrent.forkjoin.ForkJoinTask pollSubmission();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#42; //Field submissionQueue:Lscala/concurrent/forkjoin/LinkedTransferQueue;
   4:	invokevirtual	#107; //Method scala/concurrent/forkjoin/LinkedTransferQueue.poll:()Ljava/lang/Object;
   7:	checkcast	#108; //class scala/concurrent/forkjoin/ForkJoinTask
   10:	areturn
  Signature: length = 0x2
   01 7C 

protected int drainTasksTo(java.util.Collection);
  Code:
   Stack=3, Locals=6, Args_size=2
   0:	aload_0
   1:	getfield	#42; //Field submissionQueue:Lscala/concurrent/forkjoin/LinkedTransferQueue;
   4:	aload_1
   5:	invokevirtual	#109; //Method scala/concurrent/forkjoin/LinkedTransferQueue.drainTo:(Ljava/util/Collection;)I
   8:	istore_2
   9:	aload_0
   10:	getfield	#62; //Field workers:[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   13:	astore_3
   14:	aload_3
   15:	ifnull	54
   18:	iconst_0
   19:	istore	4
   21:	iload	4
   23:	aload_3
   24:	arraylength
   25:	if_icmpge	54
   28:	aload_3
   29:	iload	4
   31:	aaload
   32:	astore	5
   34:	aload	5
   36:	ifnull	48
   39:	iload_2
   40:	aload	5
   42:	aload_1
   43:	invokevirtual	#110; //Method scala/concurrent/forkjoin/ForkJoinWorkerThread.drainTasksTo:(Ljava/util/Collection;)I
   46:	iadd
   47:	istore_2
   48:	iinc	4, 1
   51:	goto	21
   54:	iload_2
   55:	ireturn
  Signature: length = 0x2
   01 7F 

public java.lang.String toString();
  Code:
   Stack=3, Locals=10, Args_size=1
   0:	aload_0
   1:	getfield	#26; //Field parallelism:I
   4:	istore_1
   5:	aload_0
   6:	getfield	#6; //Field workerCounts:I
   9:	istore_2
   10:	aload_0
   11:	getfield	#8; //Field runControl:I
   14:	istore_3
   15:	aload_0
   16:	invokevirtual	#111; //Method getStealCount:()J
   19:	lstore	4
   21:	aload_0
   22:	invokevirtual	#112; //Method getQueuedTaskCount:()J
   25:	lstore	6
   27:	aload_0
   28:	invokevirtual	#113; //Method getQueuedSubmissionCount:()I
   31:	i2l
   32:	lstore	8
   34:	new	#49; //class java/lang/StringBuilder
   37:	dup
   38:	invokespecial	#50; //Method java/lang/StringBuilder."<init>":()V
   41:	aload_0
   42:	invokespecial	#114; //Method java/lang/Object.toString:()Ljava/lang/String;
   45:	invokevirtual	#52; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   48:	ldc	#115; //String [
   50:	invokevirtual	#52; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   53:	iload_3
   54:	invokestatic	#12; //Method runStateOf:(I)I
   57:	invokestatic	#116; //Method runStateToString:(I)Ljava/lang/String;
   60:	invokevirtual	#52; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   63:	ldc	#117; //String , parallelism = 
   65:	invokevirtual	#52; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   68:	iload_1
   69:	invokevirtual	#53; //Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
   72:	ldc	#118; //String , size = 
   74:	invokevirtual	#52; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   77:	iload_2
   78:	invokestatic	#72; //Method totalCountOf:(I)I
   81:	invokevirtual	#53; //Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
   84:	ldc	#119; //String , active = 
   86:	invokevirtual	#52; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   89:	iload_3
   90:	invokestatic	#13; //Method activeCountOf:(I)I
   93:	invokevirtual	#53; //Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
   96:	ldc	#120; //String , running = 
   98:	invokevirtual	#52; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   101:	iload_2
   102:	invokestatic	#73; //Method runningCountOf:(I)I
   105:	invokevirtual	#53; //Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;
   108:	ldc	#121; //String , steals = 
   110:	invokevirtual	#52; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   113:	lload	4
   115:	invokevirtual	#122; //Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
   118:	ldc	#123; //String , tasks = 
   120:	invokevirtual	#52; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   123:	lload	6
   125:	invokevirtual	#122; //Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
   128:	ldc	#124; //String , submissions = 
   130:	invokevirtual	#52; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   133:	lload	8
   135:	invokevirtual	#122; //Method java/lang/StringBuilder.append:(J)Ljava/lang/StringBuilder;
   138:	ldc	#125; //String ]
   140:	invokevirtual	#52; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   143:	invokevirtual	#55; //Method java/lang/StringBuilder.toString:()Ljava/lang/String;
   146:	areturn

public void shutdown();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	invokestatic	#24; //Method checkPermission:()V
   3:	aload_0
   4:	iconst_1
   5:	invokespecial	#133; //Method transitionRunStateTo:(I)Z
   8:	pop
   9:	aload_0
   10:	getfield	#8; //Field runControl:I
   13:	invokestatic	#10; //Method canTerminateOnShutdown:(I)Z
   16:	ifeq	23
   19:	aload_0
   20:	invokespecial	#11; //Method terminateOnShutdown:()V
   23:	return

public java.util.List shutdownNow();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	invokestatic	#24; //Method checkPermission:()V
   3:	aload_0
   4:	invokespecial	#134; //Method terminate:()V
   7:	invokestatic	#135; //Method java/util/Collections.emptyList:()Ljava/util/List;
   10:	areturn
  Signature: length = 0x2
   01 FFFFFF87 

public boolean isTerminated();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#8; //Field runControl:I
   4:	invokestatic	#12; //Method runStateOf:(I)I
   7:	iconst_3
   8:	if_icmpne	15
   11:	iconst_1
   12:	goto	16
   15:	iconst_0
   16:	ireturn

public boolean isTerminating();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#8; //Field runControl:I
   4:	invokestatic	#12; //Method runStateOf:(I)I
   7:	iconst_2
   8:	if_icmplt	15
   11:	iconst_1
   12:	goto	16
   15:	iconst_0
   16:	ireturn

public boolean isShutdown();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#8; //Field runControl:I
   4:	invokestatic	#12; //Method runStateOf:(I)I
   7:	iconst_1
   8:	if_icmplt	15
   11:	iconst_1
   12:	goto	16
   15:	iconst_0
   16:	ireturn

public boolean awaitTermination(long, java.util.concurrent.TimeUnit)   throws java.lang.InterruptedException;
  Code:
   Stack=4, Locals=9, Args_size=3
   0:	aload_3
   1:	lload_1
   2:	invokevirtual	#136; //Method java/util/concurrent/TimeUnit.toNanos:(J)J
   5:	lstore	4
   7:	aload_0
   8:	getfield	#34; //Field workerLock:Ljava/util/concurrent/locks/ReentrantLock;
   11:	astore	6
   13:	aload	6
   15:	invokevirtual	#65; //Method java/util/concurrent/locks/ReentrantLock.lock:()V
   18:	aload_0
   19:	invokevirtual	#137; //Method isTerminated:()Z
   22:	ifeq	36
   25:	iconst_1
   26:	istore	7
   28:	aload	6
   30:	invokevirtual	#70; //Method java/util/concurrent/locks/ReentrantLock.unlock:()V
   33:	iload	7
   35:	ireturn
   36:	lload	4
   38:	lconst_0
   39:	lcmp
   40:	ifgt	54
   43:	iconst_0
   44:	istore	7
   46:	aload	6
   48:	invokevirtual	#70; //Method java/util/concurrent/locks/ReentrantLock.unlock:()V
   51:	iload	7
   53:	ireturn
   54:	aload_0
   55:	getfield	#36; //Field termination:Ljava/util/concurrent/locks/Condition;
   58:	lload	4
   60:	invokeinterface	#138,  3; //InterfaceMethod java/util/concurrent/locks/Condition.awaitNanos:(J)J
   65:	lstore	4
   67:	goto	18
   70:	astore	8
   72:	aload	6
   74:	invokevirtual	#70; //Method java/util/concurrent/locks/ReentrantLock.unlock:()V
   77:	aload	8
   79:	athrow
  Exception table:
   from   to  target type
    18    28    70   any
    36    46    70   any
    54    72    70   any
  Exceptions: 
   throws java.lang.InterruptedException
final void workerTerminated(scala.concurrent.forkjoin.ForkJoinWorkerThread);
  Code:
   Stack=3, Locals=6, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokespecial	#139; //Method updateStealCount:(Lscala/concurrent/forkjoin/ForkJoinWorkerThread;)V
   5:	aload_0
   6:	iconst_m1
   7:	invokespecial	#69; //Method updateWorkerCount:(I)V
   10:	aload_0
   11:	getfield	#34; //Field workerLock:Ljava/util/concurrent/locks/ReentrantLock;
   14:	astore_2
   15:	aload_2
   16:	invokevirtual	#65; //Method java/util/concurrent/locks/ReentrantLock.lock:()V
   19:	aload_0
   20:	getfield	#62; //Field workers:[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   23:	astore_3
   24:	aload_3
   25:	ifnull	108
   28:	aload_1
   29:	getfield	#45; //Field scala/concurrent/forkjoin/ForkJoinWorkerThread.poolIndex:I
   32:	istore	4
   34:	iload	4
   36:	iflt	59
   39:	iload	4
   41:	aload_3
   42:	arraylength
   43:	if_icmpge	59
   46:	aload_3
   47:	iload	4
   49:	aaload
   50:	aload_1
   51:	if_acmpne	59
   54:	aload_3
   55:	iload	4
   57:	aconst_null
   58:	aastore
   59:	aload_0
   60:	getfield	#6; //Field workerCounts:I
   63:	invokestatic	#72; //Method totalCountOf:(I)I
   66:	ifne	91
   69:	aload_0
   70:	invokespecial	#134; //Method terminate:()V
   73:	aload_0
   74:	iconst_3
   75:	invokespecial	#133; //Method transitionRunStateTo:(I)Z
   78:	pop
   79:	aload_0
   80:	getfield	#36; //Field termination:Ljava/util/concurrent/locks/Condition;
   83:	invokeinterface	#140,  1; //InterfaceMethod java/util/concurrent/locks/Condition.signalAll:()V
   88:	goto	108
   91:	aload_0
   92:	invokevirtual	#98; //Method isTerminating:()Z
   95:	ifne	108
   98:	aload_0
   99:	invokespecial	#141; //Method tryShrinkWorkerArray:()V
   102:	aload_0
   103:	iconst_1
   104:	invokespecial	#142; //Method tryResumeSpare:(Z)Z
   107:	pop
   108:	aload_2
   109:	invokevirtual	#70; //Method java/util/concurrent/locks/ReentrantLock.unlock:()V
   112:	goto	124
   115:	astore	5
   117:	aload_2
   118:	invokevirtual	#70; //Method java/util/concurrent/locks/ReentrantLock.unlock:()V
   121:	aload	5
   123:	athrow
   124:	aload_0
   125:	invokespecial	#80; //Method signalIdleWorkers:()V
   128:	return
  Exception table:
   from   to  target type
    19   108   115   any
   115   117   115   any

final long ensureSync();
  Code:
   Stack=4, Locals=4, Args_size=1
   0:	aload_0
   1:	getfield	#155; //Field eventCount:J
   4:	lstore_1
   5:	aload_0
   6:	getfield	#156; //Field syncStack:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
   9:	dup
   10:	astore_3
   11:	ifnull	49
   14:	aload_3
   15:	getfield	#157; //Field scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.count:J
   18:	lload_1
   19:	lcmp
   20:	ifge	49
   23:	aload_0
   24:	aload_3
   25:	aconst_null
   26:	invokespecial	#158; //Method casBarrierStack:(Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;)Z
   29:	ifeq	5
   32:	aload_3
   33:	invokevirtual	#159; //Method scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.signal:()Z
   36:	pop
   37:	aload_3
   38:	getfield	#160; //Field scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.next:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
   41:	dup
   42:	astore_3
   43:	ifnonnull	32
   46:	goto	49
   49:	lload_1
   50:	lreturn

final void signalWork();
  Code:
   Stack=7, Locals=4, Args_size=1
   0:	aload_0
   1:	getfield	#156; //Field syncStack:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
   4:	ifnull	65
   7:	aload_0
   8:	aload_0
   9:	getfield	#155; //Field eventCount:J
   12:	dup2
   13:	lstore_1
   14:	lload_1
   15:	lconst_1
   16:	ladd
   17:	invokespecial	#161; //Method casEventCount:(JJ)Z
   20:	ifeq	65
   23:	aload_0
   24:	getfield	#156; //Field syncStack:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
   27:	dup
   28:	astore_3
   29:	ifnull	65
   32:	aload_3
   33:	getfield	#157; //Field scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.count:J
   36:	lload_1
   37:	lcmp
   38:	ifgt	65
   41:	aload_0
   42:	aload_3
   43:	aload_3
   44:	getfield	#160; //Field scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.next:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
   47:	invokespecial	#158; //Method casBarrierStack:(Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;)Z
   50:	ifeq	60
   53:	aload_3
   54:	invokevirtual	#159; //Method scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.signal:()Z
   57:	ifne	65
   60:	aload_0
   61:	invokevirtual	#162; //Method ensureSync:()J
   64:	pop2
   65:	return

final void sync(scala.concurrent.forkjoin.ForkJoinWorkerThread);
  Code:
   Stack=5, Locals=8, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokespecial	#139; //Method updateStealCount:(Lscala/concurrent/forkjoin/ForkJoinWorkerThread;)V
   5:	aload_1
   6:	invokevirtual	#163; //Method scala/concurrent/forkjoin/ForkJoinWorkerThread.isShutdown:()Z
   9:	ifne	131
   12:	aload_0
   13:	invokevirtual	#98; //Method isTerminating:()Z
   16:	ifne	131
   19:	aload_0
   20:	aload_1
   21:	invokespecial	#164; //Method suspendIfSpare:(Lscala/concurrent/forkjoin/ForkJoinWorkerThread;)Z
   24:	ifne	131
   27:	aload_1
   28:	getfield	#165; //Field scala/concurrent/forkjoin/ForkJoinWorkerThread.lastEventCount:J
   31:	lstore_2
   32:	aconst_null
   33:	astore	4
   35:	aload_0
   36:	getfield	#155; //Field eventCount:J
   39:	lload_2
   40:	lcmp
   41:	ifne	106
   44:	aload_0
   45:	getfield	#156; //Field syncStack:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
   48:	dup
   49:	astore	5
   51:	ifnull	64
   54:	aload	5
   56:	getfield	#157; //Field scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.count:J
   59:	lload_2
   60:	lcmp
   61:	ifne	106
   64:	aload	4
   66:	ifnonnull	80
   69:	new	#166; //class scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode
   72:	dup
   73:	lload_2
   74:	aload_1
   75:	invokespecial	#167; //Method scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode."<init>":(JLscala/concurrent/forkjoin/ForkJoinWorkerThread;)V
   78:	astore	4
   80:	aload_0
   81:	aload	4
   83:	aload	5
   85:	dup_x1
   86:	putfield	#160; //Field scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.next:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
   89:	aload	4
   91:	invokespecial	#158; //Method casBarrierStack:(Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;)Z
   94:	ifeq	35
   97:	aload	4
   99:	aload_0
   100:	invokevirtual	#168; //Method scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.awaitSyncRelease:(Lscala/concurrent/forkjoin/ForkJoinPool;)V
   103:	goto	106
   106:	aload_0
   107:	invokevirtual	#162; //Method ensureSync:()J
   110:	lstore	6
   112:	lload	6
   114:	lload_2
   115:	lcmp
   116:	ifeq	128
   119:	aload_1
   120:	lload	6
   122:	putfield	#165; //Field scala/concurrent/forkjoin/ForkJoinWorkerThread.lastEventCount:J
   125:	goto	131
   128:	goto	5
   131:	return

final boolean syncIsReleasable(scala.concurrent.forkjoin.ForkJoinPool$WaitQueueNode);
  Code:
   Stack=7, Locals=6, Args_size=2
   0:	aload_1
   1:	getfield	#157; //Field scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.count:J
   4:	lstore_2
   5:	invokestatic	#169; //Method java/lang/Thread.interrupted:()Z
   8:	ifne	46
   11:	aload_1
   12:	getfield	#170; //Field scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.thread:Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   15:	ifnull	46
   18:	aload_1
   19:	getfield	#160; //Field scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.next:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
   22:	ifnonnull	35
   25:	aload_0
   26:	getfield	#62; //Field workers:[Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   29:	invokestatic	#171; //Method scala/concurrent/forkjoin/ForkJoinWorkerThread.hasQueuedTasks:([Lscala/concurrent/forkjoin/ForkJoinWorkerThread;)Z
   32:	ifne	46
   35:	aload_0
   36:	getfield	#155; //Field eventCount:J
   39:	lload_2
   40:	lcmp
   41:	ifne	46
   44:	iconst_0
   45:	ireturn
   46:	aload_1
   47:	getfield	#170; //Field scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.thread:Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   50:	ifnull	82
   53:	aload_1
   54:	aconst_null
   55:	putfield	#170; //Field scala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode.thread:Lscala/concurrent/forkjoin/ForkJoinWorkerThread;
   58:	aload_0
   59:	getfield	#155; //Field eventCount:J
   62:	lstore	4
   64:	lload_2
   65:	lload	4
   67:	lcmp
   68:	ifgt	82
   71:	aload_0
   72:	lload	4
   74:	lload	4
   76:	lconst_1
   77:	ladd
   78:	invokespecial	#161; //Method casEventCount:(JJ)Z
   81:	pop
   82:	iconst_1
   83:	ireturn

final boolean hasNewSyncEvent(scala.concurrent.forkjoin.ForkJoinWorkerThread);
  Code:
   Stack=4, Locals=6, Args_size=2
   0:	aload_1
   1:	getfield	#165; //Field scala/concurrent/forkjoin/ForkJoinWorkerThread.lastEventCount:J
   4:	lstore_2
   5:	aload_0
   6:	invokevirtual	#162; //Method ensureSync:()J
   9:	lstore	4
   11:	lload	4
   13:	lload_2
   14:	lcmp
   15:	ifne	20
   18:	iconst_0
   19:	ireturn
   20:	aload_1
   21:	lload	4
   23:	putfield	#165; //Field scala/concurrent/forkjoin/ForkJoinWorkerThread.lastEventCount:J
   26:	iconst_1
   27:	ireturn

final boolean preJoin(scala.concurrent.forkjoin.ForkJoinTask, boolean);
  Code:
   Stack=3, Locals=5, Args_size=3
   0:	iload_2
   1:	aload_0
   2:	getfield	#28; //Field maintainsParallelism:Z
   5:	iand
   6:	istore_2
   7:	iconst_0
   8:	istore_3
   9:	aload_0
   10:	getfield	#172; //Field spareStack:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
   13:	ifnull	24
   16:	aload_0
   17:	iload_3
   18:	invokespecial	#142; //Method tryResumeSpare:(Z)Z
   21:	ifne	87
   24:	aload_0
   25:	getfield	#6; //Field workerCounts:I
   28:	istore	4
   30:	iload_3
   31:	ifne	50
   34:	aload_0
   35:	iload	4
   37:	iinc	4, -1
   40:	iload	4
   42:	invokespecial	#7; //Method casWorkerCounts:(II)Z
   45:	dup
   46:	istore_3
   47:	ifeq	84
   50:	aload_0
   51:	iload	4
   53:	iload_2
   54:	invokespecial	#173; //Method needSpare:(IZ)Z
   57:	ifne	63
   60:	goto	87
   63:	aload_1
   64:	getfield	#174; //Field scala/concurrent/forkjoin/ForkJoinTask.status:I
   67:	ifge	72
   70:	iconst_1
   71:	ireturn
   72:	aload_0
   73:	iload	4
   75:	invokespecial	#175; //Method tryAddSpare:(I)Z
   78:	ifeq	84
   81:	goto	87
   84:	goto	9
   87:	iconst_0
   88:	ireturn
  Signature: length = 0x2
   01 FFFFFFA0 

final boolean preBlock(scala.concurrent.forkjoin.ForkJoinPool$ManagedBlocker, boolean);
  Code:
   Stack=3, Locals=5, Args_size=3
   0:	iload_2
   1:	aload_0
   2:	getfield	#28; //Field maintainsParallelism:Z
   5:	iand
   6:	istore_2
   7:	iconst_0
   8:	istore_3
   9:	aload_0
   10:	getfield	#172; //Field spareStack:Lscala/concurrent/forkjoin/ForkJoinPool$WaitQueueNode;
   13:	ifnull	24
   16:	aload_0
   17:	iload_3
   18:	invokespecial	#142; //Method tryResumeSpare:(Z)Z
   21:	ifne	89
   24:	aload_0
   25:	getfield	#6; //Field workerCounts:I
   28:	istore	4
   30:	iload_3
   31:	ifne	50
   34:	aload_0
   35:	iload	4
   37:	iinc	4, -1
   40:	iload	4
   42:	invokespecial	#7; //Method casWorkerCounts:(II)Z
   45:	dup
   46:	istore_3
   47:	ifeq	86
   50:	aload_0
   51:	iload	4
   53:	iload_2
   54:	invokespecial	#173; //Method needSpare:(IZ)Z
   57:	ifne	63
   60:	goto	89
   63:	aload_1
   64:	invokeinterface	#176,  1; //InterfaceMethod scala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker.isReleasable:()Z
   69:	ifeq	74
   72:	iconst_1
   73:	ireturn
   74:	aload_0
   75:	iload	4
   77:	invokespecial	#175; //Method tryAddSpare:(I)Z
   80:	ifeq	86
   83:	goto	89
   86:	goto	9
   89:	iconst_0
   90:	ireturn

public static void managedBlock(scala.concurrent.forkjoin.ForkJoinPool$ManagedBlocker, boolean)   throws java.lang.InterruptedException;
  Code:
   Stack=3, Locals=5, Args_size=2
   0:	invokestatic	#183; //Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
   3:	astore_2
   4:	aload_2
   5:	instanceof	#59; //class scala/concurrent/forkjoin/ForkJoinWorkerThread
   8:	ifeq	21
   11:	aload_2
   12:	checkcast	#59; //class scala/concurrent/forkjoin/ForkJoinWorkerThread
   15:	getfield	#184; //Field scala/concurrent/forkjoin/ForkJoinWorkerThread.pool:Lscala/concurrent/forkjoin/ForkJoinPool;
   18:	goto	22
   21:	aconst_null
   22:	astore_3
   23:	aload_0
   24:	invokeinterface	#176,  1; //InterfaceMethod scala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker.isReleasable:()Z
   29:	ifne	75
   32:	aload_3
   33:	ifnull	45
   36:	aload_3
   37:	aload_0
   38:	iload_1
   39:	invokevirtual	#185; //Method preBlock:(Lscala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;Z)Z
   42:	ifne	49
   45:	aload_0
   46:	invokestatic	#186; //Method awaitBlocker:(Lscala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;)V
   49:	aload_3
   50:	ifnull	75
   53:	aload_3
   54:	iconst_1
   55:	invokevirtual	#181; //Method updateRunningCount:(I)V
   58:	goto	75
   61:	astore	4
   63:	aload_3
   64:	ifnull	72
   67:	aload_3
   68:	iconst_1
   69:	invokevirtual	#181; //Method updateRunningCount:(I)V
   72:	aload	4
   74:	athrow
   75:	return
  Exception table:
   from   to  target type
    32    49    61   any
    61    63    61   any
  Exceptions: 
   throws java.lang.InterruptedException
protected java.util.concurrent.RunnableFuture newTaskFor(java.lang.Runnable, java.lang.Object);
  Code:
   Stack=4, Locals=3, Args_size=3
   0:	new	#83; //class scala/concurrent/forkjoin/ForkJoinPool$AdaptedRunnable
   3:	dup
   4:	aload_1
   5:	aload_2
   6:	invokespecial	#84; //Method scala/concurrent/forkjoin/ForkJoinPool$AdaptedRunnable."<init>":(Ljava/lang/Runnable;Ljava/lang/Object;)V
   9:	areturn
  Signature: length = 0x2
   01 FFFFFFB1 

protected java.util.concurrent.RunnableFuture newTaskFor(java.util.concurrent.Callable);
  Code:
   Stack=3, Locals=2, Args_size=2
   0:	new	#85; //class scala/concurrent/forkjoin/ForkJoinPool$AdaptedCallable
   3:	dup
   4:	aload_1
   5:	invokespecial	#86; //Method scala/concurrent/forkjoin/ForkJoinPool$AdaptedCallable."<init>":(Ljava/util/concurrent/Callable;)V
   8:	areturn
  Signature: length = 0x2
   01 FFFFFFB3 

public java.util.concurrent.Future submit(java.util.concurrent.Callable);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokevirtual	#210; //Method submit:(Ljava/util/concurrent/Callable;)Lscala/concurrent/forkjoin/ForkJoinTask;
   5:	areturn

public java.util.concurrent.Future submit(java.lang.Runnable, java.lang.Object);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokevirtual	#211; //Method submit:(Ljava/lang/Runnable;Ljava/lang/Object;)Lscala/concurrent/forkjoin/ForkJoinTask;
   6:	areturn

public java.util.concurrent.Future submit(java.lang.Runnable);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokevirtual	#212; //Method submit:(Ljava/lang/Runnable;)Lscala/concurrent/forkjoin/ForkJoinTask;
   5:	areturn

static sun.misc.Unsafe access$000()   throws java.lang.NoSuchFieldException, java.lang.IllegalAccessException;
  Code:
   Stack=1, Locals=0, Args_size=0
   0:	invokestatic	#1; //Method getUnsafePrivileged:()Lsun/misc/Unsafe;
   3:	areturn
  Exceptions: 
   throws java.lang.NoSuchFieldException, java.lang.IllegalAccessException
static {};
  Code:
   Stack=4, Locals=1, Args_size=0
   0:	new	#213; //class scala/concurrent/forkjoin/ForkJoinPool$DefaultForkJoinWorkerThreadFactory
   3:	dup
   4:	invokespecial	#214; //Method scala/concurrent/forkjoin/ForkJoinPool$DefaultForkJoinWorkerThreadFactory."<init>":()V
   7:	putstatic	#17; //Field defaultForkJoinWorkerThreadFactory:Lscala/concurrent/forkjoin/ForkJoinPool$ForkJoinWorkerThreadFactory;
   10:	new	#215; //class java/lang/RuntimePermission
   13:	dup
   14:	ldc	#216; //String modifyThread
   16:	invokespecial	#217; //Method java/lang/RuntimePermission."<init>":(Ljava/lang/String;)V
   19:	putstatic	#3; //Field modifyThreadPermission:Ljava/lang/RuntimePermission;
   22:	new	#218; //class java/util/concurrent/atomic/AtomicInteger
   25:	dup
   26:	invokespecial	#219; //Method java/util/concurrent/atomic/AtomicInteger."<init>":()V
   29:	putstatic	#29; //Field poolNumberGenerator:Ljava/util/concurrent/atomic/AtomicInteger;
   32:	invokestatic	#220; //Method getUnsafe:()Lsun/misc/Unsafe;
   35:	putstatic	#199; //Field _unsafe:Lsun/misc/Unsafe;
   38:	ldc	#221; //String eventCount
   40:	invokestatic	#222; //Method fieldOffset:(Ljava/lang/String;)J
   43:	putstatic	#202; //Field eventCountOffset:J
   46:	ldc	#223; //String workerCounts
   48:	invokestatic	#222; //Method fieldOffset:(Ljava/lang/String;)J
   51:	putstatic	#204; //Field workerCountsOffset:J
   54:	ldc	#224; //String runControl
   56:	invokestatic	#222; //Method fieldOffset:(Ljava/lang/String;)J
   59:	putstatic	#206; //Field runControlOffset:J
   62:	ldc	#225; //String syncStack
   64:	invokestatic	#222; //Method fieldOffset:(Ljava/lang/String;)J
   67:	putstatic	#209; //Field syncStackOffset:J
   70:	ldc	#226; //String spareStack
   72:	invokestatic	#222; //Method fieldOffset:(Ljava/lang/String;)J
   75:	putstatic	#207; //Field spareStackOffset:J
   78:	goto	93
   81:	astore_0
   82:	new	#228; //class java/lang/RuntimeException
   85:	dup
   86:	ldc	#229; //String Could not initialize intrinsics
   88:	aload_0
   89:	invokespecial	#230; //Method java/lang/RuntimeException."<init>":(Ljava/lang/String;Ljava/lang/Throwable;)V
   92:	athrow
   93:	return
  Exception table:
   from   to  target type
    32    78    81   Class java/lang/Throwable


}

