Compiled from "Lock.scala"
public class scala.concurrent.Lock extends java.lang.Object implements scala.ScalaObject
  SourceFile: "Lock.scala"
  ScalaSig: length = 0x122
   05 00 2E 06 08 01 02 FFFFFF84 FFFFFF80 FFFFFF80 FFFFFF80 00 07 02 04 4C
   6F 63 6B 0A 02 03 04 01 0A 63 6F 6E 63 75 72 72
   65 6E 74 0A 01 05 01 05 73 63 61 6C 61 03 00 13
   03 00 08 10 10 02 09 0E 0D 01 0A 0A 02 0B 0C 01
   04 6C 61 6E 67 0A 01 0D 01 04 6A 61 76 61 09 02
   0F 0A 02 06 4F 62 6A 65 63 74 10 02 11 12 0D 01
   04 09 02 13 04 02 0B 53 63 61 6C 61 4F 62 6A 65
   63 74 08 05 15 00 FFFFFF84 00 16 01 06 3C 69 6E 69 74
   3E 14 01 17 10 02 18 00 0D 01 02 08 07 1A 00 FFFFFFC0
   FFFFFF80 FFFFFF84 00 1B 01 09 61 76 61 69 6C 61 62 6C 65 15
   01 1C 10 02 11 1D 09 02 1E 04 02 07 42 6F 6F 6C
   65 61 6E 08 07 20 00 FFFFFFC0 FFFFFF80 FFFFFF84 00 21 01 0D 61 76
   61 69 6C 61 62 6C 65 5F 24 65 71 14 02 22 25 10
   02 11 23 09 02 24 04 02 04 55 6E 69 74 08 07 26
   1F FFFFFF81 FFFFFF80 FFFFFFC0 00 1C 01 03 78 24 31 08 06 28 00 FFFFFFA0
   FFFFFFA0 04 1C 01 0A 61 76 61 69 6C 61 62 6C 65 20 08
   05 2A 00 FFFFFF84 00 2B 01 07 61 63 71 75 69 72 65 15
   01 22 08 05 2D 00 FFFFFF84 00 2B 01 07 72 65 6C 65 61
   73 65 
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	Lock.scala;
const #3 = Asciz	available;
const #4 = Asciz	Z;
const #5 = Asciz	<init>;
const #6 = Asciz	()V;
const #7 = Asciz	Code;
const #8 = Asciz	LineNumberTable;
const #9 = Asciz	java/lang/Object;
const #10 = class	#9;	//  java/lang/Object
const #11 = NameAndType	#5:#6;//  "<init>":()V
const #12 = Method	#10.#11;	//  java/lang/Object."<init>":()V
const #13 = Asciz	scala/concurrent/Lock;
const #14 = class	#13;	//  scala/concurrent/Lock
const #15 = NameAndType	#3:#4;//  available:Z
const #16 = Field	#14.#15;	//  scala/concurrent/Lock.available:Z
const #17 = Asciz	release;
const #18 = Asciz	available_$eq;
const #19 = Asciz	(Z)V;
const #20 = NameAndType	#18:#19;//  available_$eq:(Z)V
const #21 = Method	#14.#20;	//  scala/concurrent/Lock.available_$eq:(Z)V
const #22 = Asciz	notify;
const #23 = NameAndType	#22:#6;//  notify:()V
const #24 = Method	#14.#23;	//  scala/concurrent/Lock.notify:()V
const #25 = Asciz	scala/runtime/BoxedUnit;
const #26 = class	#25;	//  scala/runtime/BoxedUnit
const #27 = Asciz	UNIT;
const #28 = Asciz	Lscala/runtime/BoxedUnit;;
const #29 = NameAndType	#27:#28;//  UNIT:Lscala/runtime/BoxedUnit;
const #30 = Field	#26.#29;	//  scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
const #31 = Asciz	acquire;
const #32 = Asciz	()Z;
const #33 = NameAndType	#3:#32;//  available:()Z
const #34 = Method	#14.#33;	//  scala/concurrent/Lock.available:()Z
const #35 = Asciz	wait;
const #36 = NameAndType	#35:#6;//  wait:()V
const #37 = Method	#14.#36;	//  scala/concurrent/Lock.wait:()V
const #38 = Asciz	ScalaSig;
const #39 = Asciz	scala/ScalaObject;
const #40 = class	#39;	//  scala/ScalaObject

{
public scala.concurrent.Lock();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	aload_0
   1:	invokespecial	#12; //Method java/lang/Object."<init>":()V
   4:	aload_0
   5:	iconst_1
   6:	putfield	#16; //Field available:Z
   9:	return
  LineNumberTable: 
   line 19: 0
   line 20: 4


public void release();
  Code:
   Stack=2, Locals=2, Args_size=1
   0:	aload_0
   1:	dup
   2:	astore_1
   3:	monitorenter
   4:	aload_0
   5:	iconst_1
   6:	invokevirtual	#21; //Method available_$eq:(Z)V
   9:	aload_0
   10:	invokevirtual	#24; //Method notify:()V
   13:	getstatic	#30; //Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
   16:	pop
   17:	aload_1
   18:	monitorexit
   19:	return
   20:	aload_1
   21:	monitorexit
   22:	athrow
  Exception table:
   from   to  target type
     4    19    20   any
  LineNumberTable: 
   line 27: 0
   line 28: 4
   line 29: 9
   line 27: 18


public void acquire();
  Code:
   Stack=2, Locals=2, Args_size=1
   0:	aload_0
   1:	dup
   2:	astore_1
   3:	monitorenter
   4:	aload_0
   5:	invokevirtual	#34; //Method available:()Z
   8:	ifeq	23
   11:	aload_0
   12:	iconst_0
   13:	invokevirtual	#21; //Method available_$eq:(Z)V
   16:	getstatic	#30; //Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
   19:	pop
   20:	aload_1
   21:	monitorexit
   22:	return
   23:	aload_0
   24:	invokevirtual	#37; //Method wait:()V
   27:	goto	4
   30:	aload_1
   31:	monitorexit
   32:	athrow
  Exception table:
   from   to  target type
     4    22    30   any
    23    30    30   any
  LineNumberTable: 
   line 22: 0
   line 23: 4
   line 24: 11
   line 22: 21
   line 23: 23
   line 22: 31


public void available_$eq(boolean);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	iload_1
   2:	putfield	#16; //Field available:Z
   5:	return
  LineNumberTable: 
   line 20: 0


public boolean available();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#16; //Field available:Z
   4:	ireturn
  LineNumberTable: 
   line 20: 0


}

