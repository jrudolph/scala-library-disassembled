Compiled from "TaskRunner.scala"
public abstract class scala.concurrent.TaskRunner$class extends java.lang.Object
  SourceFile: "TaskRunner.scala"
  Scala: length = 0x
   
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	TaskRunner.scala;
const #3 = Asciz	$init$;
const #4 = Asciz	(Lscala/concurrent/TaskRunner;)V;
const #5 = Asciz	Code;
const #6 = Asciz	LineNumberTable;
const #7 = Asciz	$this;
const #8 = Asciz	Lscala/concurrent/TaskRunner;;
const #9 = Asciz	LocalVariableTable;
const #10 = Asciz	tryCatch;
const #11 = Asciz	(Lscala/concurrent/TaskRunner;Lscala/Function0;)Lscala/Either;;
const #12 = Asciz	scala/concurrent/ops$;
const #13 = class	#12;	//  scala/concurrent/ops$
const #14 = Asciz	MODULE$;
const #15 = Asciz	Lscala/concurrent/ops$;;
const #16 = NameAndType	#14:#15;//  MODULE$:Lscala/concurrent/ops$;
const #17 = Field	#13.#16;	//  scala/concurrent/ops$.MODULE$:Lscala/concurrent/ops$;
const #18 = Asciz	tryCatchEx;
const #19 = Asciz	(Lscala/Function0;)Lscala/Either;;
const #20 = NameAndType	#18:#19;//  tryCatchEx:(Lscala/Function0;)Lscala/Either;
const #21 = Method	#13.#20;	//  scala/concurrent/ops$.tryCatchEx:(Lscala/Function0;)Lscala/Either;
const #22 = Asciz	body;
const #23 = Asciz	Lscala/Function0;;
const #24 = Asciz	Scala;
const #25 = Asciz	scala/concurrent/TaskRunner$class;
const #26 = class	#25;	//  scala/concurrent/TaskRunner$class
const #27 = Asciz	java/lang/Object;
const #28 = class	#27;	//  java/lang/Object

{
public static void $init$(scala.concurrent.TaskRunner);
  Code:
   Stack=0, Locals=1, Args_size=1
   0:	return
  LineNumberTable: 
   line 18: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      1      0    $this       Lscala/concurrent/TaskRunner;


public static scala.Either tryCatch(scala.concurrent.TaskRunner, scala.Function0);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	getstatic	#17; //Field scala/concurrent/ops$.MODULE$:Lscala/concurrent/ops$;
   3:	aload_1
   4:	invokevirtual	#21; //Method scala/concurrent/ops$.tryCatchEx:(Lscala/Function0;)Lscala/Either;
   7:	areturn
  LineNumberTable: 
   line 32: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      8      0    $this       Lscala/concurrent/TaskRunner;
   0      8      1    body       Lscala/Function0;


}

