Compiled from "ops.scala"
public final class scala.concurrent.ops$ extends java.lang.Object implements scala.ScalaObject
  SourceFile: "ops.scala"
  Scala: length = 0x
   
  InnerClass: 
   public final $anonfun$2=class scala/concurrent/ops$$anonfun$2 of class scala/concurrent/ops
   public final $anonfun$1=class scala/concurrent/ops$$anonfun$1 of class scala/concurrent/ops
   public Catch=class scala/util/control/Exception$Catch of class scala/util/control/Exception
   public final $anonfun$par$2=class scala/concurrent/ops$$anonfun$par$2 of class scala/concurrent/ops
   public final $anonfun$par$1=class scala/concurrent/ops$$anonfun$par$1 of class scala/concurrent/ops
   public final $anonfun$replicate$2=class scala/concurrent/ops$$anonfun$replicate$2 of class scala/concurrent/ops
   public final $anonfun$replicate$1=class scala/concurrent/ops$$anonfun$replicate$1 of class scala/concurrent/ops
   public final $anonfun$getOrThrow$2=class scala/concurrent/ops$$anonfun$getOrThrow$2 of class scala/concurrent/ops
   public final $anonfun$getOrThrow$1=class scala/concurrent/ops$$anonfun$getOrThrow$1 of class scala/concurrent/ops
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	ops.scala;
Asciz	MODULE$;
Asciz	Lscala/concurrent/ops$;;
Asciz	<clinit>;
Asciz	()V;
Asciz	Code;
Asciz	scala/concurrent/ops$;
class	scala/concurrent/ops$
Asciz	<init>;
NameAndType	"<init>":()V
Method	scala/concurrent/ops$."<init>":()V
Asciz	defaultRunner;
Asciz	Lscala/concurrent/FutureTaskRunner;;
Asciz	spawn$default$2;
Asciz	(Lscala/Function0;)Lscala/concurrent/TaskRunner;;
Asciz	LineNumberTable;
Asciz	()Lscala/concurrent/FutureTaskRunner;;
NameAndType	defaultRunner:()Lscala/concurrent/FutureTaskRunner;
Method	scala/concurrent/ops$.defaultRunner:()Lscala/concurrent/FutureTaskRunner;
Asciz	this;
Asciz	p;
Asciz	Lscala/Function0;;
Asciz	LocalVariableTable;
Asciz	future$default$2;
Asciz	(Lscala/Function0;)Lscala/concurrent/FutureTaskRunner;;
NameAndType	defaultRunner:Lscala/concurrent/FutureTaskRunner;
Field	scala/concurrent/ops$.defaultRunner:Lscala/concurrent/FutureTaskRunner;
Asciz	tryCatch;
Asciz	(Lscala/Function0;)Lscala/Either;;
Asciz	scala/util/control/Exception$;
class	scala/util/control/Exception$
Asciz	Lscala/util/control/Exception$;;
NameAndType	MODULE$:Lscala/util/control/Exception$;
Field	scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
Asciz	allCatch;
Asciz	()Lscala/util/control/Exception$Catch;;
NameAndType	allCatch:()Lscala/util/control/Exception$Catch;
Method	scala/util/control/Exception$.allCatch:()Lscala/util/control/Exception$Catch;
Asciz	scala/util/control/Exception$Catch;
class	scala/util/control/Exception$Catch
Asciz	either;
NameAndType	either:(Lscala/Function0;)Lscala/Either;
Method	scala/util/control/Exception$Catch.either:(Lscala/Function0;)Lscala/Either;
Asciz	body;
Asciz	<A:Ljava/lang/Object;>(Lscala/Function0<TA;>;)Lscala/Either<Ljava/lang/Throwable;TA;>;;
Asciz	Signature;
Asciz	tryCatchEx;
Asciz	scala/Right;
class	scala/Right
Asciz	scala/Function0;
class	scala/Function0
Asciz	apply;
Asciz	()Ljava/lang/Object;;
NameAndType	apply:()Ljava/lang/Object;
InterfaceMethod	scala/Function0.apply:()Ljava/lang/Object;
Asciz	(Ljava/lang/Object;)V;
NameAndType	"<init>":(Ljava/lang/Object;)V
Method	scala/Right."<init>":(Ljava/lang/Object;)V
Asciz	scala/Left;
class	scala/Left
Method	scala/Left."<init>":(Ljava/lang/Object;)V
Asciz	java/lang/Exception;
class	java/lang/Exception
Asciz	exceptionResult1;
Asciz	Lscala/Either;;
Asciz	<A:Ljava/lang/Object;>(Lscala/Function0<TA;>;)Lscala/Either<Ljava/lang/Exception;TA;>;;
Asciz	getOrThrow;
Asciz	(Lscala/Either;)Ljava/lang/Object;;
Asciz	scala/concurrent/ops$$anonfun$getOrThrow$1;
class	scala/concurrent/ops$$anonfun$getOrThrow$1
Method	scala/concurrent/ops$$anonfun$getOrThrow$1."<init>":()V
Asciz	scala/concurrent/ops$$anonfun$getOrThrow$2;
class	scala/concurrent/ops$$anonfun$getOrThrow$2
Method	scala/concurrent/ops$$anonfun$getOrThrow$2."<init>":()V
Asciz	scala/Either;
class	scala/Either
Asciz	fold;
Asciz	(Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;;
NameAndType	fold:(Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
Method	scala/Either.fold:(Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
Asciz	x;
Asciz	<T:Ljava/lang/Throwable;A:Ljava/lang/Object;>(Lscala/Either<TT;TA;>;)TA;;
Asciz	spawn;
Asciz	(Lscala/Function0;Lscala/concurrent/TaskRunner;)V;
Asciz	scala/concurrent/TaskRunner;
class	scala/concurrent/TaskRunner
Asciz	functionAsTask;
Asciz	(Lscala/Function0;)Ljava/lang/Object;;
NameAndType	functionAsTask:(Lscala/Function0;)Ljava/lang/Object;
InterfaceMethod	scala/concurrent/TaskRunner.functionAsTask:(Lscala/Function0;)Ljava/lang/Object;
Asciz	execute;
NameAndType	execute:(Ljava/lang/Object;)V
InterfaceMethod	scala/concurrent/TaskRunner.execute:(Ljava/lang/Object;)V
Asciz	runner;
Asciz	Lscala/concurrent/TaskRunner;;
Asciz	(Lscala/Function0<Ljava/lang/Object;>;Lscala/concurrent/TaskRunner;)V;
Asciz	future;
Asciz	(Lscala/Function0;Lscala/concurrent/FutureTaskRunner;)Lscala/Function0;;
Asciz	scala/concurrent/FutureTaskRunner;
class	scala/concurrent/FutureTaskRunner
Asciz	submit;
Asciz	(Ljava/lang/Object;)Ljava/lang/Object;;
NameAndType	submit:(Ljava/lang/Object;)Ljava/lang/Object;
InterfaceMethod	scala/concurrent/FutureTaskRunner.submit:(Ljava/lang/Object;)Ljava/lang/Object;
Asciz	futureAsFunction;
Asciz	(Ljava/lang/Object;)Lscala/Function0;;
NameAndType	futureAsFunction:(Ljava/lang/Object;)Lscala/Function0;
InterfaceMethod	scala/concurrent/FutureTaskRunner.futureAsFunction:(Ljava/lang/Object;)Lscala/Function0;
Asciz	<A:Ljava/lang/Object;>(Lscala/Function0<TA;>;Lscala/concurrent/FutureTaskRunner;)Lscala/Function0<TA;>;;
Asciz	par;
Asciz	(Lscala/Function0;Lscala/Function0;)Lscala/Tuple2;;
Asciz	scala/concurrent/SyncVar;
class	scala/concurrent/SyncVar
Method	scala/concurrent/SyncVar."<init>":()V
Asciz	scala/concurrent/ops$$anonfun$par$1;
class	scala/concurrent/ops$$anonfun$par$1
Asciz	(Lscala/Function0;Lscala/concurrent/SyncVar;)V;
NameAndType	"<init>":(Lscala/Function0;Lscala/concurrent/SyncVar;)V
Method	scala/concurrent/ops$$anonfun$par$1."<init>":(Lscala/Function0;Lscala/concurrent/SyncVar;)V
Asciz	scala/concurrent/ops$$anonfun$par$2;
class	scala/concurrent/ops$$anonfun$par$2
Asciz	(Lscala/Function0;)V;
NameAndType	"<init>":(Lscala/Function0;)V
Method	scala/concurrent/ops$$anonfun$par$2."<init>":(Lscala/Function0;)V
Asciz	scala/Tuple2;
class	scala/Tuple2
Asciz	get;
NameAndType	get:()Ljava/lang/Object;
Method	scala/concurrent/SyncVar.get:()Ljava/lang/Object;
Asciz	(Ljava/lang/Object;Ljava/lang/Object;)V;
NameAndType	"<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
Method	scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
Asciz	xp;
Asciz	yp$1;
Asciz	x$2$1;
Asciz	x$3;
Asciz	y$1;
Asciz	Lscala/concurrent/SyncVar;;
Asciz	<A:Ljava/lang/Object;B:Ljava/lang/Object;>(Lscala/Function0<TA;>;Lscala/Function0<TB;>;)Lscala/Tuple2<TA;TB;>;;
Asciz	replicate;
Asciz	(IILscala/Function1;)V;
Asciz	scala/Function1;
class	scala/Function1
Asciz	apply$mcVI$sp;
Asciz	(I)V;
NameAndType	apply$mcVI$sp:(I)V
InterfaceMethod	scala/Function1.apply$mcVI$sp:(I)V
Asciz	scala/concurrent/ops$$anonfun$replicate$1;
class	scala/concurrent/ops$$anonfun$replicate$1
Asciz	(ILscala/Function1;I)V;
NameAndType	"<init>":(ILscala/Function1;I)V
Method	scala/concurrent/ops$$anonfun$replicate$1."<init>":(ILscala/Function1;I)V
Asciz	scala/concurrent/ops$$anonfun$replicate$2;
class	scala/concurrent/ops$$anonfun$replicate$2
Method	scala/concurrent/ops$$anonfun$replicate$2."<init>":(Lscala/Function0;)V
Asciz	start$1;
Asciz	I;
Asciz	end;
Asciz	p$1;
Asciz	Lscala/Function1;;
Asciz	x$4$1;
Asciz	x$5;
Asciz	mid$1;
Asciz	(IILscala/Function1<Ljava/lang/Integer;Ljava/lang/Object;>;)V;
Asciz	java/lang/Object;
class	java/lang/Object
Method	java/lang/Object."<init>":()V
NameAndType	MODULE$:Lscala/concurrent/ops$;
Field	scala/concurrent/ops$.MODULE$:Lscala/concurrent/ops$;
Asciz	scala/concurrent/TaskRunners$;
class	scala/concurrent/TaskRunners$
Asciz	Lscala/concurrent/TaskRunners$;;
NameAndType	MODULE$:Lscala/concurrent/TaskRunners$;
Field	scala/concurrent/TaskRunners$.MODULE$:Lscala/concurrent/TaskRunners$;
Asciz	threadRunner;
NameAndType	threadRunner:()Lscala/concurrent/FutureTaskRunner;
Method	scala/concurrent/TaskRunners$.threadRunner:()Lscala/concurrent/FutureTaskRunner;
Asciz	Scala;
Asciz	InnerClasses;
Asciz	scala/concurrent/ops$$anonfun$2;
class	scala/concurrent/ops$$anonfun$2
Asciz	scala/concurrent/ops;
class	scala/concurrent/ops
Asciz	$anonfun$2;
Asciz	scala/concurrent/ops$$anonfun$1;
class	scala/concurrent/ops$$anonfun$1
Asciz	$anonfun$1;
Asciz	scala/util/control/Exception;
class	scala/util/control/Exception
Asciz	Catch;
Asciz	$anonfun$par$2;
Asciz	$anonfun$par$1;
Asciz	$anonfun$replicate$2;
Asciz	$anonfun$replicate$1;
Asciz	$anonfun$getOrThrow$2;
Asciz	$anonfun$getOrThrow$1;
Asciz	scala/ScalaObject;
class	scala/ScalaObject

{
public static final scala.concurrent.ops$ MODULE$;
  Signature: Lscala/concurrent/ops$;

private final scala.concurrent.FutureTaskRunner defaultRunner;
  Signature: Lscala/concurrent/FutureTaskRunner;

public static {};
  Signature: ()V
  Code:
   Stack=1, Locals=0, Args_size=0
	new	class scala/concurrent/ops$
	invokespecial	Method "<init>":()V
	return
  Labels:

public scala.concurrent.TaskRunner spawn$default$2(scala.Function0);
  Signature: (Lscala/Function0;)Lscala/concurrent/TaskRunner;
  Code:
   Stack=1, Locals=2, Args_size=2
	aload_0
	invokevirtual	Method defaultRunner:()Lscala/concurrent/FutureTaskRunner;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      5      0    this       Lscala/concurrent/ops$;
   0      5      1    p       Lscala/Function0;


public scala.concurrent.FutureTaskRunner future$default$2(scala.Function0);
  Signature: (Lscala/Function0;)Lscala/concurrent/FutureTaskRunner;
  Code:
   Stack=1, Locals=2, Args_size=2
	aload_0
	invokevirtual	Method defaultRunner:()Lscala/concurrent/FutureTaskRunner;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      5      0    this       Lscala/concurrent/ops$;
   0      5      1    p       Lscala/Function0;


public scala.concurrent.FutureTaskRunner defaultRunner();
  Signature: ()Lscala/concurrent/FutureTaskRunner;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field defaultRunner:Lscala/concurrent/FutureTaskRunner;
	areturn
  Labels:

public scala.Either tryCatch(scala.Function0);
  Signature: (Lscala/Function0;)Lscala/Either;
  Code:
   Stack=2, Locals=2, Args_size=2
	getstatic	Field scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
	invokevirtual	Method scala/util/control/Exception$.allCatch:()Lscala/util/control/Exception$Catch;
	aload_1
	invokevirtual	Method scala/util/control/Exception$Catch.either:(Lscala/Function0;)Lscala/Either;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/concurrent/ops$;
   0      11      1    body       Lscala/Function0;

  Signature: length = 0x2
   00 2E 

public scala.Either tryCatchEx(scala.Function0);
  Signature: (Lscala/Function0;)Lscala/Either;
  Code:
   Stack=3, Locals=4, Args_size=2
	new	class scala/Right
	dup
	aload_1
	invokeinterface	InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
	invokespecial	Method scala/Right."<init>":(Ljava/lang/Object;)V
	astore_2
	goto	l1 // aload_2
	astore_3
	new	class scala/Left
	dup
	aload_3
	invokespecial	Method scala/Left."<init>":(Ljava/lang/Object;)V
	astore_2
l1	aload_2
	areturn
  Labels:
   	l1 = 27 // aload_2
  Exception table:
   from   to  target type
     0    17    17   Class java/lang/Exception

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      29      0    this       Lscala/concurrent/ops$;
   0      29      1    body       Lscala/Function0;
   0      28      2    exceptionResult1       Lscala/Either;

  Signature: length = 0x2
   00 43 

public java.lang.Object getOrThrow(scala.Either);
  Signature: (Lscala/Either;)Ljava/lang/Object;
  Code:
   Stack=4, Locals=2, Args_size=2
	aload_1
	new	class scala/concurrent/ops$$anonfun$getOrThrow$1
	dup
	invokespecial	Method scala/concurrent/ops$$anonfun$getOrThrow$1."<init>":()V
	new	class scala/concurrent/ops$$anonfun$getOrThrow$2
	dup
	invokespecial	Method scala/concurrent/ops$$anonfun$getOrThrow$2."<init>":()V
	invokevirtual	Method scala/Either.fold:(Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      19      0    this       Lscala/concurrent/ops$;
   0      19      1    x       Lscala/Either;

  Signature: length = 0x2
   00 53 

public void spawn(scala.Function0, scala.concurrent.TaskRunner);
  Signature: (Lscala/Function0;Lscala/concurrent/TaskRunner;)V
  Code:
   Stack=3, Locals=3, Args_size=3
	aload_2
	aload_2
	aload_1
	invokeinterface	InterfaceMethod scala/concurrent/TaskRunner.functionAsTask:(Lscala/Function0;)Ljava/lang/Object;
	invokeinterface	InterfaceMethod scala/concurrent/TaskRunner.execute:(Ljava/lang/Object;)V
	return
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      14      0    this       Lscala/concurrent/ops$;
   0      14      1    p       Lscala/Function0;
   0      14      2    runner       Lscala/concurrent/TaskRunner;

  Signature: length = 0x2
   00 61 

public scala.Function0 future(scala.Function0, scala.concurrent.FutureTaskRunner);
  Signature: (Lscala/Function0;Lscala/concurrent/FutureTaskRunner;)Lscala/Function0;
  Code:
   Stack=4, Locals=3, Args_size=3
	aload_2
	aload_2
	aload_2
	aload_1
	invokeinterface	InterfaceMethod scala/concurrent/TaskRunner.functionAsTask:(Lscala/Function0;)Ljava/lang/Object;
	invokeinterface	InterfaceMethod scala/concurrent/FutureTaskRunner.submit:(Ljava/lang/Object;)Ljava/lang/Object;
	invokeinterface	InterfaceMethod scala/concurrent/FutureTaskRunner.futureAsFunction:(Ljava/lang/Object;)Lscala/Function0;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      20      0    this       Lscala/concurrent/ops$;
   0      20      1    p       Lscala/Function0;
   0      20      2    runner       Lscala/concurrent/FutureTaskRunner;

  Signature: length = 0x2
   00 6E 

public scala.Tuple2 par(scala.Function0, scala.Function0);
  Signature: (Lscala/Function0;Lscala/Function0;)Lscala/Tuple2;
  Code:
   Stack=7, Locals=8, Args_size=3
	new	class scala/concurrent/SyncVar
	dup
	invokespecial	Method scala/concurrent/SyncVar."<init>":()V
	astore	6
	new	class scala/concurrent/ops$$anonfun$par$1
	dup
	aload_2
	aload	6
	invokespecial	Method scala/concurrent/ops$$anonfun$par$1."<init>":(Lscala/Function0;Lscala/concurrent/SyncVar;)V
	astore_3
	aload_0
	getfield	Field defaultRunner:Lscala/concurrent/FutureTaskRunner;
	astore	4
	new	class scala/concurrent/ops$$anonfun$par$2
	dup
	aload_3
	invokespecial	Method scala/concurrent/ops$$anonfun$par$2."<init>":(Lscala/Function0;)V
	astore	5
	aload	4
	aload	4
	aload	5
	invokeinterface	InterfaceMethod scala/concurrent/TaskRunner.functionAsTask:(Lscala/Function0;)Ljava/lang/Object;
	invokeinterface	InterfaceMethod scala/concurrent/TaskRunner.execute:(Ljava/lang/Object;)V
	new	class scala/Tuple2
	dup
	aload_1
	invokeinterface	InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
	aload	6
	invokevirtual	Method scala/concurrent/SyncVar.get:()Ljava/lang/Object;
	checkcast	class scala/Either
	astore	7
	aload	7
	new	class scala/concurrent/ops$$anonfun$getOrThrow$1
	dup
	invokespecial	Method scala/concurrent/ops$$anonfun$getOrThrow$1."<init>":()V
	new	class scala/concurrent/ops$$anonfun$getOrThrow$2
	dup
	invokespecial	Method scala/concurrent/ops$$anonfun$getOrThrow$2."<init>":()V
	invokevirtual	Method scala/Either.fold:(Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
	invokespecial	Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      95      0    this       Lscala/concurrent/ops$;
   0      95      1    xp       Lscala/Function0;
   0      95      2    yp$1       Lscala/Function0;
   20      32      3    x$2$1       Lscala/Function0;
   26      26      4    x$3       Lscala/concurrent/TaskRunner;
   9      85      6    y$1       Lscala/concurrent/SyncVar;

  Signature: length = 0x2
   00 FFFFFF8C 

public void replicate(int, int, scala.Function1);
  Signature: (IILscala/Function1;)V
  Code:
   Stack=5, Locals=8, Args_size=4
l3	iload_1
	iload_2
	if_icmpeq	l1 // return
	iload_1
	iconst_1
	iadd
	iload_2
	if_icmpne	l2 // iload_1
	aload_3
	iload_1
	invokeinterface	InterfaceMethod scala/Function1.apply$mcVI$sp:(I)V
l1	return
l2	iload_1
	iload_2
	iadd
	iconst_2
	idiv
	istore	7
	new	class scala/concurrent/ops$$anonfun$replicate$1
	dup
	iload_1
	aload_3
	iload	7
	invokespecial	Method scala/concurrent/ops$$anonfun$replicate$1."<init>":(ILscala/Function1;I)V
	astore	4
	aload_0
	getfield	Field defaultRunner:Lscala/concurrent/FutureTaskRunner;
	astore	5
	new	class scala/concurrent/ops$$anonfun$replicate$2
	dup
	aload	4
	invokespecial	Method scala/concurrent/ops$$anonfun$replicate$2."<init>":(Lscala/Function0;)V
	astore	6
	aload	5
	aload	5
	aload	6
	invokeinterface	InterfaceMethod scala/concurrent/TaskRunner.functionAsTask:(Lscala/Function0;)Ljava/lang/Object;
	invokeinterface	InterfaceMethod scala/concurrent/TaskRunner.execute:(Ljava/lang/Object;)V
	iload	7
	istore_1
	goto	l3 // iload_1
  Labels:
   	l3 = 0 // iload_1
   	l1 = 19 // return
   	l2 = 20 // iload_1
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      79      0    this       Lscala/concurrent/ops$;
   0      79      1    start$1       I
   0      79      2    end       I
   0      79      3    p$1       Lscala/Function1;
   40      33      4    x$4$1       Lscala/Function0;
   46      27      5    x$5       Lscala/concurrent/TaskRunner;
   27      52      7    mid$1       I

  Signature: length = 0x2
   00 FFFFFFA5 

private scala.concurrent.ops$();
  Signature: ()V
  Code:
   Stack=2, Locals=1, Args_size=1
	aload_0
	invokespecial	Method java/lang/Object."<init>":()V
	aload_0
	putstatic	Field MODULE$:Lscala/concurrent/ops$;
	aload_0
	getstatic	Field scala/concurrent/TaskRunners$.MODULE$:Lscala/concurrent/TaskRunners$;
	invokevirtual	Method scala/concurrent/TaskRunners$.threadRunner:()Lscala/concurrent/FutureTaskRunner;
	putfield	Field defaultRunner:Lscala/concurrent/FutureTaskRunner;
	return
  Labels:

}

