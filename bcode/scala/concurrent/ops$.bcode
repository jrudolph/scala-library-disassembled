Compiled from "ops.scala"
public final class scala.concurrent.ops$ extends java.lang.Object implements scala.ScalaObject
  SourceFile: "ops.scala"
  Scala: length = 0x
   
  InnerClass: 
   public final #189= #186 of #188; //$anonfun$2=class scala/concurrent/ops$$anonfun$2 of class scala/concurrent/ops
   public final #192= #191 of #188; //$anonfun$1=class scala/concurrent/ops$$anonfun$1 of class scala/concurrent/ops
   public #195= #173 of #194; //Catch=class scala/util/control/Exception$Catch of class scala/util/control/Exception
   public final #196= #92 of #188; //$anonfun$par$2=class scala/concurrent/ops$$anonfun$par$2 of class scala/concurrent/ops
   public final #197= #87 of #188; //$anonfun$par$1=class scala/concurrent/ops$$anonfun$par$1 of class scala/concurrent/ops
   public final #198= #53 of #188; //$anonfun$replicate$2=class scala/concurrent/ops$$anonfun$replicate$2 of class scala/concurrent/ops
   public final #199= #48 of #188; //$anonfun$replicate$1=class scala/concurrent/ops$$anonfun$replicate$1 of class scala/concurrent/ops
   public final #200= #110 of #188; //$anonfun$getOrThrow$2=class scala/concurrent/ops$$anonfun$getOrThrow$2 of class scala/concurrent/ops
   public final #201= #107 of #188; //$anonfun$getOrThrow$1=class scala/concurrent/ops$$anonfun$getOrThrow$1 of class scala/concurrent/ops
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	ops.scala;
const #3 = Asciz	Scala;
const #4 = Asciz	MODULE$;
const #5 = Asciz	Lscala/concurrent/ops$;;
const #6 = Asciz	<clinit>;
const #7 = Asciz	()V;
const #8 = Asciz	Code;
const #9 = Asciz	scala/concurrent/ops$;
const #10 = class	#9;	//  scala/concurrent/ops$
const #11 = Asciz	<init>;
const #12 = NameAndType	#11:#7;//  "<init>":()V
const #13 = Method	#10.#12;	//  scala/concurrent/ops$."<init>":()V
const #14 = Asciz	defaultRunner;
const #15 = Asciz	Lscala/concurrent/FutureTaskRunner;;
const #16 = Asciz	LineNumberTable;
const #17 = Asciz	java/lang/Object;
const #18 = class	#17;	//  java/lang/Object
const #19 = Method	#18.#12;	//  java/lang/Object."<init>":()V
const #20 = NameAndType	#4:#5;//  MODULE$:Lscala/concurrent/ops$;
const #21 = Field	#10.#20;	//  scala/concurrent/ops$.MODULE$:Lscala/concurrent/ops$;
const #22 = Asciz	scala/concurrent/TaskRunners$;
const #23 = class	#22;	//  scala/concurrent/TaskRunners$
const #24 = Asciz	Lscala/concurrent/TaskRunners$;;
const #25 = NameAndType	#4:#24;//  MODULE$:Lscala/concurrent/TaskRunners$;
const #26 = Field	#23.#25;	//  scala/concurrent/TaskRunners$.MODULE$:Lscala/concurrent/TaskRunners$;
const #27 = Asciz	threadRunner;
const #28 = Asciz	()Lscala/concurrent/FutureTaskRunner;;
const #29 = NameAndType	#27:#28;//  threadRunner:()Lscala/concurrent/FutureTaskRunner;
const #30 = Method	#23.#29;	//  scala/concurrent/TaskRunners$.threadRunner:()Lscala/concurrent/FutureTaskRunner;
const #31 = NameAndType	#14:#15;//  defaultRunner:Lscala/concurrent/FutureTaskRunner;
const #32 = Field	#10.#31;	//  scala/concurrent/ops$.defaultRunner:Lscala/concurrent/FutureTaskRunner;
const #33 = Asciz	replicate;
const #34 = Asciz	(IILscala/Function1;)V;
const #35 = Asciz	scala/runtime/BoxesRunTime;
const #36 = class	#35;	//  scala/runtime/BoxesRunTime
const #37 = Asciz	boxToInteger;
const #38 = Asciz	(I)Ljava/lang/Integer;;
const #39 = NameAndType	#37:#38;//  boxToInteger:(I)Ljava/lang/Integer;
const #40 = Method	#36.#39;	//  scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
const #41 = Asciz	scala/Function1;
const #42 = class	#41;	//  scala/Function1
const #43 = Asciz	apply;
const #44 = Asciz	(Ljava/lang/Object;)Ljava/lang/Object;;
const #45 = NameAndType	#43:#44;//  apply:(Ljava/lang/Object;)Ljava/lang/Object;
const #46 = InterfaceMethod	#42.#45;	//  scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
const #47 = Asciz	scala/concurrent/ops$$anonfun$replicate$1;
const #48 = class	#47;	//  scala/concurrent/ops$$anonfun$replicate$1
const #49 = Asciz	(ILscala/Function1;I)V;
const #50 = NameAndType	#11:#49;//  "<init>":(ILscala/Function1;I)V
const #51 = Method	#48.#50;	//  scala/concurrent/ops$$anonfun$replicate$1."<init>":(ILscala/Function1;I)V
const #52 = Asciz	scala/concurrent/ops$$anonfun$replicate$2;
const #53 = class	#52;	//  scala/concurrent/ops$$anonfun$replicate$2
const #54 = Asciz	(Lscala/Function0;)V;
const #55 = NameAndType	#11:#54;//  "<init>":(Lscala/Function0;)V
const #56 = Method	#53.#55;	//  scala/concurrent/ops$$anonfun$replicate$2."<init>":(Lscala/Function0;)V
const #57 = Asciz	scala/concurrent/TaskRunner;
const #58 = class	#57;	//  scala/concurrent/TaskRunner
const #59 = Asciz	functionAsTask;
const #60 = Asciz	(Lscala/Function0;)Ljava/lang/Object;;
const #61 = NameAndType	#59:#60;//  functionAsTask:(Lscala/Function0;)Ljava/lang/Object;
const #62 = InterfaceMethod	#58.#61;	//  scala/concurrent/TaskRunner.functionAsTask:(Lscala/Function0;)Ljava/lang/Object;
const #63 = Asciz	execute;
const #64 = Asciz	(Ljava/lang/Object;)V;
const #65 = NameAndType	#63:#64;//  execute:(Ljava/lang/Object;)V
const #66 = InterfaceMethod	#58.#65;	//  scala/concurrent/TaskRunner.execute:(Ljava/lang/Object;)V
const #67 = Asciz	this;
const #68 = Asciz	start$1;
const #69 = Asciz	I;
const #70 = Asciz	end;
const #71 = Asciz	p$1;
const #72 = Asciz	Lscala/Function1;;
const #73 = Asciz	x$4$1;
const #74 = Asciz	Lscala/Function0;;
const #75 = Asciz	x$5;
const #76 = Asciz	Lscala/concurrent/TaskRunner;;
const #77 = Asciz	mid$1;
const #78 = Asciz	LocalVariableTable;
const #79 = Asciz	(IILscala/Function1<Ljava/lang/Integer;Ljava/lang/Object;>;)V;
const #80 = Asciz	Signature;
const #81 = Asciz	par;
const #82 = Asciz	(Lscala/Function0;Lscala/Function0;)Lscala/Tuple2;;
const #83 = Asciz	scala/concurrent/SyncVar;
const #84 = class	#83;	//  scala/concurrent/SyncVar
const #85 = Method	#84.#12;	//  scala/concurrent/SyncVar."<init>":()V
const #86 = Asciz	scala/concurrent/ops$$anonfun$par$1;
const #87 = class	#86;	//  scala/concurrent/ops$$anonfun$par$1
const #88 = Asciz	(Lscala/Function0;Lscala/concurrent/SyncVar;)V;
const #89 = NameAndType	#11:#88;//  "<init>":(Lscala/Function0;Lscala/concurrent/SyncVar;)V
const #90 = Method	#87.#89;	//  scala/concurrent/ops$$anonfun$par$1."<init>":(Lscala/Function0;Lscala/concurrent/SyncVar;)V
const #91 = Asciz	scala/concurrent/ops$$anonfun$par$2;
const #92 = class	#91;	//  scala/concurrent/ops$$anonfun$par$2
const #93 = Method	#92.#55;	//  scala/concurrent/ops$$anonfun$par$2."<init>":(Lscala/Function0;)V
const #94 = Asciz	scala/Tuple2;
const #95 = class	#94;	//  scala/Tuple2
const #96 = Asciz	scala/Function0;
const #97 = class	#96;	//  scala/Function0
const #98 = Asciz	()Ljava/lang/Object;;
const #99 = NameAndType	#43:#98;//  apply:()Ljava/lang/Object;
const #100 = InterfaceMethod	#97.#99;	//  scala/Function0.apply:()Ljava/lang/Object;
const #101 = Asciz	get;
const #102 = NameAndType	#101:#98;//  get:()Ljava/lang/Object;
const #103 = Method	#84.#102;	//  scala/concurrent/SyncVar.get:()Ljava/lang/Object;
const #104 = Asciz	scala/Either;
const #105 = class	#104;	//  scala/Either
const #106 = Asciz	scala/concurrent/ops$$anonfun$getOrThrow$1;
const #107 = class	#106;	//  scala/concurrent/ops$$anonfun$getOrThrow$1
const #108 = Method	#107.#12;	//  scala/concurrent/ops$$anonfun$getOrThrow$1."<init>":()V
const #109 = Asciz	scala/concurrent/ops$$anonfun$getOrThrow$2;
const #110 = class	#109;	//  scala/concurrent/ops$$anonfun$getOrThrow$2
const #111 = Method	#110.#12;	//  scala/concurrent/ops$$anonfun$getOrThrow$2."<init>":()V
const #112 = Asciz	fold;
const #113 = Asciz	(Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;;
const #114 = NameAndType	#112:#113;//  fold:(Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
const #115 = Method	#105.#114;	//  scala/Either.fold:(Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
const #116 = Asciz	(Ljava/lang/Object;Ljava/lang/Object;)V;
const #117 = NameAndType	#11:#116;//  "<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
const #118 = Method	#95.#117;	//  scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
const #119 = Asciz	xp;
const #120 = Asciz	yp$1;
const #121 = Asciz	x$2$1;
const #122 = Asciz	x$3;
const #123 = Asciz	y$1;
const #124 = Asciz	Lscala/concurrent/SyncVar;;
const #125 = Asciz	<A:Ljava/lang/Object;B:Ljava/lang/Object;>(Lscala/Function0<TA;>;Lscala/Function0<TB;>;)Lscala/Tuple2<TA;TB;>;;
const #126 = Asciz	future;
const #127 = Asciz	(Lscala/Function0;Lscala/concurrent/FutureTaskRunner;)Lscala/Function0;;
const #128 = Asciz	scala/concurrent/FutureTaskRunner;
const #129 = class	#128;	//  scala/concurrent/FutureTaskRunner
const #130 = Asciz	submit;
const #131 = NameAndType	#130:#44;//  submit:(Ljava/lang/Object;)Ljava/lang/Object;
const #132 = InterfaceMethod	#129.#131;	//  scala/concurrent/FutureTaskRunner.submit:(Ljava/lang/Object;)Ljava/lang/Object;
const #133 = Asciz	futureAsFunction;
const #134 = Asciz	(Ljava/lang/Object;)Lscala/Function0;;
const #135 = NameAndType	#133:#134;//  futureAsFunction:(Ljava/lang/Object;)Lscala/Function0;
const #136 = InterfaceMethod	#129.#135;	//  scala/concurrent/FutureTaskRunner.futureAsFunction:(Ljava/lang/Object;)Lscala/Function0;
const #137 = Asciz	p;
const #138 = Asciz	runner;
const #139 = Asciz	<A:Ljava/lang/Object;>(Lscala/Function0<TA;>;Lscala/concurrent/FutureTaskRunner;)Lscala/Function0<TA;>;;
const #140 = Asciz	spawn;
const #141 = Asciz	(Lscala/Function0;Lscala/concurrent/TaskRunner;)V;
const #142 = Asciz	(Lscala/Function0<Ljava/lang/Object;>;Lscala/concurrent/TaskRunner;)V;
const #143 = Asciz	getOrThrow;
const #144 = Asciz	(Lscala/Either;)Ljava/lang/Object;;
const #145 = Asciz	x;
const #146 = Asciz	Lscala/Either;;
const #147 = Asciz	<T:Ljava/lang/Throwable;A:Ljava/lang/Object;>(Lscala/Either<TT;TA;>;)TA;;
const #148 = Asciz	tryCatchEx;
const #149 = Asciz	(Lscala/Function0;)Lscala/Either;;
const #150 = Asciz	scala/Right;
const #151 = class	#150;	//  scala/Right
const #152 = NameAndType	#11:#64;//  "<init>":(Ljava/lang/Object;)V
const #153 = Method	#151.#152;	//  scala/Right."<init>":(Ljava/lang/Object;)V
const #154 = Asciz	scala/Left;
const #155 = class	#154;	//  scala/Left
const #156 = Method	#155.#152;	//  scala/Left."<init>":(Ljava/lang/Object;)V
const #157 = Asciz	java/lang/Exception;
const #158 = class	#157;	//  java/lang/Exception
const #159 = Asciz	body;
const #160 = Asciz	exceptionResult1;
const #161 = Asciz	<A:Ljava/lang/Object;>(Lscala/Function0<TA;>;)Lscala/Either<Ljava/lang/Exception;TA;>;;
const #162 = Asciz	tryCatch;
const #163 = Asciz	scala/util/control/Exception$;
const #164 = class	#163;	//  scala/util/control/Exception$
const #165 = Asciz	Lscala/util/control/Exception$;;
const #166 = NameAndType	#4:#165;//  MODULE$:Lscala/util/control/Exception$;
const #167 = Field	#164.#166;	//  scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
const #168 = Asciz	allCatch;
const #169 = Asciz	()Lscala/util/control/Exception$Catch;;
const #170 = NameAndType	#168:#169;//  allCatch:()Lscala/util/control/Exception$Catch;
const #171 = Method	#164.#170;	//  scala/util/control/Exception$.allCatch:()Lscala/util/control/Exception$Catch;
const #172 = Asciz	scala/util/control/Exception$Catch;
const #173 = class	#172;	//  scala/util/control/Exception$Catch
const #174 = Asciz	either;
const #175 = NameAndType	#174:#149;//  either:(Lscala/Function0;)Lscala/Either;
const #176 = Method	#173.#175;	//  scala/util/control/Exception$Catch.either:(Lscala/Function0;)Lscala/Either;
const #177 = Asciz	<A:Ljava/lang/Object;>(Lscala/Function0<TA;>;)Lscala/Either<Ljava/lang/Throwable;TA;>;;
const #178 = Asciz	future$default$2;
const #179 = Asciz	(Lscala/Function0;)Lscala/concurrent/FutureTaskRunner;;
const #180 = NameAndType	#14:#28;//  defaultRunner:()Lscala/concurrent/FutureTaskRunner;
const #181 = Method	#10.#180;	//  scala/concurrent/ops$.defaultRunner:()Lscala/concurrent/FutureTaskRunner;
const #182 = Asciz	spawn$default$2;
const #183 = Asciz	(Lscala/Function0;)Lscala/concurrent/TaskRunner;;
const #184 = Asciz	InnerClasses;
const #185 = Asciz	scala/concurrent/ops$$anonfun$2;
const #186 = class	#185;	//  scala/concurrent/ops$$anonfun$2
const #187 = Asciz	scala/concurrent/ops;
const #188 = class	#187;	//  scala/concurrent/ops
const #189 = Asciz	$anonfun$2;
const #190 = Asciz	scala/concurrent/ops$$anonfun$1;
const #191 = class	#190;	//  scala/concurrent/ops$$anonfun$1
const #192 = Asciz	$anonfun$1;
const #193 = Asciz	scala/util/control/Exception;
const #194 = class	#193;	//  scala/util/control/Exception
const #195 = Asciz	Catch;
const #196 = Asciz	$anonfun$par$2;
const #197 = Asciz	$anonfun$par$1;
const #198 = Asciz	$anonfun$replicate$2;
const #199 = Asciz	$anonfun$replicate$1;
const #200 = Asciz	$anonfun$getOrThrow$2;
const #201 = Asciz	$anonfun$getOrThrow$1;
const #202 = Asciz	scala/ScalaObject;
const #203 = class	#202;	//  scala/ScalaObject

{
public static final scala.concurrent.ops$ MODULE$;

public static {};
  Code:
   Stack=1, Locals=0, Args_size=0
   0:	new	#10; //class scala/concurrent/ops$
   3:	invokespecial	#13; //Method "<init>":()V
   6:	return

public void replicate(int, int, scala.Function1);
  Code:
   Stack=5, Locals=8, Args_size=4
   0:	iload_1
   1:	iload_2
   2:	if_icmpeq	23
   5:	iload_1
   6:	iconst_1
   7:	iadd
   8:	iload_2
   9:	if_icmpne	24
   12:	aload_3
   13:	iload_1
   14:	invokestatic	#40; //Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
   17:	invokeinterface	#46,  2; //InterfaceMethod scala/Function1.apply:(Ljava/lang/Object;)Ljava/lang/Object;
   22:	pop
   23:	return
   24:	iload_1
   25:	iload_2
   26:	iadd
   27:	iconst_2
   28:	idiv
   29:	istore	7
   31:	new	#48; //class scala/concurrent/ops$$anonfun$replicate$1
   34:	dup
   35:	iload_1
   36:	aload_3
   37:	iload	7
   39:	invokespecial	#51; //Method scala/concurrent/ops$$anonfun$replicate$1."<init>":(ILscala/Function1;I)V
   42:	astore	4
   44:	aload_0
   45:	getfield	#32; //Field defaultRunner:Lscala/concurrent/FutureTaskRunner;
   48:	astore	5
   50:	new	#53; //class scala/concurrent/ops$$anonfun$replicate$2
   53:	dup
   54:	aload	4
   56:	invokespecial	#56; //Method scala/concurrent/ops$$anonfun$replicate$2."<init>":(Lscala/Function0;)V
   59:	astore	6
   61:	aload	5
   63:	aload	5
   65:	aload	6
   67:	invokeinterface	#62,  2; //InterfaceMethod scala/concurrent/TaskRunner.functionAsTask:(Lscala/Function0;)Ljava/lang/Object;
   72:	invokeinterface	#66,  2; //InterfaceMethod scala/concurrent/TaskRunner.execute:(Ljava/lang/Object;)V
   77:	iload	7
   79:	istore_1
   80:	goto	0
  LineNumberTable: 
   line 76: 0
   line 78: 5
   line 79: 12
   line 75: 23
   line 81: 24
   line 82: 31
   line 83: 77

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      83      0    this       Lscala/concurrent/ops$;
   0      83      1    start$1       I
   0      83      2    end       I
   0      83      3    p$1       Lscala/Function1;
   44      33      4    x$4$1       Lscala/Function0;
   50      27      5    x$5       Lscala/concurrent/TaskRunner;
   31      52      7    mid$1       I

  Signature: length = 0x2
   00 4F 

public scala.Tuple2 par(scala.Function0, scala.Function0);
  Code:
   Stack=7, Locals=8, Args_size=3
   0:	new	#84; //class scala/concurrent/SyncVar
   3:	dup
   4:	invokespecial	#85; //Method scala/concurrent/SyncVar."<init>":()V
   7:	astore	6
   9:	new	#87; //class scala/concurrent/ops$$anonfun$par$1
   12:	dup
   13:	aload_2
   14:	aload	6
   16:	invokespecial	#90; //Method scala/concurrent/ops$$anonfun$par$1."<init>":(Lscala/Function0;Lscala/concurrent/SyncVar;)V
   19:	astore_3
   20:	aload_0
   21:	getfield	#32; //Field defaultRunner:Lscala/concurrent/FutureTaskRunner;
   24:	astore	4
   26:	new	#92; //class scala/concurrent/ops$$anonfun$par$2
   29:	dup
   30:	aload_3
   31:	invokespecial	#93; //Method scala/concurrent/ops$$anonfun$par$2."<init>":(Lscala/Function0;)V
   34:	astore	5
   36:	aload	4
   38:	aload	4
   40:	aload	5
   42:	invokeinterface	#62,  2; //InterfaceMethod scala/concurrent/TaskRunner.functionAsTask:(Lscala/Function0;)Ljava/lang/Object;
   47:	invokeinterface	#66,  2; //InterfaceMethod scala/concurrent/TaskRunner.execute:(Ljava/lang/Object;)V
   52:	new	#95; //class scala/Tuple2
   55:	dup
   56:	aload_1
   57:	invokeinterface	#100,  1; //InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
   62:	aload	6
   64:	invokevirtual	#103; //Method scala/concurrent/SyncVar.get:()Ljava/lang/Object;
   67:	checkcast	#105; //class scala/Either
   70:	astore	7
   72:	aload	7
   74:	new	#107; //class scala/concurrent/ops$$anonfun$getOrThrow$1
   77:	dup
   78:	invokespecial	#108; //Method scala/concurrent/ops$$anonfun$getOrThrow$1."<init>":()V
   81:	new	#110; //class scala/concurrent/ops$$anonfun$getOrThrow$2
   84:	dup
   85:	invokespecial	#111; //Method scala/concurrent/ops$$anonfun$getOrThrow$2."<init>":()V
   88:	invokevirtual	#115; //Method scala/Either.fold:(Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
   91:	invokespecial	#118; //Method scala/Tuple2."<init>":(Ljava/lang/Object;Ljava/lang/Object;)V
   94:	areturn
  LineNumberTable: 
   line 65: 0
   line 66: 9
   line 67: 14
   line 66: 16
   line 67: 52

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      95      0    this       Lscala/concurrent/ops$;
   0      95      1    xp       Lscala/Function0;
   0      95      2    yp$1       Lscala/Function0;
   20      32      3    x$2$1       Lscala/Function0;
   26      26      4    x$3       Lscala/concurrent/TaskRunner;
   9      85      6    y$1       Lscala/concurrent/SyncVar;

  Signature: length = 0x2
   00 7D 

public scala.Function0 future(scala.Function0, scala.concurrent.FutureTaskRunner);
  Code:
   Stack=4, Locals=3, Args_size=3
   0:	aload_2
   1:	aload_2
   2:	aload_2
   3:	aload_1
   4:	invokeinterface	#62,  2; //InterfaceMethod scala/concurrent/TaskRunner.functionAsTask:(Lscala/Function0;)Ljava/lang/Object;
   9:	invokeinterface	#132,  2; //InterfaceMethod scala/concurrent/FutureTaskRunner.submit:(Ljava/lang/Object;)Ljava/lang/Object;
   14:	invokeinterface	#136,  2; //InterfaceMethod scala/concurrent/FutureTaskRunner.futureAsFunction:(Ljava/lang/Object;)Lscala/Function0;
   19:	areturn
  LineNumberTable: 
   line 56: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      20      0    this       Lscala/concurrent/ops$;
   0      20      1    p       Lscala/Function0;
   0      20      2    runner       Lscala/concurrent/FutureTaskRunner;

  Signature: length = 0x2
   00 FFFFFF8B 

public void spawn(scala.Function0, scala.concurrent.TaskRunner);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_2
   1:	aload_2
   2:	aload_1
   3:	invokeinterface	#62,  2; //InterfaceMethod scala/concurrent/TaskRunner.functionAsTask:(Lscala/Function0;)Ljava/lang/Object;
   8:	invokeinterface	#66,  2; //InterfaceMethod scala/concurrent/TaskRunner.execute:(Ljava/lang/Object;)V
   13:	return
  LineNumberTable: 
   line 48: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      14      0    this       Lscala/concurrent/ops$;
   0      14      1    p       Lscala/Function0;
   0      14      2    runner       Lscala/concurrent/TaskRunner;

  Signature: length = 0x2
   00 FFFFFF8E 

public java.lang.Object getOrThrow(scala.Either);
  Code:
   Stack=4, Locals=2, Args_size=2
   0:	aload_1
   1:	new	#107; //class scala/concurrent/ops$$anonfun$getOrThrow$1
   4:	dup
   5:	invokespecial	#108; //Method scala/concurrent/ops$$anonfun$getOrThrow$1."<init>":()V
   8:	new	#110; //class scala/concurrent/ops$$anonfun$getOrThrow$2
   11:	dup
   12:	invokespecial	#111; //Method scala/concurrent/ops$$anonfun$getOrThrow$2."<init>":()V
   15:	invokevirtual	#115; //Method scala/Either.fold:(Lscala/Function1;Lscala/Function1;)Ljava/lang/Object;
   18:	areturn
  LineNumberTable: 
   line 41: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      19      0    this       Lscala/concurrent/ops$;
   0      19      1    x       Lscala/Either;

  Signature: length = 0x2
   00 FFFFFF93 

public scala.Either tryCatchEx(scala.Function0);
  Code:
   Stack=3, Locals=4, Args_size=2
   0:	new	#151; //class scala/Right
   3:	dup
   4:	aload_1
   5:	invokeinterface	#100,  1; //InterfaceMethod scala/Function0.apply:()Ljava/lang/Object;
   10:	invokespecial	#153; //Method scala/Right."<init>":(Ljava/lang/Object;)V
   13:	astore_2
   14:	goto	27
   17:	astore_3
   18:	new	#155; //class scala/Left
   21:	dup
   22:	aload_3
   23:	invokespecial	#156; //Method scala/Left."<init>":(Ljava/lang/Object;)V
   26:	astore_2
   27:	aload_2
   28:	areturn
  Exception table:
   from   to  target type
     0    17    17   Class java/lang/Exception

  LineNumberTable: 
   line 35: 0
   line 36: 17

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      29      0    this       Lscala/concurrent/ops$;
   0      29      1    body       Lscala/Function0;
   0      28      2    exceptionResult1       Lscala/Either;

  Signature: length = 0x2
   00 FFFFFFA1 

public scala.Either tryCatch(scala.Function0);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	getstatic	#167; //Field scala/util/control/Exception$.MODULE$:Lscala/util/control/Exception$;
   3:	invokevirtual	#171; //Method scala/util/control/Exception$.allCatch:()Lscala/util/control/Exception$Catch;
   6:	aload_1
   7:	invokevirtual	#176; //Method scala/util/control/Exception$Catch.either:(Lscala/Function0;)Lscala/Either;
   10:	areturn
  LineNumberTable: 
   line 31: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/concurrent/ops$;
   0      11      1    body       Lscala/Function0;

  Signature: length = 0x2
   00 FFFFFFB1 

public scala.concurrent.FutureTaskRunner defaultRunner();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#32; //Field defaultRunner:Lscala/concurrent/FutureTaskRunner;
   4:	areturn
  LineNumberTable: 
   line 23: 0


public scala.concurrent.FutureTaskRunner future$default$2(scala.Function0);
  Code:
   Stack=1, Locals=2, Args_size=2
   0:	aload_0
   1:	invokevirtual	#181; //Method defaultRunner:()Lscala/concurrent/FutureTaskRunner;
   4:	areturn
  LineNumberTable: 
   line 55: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      5      0    this       Lscala/concurrent/ops$;
   0      5      1    p       Lscala/Function0;


public scala.concurrent.TaskRunner spawn$default$2(scala.Function0);
  Code:
   Stack=1, Locals=2, Args_size=2
   0:	aload_0
   1:	invokevirtual	#181; //Method defaultRunner:()Lscala/concurrent/FutureTaskRunner;
   4:	areturn
  LineNumberTable: 
   line 47: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      5      0    this       Lscala/concurrent/ops$;
   0      5      1    p       Lscala/Function0;


}

