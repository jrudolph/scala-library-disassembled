public interface scala.actors.threadpool.BlockingQueue extends scala.actors.threadpool.Queue
  minor version: 0
  major version: 49
  Constant pool:
const #1 = class	#23;	//  scala/actors/threadpool/BlockingQueue
const #2 = class	#24;	//  java/lang/Object
const #3 = class	#25;	//  scala/actors/threadpool/Queue
const #4 = Asciz	add;
const #5 = Asciz	(Ljava/lang/Object;)Z;
const #6 = Asciz	offer;
const #7 = Asciz	put;
const #8 = Asciz	(Ljava/lang/Object;)V;
const #9 = Asciz	Exceptions;
const #10 = class	#26;	//  java/lang/InterruptedException
const #11 = Asciz	(Ljava/lang/Object;JLscala/actors/threadpool/TimeUnit;)Z;
const #12 = Asciz	take;
const #13 = Asciz	()Ljava/lang/Object;;
const #14 = Asciz	poll;
const #15 = Asciz	(JLscala/actors/threadpool/TimeUnit;)Ljava/lang/Object;;
const #16 = Asciz	remainingCapacity;
const #17 = Asciz	()I;
const #18 = Asciz	remove;
const #19 = Asciz	contains;
const #20 = Asciz	drainTo;
const #21 = Asciz	(Ljava/util/Collection;)I;
const #22 = Asciz	(Ljava/util/Collection;I)I;
const #23 = Asciz	scala/actors/threadpool/BlockingQueue;
const #24 = Asciz	java/lang/Object;
const #25 = Asciz	scala/actors/threadpool/Queue;
const #26 = Asciz	java/lang/InterruptedException;

{
public abstract boolean add(java.lang.Object);

public abstract boolean offer(java.lang.Object);

public abstract void put(java.lang.Object)   throws java.lang.InterruptedException;
  Exceptions: 
   throws java.lang.InterruptedException
public abstract boolean offer(java.lang.Object, long, scala.actors.threadpool.TimeUnit)   throws java.lang.InterruptedException;
  Exceptions: 
   throws java.lang.InterruptedException
public abstract java.lang.Object take()   throws java.lang.InterruptedException;
  Exceptions: 
   throws java.lang.InterruptedException
public abstract java.lang.Object poll(long, scala.actors.threadpool.TimeUnit)   throws java.lang.InterruptedException;
  Exceptions: 
   throws java.lang.InterruptedException
public abstract int remainingCapacity();

public abstract boolean remove(java.lang.Object);

public abstract boolean contains(java.lang.Object);

public abstract int drainTo(java.util.Collection);

public abstract int drainTo(java.util.Collection, int);

}

