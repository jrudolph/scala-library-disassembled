public class scala.actors.threadpool.AtomicInteger extends java.lang.Number implements java.io.Serializable
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Method	#6.#43;	//  java/lang/Number."<init>":()V
const #2 = Field	#5.#44;	//  scala/actors/threadpool/AtomicInteger.value:I
const #3 = Method	#5.#45;	//  scala/actors/threadpool/AtomicInteger.get:()I
const #4 = Method	#46.#47;	//  java/lang/Integer.toString:(I)Ljava/lang/String;
const #5 = class	#48;	//  scala/actors/threadpool/AtomicInteger
const #6 = class	#49;	//  java/lang/Number
const #7 = class	#50;	//  java/io/Serializable
const #8 = Asciz	serialVersionUID;
const #9 = Asciz	J;
const #10 = Asciz	ConstantValue;
const #11 = long	6214790243416807050l;
const #13 = Asciz	value;
const #14 = Asciz	I;
const #15 = Asciz	<init>;
const #16 = Asciz	(I)V;
const #17 = Asciz	Code;
const #18 = Asciz	()V;
const #19 = Asciz	get;
const #20 = Asciz	()I;
const #21 = Asciz	set;
const #22 = Asciz	lazySet;
const #23 = Asciz	getAndSet;
const #24 = Asciz	(I)I;
const #25 = Asciz	compareAndSet;
const #26 = Asciz	(II)Z;
const #27 = Asciz	weakCompareAndSet;
const #28 = Asciz	getAndIncrement;
const #29 = Asciz	getAndDecrement;
const #30 = Asciz	getAndAdd;
const #31 = Asciz	incrementAndGet;
const #32 = Asciz	decrementAndGet;
const #33 = Asciz	addAndGet;
const #34 = Asciz	toString;
const #35 = Asciz	()Ljava/lang/String;;
const #36 = Asciz	intValue;
const #37 = Asciz	longValue;
const #38 = Asciz	()J;
const #39 = Asciz	floatValue;
const #40 = Asciz	()F;
const #41 = Asciz	doubleValue;
const #42 = Asciz	()D;
const #43 = NameAndType	#15:#18;//  "<init>":()V
const #44 = NameAndType	#13:#14;//  value:I
const #45 = NameAndType	#19:#20;//  get:()I
const #46 = class	#51;	//  java/lang/Integer
const #47 = NameAndType	#34:#52;//  toString:(I)Ljava/lang/String;
const #48 = Asciz	scala/actors/threadpool/AtomicInteger;
const #49 = Asciz	java/lang/Number;
const #50 = Asciz	java/io/Serializable;
const #51 = Asciz	java/lang/Integer;
const #52 = Asciz	(I)Ljava/lang/String;;

{
public scala.actors.threadpool.AtomicInteger(int);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	invokespecial	#1; //Method java/lang/Number."<init>":()V
   4:	aload_0
   5:	iload_1
   6:	putfield	#2; //Field value:I
   9:	return

public scala.actors.threadpool.AtomicInteger();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokespecial	#1; //Method java/lang/Number."<init>":()V
   4:	return

public final int get();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#2; //Field value:I
   4:	ireturn

public final synchronized void set(int);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	iload_1
   2:	putfield	#2; //Field value:I
   5:	return

public final synchronized void lazySet(int);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	iload_1
   2:	putfield	#2; //Field value:I
   5:	return

public final synchronized int getAndSet(int);
  Code:
   Stack=2, Locals=3, Args_size=2
   0:	aload_0
   1:	getfield	#2; //Field value:I
   4:	istore_2
   5:	aload_0
   6:	iload_1
   7:	putfield	#2; //Field value:I
   10:	iload_2
   11:	ireturn

public final synchronized boolean compareAndSet(int, int);
  Code:
   Stack=2, Locals=3, Args_size=3
   0:	aload_0
   1:	getfield	#2; //Field value:I
   4:	iload_1
   5:	if_icmpne	15
   8:	aload_0
   9:	iload_2
   10:	putfield	#2; //Field value:I
   13:	iconst_1
   14:	ireturn
   15:	iconst_0
   16:	ireturn

public final synchronized boolean weakCompareAndSet(int, int);
  Code:
   Stack=2, Locals=3, Args_size=3
   0:	aload_0
   1:	getfield	#2; //Field value:I
   4:	iload_1
   5:	if_icmpne	15
   8:	aload_0
   9:	iload_2
   10:	putfield	#2; //Field value:I
   13:	iconst_1
   14:	ireturn
   15:	iconst_0
   16:	ireturn

public final synchronized int getAndIncrement();
  Code:
   Stack=4, Locals=1, Args_size=1
   0:	aload_0
   1:	dup
   2:	getfield	#2; //Field value:I
   5:	dup_x1
   6:	iconst_1
   7:	iadd
   8:	putfield	#2; //Field value:I
   11:	ireturn

public final synchronized int getAndDecrement();
  Code:
   Stack=4, Locals=1, Args_size=1
   0:	aload_0
   1:	dup
   2:	getfield	#2; //Field value:I
   5:	dup_x1
   6:	iconst_1
   7:	isub
   8:	putfield	#2; //Field value:I
   11:	ireturn

public final synchronized int getAndAdd(int);
  Code:
   Stack=3, Locals=3, Args_size=2
   0:	aload_0
   1:	getfield	#2; //Field value:I
   4:	istore_2
   5:	aload_0
   6:	dup
   7:	getfield	#2; //Field value:I
   10:	iload_1
   11:	iadd
   12:	putfield	#2; //Field value:I
   15:	iload_2
   16:	ireturn

public final synchronized int incrementAndGet();
  Code:
   Stack=3, Locals=1, Args_size=1
   0:	aload_0
   1:	dup
   2:	getfield	#2; //Field value:I
   5:	iconst_1
   6:	iadd
   7:	dup_x1
   8:	putfield	#2; //Field value:I
   11:	ireturn

public final synchronized int decrementAndGet();
  Code:
   Stack=3, Locals=1, Args_size=1
   0:	aload_0
   1:	dup
   2:	getfield	#2; //Field value:I
   5:	iconst_1
   6:	isub
   7:	dup_x1
   8:	putfield	#2; //Field value:I
   11:	ireturn

public final synchronized int addAndGet(int);
  Code:
   Stack=3, Locals=2, Args_size=2
   0:	aload_0
   1:	dup
   2:	getfield	#2; //Field value:I
   5:	iload_1
   6:	iadd
   7:	dup_x1
   8:	putfield	#2; //Field value:I
   11:	ireturn

public java.lang.String toString();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokevirtual	#3; //Method get:()I
   4:	invokestatic	#4; //Method java/lang/Integer.toString:(I)Ljava/lang/String;
   7:	areturn

public int intValue();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokevirtual	#3; //Method get:()I
   4:	ireturn

public long longValue();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	aload_0
   1:	invokevirtual	#3; //Method get:()I
   4:	i2l
   5:	lreturn

public float floatValue();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokevirtual	#3; //Method get:()I
   4:	i2f
   5:	freturn

public double doubleValue();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	aload_0
   1:	invokevirtual	#3; //Method get:()I
   4:	i2d
   5:	dreturn

}

