abstract class scala.actors.threadpool.locks.ReentrantReadWriteLock$Sync extends java.lang.Object implements java.io.Serializable
  InnerClass: 
   abstract #105= #26 of #103; //Sync=class scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync of class scala/actors/threadpool/locks/ReentrantReadWriteLock
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Method	#27.#78;	//  java/lang/Object."<init>":()V
const #2 = Field	#26.#79;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.activeReaders_:I
const #3 = Field	#26.#80;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.activeWriter_:Ljava/lang/Thread;
const #4 = Field	#26.#81;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.waitingReaders_:I
const #5 = Field	#26.#82;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.waitingWriters_:I
const #6 = Field	#26.#83;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.writeHolds_:I
const #7 = class	#84;	//  java/util/HashMap
const #8 = Method	#7.#78;	//  java/util/HashMap."<init>":()V
const #9 = Field	#26.#85;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.readers_:Ljava/util/HashMap;
const #10 = Method	#26.#86;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.startRead:()Z
const #11 = Method	#26.#87;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.startWrite:()Z
const #12 = Method	#88.#89;	//  java/lang/Thread.currentThread:()Ljava/lang/Thread;
const #13 = Method	#7.#90;	//  java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
const #14 = class	#91;	//  java/lang/Integer
const #15 = Method	#14.#92;	//  java/lang/Integer.intValue:()I
const #16 = Method	#14.#93;	//  java/lang/Integer."<init>":(I)V
const #17 = Method	#7.#94;	//  java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
const #18 = Method	#26.#95;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.allowReader:()Z
const #19 = Field	#26.#96;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.IONE:Ljava/lang/Integer;
const #20 = Method	#7.#97;	//  java/util/HashMap.size:()I
const #21 = class	#98;	//  java/lang/IllegalMonitorStateException
const #22 = Method	#21.#78;	//  java/lang/IllegalMonitorStateException."<init>":()V
const #23 = Method	#7.#99;	//  java/util/HashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
const #24 = Method	#26.#100;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.isWriteLockedByCurrentThread:()Z
const #25 = Method	#101.#102;	//  java/io/ObjectInputStream.defaultReadObject:()V
const #26 = class	#104;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync
const #27 = class	#107;	//  java/lang/Object
const #28 = class	#108;	//  java/io/Serializable
const #29 = Asciz	NONE;
const #30 = Asciz	I;
const #31 = Asciz	ConstantValue;
const #32 = int	0;
const #33 = Asciz	READER;
const #34 = int	1;
const #35 = Asciz	WRITER;
const #36 = int	2;
const #37 = Asciz	activeReaders_;
const #38 = Asciz	activeWriter_;
const #39 = Asciz	Ljava/lang/Thread;;
const #40 = Asciz	waitingReaders_;
const #41 = Asciz	waitingWriters_;
const #42 = Asciz	writeHolds_;
const #43 = Asciz	readers_;
const #44 = Asciz	Ljava/util/HashMap;;
const #45 = Asciz	IONE;
const #46 = Asciz	Ljava/lang/Integer;;
const #47 = Asciz	<init>;
const #48 = Asciz	()V;
const #49 = Asciz	Code;
const #50 = Asciz	startReadFromNewReader;
const #51 = Asciz	()Z;
const #52 = Asciz	startWriteFromNewWriter;
const #53 = Asciz	startReadFromWaitingReader;
const #54 = Asciz	startWriteFromWaitingWriter;
const #55 = Asciz	cancelledWaitingReader;
const #56 = Asciz	cancelledWaitingWriter;
const #57 = Asciz	allowReader;
const #58 = Asciz	startRead;
const #59 = Asciz	startWrite;
const #60 = Asciz	endRead;
const #61 = Asciz	()I;
const #62 = Asciz	endWrite;
const #63 = Asciz	getOwner;
const #64 = Asciz	()Ljava/lang/Thread;;
const #65 = Asciz	getReadLockCount;
const #66 = Asciz	isWriteLocked;
const #67 = Asciz	isWriteLockedByCurrentThread;
const #68 = Asciz	getWriteHoldCount;
const #69 = Asciz	getReadHoldCount;
const #70 = Asciz	hasQueuedThreads;
const #71 = Asciz	getQueueLength;
const #72 = Asciz	readObject;
const #73 = Asciz	(Ljava/io/ObjectInputStream;)V;
const #74 = Asciz	Exceptions;
const #75 = class	#109;	//  java/io/IOException
const #76 = class	#110;	//  java/lang/ClassNotFoundException
const #77 = Asciz	<clinit>;
const #78 = NameAndType	#47:#48;//  "<init>":()V
const #79 = NameAndType	#37:#30;//  activeReaders_:I
const #80 = NameAndType	#38:#39;//  activeWriter_:Ljava/lang/Thread;
const #81 = NameAndType	#40:#30;//  waitingReaders_:I
const #82 = NameAndType	#41:#30;//  waitingWriters_:I
const #83 = NameAndType	#42:#30;//  writeHolds_:I
const #84 = Asciz	java/util/HashMap;
const #85 = NameAndType	#43:#44;//  readers_:Ljava/util/HashMap;
const #86 = NameAndType	#58:#51;//  startRead:()Z
const #87 = NameAndType	#59:#51;//  startWrite:()Z
const #88 = class	#111;	//  java/lang/Thread
const #89 = NameAndType	#112:#64;//  currentThread:()Ljava/lang/Thread;
const #90 = NameAndType	#113:#114;//  get:(Ljava/lang/Object;)Ljava/lang/Object;
const #91 = Asciz	java/lang/Integer;
const #92 = NameAndType	#115:#61;//  intValue:()I
const #93 = NameAndType	#47:#116;//  "<init>":(I)V
const #94 = NameAndType	#117:#118;//  put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
const #95 = NameAndType	#57:#51;//  allowReader:()Z
const #96 = NameAndType	#45:#46;//  IONE:Ljava/lang/Integer;
const #97 = NameAndType	#119:#61;//  size:()I
const #98 = Asciz	java/lang/IllegalMonitorStateException;
const #99 = NameAndType	#120:#114;//  remove:(Ljava/lang/Object;)Ljava/lang/Object;
const #100 = NameAndType	#67:#51;//  isWriteLockedByCurrentThread:()Z
const #101 = class	#121;	//  java/io/ObjectInputStream
const #102 = NameAndType	#122:#48;//  defaultReadObject:()V
const #103 = class	#123;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock
const #104 = Asciz	scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync;
const #105 = Asciz	Sync;
const #106 = Asciz	InnerClasses;
const #107 = Asciz	java/lang/Object;
const #108 = Asciz	java/io/Serializable;
const #109 = Asciz	java/io/IOException;
const #110 = Asciz	java/lang/ClassNotFoundException;
const #111 = Asciz	java/lang/Thread;
const #112 = Asciz	currentThread;
const #113 = Asciz	get;
const #114 = Asciz	(Ljava/lang/Object;)Ljava/lang/Object;;
const #115 = Asciz	intValue;
const #116 = Asciz	(I)V;
const #117 = Asciz	put;
const #118 = Asciz	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;;
const #119 = Asciz	size;
const #120 = Asciz	remove;
const #121 = Asciz	java/io/ObjectInputStream;
const #122 = Asciz	defaultReadObject;
const #123 = Asciz	scala/actors/threadpool/locks/ReentrantReadWriteLock;

{
transient int activeReaders_;

transient java.lang.Thread activeWriter_;

transient int waitingReaders_;

transient int waitingWriters_;

transient int writeHolds_;

transient java.util.HashMap readers_;

static final java.lang.Integer IONE;

scala.actors.threadpool.locks.ReentrantReadWriteLock$Sync();
  Code:
   Stack=3, Locals=1, Args_size=1
   0:	aload_0
   1:	invokespecial	#1; //Method java/lang/Object."<init>":()V
   4:	aload_0
   5:	iconst_0
   6:	putfield	#2; //Field activeReaders_:I
   9:	aload_0
   10:	aconst_null
   11:	putfield	#3; //Field activeWriter_:Ljava/lang/Thread;
   14:	aload_0
   15:	iconst_0
   16:	putfield	#4; //Field waitingReaders_:I
   19:	aload_0
   20:	iconst_0
   21:	putfield	#5; //Field waitingWriters_:I
   24:	aload_0
   25:	iconst_0
   26:	putfield	#6; //Field writeHolds_:I
   29:	aload_0
   30:	new	#7; //class java/util/HashMap
   33:	dup
   34:	invokespecial	#8; //Method java/util/HashMap."<init>":()V
   37:	putfield	#9; //Field readers_:Ljava/util/HashMap;
   40:	return

synchronized boolean startReadFromNewReader();
  Code:
   Stack=3, Locals=2, Args_size=1
   0:	aload_0
   1:	invokevirtual	#10; //Method startRead:()Z
   4:	istore_1
   5:	iload_1
   6:	ifne	19
   9:	aload_0
   10:	dup
   11:	getfield	#4; //Field waitingReaders_:I
   14:	iconst_1
   15:	iadd
   16:	putfield	#4; //Field waitingReaders_:I
   19:	iload_1
   20:	ireturn

synchronized boolean startWriteFromNewWriter();
  Code:
   Stack=3, Locals=2, Args_size=1
   0:	aload_0
   1:	invokevirtual	#11; //Method startWrite:()Z
   4:	istore_1
   5:	iload_1
   6:	ifne	19
   9:	aload_0
   10:	dup
   11:	getfield	#5; //Field waitingWriters_:I
   14:	iconst_1
   15:	iadd
   16:	putfield	#5; //Field waitingWriters_:I
   19:	iload_1
   20:	ireturn

synchronized boolean startReadFromWaitingReader();
  Code:
   Stack=3, Locals=2, Args_size=1
   0:	aload_0
   1:	invokevirtual	#10; //Method startRead:()Z
   4:	istore_1
   5:	iload_1
   6:	ifeq	19
   9:	aload_0
   10:	dup
   11:	getfield	#4; //Field waitingReaders_:I
   14:	iconst_1
   15:	isub
   16:	putfield	#4; //Field waitingReaders_:I
   19:	iload_1
   20:	ireturn

synchronized boolean startWriteFromWaitingWriter();
  Code:
   Stack=3, Locals=2, Args_size=1
   0:	aload_0
   1:	invokevirtual	#11; //Method startWrite:()Z
   4:	istore_1
   5:	iload_1
   6:	ifeq	19
   9:	aload_0
   10:	dup
   11:	getfield	#5; //Field waitingWriters_:I
   14:	iconst_1
   15:	isub
   16:	putfield	#5; //Field waitingWriters_:I
   19:	iload_1
   20:	ireturn

synchronized void cancelledWaitingReader();
  Code:
   Stack=3, Locals=1, Args_size=1
   0:	aload_0
   1:	dup
   2:	getfield	#4; //Field waitingReaders_:I
   5:	iconst_1
   6:	isub
   7:	putfield	#4; //Field waitingReaders_:I
   10:	return

synchronized void cancelledWaitingWriter();
  Code:
   Stack=3, Locals=1, Args_size=1
   0:	aload_0
   1:	dup
   2:	getfield	#5; //Field waitingWriters_:I
   5:	iconst_1
   6:	isub
   7:	putfield	#5; //Field waitingWriters_:I
   10:	return

boolean allowReader();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#3; //Field activeWriter_:Ljava/lang/Thread;
   4:	ifnonnull	14
   7:	aload_0
   8:	getfield	#5; //Field waitingWriters_:I
   11:	ifeq	24
   14:	aload_0
   15:	getfield	#3; //Field activeWriter_:Ljava/lang/Thread;
   18:	invokestatic	#12; //Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
   21:	if_acmpne	28
   24:	iconst_1
   25:	goto	29
   28:	iconst_0
   29:	ireturn

synchronized boolean startRead();
  Code:
   Stack=6, Locals=3, Args_size=1
   0:	invokestatic	#12; //Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
   3:	astore_1
   4:	aload_0
   5:	getfield	#9; //Field readers_:Ljava/util/HashMap;
   8:	aload_1
   9:	invokevirtual	#13; //Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
   12:	astore_2
   13:	aload_2
   14:	ifnull	57
   17:	aload_0
   18:	getfield	#9; //Field readers_:Ljava/util/HashMap;
   21:	aload_1
   22:	new	#14; //class java/lang/Integer
   25:	dup
   26:	aload_2
   27:	checkcast	#14; //class java/lang/Integer
   30:	checkcast	#14; //class java/lang/Integer
   33:	invokevirtual	#15; //Method java/lang/Integer.intValue:()I
   36:	iconst_1
   37:	iadd
   38:	invokespecial	#16; //Method java/lang/Integer."<init>":(I)V
   41:	invokevirtual	#17; //Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   44:	pop
   45:	aload_0
   46:	dup
   47:	getfield	#2; //Field activeReaders_:I
   50:	iconst_1
   51:	iadd
   52:	putfield	#2; //Field activeReaders_:I
   55:	iconst_1
   56:	ireturn
   57:	aload_0
   58:	invokevirtual	#18; //Method allowReader:()Z
   61:	ifeq	88
   64:	aload_0
   65:	getfield	#9; //Field readers_:Ljava/util/HashMap;
   68:	aload_1
   69:	getstatic	#19; //Field IONE:Ljava/lang/Integer;
   72:	invokevirtual	#17; //Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   75:	pop
   76:	aload_0
   77:	dup
   78:	getfield	#2; //Field activeReaders_:I
   81:	iconst_1
   82:	iadd
   83:	putfield	#2; //Field activeReaders_:I
   86:	iconst_1
   87:	ireturn
   88:	iconst_0
   89:	ireturn

synchronized boolean startWrite();
  Code:
   Stack=3, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#3; //Field activeWriter_:Ljava/lang/Thread;
   4:	invokestatic	#12; //Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
   7:	if_acmpne	22
   10:	aload_0
   11:	dup
   12:	getfield	#6; //Field writeHolds_:I
   15:	iconst_1
   16:	iadd
   17:	putfield	#6; //Field writeHolds_:I
   20:	iconst_1
   21:	ireturn
   22:	aload_0
   23:	getfield	#6; //Field writeHolds_:I
   26:	ifne	76
   29:	aload_0
   30:	getfield	#2; //Field activeReaders_:I
   33:	ifeq	60
   36:	aload_0
   37:	getfield	#9; //Field readers_:Ljava/util/HashMap;
   40:	invokevirtual	#20; //Method java/util/HashMap.size:()I
   43:	iconst_1
   44:	if_icmpne	74
   47:	aload_0
   48:	getfield	#9; //Field readers_:Ljava/util/HashMap;
   51:	invokestatic	#12; //Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
   54:	invokevirtual	#13; //Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
   57:	ifnull	74
   60:	aload_0
   61:	invokestatic	#12; //Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
   64:	putfield	#3; //Field activeWriter_:Ljava/lang/Thread;
   67:	aload_0
   68:	iconst_1
   69:	putfield	#6; //Field writeHolds_:I
   72:	iconst_1
   73:	ireturn
   74:	iconst_0
   75:	ireturn
   76:	iconst_0
   77:	ireturn

synchronized int endRead();
  Code:
   Stack=3, Locals=5, Args_size=1
   0:	invokestatic	#12; //Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
   3:	astore_1
   4:	aload_0
   5:	getfield	#9; //Field readers_:Ljava/util/HashMap;
   8:	aload_1
   9:	invokevirtual	#13; //Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
   12:	astore_2
   13:	aload_2
   14:	ifnonnull	25
   17:	new	#21; //class java/lang/IllegalMonitorStateException
   20:	dup
   21:	invokespecial	#22; //Method java/lang/IllegalMonitorStateException."<init>":()V
   24:	athrow
   25:	aload_0
   26:	dup
   27:	getfield	#2; //Field activeReaders_:I
   30:	iconst_1
   31:	isub
   32:	putfield	#2; //Field activeReaders_:I
   35:	aload_2
   36:	getstatic	#19; //Field IONE:Ljava/lang/Integer;
   39:	if_acmpeq	89
   42:	aload_2
   43:	checkcast	#14; //class java/lang/Integer
   46:	checkcast	#14; //class java/lang/Integer
   49:	invokevirtual	#15; //Method java/lang/Integer.intValue:()I
   52:	iconst_1
   53:	isub
   54:	istore_3
   55:	iload_3
   56:	iconst_1
   57:	if_icmpne	66
   60:	getstatic	#19; //Field IONE:Ljava/lang/Integer;
   63:	goto	74
   66:	new	#14; //class java/lang/Integer
   69:	dup
   70:	iload_3
   71:	invokespecial	#16; //Method java/lang/Integer."<init>":(I)V
   74:	astore	4
   76:	aload_0
   77:	getfield	#9; //Field readers_:Ljava/util/HashMap;
   80:	aload_1
   81:	aload	4
   83:	invokevirtual	#17; //Method java/util/HashMap.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
   86:	pop
   87:	iconst_0
   88:	ireturn
   89:	aload_0
   90:	getfield	#9; //Field readers_:Ljava/util/HashMap;
   93:	aload_1
   94:	invokevirtual	#23; //Method java/util/HashMap.remove:(Ljava/lang/Object;)Ljava/lang/Object;
   97:	pop
   98:	aload_0
   99:	getfield	#6; //Field writeHolds_:I
   102:	ifle	107
   105:	iconst_0
   106:	ireturn
   107:	aload_0
   108:	getfield	#2; //Field activeReaders_:I
   111:	ifne	123
   114:	aload_0
   115:	getfield	#5; //Field waitingWriters_:I
   118:	ifle	123
   121:	iconst_2
   122:	ireturn
   123:	iconst_0
   124:	ireturn

synchronized int endWrite();
  Code:
   Stack=3, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#3; //Field activeWriter_:Ljava/lang/Thread;
   4:	invokestatic	#12; //Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
   7:	if_acmpeq	18
   10:	new	#21; //class java/lang/IllegalMonitorStateException
   13:	dup
   14:	invokespecial	#22; //Method java/lang/IllegalMonitorStateException."<init>":()V
   17:	athrow
   18:	aload_0
   19:	dup
   20:	getfield	#6; //Field writeHolds_:I
   23:	iconst_1
   24:	isub
   25:	putfield	#6; //Field writeHolds_:I
   28:	aload_0
   29:	getfield	#6; //Field writeHolds_:I
   32:	ifle	37
   35:	iconst_0
   36:	ireturn
   37:	aload_0
   38:	aconst_null
   39:	putfield	#3; //Field activeWriter_:Ljava/lang/Thread;
   42:	aload_0
   43:	getfield	#4; //Field waitingReaders_:I
   46:	ifle	58
   49:	aload_0
   50:	invokevirtual	#18; //Method allowReader:()Z
   53:	ifeq	58
   56:	iconst_1
   57:	ireturn
   58:	aload_0
   59:	getfield	#5; //Field waitingWriters_:I
   62:	ifle	67
   65:	iconst_2
   66:	ireturn
   67:	iconst_0
   68:	ireturn

synchronized java.lang.Thread getOwner();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#3; //Field activeWriter_:Ljava/lang/Thread;
   4:	areturn

synchronized int getReadLockCount();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#2; //Field activeReaders_:I
   4:	ireturn

synchronized boolean isWriteLocked();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#3; //Field activeWriter_:Ljava/lang/Thread;
   4:	ifnull	11
   7:	iconst_1
   8:	goto	12
   11:	iconst_0
   12:	ireturn

synchronized boolean isWriteLockedByCurrentThread();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#3; //Field activeWriter_:Ljava/lang/Thread;
   4:	invokestatic	#12; //Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
   7:	if_acmpne	14
   10:	iconst_1
   11:	goto	15
   14:	iconst_0
   15:	ireturn

synchronized int getWriteHoldCount();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokevirtual	#24; //Method isWriteLockedByCurrentThread:()Z
   4:	ifeq	14
   7:	aload_0
   8:	getfield	#6; //Field writeHolds_:I
   11:	goto	15
   14:	iconst_0
   15:	ireturn

synchronized int getReadHoldCount();
  Code:
   Stack=2, Locals=3, Args_size=1
   0:	aload_0
   1:	getfield	#2; //Field activeReaders_:I
   4:	ifne	9
   7:	iconst_0
   8:	ireturn
   9:	invokestatic	#12; //Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
   12:	astore_1
   13:	aload_0
   14:	getfield	#9; //Field readers_:Ljava/util/HashMap;
   17:	aload_1
   18:	invokevirtual	#13; //Method java/util/HashMap.get:(Ljava/lang/Object;)Ljava/lang/Object;
   21:	checkcast	#14; //class java/lang/Integer
   24:	astore_2
   25:	aload_2
   26:	ifnonnull	33
   29:	iconst_0
   30:	goto	37
   33:	aload_2
   34:	invokevirtual	#15; //Method java/lang/Integer.intValue:()I
   37:	ireturn

final synchronized boolean hasQueuedThreads();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#5; //Field waitingWriters_:I
   4:	ifgt	14
   7:	aload_0
   8:	getfield	#4; //Field waitingReaders_:I
   11:	ifle	18
   14:	iconst_1
   15:	goto	19
   18:	iconst_0
   19:	ireturn

final synchronized int getQueueLength();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#5; //Field waitingWriters_:I
   4:	aload_0
   5:	getfield	#4; //Field waitingReaders_:I
   8:	iadd
   9:	ireturn

static {};
  Code:
   Stack=3, Locals=0, Args_size=0
   0:	new	#14; //class java/lang/Integer
   3:	dup
   4:	iconst_1
   5:	invokespecial	#16; //Method java/lang/Integer."<init>":(I)V
   8:	putstatic	#19; //Field IONE:Ljava/lang/Integer;
   11:	return

}

