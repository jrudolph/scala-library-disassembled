final class scala.actors.threadpool.locks.ReentrantLock$NonfairSync extends scala.actors.threadpool.locks.ReentrantLock$Sync
  InnerClass: 
   final #58= #18 of #56; //NonfairSync=class scala/actors/threadpool/locks/ReentrantLock$NonfairSync of class scala/actors/threadpool/locks/ReentrantLock
   abstract #61= #19 of #56; //Sync=class scala/actors/threadpool/locks/ReentrantLock$Sync of class scala/actors/threadpool/locks/ReentrantLock
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Method	#19.#36;	//  scala/actors/threadpool/locks/ReentrantLock$Sync."<init>":()V
const #2 = Method	#37.#38;	//  java/lang/Thread.currentThread:()Ljava/lang/Thread;
const #3 = Field	#18.#39;	//  scala/actors/threadpool/locks/ReentrantLock$NonfairSync.owner_:Ljava/lang/Thread;
const #4 = Field	#18.#40;	//  scala/actors/threadpool/locks/ReentrantLock$NonfairSync.holds_:I
const #5 = Method	#18.#41;	//  scala/actors/threadpool/locks/ReentrantLock$NonfairSync.incHolds:()V
const #6 = Method	#37.#42;	//  java/lang/Thread.interrupted:()Z
const #7 = Method	#43.#44;	//  java/lang/Object.wait:()V
const #8 = class	#45;	//  java/lang/InterruptedException
const #9 = Method	#37.#46;	//  java/lang/Thread.interrupt:()V
const #10 = Method	#8.#36;	//  java/lang/InterruptedException."<init>":()V
const #11 = Method	#43.#47;	//  java/lang/Object.notify:()V
const #12 = Method	#48.#49;	//  scala/actors/threadpool/helpers/Utils.nanoTime:()J
const #13 = Field	#50.#51;	//  scala/actors/threadpool/TimeUnit.NANOSECONDS:Lscala/actors/threadpool/TimeUnit;
const #14 = Method	#50.#52;	//  scala/actors/threadpool/TimeUnit.timedWait:(Ljava/lang/Object;J)V
const #15 = class	#53;	//  java/lang/IllegalMonitorStateException
const #16 = String	#54;	//  Not owner
const #17 = Method	#15.#55;	//  java/lang/IllegalMonitorStateException."<init>":(Ljava/lang/String;)V
const #18 = class	#57;	//  scala/actors/threadpool/locks/ReentrantLock$NonfairSync
const #19 = class	#60;	//  scala/actors/threadpool/locks/ReentrantLock$Sync
const #20 = Asciz	serialVersionUID;
const #21 = Asciz	J;
const #22 = Asciz	ConstantValue;
const #23 = long	7316153563782823691l;
const #25 = Asciz	<init>;
const #26 = Asciz	()V;
const #27 = Asciz	Code;
const #28 = Asciz	lock;
const #29 = Asciz	lockInterruptibly;
const #30 = Asciz	Exceptions;
const #31 = Asciz	tryLock;
const #32 = Asciz	(J)Z;
const #33 = Asciz	unlock;
const #34 = Asciz	isFair;
const #35 = Asciz	()Z;
const #36 = NameAndType	#25:#26;//  "<init>":()V
const #37 = class	#62;	//  java/lang/Thread
const #38 = NameAndType	#63:#64;//  currentThread:()Ljava/lang/Thread;
const #39 = NameAndType	#65:#66;//  owner_:Ljava/lang/Thread;
const #40 = NameAndType	#67:#68;//  holds_:I
const #41 = NameAndType	#69:#26;//  incHolds:()V
const #42 = NameAndType	#70:#35;//  interrupted:()Z
const #43 = class	#71;	//  java/lang/Object
const #44 = NameAndType	#72:#26;//  wait:()V
const #45 = Asciz	java/lang/InterruptedException;
const #46 = NameAndType	#73:#26;//  interrupt:()V
const #47 = NameAndType	#74:#26;//  notify:()V
const #48 = class	#75;	//  scala/actors/threadpool/helpers/Utils
const #49 = NameAndType	#76:#77;//  nanoTime:()J
const #50 = class	#78;	//  scala/actors/threadpool/TimeUnit
const #51 = NameAndType	#79:#80;//  NANOSECONDS:Lscala/actors/threadpool/TimeUnit;
const #52 = NameAndType	#81:#82;//  timedWait:(Ljava/lang/Object;J)V
const #53 = Asciz	java/lang/IllegalMonitorStateException;
const #54 = Asciz	Not owner;
const #55 = NameAndType	#25:#83;//  "<init>":(Ljava/lang/String;)V
const #56 = class	#84;	//  scala/actors/threadpool/locks/ReentrantLock
const #57 = Asciz	scala/actors/threadpool/locks/ReentrantLock$NonfairSync;
const #58 = Asciz	NonfairSync;
const #59 = Asciz	InnerClasses;
const #60 = Asciz	scala/actors/threadpool/locks/ReentrantLock$Sync;
const #61 = Asciz	Sync;
const #62 = Asciz	java/lang/Thread;
const #63 = Asciz	currentThread;
const #64 = Asciz	()Ljava/lang/Thread;;
const #65 = Asciz	owner_;
const #66 = Asciz	Ljava/lang/Thread;;
const #67 = Asciz	holds_;
const #68 = Asciz	I;
const #69 = Asciz	incHolds;
const #70 = Asciz	interrupted;
const #71 = Asciz	java/lang/Object;
const #72 = Asciz	wait;
const #73 = Asciz	interrupt;
const #74 = Asciz	notify;
const #75 = Asciz	scala/actors/threadpool/helpers/Utils;
const #76 = Asciz	nanoTime;
const #77 = Asciz	()J;
const #78 = Asciz	scala/actors/threadpool/TimeUnit;
const #79 = Asciz	NANOSECONDS;
const #80 = Asciz	Lscala/actors/threadpool/TimeUnit;;
const #81 = Asciz	timedWait;
const #82 = Asciz	(Ljava/lang/Object;J)V;
const #83 = Asciz	(Ljava/lang/String;)V;
const #84 = Asciz	scala/actors/threadpool/locks/ReentrantLock;

{
scala.actors.threadpool.locks.ReentrantLock$NonfairSync();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokespecial	#1; //Method scala/actors/threadpool/locks/ReentrantLock$Sync."<init>":()V
   4:	return

public void lock();
  Code:
   Stack=2, Locals=7, Args_size=1
   0:	invokestatic	#2; //Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
   3:	astore_1
   4:	aload_0
   5:	dup
   6:	astore_2
   7:	monitorenter
   8:	aload_0
   9:	getfield	#3; //Field owner_:Ljava/lang/Thread;
   12:	ifnonnull	28
   15:	aload_0
   16:	aload_1
   17:	putfield	#3; //Field owner_:Ljava/lang/Thread;
   20:	aload_0
   21:	iconst_1
   22:	putfield	#4; //Field holds_:I
   25:	aload_2
   26:	monitorexit
   27:	return
   28:	aload_1
   29:	aload_0
   30:	getfield	#3; //Field owner_:Ljava/lang/Thread;
   33:	if_acmpne	43
   36:	aload_0
   37:	invokevirtual	#5; //Method incHolds:()V
   40:	aload_2
   41:	monitorexit
   42:	return
   43:	invokestatic	#6; //Method java/lang/Thread.interrupted:()Z
   46:	istore_3
   47:	aload_0
   48:	invokevirtual	#7; //Method java/lang/Object.wait:()V
   51:	goto	58
   54:	astore	4
   56:	iconst_1
   57:	istore_3
   58:	aload_0
   59:	getfield	#3; //Field owner_:Ljava/lang/Thread;
   62:	ifnonnull	47
   65:	aload_0
   66:	aload_1
   67:	putfield	#3; //Field owner_:Ljava/lang/Thread;
   70:	aload_0
   71:	iconst_1
   72:	putfield	#4; //Field holds_:I
   75:	iload_3
   76:	ifeq	85
   79:	invokestatic	#2; //Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
   82:	invokevirtual	#9; //Method java/lang/Thread.interrupt:()V
   85:	aload_2
   86:	monitorexit
   87:	return
   88:	astore	5
   90:	iload_3
   91:	ifeq	100
   94:	invokestatic	#2; //Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
   97:	invokevirtual	#9; //Method java/lang/Thread.interrupt:()V
   100:	aload	5
   102:	athrow
   103:	astore	6
   105:	aload_2
   106:	monitorexit
   107:	aload	6
   109:	athrow
  Exception table:
   from   to  target type
    47    51    54   Class java/lang/InterruptedException

    47    75    88   any
    88    90    88   any
     8    27   103   any
    28    42   103   any
    43    87   103   any
    88   107   103   any

public void lockInterruptibly()   throws java.lang.InterruptedException;
  Code:
   Stack=2, Locals=5, Args_size=1
   0:	invokestatic	#6; //Method java/lang/Thread.interrupted:()Z
   3:	ifeq	14
   6:	new	#8; //class java/lang/InterruptedException
   9:	dup
   10:	invokespecial	#10; //Method java/lang/InterruptedException."<init>":()V
   13:	athrow
   14:	invokestatic	#2; //Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
   17:	astore_1
   18:	aload_0
   19:	dup
   20:	astore_2
   21:	monitorenter
   22:	aload_0
   23:	getfield	#3; //Field owner_:Ljava/lang/Thread;
   26:	ifnonnull	42
   29:	aload_0
   30:	aload_1
   31:	putfield	#3; //Field owner_:Ljava/lang/Thread;
   34:	aload_0
   35:	iconst_1
   36:	putfield	#4; //Field holds_:I
   39:	aload_2
   40:	monitorexit
   41:	return
   42:	aload_1
   43:	aload_0
   44:	getfield	#3; //Field owner_:Ljava/lang/Thread;
   47:	if_acmpne	57
   50:	aload_0
   51:	invokevirtual	#5; //Method incHolds:()V
   54:	aload_2
   55:	monitorexit
   56:	return
   57:	aload_0
   58:	invokevirtual	#7; //Method java/lang/Object.wait:()V
   61:	aload_0
   62:	getfield	#3; //Field owner_:Ljava/lang/Thread;
   65:	ifnonnull	57
   68:	aload_0
   69:	aload_1
   70:	putfield	#3; //Field owner_:Ljava/lang/Thread;
   73:	aload_0
   74:	iconst_1
   75:	putfield	#4; //Field holds_:I
   78:	aload_2
   79:	monitorexit
   80:	return
   81:	astore_3
   82:	aload_0
   83:	getfield	#3; //Field owner_:Ljava/lang/Thread;
   86:	ifnonnull	93
   89:	aload_0
   90:	invokevirtual	#11; //Method java/lang/Object.notify:()V
   93:	aload_3
   94:	athrow
   95:	astore	4
   97:	aload_2
   98:	monitorexit
   99:	aload	4
   101:	athrow
  Exception table:
   from   to  target type
    57    78    81   Class java/lang/InterruptedException

    22    41    95   any
    42    56    95   any
    57    80    95   any
    81    99    95   any
  Exceptions: 
   throws java.lang.InterruptedException
public boolean tryLock(long)   throws java.lang.InterruptedException;
  Code:
   Stack=4, Locals=9, Args_size=2
   0:	invokestatic	#6; //Method java/lang/Thread.interrupted:()Z
   3:	ifeq	14
   6:	new	#8; //class java/lang/InterruptedException
   9:	dup
   10:	invokespecial	#10; //Method java/lang/InterruptedException."<init>":()V
   13:	athrow
   14:	invokestatic	#2; //Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
   17:	astore_3
   18:	aload_0
   19:	dup
   20:	astore	4
   22:	monitorenter
   23:	aload_0
   24:	getfield	#3; //Field owner_:Ljava/lang/Thread;
   27:	ifnonnull	45
   30:	aload_0
   31:	aload_3
   32:	putfield	#3; //Field owner_:Ljava/lang/Thread;
   35:	aload_0
   36:	iconst_1
   37:	putfield	#4; //Field holds_:I
   40:	iconst_1
   41:	aload	4
   43:	monitorexit
   44:	ireturn
   45:	aload_3
   46:	aload_0
   47:	getfield	#3; //Field owner_:Ljava/lang/Thread;
   50:	if_acmpne	62
   53:	aload_0
   54:	invokevirtual	#5; //Method incHolds:()V
   57:	iconst_1
   58:	aload	4
   60:	monitorexit
   61:	ireturn
   62:	lload_1
   63:	lconst_0
   64:	lcmp
   65:	ifgt	73
   68:	iconst_0
   69:	aload	4
   71:	monitorexit
   72:	ireturn
   73:	invokestatic	#12; //Method scala/actors/threadpool/helpers/Utils.nanoTime:()J
   76:	lload_1
   77:	ladd
   78:	lstore	5
   80:	getstatic	#13; //Field scala/actors/threadpool/TimeUnit.NANOSECONDS:Lscala/actors/threadpool/TimeUnit;
   83:	aload_0
   84:	lload_1
   85:	invokevirtual	#14; //Method scala/actors/threadpool/TimeUnit.timedWait:(Ljava/lang/Object;J)V
   88:	aload_3
   89:	aload_0
   90:	getfield	#3; //Field owner_:Ljava/lang/Thread;
   93:	if_acmpne	105
   96:	aload_0
   97:	invokevirtual	#5; //Method incHolds:()V
   100:	iconst_1
   101:	aload	4
   103:	monitorexit
   104:	ireturn
   105:	aload_0
   106:	getfield	#3; //Field owner_:Ljava/lang/Thread;
   109:	ifnonnull	127
   112:	aload_0
   113:	aload_3
   114:	putfield	#3; //Field owner_:Ljava/lang/Thread;
   117:	aload_0
   118:	iconst_1
   119:	putfield	#4; //Field holds_:I
   122:	iconst_1
   123:	aload	4
   125:	monitorexit
   126:	ireturn
   127:	lload	5
   129:	invokestatic	#12; //Method scala/actors/threadpool/helpers/Utils.nanoTime:()J
   132:	lsub
   133:	lstore_1
   134:	lload_1
   135:	lconst_0
   136:	lcmp
   137:	ifgt	80
   140:	iconst_0
   141:	aload	4
   143:	monitorexit
   144:	ireturn
   145:	astore	7
   147:	aload_0
   148:	getfield	#3; //Field owner_:Ljava/lang/Thread;
   151:	ifnonnull	158
   154:	aload_0
   155:	invokevirtual	#11; //Method java/lang/Object.notify:()V
   158:	aload	7
   160:	athrow
   161:	astore	8
   163:	aload	4
   165:	monitorexit
   166:	aload	8
   168:	athrow
  Exception table:
   from   to  target type
    80   101   145   Class java/lang/InterruptedException

   105   123   145   Class java/lang/InterruptedException

   127   141   145   Class java/lang/InterruptedException

    23    44   161   any
    45    61   161   any
    62    72   161   any
    73   104   161   any
   105   126   161   any
   127   144   161   any
   145   166   161   any
  Exceptions: 
   throws java.lang.InterruptedException
public synchronized void unlock();
  Code:
   Stack=3, Locals=1, Args_size=1
   0:	invokestatic	#2; //Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
   3:	aload_0
   4:	getfield	#3; //Field owner_:Ljava/lang/Thread;
   7:	if_acmpeq	20
   10:	new	#15; //class java/lang/IllegalMonitorStateException
   13:	dup
   14:	ldc	#16; //String Not owner
   16:	invokespecial	#17; //Method java/lang/IllegalMonitorStateException."<init>":(Ljava/lang/String;)V
   19:	athrow
   20:	aload_0
   21:	dup
   22:	getfield	#4; //Field holds_:I
   25:	iconst_1
   26:	isub
   27:	dup_x1
   28:	putfield	#4; //Field holds_:I
   31:	ifne	43
   34:	aload_0
   35:	aconst_null
   36:	putfield	#3; //Field owner_:Ljava/lang/Thread;
   39:	aload_0
   40:	invokevirtual	#11; //Method java/lang/Object.notify:()V
   43:	return

public final boolean isFair();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	iconst_0
   1:	ireturn

}

