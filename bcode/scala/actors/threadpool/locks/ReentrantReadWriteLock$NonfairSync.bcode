class scala.actors.threadpool.locks.ReentrantReadWriteLock$NonfairSync extends scala.actors.threadpool.locks.ReentrantReadWriteLock$Sync
  InnerClass: 
   #10= #2 of #8; //NonfairSync=class scala/actors/threadpool/locks/ReentrantReadWriteLock$NonfairSync of class scala/actors/threadpool/locks/ReentrantReadWriteLock
   abstract #13= #3 of #8; //Sync=class scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync of class scala/actors/threadpool/locks/ReentrantReadWriteLock
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Method	#3.#7;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync."<init>":()V
const #2 = class	#9;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$NonfairSync
const #3 = class	#12;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync
const #4 = Asciz	<init>;
const #5 = Asciz	()V;
const #6 = Asciz	Code;
const #7 = NameAndType	#4:#5;//  "<init>":()V
const #8 = class	#14;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock
const #9 = Asciz	scala/actors/threadpool/locks/ReentrantReadWriteLock$NonfairSync;
const #10 = Asciz	NonfairSync;
const #11 = Asciz	InnerClasses;
const #12 = Asciz	scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync;
const #13 = Asciz	Sync;
const #14 = Asciz	scala/actors/threadpool/locks/ReentrantReadWriteLock;

{
scala.actors.threadpool.locks.ReentrantReadWriteLock$NonfairSync();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokespecial	#1; //Method scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync."<init>":()V
   4:	return

}

