public class scala.actors.threadpool.locks.ReentrantReadWriteLock$WriteLock extends java.lang.Object implements scala.actors.threadpool.locks.Lock,scala.actors.threadpool.locks.CondVar$ExclusiveLock,java.io.Serializable
  InnerClass: 
   public #111= #40 of #73; //WriteLock=class scala/actors/threadpool/locks/ReentrantReadWriteLock$WriteLock of class scala/actors/threadpool/locks/ReentrantReadWriteLock
   abstract #116= #43 of #26; //ExclusiveLock=class scala/actors/threadpool/locks/CondVar$ExclusiveLock of class scala/actors/threadpool/locks/CondVar
   abstract #120= #75 of #73; //Sync=class scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync of class scala/actors/threadpool/locks/ReentrantReadWriteLock
   public #134= #87 of #73; //ReadLock=class scala/actors/threadpool/locks/ReentrantReadWriteLock$ReadLock of class scala/actors/threadpool/locks/ReentrantReadWriteLock
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Method	#41.#70;	//  java/lang/Object."<init>":()V
const #2 = class	#71;	//  java/lang/NullPointerException
const #3 = Method	#2.#70;	//  java/lang/NullPointerException."<init>":()V
const #4 = Field	#40.#72;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$WriteLock.lock:Lscala/actors/threadpool/locks/ReentrantReadWriteLock;
const #5 = Field	#73.#74;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock.sync:Lscala/actors/threadpool/locks/ReentrantReadWriteLock$Sync;
const #6 = Method	#75.#76;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.startWriteFromNewWriter:()Z
const #7 = Method	#77.#78;	//  java/lang/Thread.interrupted:()Z
const #8 = Method	#41.#79;	//  java/lang/Object.wait:()V
const #9 = class	#80;	//  java/lang/InterruptedException
const #10 = Method	#75.#81;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.startWriteFromWaitingWriter:()Z
const #11 = Method	#77.#82;	//  java/lang/Thread.currentThread:()Ljava/lang/Thread;
const #12 = Method	#77.#83;	//  java/lang/Thread.interrupt:()V
const #13 = Method	#9.#70;	//  java/lang/InterruptedException."<init>":()V
const #14 = Method	#75.#84;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.cancelledWaitingWriter:()V
const #15 = Method	#41.#85;	//  java/lang/Object.notify:()V
const #16 = Field	#73.#86;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock.readerLock_:Lscala/actors/threadpool/locks/ReentrantReadWriteLock$ReadLock;
const #17 = Method	#87.#88;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$ReadLock.signalWaiters:()V
const #18 = Method	#75.#89;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.startWrite:()Z
const #19 = Method	#90.#91;	//  scala/actors/threadpool/TimeUnit.toNanos:(J)J
const #20 = Method	#92.#93;	//  scala/actors/threadpool/helpers/Utils.nanoTime:()J
const #21 = Field	#90.#94;	//  scala/actors/threadpool/TimeUnit.NANOSECONDS:Lscala/actors/threadpool/TimeUnit;
const #22 = Method	#90.#95;	//  scala/actors/threadpool/TimeUnit.timedWait:(Ljava/lang/Object;J)V
const #23 = Method	#75.#96;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.endWrite:()I
const #24 = Field	#73.#97;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock.writerLock_:Lscala/actors/threadpool/locks/ReentrantReadWriteLock$WriteLock;
const #25 = Method	#40.#88;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$WriteLock.signalWaiters:()V
const #26 = class	#98;	//  scala/actors/threadpool/locks/CondVar
const #27 = Method	#26.#99;	//  scala/actors/threadpool/locks/CondVar."<init>":(Lscala/actors/threadpool/locks/CondVar$ExclusiveLock;)V
const #28 = Method	#73.#100;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock.getOwner:()Ljava/lang/Thread;
const #29 = class	#101;	//  java/lang/StringBuilder
const #30 = Method	#29.#70;	//  java/lang/StringBuilder."<init>":()V
const #31 = Method	#41.#102;	//  java/lang/Object.toString:()Ljava/lang/String;
const #32 = Method	#29.#103;	//  java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
const #33 = String	#104;	//  [Unlocked]
const #34 = String	#105;	//  [Locked by thread 
const #35 = Method	#77.#106;	//  java/lang/Thread.getName:()Ljava/lang/String;
const #36 = String	#107;	//  ]
const #37 = Method	#29.#102;	//  java/lang/StringBuilder.toString:()Ljava/lang/String;
const #38 = Method	#75.#108;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.isWriteLockedByCurrentThread:()Z
const #39 = Method	#75.#109;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.getWriteHoldCount:()I
const #40 = class	#110;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$WriteLock
const #41 = class	#113;	//  java/lang/Object
const #42 = class	#114;	//  scala/actors/threadpool/locks/Lock
const #43 = class	#115;	//  scala/actors/threadpool/locks/CondVar$ExclusiveLock
const #44 = class	#117;	//  java/io/Serializable
const #45 = Asciz	serialVersionUID;
const #46 = Asciz	J;
const #47 = Asciz	ConstantValue;
const #48 = long	-4992448646407690164l;
const #50 = Asciz	lock;
const #51 = Asciz	Lscala/actors/threadpool/locks/ReentrantReadWriteLock;;
const #52 = Asciz	<init>;
const #53 = Asciz	(Lscala/actors/threadpool/locks/ReentrantReadWriteLock;)V;
const #54 = Asciz	Code;
const #55 = Asciz	()V;
const #56 = Asciz	lockInterruptibly;
const #57 = Asciz	Exceptions;
const #58 = Asciz	tryLock;
const #59 = Asciz	()Z;
const #60 = Asciz	(JLscala/actors/threadpool/TimeUnit;)Z;
const #61 = Asciz	unlock;
const #62 = Asciz	newCondition;
const #63 = Asciz	()Lscala/actors/threadpool/locks/Condition;;
const #64 = Asciz	signalWaiters;
const #65 = Asciz	toString;
const #66 = Asciz	()Ljava/lang/String;;
const #67 = Asciz	isHeldByCurrentThread;
const #68 = Asciz	getHoldCount;
const #69 = Asciz	()I;
const #70 = NameAndType	#52:#55;//  "<init>":()V
const #71 = Asciz	java/lang/NullPointerException;
const #72 = NameAndType	#50:#51;//  lock:Lscala/actors/threadpool/locks/ReentrantReadWriteLock;
const #73 = class	#118;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock
const #74 = NameAndType	#119:#121;//  sync:Lscala/actors/threadpool/locks/ReentrantReadWriteLock$Sync;
const #75 = class	#122;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync
const #76 = NameAndType	#123:#59;//  startWriteFromNewWriter:()Z
const #77 = class	#124;	//  java/lang/Thread
const #78 = NameAndType	#125:#59;//  interrupted:()Z
const #79 = NameAndType	#126:#55;//  wait:()V
const #80 = Asciz	java/lang/InterruptedException;
const #81 = NameAndType	#127:#59;//  startWriteFromWaitingWriter:()Z
const #82 = NameAndType	#128:#129;//  currentThread:()Ljava/lang/Thread;
const #83 = NameAndType	#130:#55;//  interrupt:()V
const #84 = NameAndType	#131:#55;//  cancelledWaitingWriter:()V
const #85 = NameAndType	#132:#55;//  notify:()V
const #86 = NameAndType	#133:#135;//  readerLock_:Lscala/actors/threadpool/locks/ReentrantReadWriteLock$ReadLock;
const #87 = class	#136;	//  scala/actors/threadpool/locks/ReentrantReadWriteLock$ReadLock
const #88 = NameAndType	#64:#55;//  signalWaiters:()V
const #89 = NameAndType	#137:#59;//  startWrite:()Z
const #90 = class	#138;	//  scala/actors/threadpool/TimeUnit
const #91 = NameAndType	#139:#140;//  toNanos:(J)J
const #92 = class	#141;	//  scala/actors/threadpool/helpers/Utils
const #93 = NameAndType	#142:#143;//  nanoTime:()J
const #94 = NameAndType	#144:#145;//  NANOSECONDS:Lscala/actors/threadpool/TimeUnit;
const #95 = NameAndType	#146:#147;//  timedWait:(Ljava/lang/Object;J)V
const #96 = NameAndType	#148:#69;//  endWrite:()I
const #97 = NameAndType	#149:#150;//  writerLock_:Lscala/actors/threadpool/locks/ReentrantReadWriteLock$WriteLock;
const #98 = Asciz	scala/actors/threadpool/locks/CondVar;
const #99 = NameAndType	#52:#151;//  "<init>":(Lscala/actors/threadpool/locks/CondVar$ExclusiveLock;)V
const #100 = NameAndType	#152:#129;//  getOwner:()Ljava/lang/Thread;
const #101 = Asciz	java/lang/StringBuilder;
const #102 = NameAndType	#65:#66;//  toString:()Ljava/lang/String;
const #103 = NameAndType	#153:#154;//  append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
const #104 = Asciz	[Unlocked];
const #105 = Asciz	[Locked by thread ;
const #106 = NameAndType	#155:#66;//  getName:()Ljava/lang/String;
const #107 = Asciz	];
const #108 = NameAndType	#156:#59;//  isWriteLockedByCurrentThread:()Z
const #109 = NameAndType	#157:#69;//  getWriteHoldCount:()I
const #110 = Asciz	scala/actors/threadpool/locks/ReentrantReadWriteLock$WriteLock;
const #111 = Asciz	WriteLock;
const #112 = Asciz	InnerClasses;
const #113 = Asciz	java/lang/Object;
const #114 = Asciz	scala/actors/threadpool/locks/Lock;
const #115 = Asciz	scala/actors/threadpool/locks/CondVar$ExclusiveLock;
const #116 = Asciz	ExclusiveLock;
const #117 = Asciz	java/io/Serializable;
const #118 = Asciz	scala/actors/threadpool/locks/ReentrantReadWriteLock;
const #119 = Asciz	sync;
const #120 = Asciz	Sync;
const #121 = Asciz	Lscala/actors/threadpool/locks/ReentrantReadWriteLock$Sync;;
const #122 = Asciz	scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync;
const #123 = Asciz	startWriteFromNewWriter;
const #124 = Asciz	java/lang/Thread;
const #125 = Asciz	interrupted;
const #126 = Asciz	wait;
const #127 = Asciz	startWriteFromWaitingWriter;
const #128 = Asciz	currentThread;
const #129 = Asciz	()Ljava/lang/Thread;;
const #130 = Asciz	interrupt;
const #131 = Asciz	cancelledWaitingWriter;
const #132 = Asciz	notify;
const #133 = Asciz	readerLock_;
const #134 = Asciz	ReadLock;
const #135 = Asciz	Lscala/actors/threadpool/locks/ReentrantReadWriteLock$ReadLock;;
const #136 = Asciz	scala/actors/threadpool/locks/ReentrantReadWriteLock$ReadLock;
const #137 = Asciz	startWrite;
const #138 = Asciz	scala/actors/threadpool/TimeUnit;
const #139 = Asciz	toNanos;
const #140 = Asciz	(J)J;
const #141 = Asciz	scala/actors/threadpool/helpers/Utils;
const #142 = Asciz	nanoTime;
const #143 = Asciz	()J;
const #144 = Asciz	NANOSECONDS;
const #145 = Asciz	Lscala/actors/threadpool/TimeUnit;;
const #146 = Asciz	timedWait;
const #147 = Asciz	(Ljava/lang/Object;J)V;
const #148 = Asciz	endWrite;
const #149 = Asciz	writerLock_;
const #150 = Asciz	Lscala/actors/threadpool/locks/ReentrantReadWriteLock$WriteLock;;
const #151 = Asciz	(Lscala/actors/threadpool/locks/CondVar$ExclusiveLock;)V;
const #152 = Asciz	getOwner;
const #153 = Asciz	append;
const #154 = Asciz	(Ljava/lang/String;)Ljava/lang/StringBuilder;;
const #155 = Asciz	getName;
const #156 = Asciz	isWriteLockedByCurrentThread;
const #157 = Asciz	getWriteHoldCount;

{
final scala.actors.threadpool.locks.ReentrantReadWriteLock lock;

protected scala.actors.threadpool.locks.ReentrantReadWriteLock$WriteLock(scala.actors.threadpool.locks.ReentrantReadWriteLock);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	invokespecial	#1; //Method java/lang/Object."<init>":()V
   4:	aload_1
   5:	ifnonnull	16
   8:	new	#2; //class java/lang/NullPointerException
   11:	dup
   12:	invokespecial	#3; //Method java/lang/NullPointerException."<init>":()V
   15:	athrow
   16:	aload_0
   17:	aload_1
   18:	putfield	#4; //Field lock:Lscala/actors/threadpool/locks/ReentrantReadWriteLock;
   21:	return

public void lock();
  Code:
   Stack=2, Locals=6, Args_size=1
   0:	aload_0
   1:	dup
   2:	astore_1
   3:	monitorenter
   4:	aload_0
   5:	getfield	#4; //Field lock:Lscala/actors/threadpool/locks/ReentrantReadWriteLock;
   8:	getfield	#5; //Field scala/actors/threadpool/locks/ReentrantReadWriteLock.sync:Lscala/actors/threadpool/locks/ReentrantReadWriteLock$Sync;
   11:	invokevirtual	#6; //Method scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.startWriteFromNewWriter:()Z
   14:	ifeq	20
   17:	aload_1
   18:	monitorexit
   19:	return
   20:	invokestatic	#7; //Method java/lang/Thread.interrupted:()Z
   23:	istore_2
   24:	aload_0
   25:	invokevirtual	#8; //Method java/lang/Object.wait:()V
   28:	goto	34
   31:	astore_3
   32:	iconst_1
   33:	istore_2
   34:	aload_0
   35:	getfield	#4; //Field lock:Lscala/actors/threadpool/locks/ReentrantReadWriteLock;
   38:	getfield	#5; //Field scala/actors/threadpool/locks/ReentrantReadWriteLock.sync:Lscala/actors/threadpool/locks/ReentrantReadWriteLock$Sync;
   41:	invokevirtual	#10; //Method scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.startWriteFromWaitingWriter:()Z
   44:	ifeq	24
   47:	iload_2
   48:	ifeq	57
   51:	invokestatic	#11; //Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
   54:	invokevirtual	#12; //Method java/lang/Thread.interrupt:()V
   57:	aload_1
   58:	monitorexit
   59:	return
   60:	astore	4
   62:	iload_2
   63:	ifeq	72
   66:	invokestatic	#11; //Method java/lang/Thread.currentThread:()Ljava/lang/Thread;
   69:	invokevirtual	#12; //Method java/lang/Thread.interrupt:()V
   72:	aload	4
   74:	athrow
   75:	astore	5
   77:	aload_1
   78:	monitorexit
   79:	aload	5
   81:	athrow
  Exception table:
   from   to  target type
    24    28    31   Class java/lang/InterruptedException

    24    47    60   any
    60    62    60   any
     4    19    75   any
    20    59    75   any
    60    79    75   any

public void lockInterruptibly()   throws java.lang.InterruptedException;
  Code:
   Stack=2, Locals=5, Args_size=1
   0:	invokestatic	#7; //Method java/lang/Thread.interrupted:()Z
   3:	ifeq	14
   6:	new	#9; //class java/lang/InterruptedException
   9:	dup
   10:	invokespecial	#13; //Method java/lang/InterruptedException."<init>":()V
   13:	athrow
   14:	aconst_null
   15:	astore_1
   16:	aload_0
   17:	dup
   18:	astore_2
   19:	monitorenter
   20:	aload_0
   21:	getfield	#4; //Field lock:Lscala/actors/threadpool/locks/ReentrantReadWriteLock;
   24:	getfield	#5; //Field scala/actors/threadpool/locks/ReentrantReadWriteLock.sync:Lscala/actors/threadpool/locks/ReentrantReadWriteLock$Sync;
   27:	invokevirtual	#6; //Method scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.startWriteFromNewWriter:()Z
   30:	ifne	76
   33:	aload_0
   34:	invokevirtual	#8; //Method java/lang/Object.wait:()V
   37:	aload_0
   38:	getfield	#4; //Field lock:Lscala/actors/threadpool/locks/ReentrantReadWriteLock;
   41:	getfield	#5; //Field scala/actors/threadpool/locks/ReentrantReadWriteLock.sync:Lscala/actors/threadpool/locks/ReentrantReadWriteLock$Sync;
   44:	invokevirtual	#10; //Method scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.startWriteFromWaitingWriter:()Z
   47:	ifeq	53
   50:	aload_2
   51:	monitorexit
   52:	return
   53:	goto	33
   56:	astore_3
   57:	aload_0
   58:	getfield	#4; //Field lock:Lscala/actors/threadpool/locks/ReentrantReadWriteLock;
   61:	getfield	#5; //Field scala/actors/threadpool/locks/ReentrantReadWriteLock.sync:Lscala/actors/threadpool/locks/ReentrantReadWriteLock$Sync;
   64:	invokevirtual	#14; //Method scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.cancelledWaitingWriter:()V
   67:	aload_0
   68:	invokevirtual	#15; //Method java/lang/Object.notify:()V
   71:	aload_3
   72:	astore_1
   73:	goto	76
   76:	aload_2
   77:	monitorexit
   78:	goto	88
   81:	astore	4
   83:	aload_2
   84:	monitorexit
   85:	aload	4
   87:	athrow
   88:	aload_1
   89:	ifnull	104
   92:	aload_0
   93:	getfield	#4; //Field lock:Lscala/actors/threadpool/locks/ReentrantReadWriteLock;
   96:	getfield	#16; //Field scala/actors/threadpool/locks/ReentrantReadWriteLock.readerLock_:Lscala/actors/threadpool/locks/ReentrantReadWriteLock$ReadLock;
   99:	invokevirtual	#17; //Method scala/actors/threadpool/locks/ReentrantReadWriteLock$ReadLock.signalWaiters:()V
   102:	aload_1
   103:	athrow
   104:	return
  Exception table:
   from   to  target type
    33    50    56   Class java/lang/InterruptedException

    20    52    81   any
    53    78    81   any
    81    85    81   any
  Exceptions: 
   throws java.lang.InterruptedException
public boolean tryLock();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#4; //Field lock:Lscala/actors/threadpool/locks/ReentrantReadWriteLock;
   4:	getfield	#5; //Field scala/actors/threadpool/locks/ReentrantReadWriteLock.sync:Lscala/actors/threadpool/locks/ReentrantReadWriteLock$Sync;
   7:	invokevirtual	#18; //Method scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.startWrite:()Z
   10:	ireturn

public boolean tryLock(long, scala.actors.threadpool.TimeUnit)   throws java.lang.InterruptedException;
  Code:
   Stack=4, Locals=12, Args_size=3
   0:	invokestatic	#7; //Method java/lang/Thread.interrupted:()Z
   3:	ifeq	14
   6:	new	#9; //class java/lang/InterruptedException
   9:	dup
   10:	invokespecial	#13; //Method java/lang/InterruptedException."<init>":()V
   13:	athrow
   14:	aconst_null
   15:	astore	4
   17:	aload_3
   18:	lload_1
   19:	invokevirtual	#19; //Method scala/actors/threadpool/TimeUnit.toNanos:(J)J
   22:	lstore	5
   24:	aload_0
   25:	dup
   26:	astore	7
   28:	monitorenter
   29:	lload	5
   31:	lconst_0
   32:	lcmp
   33:	ifgt	50
   36:	aload_0
   37:	getfield	#4; //Field lock:Lscala/actors/threadpool/locks/ReentrantReadWriteLock;
   40:	getfield	#5; //Field scala/actors/threadpool/locks/ReentrantReadWriteLock.sync:Lscala/actors/threadpool/locks/ReentrantReadWriteLock$Sync;
   43:	invokevirtual	#18; //Method scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.startWrite:()Z
   46:	aload	7
   48:	monitorexit
   49:	ireturn
   50:	aload_0
   51:	getfield	#4; //Field lock:Lscala/actors/threadpool/locks/ReentrantReadWriteLock;
   54:	getfield	#5; //Field scala/actors/threadpool/locks/ReentrantReadWriteLock.sync:Lscala/actors/threadpool/locks/ReentrantReadWriteLock$Sync;
   57:	invokevirtual	#6; //Method scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.startWriteFromNewWriter:()Z
   60:	ifeq	68
   63:	iconst_1
   64:	aload	7
   66:	monitorexit
   67:	ireturn
   68:	invokestatic	#20; //Method scala/actors/threadpool/helpers/Utils.nanoTime:()J
   71:	lload	5
   73:	ladd
   74:	lstore	8
   76:	getstatic	#21; //Field scala/actors/threadpool/TimeUnit.NANOSECONDS:Lscala/actors/threadpool/TimeUnit;
   79:	aload_0
   80:	lload	5
   82:	invokevirtual	#22; //Method scala/actors/threadpool/TimeUnit.timedWait:(Ljava/lang/Object;J)V
   85:	goto	111
   88:	astore	10
   90:	aload_0
   91:	getfield	#4; //Field lock:Lscala/actors/threadpool/locks/ReentrantReadWriteLock;
   94:	getfield	#5; //Field scala/actors/threadpool/locks/ReentrantReadWriteLock.sync:Lscala/actors/threadpool/locks/ReentrantReadWriteLock$Sync;
   97:	invokevirtual	#14; //Method scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.cancelledWaitingWriter:()V
   100:	aload_0
   101:	invokevirtual	#15; //Method java/lang/Object.notify:()V
   104:	aload	10
   106:	astore	4
   108:	goto	161
   111:	aload_0
   112:	getfield	#4; //Field lock:Lscala/actors/threadpool/locks/ReentrantReadWriteLock;
   115:	getfield	#5; //Field scala/actors/threadpool/locks/ReentrantReadWriteLock.sync:Lscala/actors/threadpool/locks/ReentrantReadWriteLock$Sync;
   118:	invokevirtual	#10; //Method scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.startWriteFromWaitingWriter:()Z
   121:	ifeq	129
   124:	iconst_1
   125:	aload	7
   127:	monitorexit
   128:	ireturn
   129:	lload	8
   131:	invokestatic	#20; //Method scala/actors/threadpool/helpers/Utils.nanoTime:()J
   134:	lsub
   135:	lstore	5
   137:	lload	5
   139:	lconst_0
   140:	lcmp
   141:	ifgt	76
   144:	aload_0
   145:	getfield	#4; //Field lock:Lscala/actors/threadpool/locks/ReentrantReadWriteLock;
   148:	getfield	#5; //Field scala/actors/threadpool/locks/ReentrantReadWriteLock.sync:Lscala/actors/threadpool/locks/ReentrantReadWriteLock$Sync;
   151:	invokevirtual	#14; //Method scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.cancelledWaitingWriter:()V
   154:	aload_0
   155:	invokevirtual	#15; //Method java/lang/Object.notify:()V
   158:	goto	161
   161:	aload	7
   163:	monitorexit
   164:	goto	175
   167:	astore	11
   169:	aload	7
   171:	monitorexit
   172:	aload	11
   174:	athrow
   175:	aload_0
   176:	getfield	#4; //Field lock:Lscala/actors/threadpool/locks/ReentrantReadWriteLock;
   179:	getfield	#16; //Field scala/actors/threadpool/locks/ReentrantReadWriteLock.readerLock_:Lscala/actors/threadpool/locks/ReentrantReadWriteLock$ReadLock;
   182:	invokevirtual	#17; //Method scala/actors/threadpool/locks/ReentrantReadWriteLock$ReadLock.signalWaiters:()V
   185:	aload	4
   187:	ifnull	193
   190:	aload	4
   192:	athrow
   193:	iconst_0
   194:	ireturn
  Exception table:
   from   to  target type
    76    85    88   Class java/lang/InterruptedException

    29    49   167   any
    50    67   167   any
    68   128   167   any
   129   164   167   any
   167   172   167   any
  Exceptions: 
   throws java.lang.InterruptedException
public void unlock();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#4; //Field lock:Lscala/actors/threadpool/locks/ReentrantReadWriteLock;
   4:	getfield	#5; //Field scala/actors/threadpool/locks/ReentrantReadWriteLock.sync:Lscala/actors/threadpool/locks/ReentrantReadWriteLock$Sync;
   7:	invokevirtual	#23; //Method scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.endWrite:()I
   10:	tableswitch{ //0 to 2
		0: 36;
		1: 37;
		2: 48;
		default: 59 }
   36:	return
   37:	aload_0
   38:	getfield	#4; //Field lock:Lscala/actors/threadpool/locks/ReentrantReadWriteLock;
   41:	getfield	#16; //Field scala/actors/threadpool/locks/ReentrantReadWriteLock.readerLock_:Lscala/actors/threadpool/locks/ReentrantReadWriteLock$ReadLock;
   44:	invokevirtual	#17; //Method scala/actors/threadpool/locks/ReentrantReadWriteLock$ReadLock.signalWaiters:()V
   47:	return
   48:	aload_0
   49:	getfield	#4; //Field lock:Lscala/actors/threadpool/locks/ReentrantReadWriteLock;
   52:	getfield	#24; //Field scala/actors/threadpool/locks/ReentrantReadWriteLock.writerLock_:Lscala/actors/threadpool/locks/ReentrantReadWriteLock$WriteLock;
   55:	invokevirtual	#25; //Method signalWaiters:()V
   58:	return
   59:	return

public scala.actors.threadpool.locks.Condition newCondition();
  Code:
   Stack=3, Locals=1, Args_size=1
   0:	new	#26; //class scala/actors/threadpool/locks/CondVar
   3:	dup
   4:	aload_0
   5:	invokespecial	#27; //Method scala/actors/threadpool/locks/CondVar."<init>":(Lscala/actors/threadpool/locks/CondVar$ExclusiveLock;)V
   8:	areturn

synchronized void signalWaiters();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokevirtual	#15; //Method java/lang/Object.notify:()V
   4:	return

public java.lang.String toString();
  Code:
   Stack=3, Locals=2, Args_size=1
   0:	aload_0
   1:	getfield	#4; //Field lock:Lscala/actors/threadpool/locks/ReentrantReadWriteLock;
   4:	invokevirtual	#28; //Method scala/actors/threadpool/locks/ReentrantReadWriteLock.getOwner:()Ljava/lang/Thread;
   7:	astore_1
   8:	new	#29; //class java/lang/StringBuilder
   11:	dup
   12:	invokespecial	#30; //Method java/lang/StringBuilder."<init>":()V
   15:	aload_0
   16:	invokespecial	#31; //Method java/lang/Object.toString:()Ljava/lang/String;
   19:	invokevirtual	#32; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   22:	aload_1
   23:	ifnonnull	31
   26:	ldc	#33; //String [Unlocked]
   28:	goto	58
   31:	new	#29; //class java/lang/StringBuilder
   34:	dup
   35:	invokespecial	#30; //Method java/lang/StringBuilder."<init>":()V
   38:	ldc	#34; //String [Locked by thread 
   40:	invokevirtual	#32; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   43:	aload_1
   44:	invokevirtual	#35; //Method java/lang/Thread.getName:()Ljava/lang/String;
   47:	invokevirtual	#32; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   50:	ldc	#36; //String ]
   52:	invokevirtual	#32; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   55:	invokevirtual	#37; //Method java/lang/StringBuilder.toString:()Ljava/lang/String;
   58:	invokevirtual	#32; //Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;
   61:	invokevirtual	#37; //Method java/lang/StringBuilder.toString:()Ljava/lang/String;
   64:	areturn

public boolean isHeldByCurrentThread();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#4; //Field lock:Lscala/actors/threadpool/locks/ReentrantReadWriteLock;
   4:	getfield	#5; //Field scala/actors/threadpool/locks/ReentrantReadWriteLock.sync:Lscala/actors/threadpool/locks/ReentrantReadWriteLock$Sync;
   7:	invokevirtual	#38; //Method scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.isWriteLockedByCurrentThread:()Z
   10:	ireturn

public int getHoldCount();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#4; //Field lock:Lscala/actors/threadpool/locks/ReentrantReadWriteLock;
   4:	getfield	#5; //Field scala/actors/threadpool/locks/ReentrantReadWriteLock.sync:Lscala/actors/threadpool/locks/ReentrantReadWriteLock$Sync;
   7:	invokevirtual	#39; //Method scala/actors/threadpool/locks/ReentrantReadWriteLock$Sync.getWriteHoldCount:()I
   10:	ireturn

}

