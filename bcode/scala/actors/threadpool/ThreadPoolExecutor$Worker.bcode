public final class scala.actors.threadpool.ThreadPoolExecutor$Worker extends scala.actors.threadpool.locks.ReentrantLock implements java.lang.Runnable
  InnerClass: 
   public final #38= #8 of #31; //Worker=class scala/actors/threadpool/ThreadPoolExecutor$Worker of class scala/actors/threadpool/ThreadPoolExecutor
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Field	#8.#28;	//  scala/actors/threadpool/ThreadPoolExecutor$Worker.this$0:Lscala/actors/threadpool/ThreadPoolExecutor;
const #2 = Method	#9.#29;	//  scala/actors/threadpool/locks/ReentrantLock."<init>":()V
const #3 = Field	#8.#30;	//  scala/actors/threadpool/ThreadPoolExecutor$Worker.firstTask:Ljava/lang/Runnable;
const #4 = Method	#31.#32;	//  scala/actors/threadpool/ThreadPoolExecutor.getThreadFactory:()Lscala/actors/threadpool/ThreadFactory;
const #5 = InterfaceMethod	#33.#34;	//  scala/actors/threadpool/ThreadFactory.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;
const #6 = Field	#8.#35;	//  scala/actors/threadpool/ThreadPoolExecutor$Worker.thread:Ljava/lang/Thread;
const #7 = Method	#31.#36;	//  scala/actors/threadpool/ThreadPoolExecutor.runWorker:(Lscala/actors/threadpool/ThreadPoolExecutor$Worker;)V
const #8 = class	#37;	//  scala/actors/threadpool/ThreadPoolExecutor$Worker
const #9 = class	#40;	//  scala/actors/threadpool/locks/ReentrantLock
const #10 = class	#41;	//  java/lang/Runnable
const #11 = Asciz	serialVersionUID;
const #12 = Asciz	J;
const #13 = Asciz	ConstantValue;
const #14 = long	6138294804551838833l;
const #16 = Asciz	thread;
const #17 = Asciz	Ljava/lang/Thread;;
const #18 = Asciz	firstTask;
const #19 = Asciz	Ljava/lang/Runnable;;
const #20 = Asciz	completedTasks;
const #21 = Asciz	this$0;
const #22 = Asciz	Lscala/actors/threadpool/ThreadPoolExecutor;;
const #23 = Asciz	<init>;
const #24 = Asciz	(Lscala/actors/threadpool/ThreadPoolExecutor;Ljava/lang/Runnable;)V;
const #25 = Asciz	Code;
const #26 = Asciz	run;
const #27 = Asciz	()V;
const #28 = NameAndType	#21:#22;//  this$0:Lscala/actors/threadpool/ThreadPoolExecutor;
const #29 = NameAndType	#23:#27;//  "<init>":()V
const #30 = NameAndType	#18:#19;//  firstTask:Ljava/lang/Runnable;
const #31 = class	#42;	//  scala/actors/threadpool/ThreadPoolExecutor
const #32 = NameAndType	#43:#44;//  getThreadFactory:()Lscala/actors/threadpool/ThreadFactory;
const #33 = class	#45;	//  scala/actors/threadpool/ThreadFactory
const #34 = NameAndType	#46:#47;//  newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;
const #35 = NameAndType	#16:#17;//  thread:Ljava/lang/Thread;
const #36 = NameAndType	#48:#49;//  runWorker:(Lscala/actors/threadpool/ThreadPoolExecutor$Worker;)V
const #37 = Asciz	scala/actors/threadpool/ThreadPoolExecutor$Worker;
const #38 = Asciz	Worker;
const #39 = Asciz	InnerClasses;
const #40 = Asciz	scala/actors/threadpool/locks/ReentrantLock;
const #41 = Asciz	java/lang/Runnable;
const #42 = Asciz	scala/actors/threadpool/ThreadPoolExecutor;
const #43 = Asciz	getThreadFactory;
const #44 = Asciz	()Lscala/actors/threadpool/ThreadFactory;;
const #45 = Asciz	scala/actors/threadpool/ThreadFactory;
const #46 = Asciz	newThread;
const #47 = Asciz	(Ljava/lang/Runnable;)Ljava/lang/Thread;;
const #48 = Asciz	runWorker;
const #49 = Asciz	(Lscala/actors/threadpool/ThreadPoolExecutor$Worker;)V;

{
public final java.lang.Thread thread;

java.lang.Runnable firstTask;

volatile long completedTasks;

final scala.actors.threadpool.ThreadPoolExecutor this$0;

scala.actors.threadpool.ThreadPoolExecutor$Worker(scala.actors.threadpool.ThreadPoolExecutor, java.lang.Runnable);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	putfield	#1; //Field this$0:Lscala/actors/threadpool/ThreadPoolExecutor;
   5:	aload_0
   6:	invokespecial	#2; //Method scala/actors/threadpool/locks/ReentrantLock."<init>":()V
   9:	aload_0
   10:	aload_2
   11:	putfield	#3; //Field firstTask:Ljava/lang/Runnable;
   14:	aload_0
   15:	aload_1
   16:	invokevirtual	#4; //Method scala/actors/threadpool/ThreadPoolExecutor.getThreadFactory:()Lscala/actors/threadpool/ThreadFactory;
   19:	aload_0
   20:	invokeinterface	#5,  2; //InterfaceMethod scala/actors/threadpool/ThreadFactory.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;
   25:	putfield	#6; //Field thread:Ljava/lang/Thread;
   28:	return

public void run();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#1; //Field this$0:Lscala/actors/threadpool/ThreadPoolExecutor;
   4:	aload_0
   5:	invokevirtual	#7; //Method scala/actors/threadpool/ThreadPoolExecutor.runWorker:(Lscala/actors/threadpool/ThreadPoolExecutor$Worker;)V
   8:	return

}

