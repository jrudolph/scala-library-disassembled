public class scala.actors.threadpool.ThreadPoolExecutor extends scala.actors.threadpool.AbstractExecutorService
  InnerClass: 
   public #135= #134 of #132; //DiscardOldestPolicy=class scala/actors/threadpool/ThreadPoolExecutor$DiscardOldestPolicy of class scala/actors/threadpool/ThreadPoolExecutor
   public #138= #137 of #132; //DiscardPolicy=class scala/actors/threadpool/ThreadPoolExecutor$DiscardPolicy of class scala/actors/threadpool/ThreadPoolExecutor
   public #139= #127 of #132; //AbortPolicy=class scala/actors/threadpool/ThreadPoolExecutor$AbortPolicy of class scala/actors/threadpool/ThreadPoolExecutor
   public #141= #140 of #132; //CallerRunsPolicy=class scala/actors/threadpool/ThreadPoolExecutor$CallerRunsPolicy of class scala/actors/threadpool/ThreadPoolExecutor
   public final #142= #31 of #132; //Worker=class scala/actors/threadpool/ThreadPoolExecutor$Worker of class scala/actors/threadpool/ThreadPoolExecutor
  minor version: 0
  major version: 49
  Constant pool:
const #1 = int	-536870912;
const #2 = int	536870911;
const #3 = Field	#132.#272;	//  scala/actors/threadpool/ThreadPoolExecutor.ctl:Lscala/actors/threadpool/AtomicInteger;
const #4 = Method	#89.#273;	//  scala/actors/threadpool/AtomicInteger.compareAndSet:(II)Z
const #5 = Method	#89.#274;	//  scala/actors/threadpool/AtomicInteger.get:()I
const #6 = Method	#132.#275;	//  scala/actors/threadpool/ThreadPoolExecutor.compareAndDecrementWorkerCount:(I)Z
const #7 = Method	#132.#276;	//  scala/actors/threadpool/ThreadPoolExecutor.runStateAtLeast:(II)Z
const #8 = Method	#132.#277;	//  scala/actors/threadpool/ThreadPoolExecutor.workerCountOf:(I)I
const #9 = Method	#132.#278;	//  scala/actors/threadpool/ThreadPoolExecutor.ctlOf:(II)I
const #10 = Method	#132.#279;	//  scala/actors/threadpool/ThreadPoolExecutor.isRunning:(I)Z
const #11 = int	1073741824;
const #12 = Method	#132.#280;	//  scala/actors/threadpool/ThreadPoolExecutor.runStateOf:(I)I
const #13 = Field	#132.#281;	//  scala/actors/threadpool/ThreadPoolExecutor.workQueue:Lscala/actors/threadpool/BlockingQueue;
const #14 = InterfaceMethod	#282.#283;	//  scala/actors/threadpool/BlockingQueue.isEmpty:()Z
const #15 = Method	#132.#284;	//  scala/actors/threadpool/ThreadPoolExecutor.interruptIdleWorkers:(Z)V
const #16 = Field	#132.#285;	//  scala/actors/threadpool/ThreadPoolExecutor.mainLock:Lscala/actors/threadpool/locks/ReentrantLock;
const #17 = Method	#91.#286;	//  scala/actors/threadpool/locks/ReentrantLock.lock:()V
const #18 = Method	#132.#287;	//  scala/actors/threadpool/ThreadPoolExecutor.terminated:()V
const #19 = int	1610612736;
const #20 = Method	#89.#288;	//  scala/actors/threadpool/AtomicInteger.set:(I)V
const #21 = Field	#132.#289;	//  scala/actors/threadpool/ThreadPoolExecutor.termination:Lscala/actors/threadpool/locks/Condition;
const #22 = InterfaceMethod	#290.#291;	//  scala/actors/threadpool/locks/Condition.signalAll:()V
const #23 = Method	#91.#292;	//  scala/actors/threadpool/locks/ReentrantLock.unlock:()V
const #24 = Method	#293.#294;	//  java/lang/System.getSecurityManager:()Ljava/lang/SecurityManager;
const #25 = Field	#132.#295;	//  scala/actors/threadpool/ThreadPoolExecutor.shutdownPerm:Ljava/lang/RuntimePermission;
const #26 = Method	#296.#297;	//  java/lang/SecurityManager.checkPermission:(Ljava/security/Permission;)V
const #27 = Field	#132.#298;	//  scala/actors/threadpool/ThreadPoolExecutor.workers:Ljava/util/HashSet;
const #28 = Method	#93.#299;	//  java/util/HashSet.iterator:()Ljava/util/Iterator;
const #29 = InterfaceMethod	#300.#301;	//  java/util/Iterator.hasNext:()Z
const #30 = InterfaceMethod	#300.#302;	//  java/util/Iterator.next:()Ljava/lang/Object;
const #31 = class	#303;	//  scala/actors/threadpool/ThreadPoolExecutor$Worker
const #32 = Field	#31.#304;	//  scala/actors/threadpool/ThreadPoolExecutor$Worker.thread:Ljava/lang/Thread;
const #33 = Method	#296.#305;	//  java/lang/SecurityManager.checkAccess:(Ljava/lang/Thread;)V
const #34 = Method	#306.#307;	//  java/lang/Thread.interrupt:()V
const #35 = class	#308;	//  java/lang/SecurityException
const #36 = Method	#306.#309;	//  java/lang/Thread.isInterrupted:()Z
const #37 = Method	#31.#310;	//  scala/actors/threadpool/ThreadPoolExecutor$Worker.tryLock:()Z
const #38 = Method	#31.#292;	//  scala/actors/threadpool/ThreadPoolExecutor$Worker.unlock:()V
const #39 = int	536870912;
const #40 = Method	#132.#311;	//  scala/actors/threadpool/ThreadPoolExecutor.runStateLessThan:(II)Z
const #41 = Method	#306.#312;	//  java/lang/Thread.interrupted:()Z
const #42 = Method	#306.#313;	//  java/lang/Thread.currentThread:()Ljava/lang/Thread;
const #43 = Field	#132.#314;	//  scala/actors/threadpool/ThreadPoolExecutor.handler:Lscala/actors/threadpool/RejectedExecutionHandler;
const #44 = InterfaceMethod	#315.#316;	//  scala/actors/threadpool/RejectedExecutionHandler.rejectedExecution:(Ljava/lang/Runnable;Lscala/actors/threadpool/ThreadPoolExecutor;)V
const #45 = class	#317;	//  java/util/ArrayList
const #46 = Method	#45.#318;	//  java/util/ArrayList."<init>":()V
const #47 = InterfaceMethod	#282.#319;	//  scala/actors/threadpool/BlockingQueue.drainTo:(Ljava/util/Collection;)I
const #48 = class	#320;	//  java/lang/Runnable
const #49 = InterfaceMethod	#282.#321;	//  scala/actors/threadpool/BlockingQueue.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
const #50 = class	#322;	//  "[Ljava/lang/Runnable;"
const #51 = InterfaceMethod	#282.#323;	//  scala/actors/threadpool/BlockingQueue.remove:(Ljava/lang/Object;)Z
const #52 = InterfaceMethod	#324.#325;	//  java/util/List.add:(Ljava/lang/Object;)Z
const #53 = Field	#132.#326;	//  scala/actors/threadpool/ThreadPoolExecutor.corePoolSize:I
const #54 = Field	#132.#327;	//  scala/actors/threadpool/ThreadPoolExecutor.maximumPoolSize:I
const #55 = Method	#132.#328;	//  scala/actors/threadpool/ThreadPoolExecutor.compareAndIncrementWorkerCount:(I)Z
const #56 = Method	#31.#329;	//  scala/actors/threadpool/ThreadPoolExecutor$Worker."<init>":(Lscala/actors/threadpool/ThreadPoolExecutor;Ljava/lang/Runnable;)V
const #57 = Method	#132.#330;	//  scala/actors/threadpool/ThreadPoolExecutor.decrementWorkerCount:()V
const #58 = Method	#132.#331;	//  scala/actors/threadpool/ThreadPoolExecutor.tryTerminate:()V
const #59 = Method	#93.#325;	//  java/util/HashSet.add:(Ljava/lang/Object;)Z
const #60 = Method	#93.#332;	//  java/util/HashSet.size:()I
const #61 = Field	#132.#333;	//  scala/actors/threadpool/ThreadPoolExecutor.largestPoolSize:I
const #62 = Method	#306.#334;	//  java/lang/Thread.start:()V
const #63 = Field	#132.#335;	//  scala/actors/threadpool/ThreadPoolExecutor.completedTaskCount:J
const #64 = Field	#31.#336;	//  scala/actors/threadpool/ThreadPoolExecutor$Worker.completedTasks:J
const #65 = Method	#93.#323;	//  java/util/HashSet.remove:(Ljava/lang/Object;)Z
const #66 = Field	#132.#337;	//  scala/actors/threadpool/ThreadPoolExecutor.allowCoreThreadTimeOut:Z
const #67 = Method	#132.#338;	//  scala/actors/threadpool/ThreadPoolExecutor.addWorker:(Ljava/lang/Runnable;Z)Z
const #68 = Field	#132.#339;	//  scala/actors/threadpool/ThreadPoolExecutor.keepAliveTime:J
const #69 = Field	#340.#341;	//  scala/actors/threadpool/TimeUnit.NANOSECONDS:Lscala/actors/threadpool/TimeUnit;
const #70 = InterfaceMethod	#282.#342;	//  scala/actors/threadpool/BlockingQueue.poll:(JLscala/actors/threadpool/TimeUnit;)Ljava/lang/Object;
const #71 = InterfaceMethod	#282.#343;	//  scala/actors/threadpool/BlockingQueue.take:()Ljava/lang/Object;
const #72 = class	#344;	//  java/lang/InterruptedException
const #73 = Field	#31.#345;	//  scala/actors/threadpool/ThreadPoolExecutor$Worker.firstTask:Ljava/lang/Runnable;
const #74 = Method	#132.#346;	//  scala/actors/threadpool/ThreadPoolExecutor.getTask:()Ljava/lang/Runnable;
const #75 = Method	#31.#286;	//  scala/actors/threadpool/ThreadPoolExecutor$Worker.lock:()V
const #76 = Method	#132.#347;	//  scala/actors/threadpool/ThreadPoolExecutor.clearInterruptsForTaskRun:()V
const #77 = Method	#132.#348;	//  scala/actors/threadpool/ThreadPoolExecutor.beforeExecute:(Ljava/lang/Thread;Ljava/lang/Runnable;)V
const #78 = InterfaceMethod	#48.#349;	//  java/lang/Runnable.run:()V
const #79 = Method	#132.#350;	//  scala/actors/threadpool/ThreadPoolExecutor.afterExecute:(Ljava/lang/Runnable;Ljava/lang/Throwable;)V
const #80 = class	#351;	//  java/lang/RuntimeException
const #81 = class	#352;	//  java/lang/Error
const #82 = class	#353;	//  java/lang/Throwable
const #83 = Method	#81.#354;	//  java/lang/Error."<init>":(Ljava/lang/Throwable;)V
const #84 = Method	#132.#355;	//  scala/actors/threadpool/ThreadPoolExecutor.processWorkerExit:(Lscala/actors/threadpool/ThreadPoolExecutor$Worker;Z)V
const #85 = Method	#356.#357;	//  scala/actors/threadpool/Executors.defaultThreadFactory:()Lscala/actors/threadpool/ThreadFactory;
const #86 = Field	#132.#358;	//  scala/actors/threadpool/ThreadPoolExecutor.defaultHandler:Lscala/actors/threadpool/RejectedExecutionHandler;
const #87 = Method	#132.#359;	//  scala/actors/threadpool/ThreadPoolExecutor."<init>":(IIJLscala/actors/threadpool/TimeUnit;Lscala/actors/threadpool/BlockingQueue;Lscala/actors/threadpool/ThreadFactory;Lscala/actors/threadpool/RejectedExecutionHandler;)V
const #88 = Method	#133.#318;	//  scala/actors/threadpool/AbstractExecutorService."<init>":()V
const #89 = class	#360;	//  scala/actors/threadpool/AtomicInteger
const #90 = Method	#89.#361;	//  scala/actors/threadpool/AtomicInteger."<init>":(I)V
const #91 = class	#362;	//  scala/actors/threadpool/locks/ReentrantLock
const #92 = Method	#91.#318;	//  scala/actors/threadpool/locks/ReentrantLock."<init>":()V
const #93 = class	#363;	//  java/util/HashSet
const #94 = Method	#93.#318;	//  java/util/HashSet."<init>":()V
const #95 = Method	#91.#364;	//  scala/actors/threadpool/locks/ReentrantLock.newCondition:()Lscala/actors/threadpool/locks/Condition;
const #96 = class	#365;	//  java/lang/IllegalArgumentException
const #97 = Method	#96.#318;	//  java/lang/IllegalArgumentException."<init>":()V
const #98 = class	#366;	//  java/lang/NullPointerException
const #99 = Method	#98.#318;	//  java/lang/NullPointerException."<init>":()V
const #100 = Method	#340.#367;	//  scala/actors/threadpool/TimeUnit.toNanos:(J)J
const #101 = Field	#132.#368;	//  scala/actors/threadpool/ThreadPoolExecutor.threadFactory:Lscala/actors/threadpool/ThreadFactory;
const #102 = InterfaceMethod	#282.#369;	//  scala/actors/threadpool/BlockingQueue.offer:(Ljava/lang/Object;)Z
const #103 = Method	#132.#370;	//  scala/actors/threadpool/ThreadPoolExecutor.remove:(Ljava/lang/Runnable;)Z
const #104 = Method	#132.#371;	//  scala/actors/threadpool/ThreadPoolExecutor.reject:(Ljava/lang/Runnable;)V
const #105 = Method	#132.#372;	//  scala/actors/threadpool/ThreadPoolExecutor.checkShutdownAccess:()V
const #106 = Method	#132.#373;	//  scala/actors/threadpool/ThreadPoolExecutor.advanceRunState:(I)V
const #107 = Method	#132.#374;	//  scala/actors/threadpool/ThreadPoolExecutor.interruptIdleWorkers:()V
const #108 = Method	#132.#375;	//  scala/actors/threadpool/ThreadPoolExecutor.onShutdown:()V
const #109 = Method	#132.#376;	//  scala/actors/threadpool/ThreadPoolExecutor.interruptWorkers:()V
const #110 = Method	#132.#377;	//  scala/actors/threadpool/ThreadPoolExecutor.drainQueue:()Ljava/util/List;
const #111 = Method	#378.#379;	//  scala/actors/threadpool/helpers/Utils.nanoTime:()J
const #112 = InterfaceMethod	#290.#380;	//  scala/actors/threadpool/locks/Condition.await:(JLscala/actors/threadpool/TimeUnit;)Z
const #113 = Method	#132.#381;	//  scala/actors/threadpool/ThreadPoolExecutor.shutdown:()V
const #114 = InterfaceMethod	#282.#332;	//  scala/actors/threadpool/BlockingQueue.size:()I
const #115 = Method	#382.#383;	//  java/lang/Math.min:(II)I
const #116 = String	#384;	//  Core threads must have nonzero keep alive times
const #117 = Method	#96.#385;	//  java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
const #118 = Method	#132.#386;	//  scala/actors/threadpool/ThreadPoolExecutor.allowsCoreThreadTimeOut:()Z
const #119 = Method	#340.#387;	//  scala/actors/threadpool/TimeUnit.convert:(JLscala/actors/threadpool/TimeUnit;)J
const #120 = InterfaceMethod	#282.#299;	//  scala/actors/threadpool/BlockingQueue.iterator:()Ljava/util/Iterator;
const #121 = class	#388;	//  scala/actors/threadpool/Future
const #122 = InterfaceMethod	#121.#389;	//  scala/actors/threadpool/Future.isCancelled:()Z
const #123 = InterfaceMethod	#300.#390;	//  java/util/Iterator.remove:()V
const #124 = class	#391;	//  java/util/ConcurrentModificationException
const #125 = InterfaceMethod	#282.#392;	//  scala/actors/threadpool/BlockingQueue.toArray:()[Ljava/lang/Object;
const #126 = Method	#31.#393;	//  scala/actors/threadpool/ThreadPoolExecutor$Worker.isLocked:()Z
const #127 = class	#394;	//  scala/actors/threadpool/ThreadPoolExecutor$AbortPolicy
const #128 = Method	#127.#318;	//  scala/actors/threadpool/ThreadPoolExecutor$AbortPolicy."<init>":()V
const #129 = class	#395;	//  java/lang/RuntimePermission
const #130 = String	#396;	//  modifyThread
const #131 = Method	#129.#385;	//  java/lang/RuntimePermission."<init>":(Ljava/lang/String;)V
const #132 = class	#397;	//  scala/actors/threadpool/ThreadPoolExecutor
const #133 = class	#398;	//  scala/actors/threadpool/AbstractExecutorService
const #134 = class	#399;	//  scala/actors/threadpool/ThreadPoolExecutor$DiscardOldestPolicy
const #135 = Asciz	DiscardOldestPolicy;
const #136 = Asciz	InnerClasses;
const #137 = class	#400;	//  scala/actors/threadpool/ThreadPoolExecutor$DiscardPolicy
const #138 = Asciz	DiscardPolicy;
const #139 = Asciz	AbortPolicy;
const #140 = class	#401;	//  scala/actors/threadpool/ThreadPoolExecutor$CallerRunsPolicy
const #141 = Asciz	CallerRunsPolicy;
const #142 = Asciz	Worker;
const #143 = Asciz	ctl;
const #144 = Asciz	Lscala/actors/threadpool/AtomicInteger;;
const #145 = Asciz	COUNT_BITS;
const #146 = Asciz	I;
const #147 = Asciz	ConstantValue;
const #148 = int	29;
const #149 = Asciz	CAPACITY;
const #150 = Asciz	RUNNING;
const #151 = Asciz	SHUTDOWN;
const #152 = int	0;
const #153 = Asciz	STOP;
const #154 = Asciz	TIDYING;
const #155 = Asciz	TERMINATED;
const #156 = Asciz	workQueue;
const #157 = Asciz	Lscala/actors/threadpool/BlockingQueue;;
const #158 = Asciz	mainLock;
const #159 = Asciz	Lscala/actors/threadpool/locks/ReentrantLock;;
const #160 = Asciz	workers;
const #161 = Asciz	Ljava/util/HashSet;;
const #162 = Asciz	termination;
const #163 = Asciz	Lscala/actors/threadpool/locks/Condition;;
const #164 = Asciz	largestPoolSize;
const #165 = Asciz	completedTaskCount;
const #166 = Asciz	J;
const #167 = Asciz	threadFactory;
const #168 = Asciz	Lscala/actors/threadpool/ThreadFactory;;
const #169 = Asciz	handler;
const #170 = Asciz	Lscala/actors/threadpool/RejectedExecutionHandler;;
const #171 = Asciz	keepAliveTime;
const #172 = Asciz	allowCoreThreadTimeOut;
const #173 = Asciz	Z;
const #174 = Asciz	corePoolSize;
const #175 = Asciz	maximumPoolSize;
const #176 = Asciz	defaultHandler;
const #177 = Asciz	shutdownPerm;
const #178 = Asciz	Ljava/lang/RuntimePermission;;
const #179 = Asciz	ONLY_ONE;
const #180 = int	1;
const #181 = Asciz	runStateOf;
const #182 = Asciz	(I)I;
const #183 = Asciz	Code;
const #184 = Asciz	workerCountOf;
const #185 = Asciz	ctlOf;
const #186 = Asciz	(II)I;
const #187 = Asciz	runStateLessThan;
const #188 = Asciz	(II)Z;
const #189 = Asciz	runStateAtLeast;
const #190 = Asciz	isRunning;
const #191 = Asciz	(I)Z;
const #192 = Asciz	compareAndIncrementWorkerCount;
const #193 = Asciz	compareAndDecrementWorkerCount;
const #194 = Asciz	decrementWorkerCount;
const #195 = Asciz	()V;
const #196 = Asciz	advanceRunState;
const #197 = Asciz	(I)V;
const #198 = Asciz	tryTerminate;
const #199 = Asciz	checkShutdownAccess;
const #200 = Asciz	interruptWorkers;
const #201 = Asciz	interruptIdleWorkers;
const #202 = Asciz	(Z)V;
const #203 = Asciz	clearInterruptsForTaskRun;
const #204 = Asciz	reject;
const #205 = Asciz	(Ljava/lang/Runnable;)V;
const #206 = Asciz	onShutdown;
const #207 = Asciz	isRunningOrShutdown;
const #208 = Asciz	(Z)Z;
const #209 = Asciz	drainQueue;
const #210 = Asciz	()Ljava/util/List;;
const #211 = Asciz	addWorker;
const #212 = Asciz	(Ljava/lang/Runnable;Z)Z;
const #213 = Asciz	processWorkerExit;
const #214 = Asciz	(Lscala/actors/threadpool/ThreadPoolExecutor$Worker;Z)V;
const #215 = Asciz	getTask;
const #216 = Asciz	()Ljava/lang/Runnable;;
const #217 = Asciz	runWorker;
const #218 = Asciz	(Lscala/actors/threadpool/ThreadPoolExecutor$Worker;)V;
const #219 = Asciz	<init>;
const #220 = Asciz	(IIJLscala/actors/threadpool/TimeUnit;Lscala/actors/threadpool/BlockingQueue;)V;
const #221 = Asciz	(IIJLscala/actors/threadpool/TimeUnit;Lscala/actors/threadpool/BlockingQueue;Lscala/actors/threadpool/ThreadFactory;)V;
const #222 = Asciz	(IIJLscala/actors/threadpool/TimeUnit;Lscala/actors/threadpool/BlockingQueue;Lscala/actors/threadpool/RejectedExecutionHandler;)V;
const #223 = Asciz	(IIJLscala/actors/threadpool/TimeUnit;Lscala/actors/threadpool/BlockingQueue;Lscala/actors/threadpool/ThreadFactory;Lscala/actors/threadpool/RejectedExecutionHandler;)V;
const #224 = Asciz	execute;
const #225 = Asciz	shutdown;
const #226 = Asciz	shutdownNow;
const #227 = Asciz	isShutdown;
const #228 = Asciz	()Z;
const #229 = Asciz	isTerminating;
const #230 = Asciz	isTerminated;
const #231 = Asciz	awaitTermination;
const #232 = Asciz	(JLscala/actors/threadpool/TimeUnit;)Z;
const #233 = Asciz	Exceptions;
const #234 = Asciz	finalize;
const #235 = Asciz	setThreadFactory;
const #236 = Asciz	(Lscala/actors/threadpool/ThreadFactory;)V;
const #237 = Asciz	getThreadFactory;
const #238 = Asciz	()Lscala/actors/threadpool/ThreadFactory;;
const #239 = Asciz	setRejectedExecutionHandler;
const #240 = Asciz	(Lscala/actors/threadpool/RejectedExecutionHandler;)V;
const #241 = Asciz	getRejectedExecutionHandler;
const #242 = Asciz	()Lscala/actors/threadpool/RejectedExecutionHandler;;
const #243 = Asciz	setCorePoolSize;
const #244 = Asciz	getCorePoolSize;
const #245 = Asciz	()I;
const #246 = Asciz	prestartCoreThread;
const #247 = Asciz	prestartAllCoreThreads;
const #248 = Asciz	allowsCoreThreadTimeOut;
const #249 = Asciz	setMaximumPoolSize;
const #250 = Asciz	getMaximumPoolSize;
const #251 = Asciz	setKeepAliveTime;
const #252 = Asciz	(JLscala/actors/threadpool/TimeUnit;)V;
const #253 = Asciz	getKeepAliveTime;
const #254 = Asciz	(Lscala/actors/threadpool/TimeUnit;)J;
const #255 = Asciz	getQueue;
const #256 = Asciz	()Lscala/actors/threadpool/BlockingQueue;;
const #257 = Asciz	remove;
const #258 = Asciz	(Ljava/lang/Runnable;)Z;
const #259 = Asciz	purge;
const #260 = Asciz	getPoolSize;
const #261 = Asciz	getActiveCount;
const #262 = Asciz	getLargestPoolSize;
const #263 = Asciz	getTaskCount;
const #264 = Asciz	()J;
const #265 = Asciz	getCompletedTaskCount;
const #266 = Asciz	beforeExecute;
const #267 = Asciz	(Ljava/lang/Thread;Ljava/lang/Runnable;)V;
const #268 = Asciz	afterExecute;
const #269 = Asciz	(Ljava/lang/Runnable;Ljava/lang/Throwable;)V;
const #270 = Asciz	terminated;
const #271 = Asciz	<clinit>;
const #272 = NameAndType	#143:#144;//  ctl:Lscala/actors/threadpool/AtomicInteger;
const #273 = NameAndType	#402:#188;//  compareAndSet:(II)Z
const #274 = NameAndType	#403:#245;//  get:()I
const #275 = NameAndType	#193:#191;//  compareAndDecrementWorkerCount:(I)Z
const #276 = NameAndType	#189:#188;//  runStateAtLeast:(II)Z
const #277 = NameAndType	#184:#182;//  workerCountOf:(I)I
const #278 = NameAndType	#185:#186;//  ctlOf:(II)I
const #279 = NameAndType	#190:#191;//  isRunning:(I)Z
const #280 = NameAndType	#181:#182;//  runStateOf:(I)I
const #281 = NameAndType	#156:#157;//  workQueue:Lscala/actors/threadpool/BlockingQueue;
const #282 = class	#404;	//  scala/actors/threadpool/BlockingQueue
const #283 = NameAndType	#405:#228;//  isEmpty:()Z
const #284 = NameAndType	#201:#202;//  interruptIdleWorkers:(Z)V
const #285 = NameAndType	#158:#159;//  mainLock:Lscala/actors/threadpool/locks/ReentrantLock;
const #286 = NameAndType	#406:#195;//  lock:()V
const #287 = NameAndType	#270:#195;//  terminated:()V
const #288 = NameAndType	#407:#197;//  set:(I)V
const #289 = NameAndType	#162:#163;//  termination:Lscala/actors/threadpool/locks/Condition;
const #290 = class	#408;	//  scala/actors/threadpool/locks/Condition
const #291 = NameAndType	#409:#195;//  signalAll:()V
const #292 = NameAndType	#410:#195;//  unlock:()V
const #293 = class	#411;	//  java/lang/System
const #294 = NameAndType	#412:#413;//  getSecurityManager:()Ljava/lang/SecurityManager;
const #295 = NameAndType	#177:#178;//  shutdownPerm:Ljava/lang/RuntimePermission;
const #296 = class	#414;	//  java/lang/SecurityManager
const #297 = NameAndType	#415:#416;//  checkPermission:(Ljava/security/Permission;)V
const #298 = NameAndType	#160:#161;//  workers:Ljava/util/HashSet;
const #299 = NameAndType	#417:#418;//  iterator:()Ljava/util/Iterator;
const #300 = class	#419;	//  java/util/Iterator
const #301 = NameAndType	#420:#228;//  hasNext:()Z
const #302 = NameAndType	#421:#422;//  next:()Ljava/lang/Object;
const #303 = Asciz	scala/actors/threadpool/ThreadPoolExecutor$Worker;
const #304 = NameAndType	#423:#424;//  thread:Ljava/lang/Thread;
const #305 = NameAndType	#425:#426;//  checkAccess:(Ljava/lang/Thread;)V
const #306 = class	#427;	//  java/lang/Thread
const #307 = NameAndType	#428:#195;//  interrupt:()V
const #308 = Asciz	java/lang/SecurityException;
const #309 = NameAndType	#429:#228;//  isInterrupted:()Z
const #310 = NameAndType	#430:#228;//  tryLock:()Z
const #311 = NameAndType	#187:#188;//  runStateLessThan:(II)Z
const #312 = NameAndType	#431:#228;//  interrupted:()Z
const #313 = NameAndType	#432:#433;//  currentThread:()Ljava/lang/Thread;
const #314 = NameAndType	#169:#170;//  handler:Lscala/actors/threadpool/RejectedExecutionHandler;
const #315 = class	#434;	//  scala/actors/threadpool/RejectedExecutionHandler
const #316 = NameAndType	#435:#436;//  rejectedExecution:(Ljava/lang/Runnable;Lscala/actors/threadpool/ThreadPoolExecutor;)V
const #317 = Asciz	java/util/ArrayList;
const #318 = NameAndType	#219:#195;//  "<init>":()V
const #319 = NameAndType	#437:#438;//  drainTo:(Ljava/util/Collection;)I
const #320 = Asciz	java/lang/Runnable;
const #321 = NameAndType	#439:#440;//  toArray:([Ljava/lang/Object;)[Ljava/lang/Object;
const #322 = Asciz	[Ljava/lang/Runnable;;
const #323 = NameAndType	#257:#441;//  remove:(Ljava/lang/Object;)Z
const #324 = class	#442;	//  java/util/List
const #325 = NameAndType	#443:#441;//  add:(Ljava/lang/Object;)Z
const #326 = NameAndType	#174:#146;//  corePoolSize:I
const #327 = NameAndType	#175:#146;//  maximumPoolSize:I
const #328 = NameAndType	#192:#191;//  compareAndIncrementWorkerCount:(I)Z
const #329 = NameAndType	#219:#444;//  "<init>":(Lscala/actors/threadpool/ThreadPoolExecutor;Ljava/lang/Runnable;)V
const #330 = NameAndType	#194:#195;//  decrementWorkerCount:()V
const #331 = NameAndType	#198:#195;//  tryTerminate:()V
const #332 = NameAndType	#445:#245;//  size:()I
const #333 = NameAndType	#164:#146;//  largestPoolSize:I
const #334 = NameAndType	#446:#195;//  start:()V
const #335 = NameAndType	#165:#166;//  completedTaskCount:J
const #336 = NameAndType	#447:#166;//  completedTasks:J
const #337 = NameAndType	#172:#173;//  allowCoreThreadTimeOut:Z
const #338 = NameAndType	#211:#212;//  addWorker:(Ljava/lang/Runnable;Z)Z
const #339 = NameAndType	#171:#166;//  keepAliveTime:J
const #340 = class	#448;	//  scala/actors/threadpool/TimeUnit
const #341 = NameAndType	#449:#450;//  NANOSECONDS:Lscala/actors/threadpool/TimeUnit;
const #342 = NameAndType	#451:#452;//  poll:(JLscala/actors/threadpool/TimeUnit;)Ljava/lang/Object;
const #343 = NameAndType	#453:#422;//  take:()Ljava/lang/Object;
const #344 = Asciz	java/lang/InterruptedException;
const #345 = NameAndType	#454:#455;//  firstTask:Ljava/lang/Runnable;
const #346 = NameAndType	#215:#216;//  getTask:()Ljava/lang/Runnable;
const #347 = NameAndType	#203:#195;//  clearInterruptsForTaskRun:()V
const #348 = NameAndType	#266:#267;//  beforeExecute:(Ljava/lang/Thread;Ljava/lang/Runnable;)V
const #349 = NameAndType	#456:#195;//  run:()V
const #350 = NameAndType	#268:#269;//  afterExecute:(Ljava/lang/Runnable;Ljava/lang/Throwable;)V
const #351 = Asciz	java/lang/RuntimeException;
const #352 = Asciz	java/lang/Error;
const #353 = Asciz	java/lang/Throwable;
const #354 = NameAndType	#219:#457;//  "<init>":(Ljava/lang/Throwable;)V
const #355 = NameAndType	#213:#214;//  processWorkerExit:(Lscala/actors/threadpool/ThreadPoolExecutor$Worker;Z)V
const #356 = class	#458;	//  scala/actors/threadpool/Executors
const #357 = NameAndType	#459:#238;//  defaultThreadFactory:()Lscala/actors/threadpool/ThreadFactory;
const #358 = NameAndType	#176:#170;//  defaultHandler:Lscala/actors/threadpool/RejectedExecutionHandler;
const #359 = NameAndType	#219:#223;//  "<init>":(IIJLscala/actors/threadpool/TimeUnit;Lscala/actors/threadpool/BlockingQueue;Lscala/actors/threadpool/ThreadFactory;Lscala/actors/threadpool/RejectedExecutionHandler;)V
const #360 = Asciz	scala/actors/threadpool/AtomicInteger;
const #361 = NameAndType	#219:#197;//  "<init>":(I)V
const #362 = Asciz	scala/actors/threadpool/locks/ReentrantLock;
const #363 = Asciz	java/util/HashSet;
const #364 = NameAndType	#460:#461;//  newCondition:()Lscala/actors/threadpool/locks/Condition;
const #365 = Asciz	java/lang/IllegalArgumentException;
const #366 = Asciz	java/lang/NullPointerException;
const #367 = NameAndType	#462:#463;//  toNanos:(J)J
const #368 = NameAndType	#167:#168;//  threadFactory:Lscala/actors/threadpool/ThreadFactory;
const #369 = NameAndType	#464:#441;//  offer:(Ljava/lang/Object;)Z
const #370 = NameAndType	#257:#258;//  remove:(Ljava/lang/Runnable;)Z
const #371 = NameAndType	#204:#205;//  reject:(Ljava/lang/Runnable;)V
const #372 = NameAndType	#199:#195;//  checkShutdownAccess:()V
const #373 = NameAndType	#196:#197;//  advanceRunState:(I)V
const #374 = NameAndType	#201:#195;//  interruptIdleWorkers:()V
const #375 = NameAndType	#206:#195;//  onShutdown:()V
const #376 = NameAndType	#200:#195;//  interruptWorkers:()V
const #377 = NameAndType	#209:#210;//  drainQueue:()Ljava/util/List;
const #378 = class	#465;	//  scala/actors/threadpool/helpers/Utils
const #379 = NameAndType	#466:#264;//  nanoTime:()J
const #380 = NameAndType	#467:#232;//  await:(JLscala/actors/threadpool/TimeUnit;)Z
const #381 = NameAndType	#225:#195;//  shutdown:()V
const #382 = class	#468;	//  java/lang/Math
const #383 = NameAndType	#469:#186;//  min:(II)I
const #384 = Asciz	Core threads must have nonzero keep alive times;
const #385 = NameAndType	#219:#470;//  "<init>":(Ljava/lang/String;)V
const #386 = NameAndType	#248:#228;//  allowsCoreThreadTimeOut:()Z
const #387 = NameAndType	#471:#472;//  convert:(JLscala/actors/threadpool/TimeUnit;)J
const #388 = Asciz	scala/actors/threadpool/Future;
const #389 = NameAndType	#473:#228;//  isCancelled:()Z
const #390 = NameAndType	#257:#195;//  remove:()V
const #391 = Asciz	java/util/ConcurrentModificationException;
const #392 = NameAndType	#439:#474;//  toArray:()[Ljava/lang/Object;
const #393 = NameAndType	#475:#228;//  isLocked:()Z
const #394 = Asciz	scala/actors/threadpool/ThreadPoolExecutor$AbortPolicy;
const #395 = Asciz	java/lang/RuntimePermission;
const #396 = Asciz	modifyThread;
const #397 = Asciz	scala/actors/threadpool/ThreadPoolExecutor;
const #398 = Asciz	scala/actors/threadpool/AbstractExecutorService;
const #399 = Asciz	scala/actors/threadpool/ThreadPoolExecutor$DiscardOldestPolicy;
const #400 = Asciz	scala/actors/threadpool/ThreadPoolExecutor$DiscardPolicy;
const #401 = Asciz	scala/actors/threadpool/ThreadPoolExecutor$CallerRunsPolicy;
const #402 = Asciz	compareAndSet;
const #403 = Asciz	get;
const #404 = Asciz	scala/actors/threadpool/BlockingQueue;
const #405 = Asciz	isEmpty;
const #406 = Asciz	lock;
const #407 = Asciz	set;
const #408 = Asciz	scala/actors/threadpool/locks/Condition;
const #409 = Asciz	signalAll;
const #410 = Asciz	unlock;
const #411 = Asciz	java/lang/System;
const #412 = Asciz	getSecurityManager;
const #413 = Asciz	()Ljava/lang/SecurityManager;;
const #414 = Asciz	java/lang/SecurityManager;
const #415 = Asciz	checkPermission;
const #416 = Asciz	(Ljava/security/Permission;)V;
const #417 = Asciz	iterator;
const #418 = Asciz	()Ljava/util/Iterator;;
const #419 = Asciz	java/util/Iterator;
const #420 = Asciz	hasNext;
const #421 = Asciz	next;
const #422 = Asciz	()Ljava/lang/Object;;
const #423 = Asciz	thread;
const #424 = Asciz	Ljava/lang/Thread;;
const #425 = Asciz	checkAccess;
const #426 = Asciz	(Ljava/lang/Thread;)V;
const #427 = Asciz	java/lang/Thread;
const #428 = Asciz	interrupt;
const #429 = Asciz	isInterrupted;
const #430 = Asciz	tryLock;
const #431 = Asciz	interrupted;
const #432 = Asciz	currentThread;
const #433 = Asciz	()Ljava/lang/Thread;;
const #434 = Asciz	scala/actors/threadpool/RejectedExecutionHandler;
const #435 = Asciz	rejectedExecution;
const #436 = Asciz	(Ljava/lang/Runnable;Lscala/actors/threadpool/ThreadPoolExecutor;)V;
const #437 = Asciz	drainTo;
const #438 = Asciz	(Ljava/util/Collection;)I;
const #439 = Asciz	toArray;
const #440 = Asciz	([Ljava/lang/Object;)[Ljava/lang/Object;;
const #441 = Asciz	(Ljava/lang/Object;)Z;
const #442 = Asciz	java/util/List;
const #443 = Asciz	add;
const #444 = Asciz	(Lscala/actors/threadpool/ThreadPoolExecutor;Ljava/lang/Runnable;)V;
const #445 = Asciz	size;
const #446 = Asciz	start;
const #447 = Asciz	completedTasks;
const #448 = Asciz	scala/actors/threadpool/TimeUnit;
const #449 = Asciz	NANOSECONDS;
const #450 = Asciz	Lscala/actors/threadpool/TimeUnit;;
const #451 = Asciz	poll;
const #452 = Asciz	(JLscala/actors/threadpool/TimeUnit;)Ljava/lang/Object;;
const #453 = Asciz	take;
const #454 = Asciz	firstTask;
const #455 = Asciz	Ljava/lang/Runnable;;
const #456 = Asciz	run;
const #457 = Asciz	(Ljava/lang/Throwable;)V;
const #458 = Asciz	scala/actors/threadpool/Executors;
const #459 = Asciz	defaultThreadFactory;
const #460 = Asciz	newCondition;
const #461 = Asciz	()Lscala/actors/threadpool/locks/Condition;;
const #462 = Asciz	toNanos;
const #463 = Asciz	(J)J;
const #464 = Asciz	offer;
const #465 = Asciz	scala/actors/threadpool/helpers/Utils;
const #466 = Asciz	nanoTime;
const #467 = Asciz	await;
const #468 = Asciz	java/lang/Math;
const #469 = Asciz	min;
const #470 = Asciz	(Ljava/lang/String;)V;
const #471 = Asciz	convert;
const #472 = Asciz	(JLscala/actors/threadpool/TimeUnit;)J;
const #473 = Asciz	isCancelled;
const #474 = Asciz	()[Ljava/lang/Object;;
const #475 = Asciz	isLocked;

{
public final scala.actors.threadpool.locks.ReentrantLock mainLock;

public final java.util.HashSet workers;

final void tryTerminate();
  Code:
   Stack=4, Locals=5, Args_size=1
   0:	aload_0
   1:	getfield	#3; //Field ctl:Lscala/actors/threadpool/AtomicInteger;
   4:	invokevirtual	#5; //Method scala/actors/threadpool/AtomicInteger.get:()I
   7:	istore_1
   8:	iload_1
   9:	invokestatic	#10; //Method isRunning:(I)Z
   12:	ifne	43
   15:	iload_1
   16:	ldc	#11; //int 1073741824
   18:	invokestatic	#7; //Method runStateAtLeast:(II)Z
   21:	ifne	43
   24:	iload_1
   25:	invokestatic	#12; //Method runStateOf:(I)I
   28:	ifne	44
   31:	aload_0
   32:	getfield	#13; //Field workQueue:Lscala/actors/threadpool/BlockingQueue;
   35:	invokeinterface	#14,  1; //InterfaceMethod scala/actors/threadpool/BlockingQueue.isEmpty:()Z
   40:	ifne	44
   43:	return
   44:	iload_1
   45:	invokestatic	#8; //Method workerCountOf:(I)I
   48:	ifeq	57
   51:	aload_0
   52:	iconst_1
   53:	invokespecial	#15; //Method interruptIdleWorkers:(Z)V
   56:	return
   57:	aload_0
   58:	getfield	#16; //Field mainLock:Lscala/actors/threadpool/locks/ReentrantLock;
   61:	astore_2
   62:	aload_2
   63:	invokevirtual	#17; //Method scala/actors/threadpool/locks/ReentrantLock.lock:()V
   66:	aload_0
   67:	getfield	#3; //Field ctl:Lscala/actors/threadpool/AtomicInteger;
   70:	iload_1
   71:	ldc	#11; //int 1073741824
   73:	iconst_0
   74:	invokestatic	#9; //Method ctlOf:(II)I
   77:	invokevirtual	#4; //Method scala/actors/threadpool/AtomicInteger.compareAndSet:(II)Z
   80:	ifeq	142
   83:	aload_0
   84:	invokevirtual	#18; //Method terminated:()V
   87:	aload_0
   88:	getfield	#3; //Field ctl:Lscala/actors/threadpool/AtomicInteger;
   91:	ldc	#19; //int 1610612736
   93:	iconst_0
   94:	invokestatic	#9; //Method ctlOf:(II)I
   97:	invokevirtual	#20; //Method scala/actors/threadpool/AtomicInteger.set:(I)V
   100:	aload_0
   101:	getfield	#21; //Field termination:Lscala/actors/threadpool/locks/Condition;
   104:	invokeinterface	#22,  1; //InterfaceMethod scala/actors/threadpool/locks/Condition.signalAll:()V
   109:	goto	137
   112:	astore_3
   113:	aload_0
   114:	getfield	#3; //Field ctl:Lscala/actors/threadpool/AtomicInteger;
   117:	ldc	#19; //int 1610612736
   119:	iconst_0
   120:	invokestatic	#9; //Method ctlOf:(II)I
   123:	invokevirtual	#20; //Method scala/actors/threadpool/AtomicInteger.set:(I)V
   126:	aload_0
   127:	getfield	#21; //Field termination:Lscala/actors/threadpool/locks/Condition;
   130:	invokeinterface	#22,  1; //InterfaceMethod scala/actors/threadpool/locks/Condition.signalAll:()V
   135:	aload_3
   136:	athrow
   137:	aload_2
   138:	invokevirtual	#23; //Method scala/actors/threadpool/locks/ReentrantLock.unlock:()V
   141:	return
   142:	aload_2
   143:	invokevirtual	#23; //Method scala/actors/threadpool/locks/ReentrantLock.unlock:()V
   146:	goto	158
   149:	astore	4
   151:	aload_2
   152:	invokevirtual	#23; //Method scala/actors/threadpool/locks/ReentrantLock.unlock:()V
   155:	aload	4
   157:	athrow
   158:	goto	0
  Exception table:
   from   to  target type
    83    87   112   any
   112   113   112   any
    66   137   149   any
   149   151   149   any

final void reject(java.lang.Runnable);
  Code:
   Stack=3, Locals=2, Args_size=2
   0:	aload_0
   1:	getfield	#43; //Field handler:Lscala/actors/threadpool/RejectedExecutionHandler;
   4:	aload_1
   5:	aload_0
   6:	invokeinterface	#44,  3; //InterfaceMethod scala/actors/threadpool/RejectedExecutionHandler.rejectedExecution:(Ljava/lang/Runnable;Lscala/actors/threadpool/ThreadPoolExecutor;)V
   11:	return

void onShutdown();
  Code:
   Stack=0, Locals=1, Args_size=1
   0:	return

final boolean isRunningOrShutdown(boolean);
  Code:
   Stack=2, Locals=3, Args_size=2
   0:	aload_0
   1:	getfield	#3; //Field ctl:Lscala/actors/threadpool/AtomicInteger;
   4:	invokevirtual	#5; //Method scala/actors/threadpool/AtomicInteger.get:()I
   7:	invokestatic	#12; //Method runStateOf:(I)I
   10:	istore_2
   11:	iload_2
   12:	ldc	#1; //int -536870912
   14:	if_icmpeq	25
   17:	iload_2
   18:	ifne	29
   21:	iload_1
   22:	ifeq	29
   25:	iconst_1
   26:	goto	30
   29:	iconst_0
   30:	ireturn

final void runWorker(scala.actors.threadpool.ThreadPoolExecutor$Worker);
  Code:
   Stack=5, Locals=9, Args_size=2
   0:	aload_1
   1:	getfield	#73; //Field scala/actors/threadpool/ThreadPoolExecutor$Worker.firstTask:Ljava/lang/Runnable;
   4:	astore_2
   5:	aload_1
   6:	aconst_null
   7:	putfield	#73; //Field scala/actors/threadpool/ThreadPoolExecutor$Worker.firstTask:Ljava/lang/Runnable;
   10:	iconst_1
   11:	istore_3
   12:	aload_2
   13:	ifnonnull	25
   16:	aload_0
   17:	invokespecial	#74; //Method getTask:()Ljava/lang/Runnable;
   20:	dup
   21:	astore_2
   22:	ifnull	150
   25:	aload_1
   26:	invokevirtual	#75; //Method scala/actors/threadpool/ThreadPoolExecutor$Worker.lock:()V
   29:	aload_0
   30:	invokespecial	#76; //Method clearInterruptsForTaskRun:()V
   33:	aload_0
   34:	aload_1
   35:	getfield	#32; //Field scala/actors/threadpool/ThreadPoolExecutor$Worker.thread:Ljava/lang/Thread;
   38:	aload_2
   39:	invokevirtual	#77; //Method beforeExecute:(Ljava/lang/Thread;Ljava/lang/Runnable;)V
   42:	aconst_null
   43:	astore	4
   45:	aload_2
   46:	invokeinterface	#78,  1; //InterfaceMethod java/lang/Runnable.run:()V
   51:	aload_0
   52:	aload_2
   53:	aload	4
   55:	invokevirtual	#79; //Method afterExecute:(Ljava/lang/Runnable;Ljava/lang/Throwable;)V
   58:	goto	107
   61:	astore	5
   63:	aload	5
   65:	astore	4
   67:	aload	5
   69:	athrow
   70:	astore	5
   72:	aload	5
   74:	astore	4
   76:	aload	5
   78:	athrow
   79:	astore	5
   81:	aload	5
   83:	astore	4
   85:	new	#81; //class java/lang/Error
   88:	dup
   89:	aload	5
   91:	invokespecial	#83; //Method java/lang/Error."<init>":(Ljava/lang/Throwable;)V
   94:	athrow
   95:	astore	6
   97:	aload_0
   98:	aload_2
   99:	aload	4
   101:	invokevirtual	#79; //Method afterExecute:(Ljava/lang/Runnable;Ljava/lang/Throwable;)V
   104:	aload	6
   106:	athrow
   107:	aconst_null
   108:	astore_2
   109:	aload_1
   110:	dup
   111:	getfield	#64; //Field scala/actors/threadpool/ThreadPoolExecutor$Worker.completedTasks:J
   114:	lconst_1
   115:	ladd
   116:	putfield	#64; //Field scala/actors/threadpool/ThreadPoolExecutor$Worker.completedTasks:J
   119:	aload_1
   120:	invokevirtual	#38; //Method scala/actors/threadpool/ThreadPoolExecutor$Worker.unlock:()V
   123:	goto	147
   126:	astore	7
   128:	aconst_null
   129:	astore_2
   130:	aload_1
   131:	dup
   132:	getfield	#64; //Field scala/actors/threadpool/ThreadPoolExecutor$Worker.completedTasks:J
   135:	lconst_1
   136:	ladd
   137:	putfield	#64; //Field scala/actors/threadpool/ThreadPoolExecutor$Worker.completedTasks:J
   140:	aload_1
   141:	invokevirtual	#38; //Method scala/actors/threadpool/ThreadPoolExecutor$Worker.unlock:()V
   144:	aload	7
   146:	athrow
   147:	goto	12
   150:	iconst_0
   151:	istore_3
   152:	aload_0
   153:	aload_1
   154:	iload_3
   155:	invokespecial	#84; //Method processWorkerExit:(Lscala/actors/threadpool/ThreadPoolExecutor$Worker;Z)V
   158:	goto	172
   161:	astore	8
   163:	aload_0
   164:	aload_1
   165:	iload_3
   166:	invokespecial	#84; //Method processWorkerExit:(Lscala/actors/threadpool/ThreadPoolExecutor$Worker;Z)V
   169:	aload	8
   171:	athrow
   172:	return
  Exception table:
   from   to  target type
    45    51    61   Class java/lang/RuntimeException

    45    51    70   Class java/lang/Error

    45    51    79   Class java/lang/Throwable

    45    51    95   any
    61    97    95   any
    33   107   126   any
   126   128   126   any
    12   152   161   any
   161   163   161   any

public scala.actors.threadpool.ThreadPoolExecutor(int, int, long, scala.actors.threadpool.TimeUnit, scala.actors.threadpool.BlockingQueue);
  Code:
   Stack=9, Locals=7, Args_size=6
   0:	aload_0
   1:	iload_1
   2:	iload_2
   3:	lload_3
   4:	aload	5
   6:	aload	6
   8:	invokestatic	#85; //Method scala/actors/threadpool/Executors.defaultThreadFactory:()Lscala/actors/threadpool/ThreadFactory;
   11:	getstatic	#86; //Field defaultHandler:Lscala/actors/threadpool/RejectedExecutionHandler;
   14:	invokespecial	#87; //Method "<init>":(IIJLscala/actors/threadpool/TimeUnit;Lscala/actors/threadpool/BlockingQueue;Lscala/actors/threadpool/ThreadFactory;Lscala/actors/threadpool/RejectedExecutionHandler;)V
   17:	return

public scala.actors.threadpool.ThreadPoolExecutor(int, int, long, scala.actors.threadpool.TimeUnit, scala.actors.threadpool.BlockingQueue, scala.actors.threadpool.ThreadFactory);
  Code:
   Stack=9, Locals=8, Args_size=7
   0:	aload_0
   1:	iload_1
   2:	iload_2
   3:	lload_3
   4:	aload	5
   6:	aload	6
   8:	aload	7
   10:	getstatic	#86; //Field defaultHandler:Lscala/actors/threadpool/RejectedExecutionHandler;
   13:	invokespecial	#87; //Method "<init>":(IIJLscala/actors/threadpool/TimeUnit;Lscala/actors/threadpool/BlockingQueue;Lscala/actors/threadpool/ThreadFactory;Lscala/actors/threadpool/RejectedExecutionHandler;)V
   16:	return

public scala.actors.threadpool.ThreadPoolExecutor(int, int, long, scala.actors.threadpool.TimeUnit, scala.actors.threadpool.BlockingQueue, scala.actors.threadpool.RejectedExecutionHandler);
  Code:
   Stack=9, Locals=8, Args_size=7
   0:	aload_0
   1:	iload_1
   2:	iload_2
   3:	lload_3
   4:	aload	5
   6:	aload	6
   8:	invokestatic	#85; //Method scala/actors/threadpool/Executors.defaultThreadFactory:()Lscala/actors/threadpool/ThreadFactory;
   11:	aload	7
   13:	invokespecial	#87; //Method "<init>":(IIJLscala/actors/threadpool/TimeUnit;Lscala/actors/threadpool/BlockingQueue;Lscala/actors/threadpool/ThreadFactory;Lscala/actors/threadpool/RejectedExecutionHandler;)V
   16:	return

public scala.actors.threadpool.ThreadPoolExecutor(int, int, long, scala.actors.threadpool.TimeUnit, scala.actors.threadpool.BlockingQueue, scala.actors.threadpool.ThreadFactory, scala.actors.threadpool.RejectedExecutionHandler);
  Code:
   Stack=5, Locals=9, Args_size=8
   0:	aload_0
   1:	invokespecial	#88; //Method scala/actors/threadpool/AbstractExecutorService."<init>":()V
   4:	aload_0
   5:	new	#89; //class scala/actors/threadpool/AtomicInteger
   8:	dup
   9:	ldc	#1; //int -536870912
   11:	iconst_0
   12:	invokestatic	#9; //Method ctlOf:(II)I
   15:	invokespecial	#90; //Method scala/actors/threadpool/AtomicInteger."<init>":(I)V
   18:	putfield	#3; //Field ctl:Lscala/actors/threadpool/AtomicInteger;
   21:	aload_0
   22:	new	#91; //class scala/actors/threadpool/locks/ReentrantLock
   25:	dup
   26:	invokespecial	#92; //Method scala/actors/threadpool/locks/ReentrantLock."<init>":()V
   29:	putfield	#16; //Field mainLock:Lscala/actors/threadpool/locks/ReentrantLock;
   32:	aload_0
   33:	new	#93; //class java/util/HashSet
   36:	dup
   37:	invokespecial	#94; //Method java/util/HashSet."<init>":()V
   40:	putfield	#27; //Field workers:Ljava/util/HashSet;
   43:	aload_0
   44:	aload_0
   45:	getfield	#16; //Field mainLock:Lscala/actors/threadpool/locks/ReentrantLock;
   48:	invokevirtual	#95; //Method scala/actors/threadpool/locks/ReentrantLock.newCondition:()Lscala/actors/threadpool/locks/Condition;
   51:	putfield	#21; //Field termination:Lscala/actors/threadpool/locks/Condition;
   54:	iload_1
   55:	iflt	73
   58:	iload_2
   59:	ifle	73
   62:	iload_2
   63:	iload_1
   64:	if_icmplt	73
   67:	lload_3
   68:	lconst_0
   69:	lcmp
   70:	ifge	81
   73:	new	#96; //class java/lang/IllegalArgumentException
   76:	dup
   77:	invokespecial	#97; //Method java/lang/IllegalArgumentException."<init>":()V
   80:	athrow
   81:	aload	6
   83:	ifnull	96
   86:	aload	7
   88:	ifnull	96
   91:	aload	8
   93:	ifnonnull	104
   96:	new	#98; //class java/lang/NullPointerException
   99:	dup
   100:	invokespecial	#99; //Method java/lang/NullPointerException."<init>":()V
   103:	athrow
   104:	aload_0
   105:	iload_1
   106:	putfield	#53; //Field corePoolSize:I
   109:	aload_0
   110:	iload_2
   111:	putfield	#54; //Field maximumPoolSize:I
   114:	aload_0
   115:	aload	6
   117:	putfield	#13; //Field workQueue:Lscala/actors/threadpool/BlockingQueue;
   120:	aload_0
   121:	aload	5
   123:	lload_3
   124:	invokevirtual	#100; //Method scala/actors/threadpool/TimeUnit.toNanos:(J)J
   127:	putfield	#68; //Field keepAliveTime:J
   130:	aload_0
   131:	aload	7
   133:	putfield	#101; //Field threadFactory:Lscala/actors/threadpool/ThreadFactory;
   136:	aload_0
   137:	aload	8
   139:	putfield	#43; //Field handler:Lscala/actors/threadpool/RejectedExecutionHandler;
   142:	return

public void execute(java.lang.Runnable);
  Code:
   Stack=3, Locals=4, Args_size=2
   0:	aload_1
   1:	ifnonnull	12
   4:	new	#98; //class java/lang/NullPointerException
   7:	dup
   8:	invokespecial	#99; //Method java/lang/NullPointerException."<init>":()V
   11:	athrow
   12:	aload_0
   13:	getfield	#3; //Field ctl:Lscala/actors/threadpool/AtomicInteger;
   16:	invokevirtual	#5; //Method scala/actors/threadpool/AtomicInteger.get:()I
   19:	istore_2
   20:	iload_2
   21:	invokestatic	#8; //Method workerCountOf:(I)I
   24:	aload_0
   25:	getfield	#53; //Field corePoolSize:I
   28:	if_icmpge	49
   31:	aload_0
   32:	aload_1
   33:	iconst_1
   34:	invokespecial	#67; //Method addWorker:(Ljava/lang/Runnable;Z)Z
   37:	ifeq	41
   40:	return
   41:	aload_0
   42:	getfield	#3; //Field ctl:Lscala/actors/threadpool/AtomicInteger;
   45:	invokevirtual	#5; //Method scala/actors/threadpool/AtomicInteger.get:()I
   48:	istore_2
   49:	iload_2
   50:	invokestatic	#10; //Method isRunning:(I)Z
   53:	ifeq	117
   56:	aload_0
   57:	getfield	#13; //Field workQueue:Lscala/actors/threadpool/BlockingQueue;
   60:	aload_1
   61:	invokeinterface	#102,  2; //InterfaceMethod scala/actors/threadpool/BlockingQueue.offer:(Ljava/lang/Object;)Z
   66:	ifeq	117
   69:	aload_0
   70:	getfield	#3; //Field ctl:Lscala/actors/threadpool/AtomicInteger;
   73:	invokevirtual	#5; //Method scala/actors/threadpool/AtomicInteger.get:()I
   76:	istore_3
   77:	iload_3
   78:	invokestatic	#10; //Method isRunning:(I)Z
   81:	ifne	100
   84:	aload_0
   85:	aload_1
   86:	invokevirtual	#103; //Method remove:(Ljava/lang/Runnable;)Z
   89:	ifeq	100
   92:	aload_0
   93:	aload_1
   94:	invokevirtual	#104; //Method reject:(Ljava/lang/Runnable;)V
   97:	goto	114
   100:	iload_3
   101:	invokestatic	#8; //Method workerCountOf:(I)I
   104:	ifne	114
   107:	aload_0
   108:	aconst_null
   109:	iconst_0
   110:	invokespecial	#67; //Method addWorker:(Ljava/lang/Runnable;Z)Z
   113:	pop
   114:	goto	131
   117:	aload_0
   118:	aload_1
   119:	iconst_0
   120:	invokespecial	#67; //Method addWorker:(Ljava/lang/Runnable;Z)Z
   123:	ifne	131
   126:	aload_0
   127:	aload_1
   128:	invokevirtual	#104; //Method reject:(Ljava/lang/Runnable;)V
   131:	return

public void shutdown();
  Code:
   Stack=2, Locals=3, Args_size=1
   0:	aload_0
   1:	getfield	#16; //Field mainLock:Lscala/actors/threadpool/locks/ReentrantLock;
   4:	astore_1
   5:	aload_1
   6:	invokevirtual	#17; //Method scala/actors/threadpool/locks/ReentrantLock.lock:()V
   9:	aload_0
   10:	invokespecial	#105; //Method checkShutdownAccess:()V
   13:	aload_0
   14:	iconst_0
   15:	invokespecial	#106; //Method advanceRunState:(I)V
   18:	aload_0
   19:	invokespecial	#107; //Method interruptIdleWorkers:()V
   22:	aload_0
   23:	invokevirtual	#108; //Method onShutdown:()V
   26:	aload_1
   27:	invokevirtual	#23; //Method scala/actors/threadpool/locks/ReentrantLock.unlock:()V
   30:	goto	40
   33:	astore_2
   34:	aload_1
   35:	invokevirtual	#23; //Method scala/actors/threadpool/locks/ReentrantLock.unlock:()V
   38:	aload_2
   39:	athrow
   40:	aload_0
   41:	invokevirtual	#58; //Method tryTerminate:()V
   44:	return
  Exception table:
   from   to  target type
     9    26    33   any
    33    34    33   any

public java.util.List shutdownNow();
  Code:
   Stack=2, Locals=4, Args_size=1
   0:	aload_0
   1:	getfield	#16; //Field mainLock:Lscala/actors/threadpool/locks/ReentrantLock;
   4:	astore_2
   5:	aload_2
   6:	invokevirtual	#17; //Method scala/actors/threadpool/locks/ReentrantLock.lock:()V
   9:	aload_0
   10:	invokespecial	#105; //Method checkShutdownAccess:()V
   13:	aload_0
   14:	ldc	#39; //int 536870912
   16:	invokespecial	#106; //Method advanceRunState:(I)V
   19:	aload_0
   20:	invokespecial	#109; //Method interruptWorkers:()V
   23:	aload_0
   24:	invokespecial	#110; //Method drainQueue:()Ljava/util/List;
   27:	astore_1
   28:	aload_2
   29:	invokevirtual	#23; //Method scala/actors/threadpool/locks/ReentrantLock.unlock:()V
   32:	goto	42
   35:	astore_3
   36:	aload_2
   37:	invokevirtual	#23; //Method scala/actors/threadpool/locks/ReentrantLock.unlock:()V
   40:	aload_3
   41:	athrow
   42:	aload_0
   43:	invokevirtual	#58; //Method tryTerminate:()V
   46:	aload_1
   47:	areturn
  Exception table:
   from   to  target type
     9    28    35   any
    35    36    35   any

public boolean isShutdown();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#3; //Field ctl:Lscala/actors/threadpool/AtomicInteger;
   4:	invokevirtual	#5; //Method scala/actors/threadpool/AtomicInteger.get:()I
   7:	invokestatic	#10; //Method isRunning:(I)Z
   10:	ifne	17
   13:	iconst_1
   14:	goto	18
   17:	iconst_0
   18:	ireturn

public boolean isTerminating();
  Code:
   Stack=2, Locals=2, Args_size=1
   0:	aload_0
   1:	getfield	#3; //Field ctl:Lscala/actors/threadpool/AtomicInteger;
   4:	invokevirtual	#5; //Method scala/actors/threadpool/AtomicInteger.get:()I
   7:	istore_1
   8:	iload_1
   9:	invokestatic	#10; //Method isRunning:(I)Z
   12:	ifne	28
   15:	iload_1
   16:	ldc	#19; //int 1610612736
   18:	invokestatic	#40; //Method runStateLessThan:(II)Z
   21:	ifeq	28
   24:	iconst_1
   25:	goto	29
   28:	iconst_0
   29:	ireturn

public boolean isTerminated();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#3; //Field ctl:Lscala/actors/threadpool/AtomicInteger;
   4:	invokevirtual	#5; //Method scala/actors/threadpool/AtomicInteger.get:()I
   7:	ldc	#19; //int 1610612736
   9:	invokestatic	#7; //Method runStateAtLeast:(II)Z
   12:	ireturn

public boolean awaitTermination(long, scala.actors.threadpool.TimeUnit)   throws java.lang.InterruptedException;
  Code:
   Stack=4, Locals=11, Args_size=3
   0:	aload_3
   1:	lload_1
   2:	invokevirtual	#100; //Method scala/actors/threadpool/TimeUnit.toNanos:(J)J
   5:	lstore	4
   7:	invokestatic	#111; //Method scala/actors/threadpool/helpers/Utils.nanoTime:()J
   10:	lload	4
   12:	ladd
   13:	lstore	6
   15:	aload_0
   16:	getfield	#16; //Field mainLock:Lscala/actors/threadpool/locks/ReentrantLock;
   19:	astore	8
   21:	aload	8
   23:	invokevirtual	#17; //Method scala/actors/threadpool/locks/ReentrantLock.lock:()V
   26:	aload_0
   27:	getfield	#3; //Field ctl:Lscala/actors/threadpool/AtomicInteger;
   30:	invokevirtual	#5; //Method scala/actors/threadpool/AtomicInteger.get:()I
   33:	ldc	#19; //int 1610612736
   35:	invokestatic	#7; //Method runStateAtLeast:(II)Z
   38:	ifeq	52
   41:	iconst_1
   42:	istore	9
   44:	aload	8
   46:	invokevirtual	#23; //Method scala/actors/threadpool/locks/ReentrantLock.unlock:()V
   49:	iload	9
   51:	ireturn
   52:	lload	4
   54:	lconst_0
   55:	lcmp
   56:	ifle	111
   59:	aload_0
   60:	getfield	#21; //Field termination:Lscala/actors/threadpool/locks/Condition;
   63:	lload	4
   65:	getstatic	#69; //Field scala/actors/threadpool/TimeUnit.NANOSECONDS:Lscala/actors/threadpool/TimeUnit;
   68:	invokeinterface	#112,  4; //InterfaceMethod scala/actors/threadpool/locks/Condition.await:(JLscala/actors/threadpool/TimeUnit;)Z
   73:	pop
   74:	aload_0
   75:	getfield	#3; //Field ctl:Lscala/actors/threadpool/AtomicInteger;
   78:	invokevirtual	#5; //Method scala/actors/threadpool/AtomicInteger.get:()I
   81:	ldc	#19; //int 1610612736
   83:	invokestatic	#7; //Method runStateAtLeast:(II)Z
   86:	ifeq	100
   89:	iconst_1
   90:	istore	9
   92:	aload	8
   94:	invokevirtual	#23; //Method scala/actors/threadpool/locks/ReentrantLock.unlock:()V
   97:	iload	9
   99:	ireturn
   100:	lload	6
   102:	invokestatic	#111; //Method scala/actors/threadpool/helpers/Utils.nanoTime:()J
   105:	lsub
   106:	lstore	4
   108:	goto	52
   111:	iconst_0
   112:	istore	9
   114:	aload	8
   116:	invokevirtual	#23; //Method scala/actors/threadpool/locks/ReentrantLock.unlock:()V
   119:	iload	9
   121:	ireturn
   122:	astore	10
   124:	aload	8
   126:	invokevirtual	#23; //Method scala/actors/threadpool/locks/ReentrantLock.unlock:()V
   129:	aload	10
   131:	athrow
  Exception table:
   from   to  target type
    26    44   122   any
    52    92   122   any
   100   114   122   any
   122   124   122   any
  Exceptions: 
   throws java.lang.InterruptedException
protected void finalize();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokevirtual	#113; //Method shutdown:()V
   4:	return

public void setThreadFactory(scala.actors.threadpool.ThreadFactory);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_1
   1:	ifnonnull	12
   4:	new	#98; //class java/lang/NullPointerException
   7:	dup
   8:	invokespecial	#99; //Method java/lang/NullPointerException."<init>":()V
   11:	athrow
   12:	aload_0
   13:	aload_1
   14:	putfield	#101; //Field threadFactory:Lscala/actors/threadpool/ThreadFactory;
   17:	return

public scala.actors.threadpool.ThreadFactory getThreadFactory();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#101; //Field threadFactory:Lscala/actors/threadpool/ThreadFactory;
   4:	areturn

public void setRejectedExecutionHandler(scala.actors.threadpool.RejectedExecutionHandler);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_1
   1:	ifnonnull	12
   4:	new	#98; //class java/lang/NullPointerException
   7:	dup
   8:	invokespecial	#99; //Method java/lang/NullPointerException."<init>":()V
   11:	athrow
   12:	aload_0
   13:	aload_1
   14:	putfield	#43; //Field handler:Lscala/actors/threadpool/RejectedExecutionHandler;
   17:	return

public scala.actors.threadpool.RejectedExecutionHandler getRejectedExecutionHandler();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#43; //Field handler:Lscala/actors/threadpool/RejectedExecutionHandler;
   4:	areturn

public void setCorePoolSize(int);
  Code:
   Stack=3, Locals=4, Args_size=2
   0:	iload_1
   1:	ifge	12
   4:	new	#96; //class java/lang/IllegalArgumentException
   7:	dup
   8:	invokespecial	#97; //Method java/lang/IllegalArgumentException."<init>":()V
   11:	athrow
   12:	iload_1
   13:	aload_0
   14:	getfield	#53; //Field corePoolSize:I
   17:	isub
   18:	istore_2
   19:	aload_0
   20:	iload_1
   21:	putfield	#53; //Field corePoolSize:I
   24:	aload_0
   25:	getfield	#3; //Field ctl:Lscala/actors/threadpool/AtomicInteger;
   28:	invokevirtual	#5; //Method scala/actors/threadpool/AtomicInteger.get:()I
   31:	invokestatic	#8; //Method workerCountOf:(I)I
   34:	iload_1
   35:	if_icmple	45
   38:	aload_0
   39:	invokespecial	#107; //Method interruptIdleWorkers:()V
   42:	goto	95
   45:	iload_2
   46:	ifle	95
   49:	iload_2
   50:	aload_0
   51:	getfield	#13; //Field workQueue:Lscala/actors/threadpool/BlockingQueue;
   54:	invokeinterface	#114,  1; //InterfaceMethod scala/actors/threadpool/BlockingQueue.size:()I
   59:	invokestatic	#115; //Method java/lang/Math.min:(II)I
   62:	istore_3
   63:	iload_3
   64:	dup
   65:	iconst_1
   66:	isub
   67:	istore_3
   68:	ifle	95
   71:	aload_0
   72:	aconst_null
   73:	iconst_1
   74:	invokespecial	#67; //Method addWorker:(Ljava/lang/Runnable;Z)Z
   77:	ifeq	95
   80:	aload_0
   81:	getfield	#13; //Field workQueue:Lscala/actors/threadpool/BlockingQueue;
   84:	invokeinterface	#14,  1; //InterfaceMethod scala/actors/threadpool/BlockingQueue.isEmpty:()Z
   89:	ifeq	63
   92:	goto	95
   95:	return

public int getCorePoolSize();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#53; //Field corePoolSize:I
   4:	ireturn

public boolean prestartCoreThread();
  Code:
   Stack=3, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#3; //Field ctl:Lscala/actors/threadpool/AtomicInteger;
   4:	invokevirtual	#5; //Method scala/actors/threadpool/AtomicInteger.get:()I
   7:	invokestatic	#8; //Method workerCountOf:(I)I
   10:	aload_0
   11:	getfield	#53; //Field corePoolSize:I
   14:	if_icmpge	30
   17:	aload_0
   18:	aconst_null
   19:	iconst_1
   20:	invokespecial	#67; //Method addWorker:(Ljava/lang/Runnable;Z)Z
   23:	ifeq	30
   26:	iconst_1
   27:	goto	31
   30:	iconst_0
   31:	ireturn

public int prestartAllCoreThreads();
  Code:
   Stack=3, Locals=2, Args_size=1
   0:	iconst_0
   1:	istore_1
   2:	aload_0
   3:	aconst_null
   4:	iconst_1
   5:	invokespecial	#67; //Method addWorker:(Ljava/lang/Runnable;Z)Z
   8:	ifeq	17
   11:	iinc	1, 1
   14:	goto	2
   17:	iload_1
   18:	ireturn

public boolean allowsCoreThreadTimeOut();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#66; //Field allowCoreThreadTimeOut:Z
   4:	ireturn

public void allowCoreThreadTimeOut(boolean);
  Code:
   Stack=4, Locals=2, Args_size=2
   0:	iload_1
   1:	ifeq	23
   4:	aload_0
   5:	getfield	#68; //Field keepAliveTime:J
   8:	lconst_0
   9:	lcmp
   10:	ifgt	23
   13:	new	#96; //class java/lang/IllegalArgumentException
   16:	dup
   17:	ldc	#116; //String Core threads must have nonzero keep alive times
   19:	invokespecial	#117; //Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
   22:	athrow
   23:	iload_1
   24:	aload_0
   25:	getfield	#66; //Field allowCoreThreadTimeOut:Z
   28:	if_icmpeq	44
   31:	aload_0
   32:	iload_1
   33:	putfield	#66; //Field allowCoreThreadTimeOut:Z
   36:	iload_1
   37:	ifeq	44
   40:	aload_0
   41:	invokespecial	#107; //Method interruptIdleWorkers:()V
   44:	return

public void setMaximumPoolSize(int);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	iload_1
   1:	ifle	12
   4:	iload_1
   5:	aload_0
   6:	getfield	#53; //Field corePoolSize:I
   9:	if_icmpge	20
   12:	new	#96; //class java/lang/IllegalArgumentException
   15:	dup
   16:	invokespecial	#97; //Method java/lang/IllegalArgumentException."<init>":()V
   19:	athrow
   20:	aload_0
   21:	iload_1
   22:	putfield	#54; //Field maximumPoolSize:I
   25:	aload_0
   26:	getfield	#3; //Field ctl:Lscala/actors/threadpool/AtomicInteger;
   29:	invokevirtual	#5; //Method scala/actors/threadpool/AtomicInteger.get:()I
   32:	invokestatic	#8; //Method workerCountOf:(I)I
   35:	iload_1
   36:	if_icmple	43
   39:	aload_0
   40:	invokespecial	#107; //Method interruptIdleWorkers:()V
   43:	return

public int getMaximumPoolSize();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#54; //Field maximumPoolSize:I
   4:	ireturn

public void setKeepAliveTime(long, scala.actors.threadpool.TimeUnit);
  Code:
   Stack=4, Locals=8, Args_size=3
   0:	lload_1
   1:	lconst_0
   2:	lcmp
   3:	ifge	14
   6:	new	#96; //class java/lang/IllegalArgumentException
   9:	dup
   10:	invokespecial	#97; //Method java/lang/IllegalArgumentException."<init>":()V
   13:	athrow
   14:	lload_1
   15:	lconst_0
   16:	lcmp
   17:	ifne	37
   20:	aload_0
   21:	invokevirtual	#118; //Method allowsCoreThreadTimeOut:()Z
   24:	ifeq	37
   27:	new	#96; //class java/lang/IllegalArgumentException
   30:	dup
   31:	ldc	#116; //String Core threads must have nonzero keep alive times
   33:	invokespecial	#117; //Method java/lang/IllegalArgumentException."<init>":(Ljava/lang/String;)V
   36:	athrow
   37:	aload_3
   38:	lload_1
   39:	invokevirtual	#100; //Method scala/actors/threadpool/TimeUnit.toNanos:(J)J
   42:	lstore	4
   44:	lload	4
   46:	aload_0
   47:	getfield	#68; //Field keepAliveTime:J
   50:	lsub
   51:	lstore	6
   53:	aload_0
   54:	lload	4
   56:	putfield	#68; //Field keepAliveTime:J
   59:	lload	6
   61:	lconst_0
   62:	lcmp
   63:	ifge	70
   66:	aload_0
   67:	invokespecial	#107; //Method interruptIdleWorkers:()V
   70:	return

public long getKeepAliveTime(scala.actors.threadpool.TimeUnit);
  Code:
   Stack=4, Locals=2, Args_size=2
   0:	aload_1
   1:	aload_0
   2:	getfield	#68; //Field keepAliveTime:J
   5:	getstatic	#69; //Field scala/actors/threadpool/TimeUnit.NANOSECONDS:Lscala/actors/threadpool/TimeUnit;
   8:	invokevirtual	#119; //Method scala/actors/threadpool/TimeUnit.convert:(JLscala/actors/threadpool/TimeUnit;)J
   11:	lreturn

public scala.actors.threadpool.BlockingQueue getQueue();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#13; //Field workQueue:Lscala/actors/threadpool/BlockingQueue;
   4:	areturn

public boolean remove(java.lang.Runnable);
  Code:
   Stack=2, Locals=3, Args_size=2
   0:	aload_0
   1:	getfield	#13; //Field workQueue:Lscala/actors/threadpool/BlockingQueue;
   4:	aload_1
   5:	invokeinterface	#51,  2; //InterfaceMethod scala/actors/threadpool/BlockingQueue.remove:(Ljava/lang/Object;)Z
   10:	istore_2
   11:	aload_0
   12:	invokevirtual	#58; //Method tryTerminate:()V
   15:	iload_2
   16:	ireturn

public void purge();
  Code:
   Stack=2, Locals=6, Args_size=1
   0:	aload_0
   1:	getfield	#13; //Field workQueue:Lscala/actors/threadpool/BlockingQueue;
   4:	astore_1
   5:	aload_1
   6:	invokeinterface	#120,  1; //InterfaceMethod scala/actors/threadpool/BlockingQueue.iterator:()Ljava/util/Iterator;
   11:	astore_2
   12:	aload_2
   13:	invokeinterface	#29,  1; //InterfaceMethod java/util/Iterator.hasNext:()Z
   18:	ifeq	59
   21:	aload_2
   22:	invokeinterface	#30,  1; //InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
   27:	checkcast	#48; //class java/lang/Runnable
   30:	astore_3
   31:	aload_3
   32:	instanceof	#121; //class scala/actors/threadpool/Future
   35:	ifeq	56
   38:	aload_3
   39:	checkcast	#121; //class scala/actors/threadpool/Future
   42:	invokeinterface	#122,  1; //InterfaceMethod scala/actors/threadpool/Future.isCancelled:()Z
   47:	ifeq	56
   50:	aload_2
   51:	invokeinterface	#123,  1; //InterfaceMethod java/util/Iterator.remove:()V
   56:	goto	12
   59:	goto	122
   62:	astore_2
   63:	aload_1
   64:	invokeinterface	#125,  1; //InterfaceMethod scala/actors/threadpool/BlockingQueue.toArray:()[Ljava/lang/Object;
   69:	astore_3
   70:	iconst_0
   71:	istore	4
   73:	iload	4
   75:	aload_3
   76:	arraylength
   77:	if_icmpge	122
   80:	aload_3
   81:	iload	4
   83:	aaload
   84:	astore	5
   86:	aload	5
   88:	instanceof	#121; //class scala/actors/threadpool/Future
   91:	ifeq	116
   94:	aload	5
   96:	checkcast	#121; //class scala/actors/threadpool/Future
   99:	invokeinterface	#122,  1; //InterfaceMethod scala/actors/threadpool/Future.isCancelled:()Z
   104:	ifeq	116
   107:	aload_1
   108:	aload	5
   110:	invokeinterface	#51,  2; //InterfaceMethod scala/actors/threadpool/BlockingQueue.remove:(Ljava/lang/Object;)Z
   115:	pop
   116:	iinc	4, 1
   119:	goto	73
   122:	aload_0
   123:	invokevirtual	#58; //Method tryTerminate:()V
   126:	return
  Exception table:
   from   to  target type
     5    59    62   Class java/util/ConcurrentModificationException


public int getPoolSize();
  Code:
   Stack=2, Locals=4, Args_size=1
   0:	aload_0
   1:	getfield	#16; //Field mainLock:Lscala/actors/threadpool/locks/ReentrantLock;
   4:	astore_1
   5:	aload_1
   6:	invokevirtual	#17; //Method scala/actors/threadpool/locks/ReentrantLock.lock:()V
   9:	aload_0
   10:	getfield	#3; //Field ctl:Lscala/actors/threadpool/AtomicInteger;
   13:	invokevirtual	#5; //Method scala/actors/threadpool/AtomicInteger.get:()I
   16:	ldc	#11; //int 1073741824
   18:	invokestatic	#7; //Method runStateAtLeast:(II)Z
   21:	ifeq	28
   24:	iconst_0
   25:	goto	35
   28:	aload_0
   29:	getfield	#27; //Field workers:Ljava/util/HashSet;
   32:	invokevirtual	#60; //Method java/util/HashSet.size:()I
   35:	istore_2
   36:	aload_1
   37:	invokevirtual	#23; //Method scala/actors/threadpool/locks/ReentrantLock.unlock:()V
   40:	iload_2
   41:	ireturn
   42:	astore_3
   43:	aload_1
   44:	invokevirtual	#23; //Method scala/actors/threadpool/locks/ReentrantLock.unlock:()V
   47:	aload_3
   48:	athrow
  Exception table:
   from   to  target type
     9    36    42   any
    42    43    42   any

public int getActiveCount();
  Code:
   Stack=1, Locals=6, Args_size=1
   0:	aload_0
   1:	getfield	#16; //Field mainLock:Lscala/actors/threadpool/locks/ReentrantLock;
   4:	astore_1
   5:	aload_1
   6:	invokevirtual	#17; //Method scala/actors/threadpool/locks/ReentrantLock.lock:()V
   9:	iconst_0
   10:	istore_2
   11:	aload_0
   12:	getfield	#27; //Field workers:Ljava/util/HashSet;
   15:	invokevirtual	#28; //Method java/util/HashSet.iterator:()Ljava/util/Iterator;
   18:	astore_3
   19:	aload_3
   20:	invokeinterface	#29,  1; //InterfaceMethod java/util/Iterator.hasNext:()Z
   25:	ifeq	53
   28:	aload_3
   29:	invokeinterface	#30,  1; //InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
   34:	checkcast	#31; //class scala/actors/threadpool/ThreadPoolExecutor$Worker
   37:	astore	4
   39:	aload	4
   41:	invokevirtual	#126; //Method scala/actors/threadpool/ThreadPoolExecutor$Worker.isLocked:()Z
   44:	ifeq	50
   47:	iinc	2, 1
   50:	goto	19
   53:	iload_2
   54:	istore_3
   55:	aload_1
   56:	invokevirtual	#23; //Method scala/actors/threadpool/locks/ReentrantLock.unlock:()V
   59:	iload_3
   60:	ireturn
   61:	astore	5
   63:	aload_1
   64:	invokevirtual	#23; //Method scala/actors/threadpool/locks/ReentrantLock.unlock:()V
   67:	aload	5
   69:	athrow
  Exception table:
   from   to  target type
     9    55    61   any
    61    63    61   any

public int getLargestPoolSize();
  Code:
   Stack=1, Locals=4, Args_size=1
   0:	aload_0
   1:	getfield	#16; //Field mainLock:Lscala/actors/threadpool/locks/ReentrantLock;
   4:	astore_1
   5:	aload_1
   6:	invokevirtual	#17; //Method scala/actors/threadpool/locks/ReentrantLock.lock:()V
   9:	aload_0
   10:	getfield	#61; //Field largestPoolSize:I
   13:	istore_2
   14:	aload_1
   15:	invokevirtual	#23; //Method scala/actors/threadpool/locks/ReentrantLock.unlock:()V
   18:	iload_2
   19:	ireturn
   20:	astore_3
   21:	aload_1
   22:	invokevirtual	#23; //Method scala/actors/threadpool/locks/ReentrantLock.unlock:()V
   25:	aload_3
   26:	athrow
  Exception table:
   from   to  target type
     9    14    20   any
    20    21    20   any

public long getTaskCount();
  Code:
   Stack=4, Locals=7, Args_size=1
   0:	aload_0
   1:	getfield	#16; //Field mainLock:Lscala/actors/threadpool/locks/ReentrantLock;
   4:	astore_1
   5:	aload_1
   6:	invokevirtual	#17; //Method scala/actors/threadpool/locks/ReentrantLock.lock:()V
   9:	aload_0
   10:	getfield	#63; //Field completedTaskCount:J
   13:	lstore_2
   14:	aload_0
   15:	getfield	#27; //Field workers:Ljava/util/HashSet;
   18:	invokevirtual	#28; //Method java/util/HashSet.iterator:()Ljava/util/Iterator;
   21:	astore	4
   23:	aload	4
   25:	invokeinterface	#29,  1; //InterfaceMethod java/util/Iterator.hasNext:()Z
   30:	ifeq	68
   33:	aload	4
   35:	invokeinterface	#30,  1; //InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
   40:	checkcast	#31; //class scala/actors/threadpool/ThreadPoolExecutor$Worker
   43:	astore	5
   45:	lload_2
   46:	aload	5
   48:	getfield	#64; //Field scala/actors/threadpool/ThreadPoolExecutor$Worker.completedTasks:J
   51:	ladd
   52:	lstore_2
   53:	aload	5
   55:	invokevirtual	#126; //Method scala/actors/threadpool/ThreadPoolExecutor$Worker.isLocked:()Z
   58:	ifeq	65
   61:	lload_2
   62:	lconst_1
   63:	ladd
   64:	lstore_2
   65:	goto	23
   68:	lload_2
   69:	aload_0
   70:	getfield	#13; //Field workQueue:Lscala/actors/threadpool/BlockingQueue;
   73:	invokeinterface	#114,  1; //InterfaceMethod scala/actors/threadpool/BlockingQueue.size:()I
   78:	i2l
   79:	ladd
   80:	lstore	4
   82:	aload_1
   83:	invokevirtual	#23; //Method scala/actors/threadpool/locks/ReentrantLock.unlock:()V
   86:	lload	4
   88:	lreturn
   89:	astore	6
   91:	aload_1
   92:	invokevirtual	#23; //Method scala/actors/threadpool/locks/ReentrantLock.unlock:()V
   95:	aload	6
   97:	athrow
  Exception table:
   from   to  target type
     9    82    89   any
    89    91    89   any

public long getCompletedTaskCount();
  Code:
   Stack=4, Locals=7, Args_size=1
   0:	aload_0
   1:	getfield	#16; //Field mainLock:Lscala/actors/threadpool/locks/ReentrantLock;
   4:	astore_1
   5:	aload_1
   6:	invokevirtual	#17; //Method scala/actors/threadpool/locks/ReentrantLock.lock:()V
   9:	aload_0
   10:	getfield	#63; //Field completedTaskCount:J
   13:	lstore_2
   14:	aload_0
   15:	getfield	#27; //Field workers:Ljava/util/HashSet;
   18:	invokevirtual	#28; //Method java/util/HashSet.iterator:()Ljava/util/Iterator;
   21:	astore	4
   23:	aload	4
   25:	invokeinterface	#29,  1; //InterfaceMethod java/util/Iterator.hasNext:()Z
   30:	ifeq	56
   33:	aload	4
   35:	invokeinterface	#30,  1; //InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
   40:	checkcast	#31; //class scala/actors/threadpool/ThreadPoolExecutor$Worker
   43:	astore	5
   45:	lload_2
   46:	aload	5
   48:	getfield	#64; //Field scala/actors/threadpool/ThreadPoolExecutor$Worker.completedTasks:J
   51:	ladd
   52:	lstore_2
   53:	goto	23
   56:	lload_2
   57:	lstore	4
   59:	aload_1
   60:	invokevirtual	#23; //Method scala/actors/threadpool/locks/ReentrantLock.unlock:()V
   63:	lload	4
   65:	lreturn
   66:	astore	6
   68:	aload_1
   69:	invokevirtual	#23; //Method scala/actors/threadpool/locks/ReentrantLock.unlock:()V
   72:	aload	6
   74:	athrow
  Exception table:
   from   to  target type
     9    59    66   any
    66    68    66   any

protected void beforeExecute(java.lang.Thread, java.lang.Runnable);
  Code:
   Stack=0, Locals=3, Args_size=3
   0:	return

protected void afterExecute(java.lang.Runnable, java.lang.Throwable);
  Code:
   Stack=0, Locals=3, Args_size=3
   0:	return

protected void terminated();
  Code:
   Stack=0, Locals=1, Args_size=1
   0:	return

static {};
  Code:
   Stack=3, Locals=0, Args_size=0
   0:	new	#127; //class scala/actors/threadpool/ThreadPoolExecutor$AbortPolicy
   3:	dup
   4:	invokespecial	#128; //Method scala/actors/threadpool/ThreadPoolExecutor$AbortPolicy."<init>":()V
   7:	putstatic	#86; //Field defaultHandler:Lscala/actors/threadpool/RejectedExecutionHandler;
   10:	new	#129; //class java/lang/RuntimePermission
   13:	dup
   14:	ldc	#130; //String modifyThread
   16:	invokespecial	#131; //Method java/lang/RuntimePermission."<init>":(Ljava/lang/String;)V
   19:	putstatic	#25; //Field shutdownPerm:Ljava/lang/RuntimePermission;
   22:	return

}

