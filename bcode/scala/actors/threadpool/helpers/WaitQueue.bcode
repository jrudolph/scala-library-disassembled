public abstract class scala.actors.threadpool.helpers.WaitQueue extends java.lang.Object
  InnerClass: 
   public #5= #4 of #2; //WaitNode=class scala/actors/threadpool/helpers/WaitQueue$WaitNode of class scala/actors/threadpool/helpers/WaitQueue
   public abstract #8= #7 of #2; //QueuedSync=class scala/actors/threadpool/helpers/WaitQueue$QueuedSync of class scala/actors/threadpool/helpers/WaitQueue
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Method	#3.#25;	//  java/lang/Object."<init>":()V
const #2 = class	#26;	//  scala/actors/threadpool/helpers/WaitQueue
const #3 = class	#27;	//  java/lang/Object
const #4 = class	#28;	//  scala/actors/threadpool/helpers/WaitQueue$WaitNode
const #5 = Asciz	WaitNode;
const #6 = Asciz	InnerClasses;
const #7 = class	#29;	//  scala/actors/threadpool/helpers/WaitQueue$QueuedSync
const #8 = Asciz	QueuedSync;
const #9 = Asciz	<init>;
const #10 = Asciz	()V;
const #11 = Asciz	Code;
const #12 = Asciz	insert;
const #13 = Asciz	(Lscala/actors/threadpool/helpers/WaitQueue$WaitNode;)V;
const #14 = Asciz	extract;
const #15 = Asciz	()Lscala/actors/threadpool/helpers/WaitQueue$WaitNode;;
const #16 = Asciz	putBack;
const #17 = Asciz	hasNodes;
const #18 = Asciz	()Z;
const #19 = Asciz	getLength;
const #20 = Asciz	()I;
const #21 = Asciz	getWaitingThreads;
const #22 = Asciz	()Ljava/util/Collection;;
const #23 = Asciz	isWaiting;
const #24 = Asciz	(Ljava/lang/Thread;)Z;
const #25 = NameAndType	#9:#10;//  "<init>":()V
const #26 = Asciz	scala/actors/threadpool/helpers/WaitQueue;
const #27 = Asciz	java/lang/Object;
const #28 = Asciz	scala/actors/threadpool/helpers/WaitQueue$WaitNode;
const #29 = Asciz	scala/actors/threadpool/helpers/WaitQueue$QueuedSync;

{
public scala.actors.threadpool.helpers.WaitQueue();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokespecial	#1; //Method java/lang/Object."<init>":()V
   4:	return

public abstract void insert(scala.actors.threadpool.helpers.WaitQueue$WaitNode);

public abstract scala.actors.threadpool.helpers.WaitQueue$WaitNode extract();

public abstract void putBack(scala.actors.threadpool.helpers.WaitQueue$WaitNode);

public abstract boolean hasNodes();

public abstract int getLength();

public abstract java.util.Collection getWaitingThreads();

public abstract boolean isWaiting(java.lang.Thread);

}

