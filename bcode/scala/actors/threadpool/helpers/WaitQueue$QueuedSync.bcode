public interface scala.actors.threadpool.helpers.WaitQueue$QueuedSync
  InnerClass: 
   public #5= #4 of #10; //WaitNode=class scala/actors/threadpool/helpers/WaitQueue$WaitNode of class scala/actors/threadpool/helpers/WaitQueue
   public abstract #12= #1 of #10; //QueuedSync=class scala/actors/threadpool/helpers/WaitQueue$QueuedSync of class scala/actors/threadpool/helpers/WaitQueue
  minor version: 0
  major version: 49
  Constant pool:
const #1 = class	#11;	//  scala/actors/threadpool/helpers/WaitQueue$QueuedSync
const #2 = class	#13;	//  java/lang/Object
const #3 = Asciz	recheck;
const #4 = class	#14;	//  scala/actors/threadpool/helpers/WaitQueue$WaitNode
const #5 = Asciz	WaitNode;
const #6 = Asciz	InnerClasses;
const #7 = Asciz	(Lscala/actors/threadpool/helpers/WaitQueue$WaitNode;)Z;
const #8 = Asciz	takeOver;
const #9 = Asciz	(Lscala/actors/threadpool/helpers/WaitQueue$WaitNode;)V;
const #10 = class	#15;	//  scala/actors/threadpool/helpers/WaitQueue
const #11 = Asciz	scala/actors/threadpool/helpers/WaitQueue$QueuedSync;
const #12 = Asciz	QueuedSync;
const #13 = Asciz	java/lang/Object;
const #14 = Asciz	scala/actors/threadpool/helpers/WaitQueue$WaitNode;
const #15 = Asciz	scala/actors/threadpool/helpers/WaitQueue;

{
public abstract boolean recheck(scala.actors.threadpool.helpers.WaitQueue$WaitNode);

public abstract void takeOver(scala.actors.threadpool.helpers.WaitQueue$WaitNode);

}

