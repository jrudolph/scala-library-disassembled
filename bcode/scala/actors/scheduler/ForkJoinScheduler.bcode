Compiled from "ForkJoinScheduler.scala"
public class scala.actors.scheduler.ForkJoinScheduler extends java.lang.Object implements java.lang.Runnable,scala.actors.IScheduler,scala.actors.scheduler.TerminationMonitor,scala.ScalaObject
  SourceFile: "ForkJoinScheduler.scala"
  ScalaSig: length = 0x57B
   05 00 FFFFFF81 3A 06 08 01 02 FFFFFF84 FFFFFF80 FFFFFF80 FFFFFF80 00 09 02 11
   46 6F 72 6B 4A 6F 69 6E 53 63 68 65 64 75 6C 65
   72 0A 02 03 04 01 09 73 63 68 65 64 75 6C 65 72
   0A 02 05 06 01 06 61 63 74 6F 72 73 0A 01 07 01
   05 73 63 61 6C 61 03 00 13 06 00 0A 12 15 19 1D
   10 02 0B 10 0D 01 0C 0A 02 0D 0E 01 04 6C 61 6E
   67 0A 01 0F 01 04 6A 61 76 61 09 02 11 0C 02 06
   4F 62 6A 65 63 74 10 02 0B 13 09 02 14 0C 02 08
   52 75 6E 6E 61 62 6C 65 10 02 16 17 0D 01 04 09
   02 18 04 02 0A 49 53 63 68 65 64 75 6C 65 72 10
   02 1A 1B 0D 01 02 09 02 1C 02 02 12 54 65 72 6D
   69 6E 61 74 69 6F 6E 4D 6F 6E 69 74 6F 72 10 02
   1E 1F 0D 01 06 09 02 20 06 02 0B 53 63 61 6C 61
   4F 62 6A 65 63 74 08 08 22 00 FFFFFF82 FFFFFFC2 FFFFFF80 FFFFFF84 00 23
   01 0C 69 6E 69 74 43 6F 72 65 53 69 7A 65 15 01
   24 10 02 1E 25 09 02 26 06 02 03 49 6E 74 08 08
   28 00 FFFFFF82 FFFFFF80 FFFFFFA0 FFFFFF80 04 24 01 0D 69 6E 69 74 43 6F
   72 65 53 69 7A 65 20 08 08 2A 00 FFFFFF82 FFFFFFC2 FFFFFF80 FFFFFF84 00
   23 01 07 6D 61 78 53 69 7A 65 08 08 2C 00 FFFFFF82 FFFFFF80
   FFFFFFA0 FFFFFF80 04 24 01 08 6D 61 78 53 69 7A 65 20 08 08
   2E 00 FFFFFF82 FFFFFF80 FFFFFFA0 FFFFFF80 04 2F 01 06 64 61 65 6D 6F 6E
   10 02 1E 30 09 02 31 06 02 07 42 6F 6F 6C 65 61
   6E 08 05 33 00 FFFFFF84 00 34 01 06 3C 69 6E 69 74 3E
   14 04 35 36 37 38 10 02 1A 00 08 05 22 32 FFFFFFC0 00
   24 08 05 2A 32 FFFFFFC0 00 24 08 05 2E 32 FFFFFFC0 00 2F 08
   07 3A 00 FFFFFFC0 FFFFFF80 FFFFFF84 04 3B 01 04 70 6F 6F 6C 15 01
   3C 10 02 1A 3D 09 02 3E 02 02 15 44 72 61 69 6E
   61 62 6C 65 46 6F 72 6B 4A 6F 69 6E 50 6F 6F 6C
   08 07 40 00 FFFFFFC0 FFFFFF80 FFFFFF84 04 41 01 08 70 6F 6F 6C 5F
   24 65 71 14 02 42 45 10 02 1E 43 09 02 44 06 02
   04 55 6E 69 74 08 07 46 3F FFFFFF81 FFFFFF80 FFFFFFC0 00 3C 01 03
   78 24 31 08 06 48 00 FFFFFFA0 FFFFFFA0 04 3C 01 05 70 6F 6F
   6C 20 08 07 4A 00 FFFFFFC0 FFFFFF80 FFFFFF84 04 4B 01 0B 74 65 72
   6D 69 6E 61 74 69 6E 67 15 01 2F 08 07 4D 00 FFFFFFC0
   FFFFFF80 FFFFFF84 04 4E 01 0F 74 65 72 6D 69 6E 61 74 69 6E
   67 5F 24 65 71 14 02 42 4F 08 07 46 4C FFFFFF81 FFFFFF80 FFFFFFC0
   00 2F 08 06 51 00 FFFFFFA0 FFFFFFA0 04 2F 01 0C 74 65 72 6D
   69 6E 61 74 69 6E 67 20 08 07 53 00 FFFFFFC0 FFFFFF80 FFFFFF84 04
   4B 01 0B 73 6E 61 70 73 68 6F 74 69 6E 67 08 07
   55 00 FFFFFFC0 FFFFFF80 FFFFFF84 04 56 01 0F 73 6E 61 70 73 68 6F
   74 69 6E 67 5F 24 65 71 14 02 42 57 08 07 46 54
   FFFFFF81 FFFFFF80 FFFFFFC0 00 2F 08 06 59 00 FFFFFFA0 FFFFFFA0 04 2F 01 0C 73
   6E 61 70 73 68 6F 74 69 6E 67 20 08 07 5B 00 FFFFFFC0
   FFFFFF80 FFFFFF84 04 5C 01 0C 64 72 61 69 6E 65 64 54 61 73
   6B 73 15 01 5D 10 03 5E 61 63 0D 01 5F 0A 02 60
   0E 01 04 75 74 69 6C 09 02 62 5F 02 0A 43 6F 6C
   6C 65 63 74 69 6F 6E 30 02 64 6E 10 03 65 6A 6C
   0D 01 66 0A 02 67 68 01 08 66 6F 72 6B 6A 6F 69
   6E 0A 02 69 06 01 0A 63 6F 6E 63 75 72 72 65 6E
   74 09 02 6B 66 02 0C 46 6F 72 6B 4A 6F 69 6E 54
   61 73 6B 10 02 6D 6E 0C 00 04 08 6F 00 FFFFFF84 FFFFFF80 FFFFFF80
   FFFFFF82 00 70 02 03 5F 24 31 11 02 71 74 10 02 1E 72
   09 02 73 06 02 07 4E 6F 74 68 69 6E 67 10 02 1E
   75 09 02 76 06 02 03 41 6E 79 08 07 78 00 FFFFFFC0 FFFFFF80
   FFFFFF84 04 79 01 10 64 72 61 69 6E 65 64 54 61 73 6B
   73 5F 24 65 71 14 02 42 7A 08 07 46 77 FFFFFF81 FFFFFF80 FFFFFFC0
   00 7B 10 03 5E 61 7C 30 02 7D 7F 10 03 65 6A 7E
   10 02 6D 7F 04 08 6F 00 FFFFFF84 FFFFFF80 FFFFFF80 FFFFFF82 00 70 08 08
   FFFFFF81 01 00 FFFFFFA0 FFFFFFA0 04 FFFFFF81 02 01 0D 64 72 61 69 6E 65
   64 54 61 73 6B 73 20 10 04 5E 61 FFFFFF81 03 30 04 FFFFFF81
   04 FFFFFF81 06 10 04 65 6A FFFFFF81 05 10 03 6D FFFFFF81 06 04 08
   6F 00 FFFFFF84 FFFFFF80 FFFFFF80 FFFFFF82 00 70 08 08 FFFFFF81 08 00 FFFFFFC2 FFFFFF80 FFFFFF84
   08 23 01 0A 43 48 45 43 4B 5F 46 52 45 51 08 07
   FFFFFF81 0A 00 FFFFFFA0 FFFFFF80 04 24 01 0B 43 48 45 43 4B 5F 46
   52 45 51 20 08 06 33 00 FFFFFF84 00 FFFFFF81 0C 14 03 35 FFFFFF81
   0D 08 07 FFFFFF81 0E FFFFFF81 0B FFFFFFC0 00 2F 01 01 64 08 06 33
   00 FFFFFF84 00 FFFFFF81 10 14 01 35 08 07 FFFFFF81 12 00 FFFFFF84 04 FFFFFF81
   13 01 0B 6D 61 6B 65 4E 65 77 50 6F 6F 6C 14 01
   3C 08 07 FFFFFF81 15 00 FFFFFF84 00 FFFFFF81 16 01 05 73 74 61 72
   74 14 01 42 08 07 FFFFFF81 18 00 FFFFFF84 20 FFFFFF81 16 01 03 72
   75 6E 08 07 FFFFFF81 1A 00 FFFFFF84 00 FFFFFF81 1B 01 07 65 78 65
   63 75 74 65 14 03 42 FFFFFF81 1C 08 07 FFFFFF81 1D FFFFFF81 19 FFFFFFC0
   00 12 01 04 74 61 73 6B 08 07 FFFFFF81 1F 00 FFFFFF84 20 FFFFFF81
   20 01 10 65 78 65 63 75 74 65 46 72 6F 6D 41 63
   74 6F 72 14 03 42 FFFFFF81 21 08 07 FFFFFF81 1D FFFFFF81 1E FFFFFFC0 00
   12 08 07 FFFFFF81 1A 00 FFFFFF84 00 FFFFFF81 23 14 03 42 FFFFFF81 24 08
   09 FFFFFF81 25 FFFFFF81 22 FFFFFF84 FFFFFFC0 00 FFFFFF81 26 01 03 66 75 6E 10
   04 1E FFFFFF81 27 42 09 03 FFFFFF81 28 06 02 08 3C 62 79 6E
   61 6D 65 3E 08 07 FFFFFF81 2A 00 FFFFFF84 00 FFFFFF81 16 01 08 73
   68 75 74 64 6F 77 6E 08 06 FFFFFF81 2C 00 FFFFFF84 00 4B 01
   08 69 73 41 63 74 69 76 65 08 07 FFFFFF81 2E 00 FFFFFF84 20
   FFFFFF81 2F 01 0C 6D 61 6E 61 67 65 64 42 6C 6F 63 6B
   14 03 42 FFFFFF81 30 08 08 FFFFFF81 31 FFFFFF81 2D FFFFFFC0 00 FFFFFF81 32 01
   07 62 6C 6F 63 6B 65 72 10 04 FFFFFF81 33 FFFFFF81 34 0D 01
   68 09 03 FFFFFF81 35 68 02 0E 4D 61 6E 61 67 65 64 42
   6C 6F 63 6B 65 72 08 07 FFFFFF81 37 00 FFFFFF84 00 FFFFFF81 16 01
   08 73 6E 61 70 73 68 6F 74 08 07 FFFFFF81 39 00 FFFFFF84 00
   FFFFFF81 16 01 07 72 65 73 74 61 72 74 
  InnerClass: 
   public final #394= #172 of #26; //$anon$1=class scala/actors/scheduler/ForkJoinScheduler$$anon$1 of class scala/actors/scheduler/ForkJoinScheduler
   public final #395= #160 of #26; //$anon$2=class scala/actors/scheduler/ForkJoinScheduler$$anon$2 of class scala/actors/scheduler/ForkJoinScheduler
   public final #396= #138 of #26; //$anon$3=class scala/actors/scheduler/ForkJoinScheduler$$anon$3 of class scala/actors/scheduler/ForkJoinScheduler
   public abstract #399= #398 of #143; //ManagedBlocker=class scala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker of class scala/concurrent/forkjoin/ForkJoinPool
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	ForkJoinScheduler.scala;
const #3 = Asciz	scala$actors$scheduler$TerminationMonitor$$started;
const #4 = Asciz	Z;
const #5 = Asciz	terminationHandlers;
const #6 = Asciz	Lscala/collection/mutable/HashMap;;
const #7 = Asciz	activeActors;
const #8 = Asciz	I;
const #9 = Asciz	CHECK_FREQ;
const #10 = Asciz	drainedTasks;
const #11 = Asciz	Ljava/util/Collection;;
const #12 = Asciz	Ljava/util/Collection<Lscala/concurrent/forkjoin/ForkJoinTask<*>;>;;
const #13 = Asciz	Signature;
const #14 = Asciz	snapshoting;
const #15 = Asciz	terminating;
const #16 = Asciz	pool;
const #17 = Asciz	Lscala/actors/scheduler/DrainableForkJoinPool;;
const #18 = Asciz	daemon;
const #19 = Asciz	maxSize;
const #20 = Asciz	initCoreSize;
const #21 = Asciz	<init>;
const #22 = Asciz	(IIZ)V;
const #23 = Asciz	Code;
const #24 = Asciz	LineNumberTable;
const #25 = Asciz	scala/actors/scheduler/ForkJoinScheduler;
const #26 = class	#25;	//  scala/actors/scheduler/ForkJoinScheduler
const #27 = NameAndType	#20:#8;//  initCoreSize:I
const #28 = Field	#26.#27;	//  scala/actors/scheduler/ForkJoinScheduler.initCoreSize:I
const #29 = NameAndType	#19:#8;//  maxSize:I
const #30 = Field	#26.#29;	//  scala/actors/scheduler/ForkJoinScheduler.maxSize:I
const #31 = NameAndType	#18:#4;//  daemon:Z
const #32 = Field	#26.#31;	//  scala/actors/scheduler/ForkJoinScheduler.daemon:Z
const #33 = Asciz	java/lang/Object;
const #34 = class	#33;	//  java/lang/Object
const #35 = Asciz	()V;
const #36 = NameAndType	#21:#35;//  "<init>":()V
const #37 = Method	#34.#36;	//  java/lang/Object."<init>":()V
const #38 = Asciz	scala/actors/IScheduler$class;
const #39 = class	#38;	//  scala/actors/IScheduler$class
const #40 = Asciz	$init$;
const #41 = Asciz	(Lscala/actors/IScheduler;)V;
const #42 = NameAndType	#40:#41;//  $init$:(Lscala/actors/IScheduler;)V
const #43 = Method	#39.#42;	//  scala/actors/IScheduler$class.$init$:(Lscala/actors/IScheduler;)V
const #44 = Asciz	scala/actors/scheduler/TerminationMonitor$class;
const #45 = class	#44;	//  scala/actors/scheduler/TerminationMonitor$class
const #46 = Asciz	(Lscala/actors/scheduler/TerminationMonitor;)V;
const #47 = NameAndType	#40:#46;//  $init$:(Lscala/actors/scheduler/TerminationMonitor;)V
const #48 = Method	#45.#47;	//  scala/actors/scheduler/TerminationMonitor$class.$init$:(Lscala/actors/scheduler/TerminationMonitor;)V
const #49 = Asciz	makeNewPool;
const #50 = Asciz	()Lscala/actors/scheduler/DrainableForkJoinPool;;
const #51 = NameAndType	#49:#50;//  makeNewPool:()Lscala/actors/scheduler/DrainableForkJoinPool;
const #52 = Method	#26.#51;	//  scala/actors/scheduler/ForkJoinScheduler.makeNewPool:()Lscala/actors/scheduler/DrainableForkJoinPool;
const #53 = NameAndType	#16:#17;//  pool:Lscala/actors/scheduler/DrainableForkJoinPool;
const #54 = Field	#26.#53;	//  scala/actors/scheduler/ForkJoinScheduler.pool:Lscala/actors/scheduler/DrainableForkJoinPool;
const #55 = NameAndType	#15:#4;//  terminating:Z
const #56 = Field	#26.#55;	//  scala/actors/scheduler/ForkJoinScheduler.terminating:Z
const #57 = NameAndType	#14:#4;//  snapshoting:Z
const #58 = Field	#26.#57;	//  scala/actors/scheduler/ForkJoinScheduler.snapshoting:Z
const #59 = NameAndType	#10:#11;//  drainedTasks:Ljava/util/Collection;
const #60 = Field	#26.#59;	//  scala/actors/scheduler/ForkJoinScheduler.drainedTasks:Ljava/util/Collection;
const #61 = int	10;
const #62 = NameAndType	#9:#8;//  CHECK_FREQ:I
const #63 = Field	#26.#62;	//  scala/actors/scheduler/ForkJoinScheduler.CHECK_FREQ:I
const #64 = Asciz	this;
const #65 = Asciz	Lscala/actors/scheduler/ForkJoinScheduler;;
const #66 = Asciz	LocalVariableTable;
const #67 = Asciz	liftedTree1$1;
const #68 = Asciz	()I;
const #69 = NameAndType	#9:#68;//  CHECK_FREQ:()I
const #70 = Method	#26.#69;	//  scala/actors/scheduler/ForkJoinScheduler.CHECK_FREQ:()I
const #71 = Asciz	wait;
const #72 = Asciz	(J)V;
const #73 = NameAndType	#71:#72;//  wait:(J)V
const #74 = Method	#26.#73;	//  scala/actors/scheduler/ForkJoinScheduler.wait:(J)V
const #75 = Asciz	java/lang/InterruptedException;
const #76 = class	#75;	//  java/lang/InterruptedException
const #77 = Asciz	restart;
const #78 = Asciz	()Z;
const #79 = NameAndType	#14:#78;//  snapshoting:()Z
const #80 = Method	#26.#79;	//  scala/actors/scheduler/ForkJoinScheduler.snapshoting:()Z
const #81 = Asciz	isActive;
const #82 = NameAndType	#81:#78;//  isActive:()Z
const #83 = Method	#26.#82;	//  scala/actors/scheduler/ForkJoinScheduler.isActive:()Z
const #84 = Asciz	scheduler is still active;
const #85 = String	#84;	//  scheduler is still active
const #86 = Asciz	java/lang/RuntimeException;
const #87 = class	#86;	//  java/lang/RuntimeException
const #88 = Asciz	(Ljava/lang/String;)V;
const #89 = NameAndType	#21:#88;//  "<init>":(Ljava/lang/String;)V
const #90 = Method	#87.#89;	//  java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
const #91 = Asciz	snapshoting_$eq;
const #92 = Asciz	(Z)V;
const #93 = NameAndType	#91:#92;//  snapshoting_$eq:(Z)V
const #94 = Method	#26.#93;	//  scala/actors/scheduler/ForkJoinScheduler.snapshoting_$eq:(Z)V
const #95 = Asciz	pool_$eq;
const #96 = Asciz	(Lscala/actors/scheduler/DrainableForkJoinPool;)V;
const #97 = NameAndType	#95:#96;//  pool_$eq:(Lscala/actors/scheduler/DrainableForkJoinPool;)V
const #98 = Method	#26.#97;	//  scala/actors/scheduler/ForkJoinScheduler.pool_$eq:(Lscala/actors/scheduler/DrainableForkJoinPool;)V
const #99 = Asciz	()Ljava/util/Collection;;
const #100 = NameAndType	#10:#99;//  drainedTasks:()Ljava/util/Collection;
const #101 = Method	#26.#100;	//  scala/actors/scheduler/ForkJoinScheduler.drainedTasks:()Ljava/util/Collection;
const #102 = Asciz	java/util/Collection;
const #103 = class	#102;	//  java/util/Collection
const #104 = Asciz	iterator;
const #105 = Asciz	()Ljava/util/Iterator;;
const #106 = NameAndType	#104:#105;//  iterator:()Ljava/util/Iterator;
const #107 = InterfaceMethod	#103.#106;	//  java/util/Collection.iterator:()Ljava/util/Iterator;
const #108 = Asciz	java/util/Iterator;
const #109 = class	#108;	//  java/util/Iterator
const #110 = Asciz	hasNext;
const #111 = NameAndType	#110:#78;//  hasNext:()Z
const #112 = InterfaceMethod	#109.#111;	//  java/util/Iterator.hasNext:()Z
const #113 = NameAndType	#16:#50;//  pool:()Lscala/actors/scheduler/DrainableForkJoinPool;
const #114 = Method	#26.#113;	//  scala/actors/scheduler/ForkJoinScheduler.pool:()Lscala/actors/scheduler/DrainableForkJoinPool;
const #115 = Asciz	next;
const #116 = Asciz	()Ljava/lang/Object;;
const #117 = NameAndType	#115:#116;//  next:()Ljava/lang/Object;
const #118 = InterfaceMethod	#109.#117;	//  java/util/Iterator.next:()Ljava/lang/Object;
const #119 = Asciz	scala/concurrent/forkjoin/ForkJoinTask;
const #120 = class	#119;	//  scala/concurrent/forkjoin/ForkJoinTask
const #121 = Asciz	scala/actors/scheduler/DrainableForkJoinPool;
const #122 = class	#121;	//  scala/actors/scheduler/DrainableForkJoinPool
const #123 = Asciz	execute;
const #124 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinTask;)V;
const #125 = NameAndType	#123:#124;//  execute:(Lscala/concurrent/forkjoin/ForkJoinTask;)V
const #126 = Method	#122.#125;	//  scala/actors/scheduler/DrainableForkJoinPool.execute:(Lscala/concurrent/forkjoin/ForkJoinTask;)V
const #127 = Asciz	start;
const #128 = NameAndType	#127:#35;//  start:()V
const #129 = Method	#26.#128;	//  scala/actors/scheduler/ForkJoinScheduler.start:()V
const #130 = Asciz	snapshot has not been invoked;
const #131 = String	#130;	//  snapshot has not been invoked
const #132 = Asciz	iter;
const #133 = Asciz	Ljava/util/Iterator;;
const #134 = Asciz	snapshot;
const #135 = Asciz	managedBlock;
const #136 = Asciz	(Lscala/concurrent/ManagedBlocker;)V;
const #137 = Asciz	scala/actors/scheduler/ForkJoinScheduler$$anon$3;
const #138 = class	#137;	//  scala/actors/scheduler/ForkJoinScheduler$$anon$3
const #139 = Asciz	(Lscala/actors/scheduler/ForkJoinScheduler;Lscala/concurrent/ManagedBlocker;)V;
const #140 = NameAndType	#21:#139;//  "<init>":(Lscala/actors/scheduler/ForkJoinScheduler;Lscala/concurrent/ManagedBlocker;)V
const #141 = Method	#138.#140;	//  scala/actors/scheduler/ForkJoinScheduler$$anon$3."<init>":(Lscala/actors/scheduler/ForkJoinScheduler;Lscala/concurrent/ManagedBlocker;)V
const #142 = Asciz	scala/concurrent/forkjoin/ForkJoinPool;
const #143 = class	#142;	//  scala/concurrent/forkjoin/ForkJoinPool
const #144 = Asciz	(Lscala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;Z)V;
const #145 = NameAndType	#135:#144;//  managedBlock:(Lscala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;Z)V
const #146 = Method	#143.#145;	//  scala/concurrent/forkjoin/ForkJoinPool.managedBlock:(Lscala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;Z)V
const #147 = Asciz	blocker$1;
const #148 = Asciz	Lscala/concurrent/ManagedBlocker;;
const #149 = NameAndType	#15:#78;//  terminating:()Z
const #150 = Method	#26.#149;	//  scala/actors/scheduler/ForkJoinScheduler.terminating:()Z
const #151 = Asciz	isShutdown;
const #152 = NameAndType	#151:#78;//  isShutdown:()Z
const #153 = Method	#122.#152;	//  scala/actors/scheduler/DrainableForkJoinPool.isShutdown:()Z
const #154 = Asciz	shutdown;
const #155 = Asciz	terminating_$eq;
const #156 = NameAndType	#155:#92;//  terminating_$eq:(Z)V
const #157 = Method	#26.#156;	//  scala/actors/scheduler/ForkJoinScheduler.terminating_$eq:(Z)V
const #158 = Asciz	(Lscala/Function0;)V;
const #159 = Asciz	scala/actors/scheduler/ForkJoinScheduler$$anon$2;
const #160 = class	#159;	//  scala/actors/scheduler/ForkJoinScheduler$$anon$2
const #161 = Asciz	(Lscala/actors/scheduler/ForkJoinScheduler;Lscala/Function0;)V;
const #162 = NameAndType	#21:#161;//  "<init>":(Lscala/actors/scheduler/ForkJoinScheduler;Lscala/Function0;)V
const #163 = Method	#160.#162;	//  scala/actors/scheduler/ForkJoinScheduler$$anon$2."<init>":(Lscala/actors/scheduler/ForkJoinScheduler;Lscala/Function0;)V
const #164 = Asciz	(Ljava/lang/Runnable;)V;
const #165 = NameAndType	#123:#164;//  execute:(Ljava/lang/Runnable;)V
const #166 = Method	#26.#165;	//  scala/actors/scheduler/ForkJoinScheduler.execute:(Ljava/lang/Runnable;)V
const #167 = Asciz	fun$1;
const #168 = Asciz	Lscala/Function0;;
const #169 = Asciz	(Lscala/Function0<Ljava/lang/Object;>;)V;
const #170 = Asciz	executeFromActor;
const #171 = Asciz	scala/actors/scheduler/ForkJoinScheduler$$anon$1;
const #172 = class	#171;	//  scala/actors/scheduler/ForkJoinScheduler$$anon$1
const #173 = Asciz	(Lscala/actors/scheduler/ForkJoinScheduler;Ljava/lang/Runnable;)V;
const #174 = NameAndType	#21:#173;//  "<init>":(Lscala/actors/scheduler/ForkJoinScheduler;Ljava/lang/Runnable;)V
const #175 = Method	#172.#174;	//  scala/actors/scheduler/ForkJoinScheduler$$anon$1."<init>":(Lscala/actors/scheduler/ForkJoinScheduler;Ljava/lang/Runnable;)V
const #176 = Asciz	scala/concurrent/forkjoin/RecursiveAction;
const #177 = class	#176;	//  scala/concurrent/forkjoin/RecursiveAction
const #178 = Asciz	fork;
const #179 = NameAndType	#178:#35;//  fork:()V
const #180 = Method	#177.#179;	//  scala/concurrent/forkjoin/RecursiveAction.fork:()V
const #181 = Asciz	task$1;
const #182 = Asciz	Ljava/lang/Runnable;;
const #183 = Asciz	recAction;
const #184 = Asciz	Lscala/concurrent/forkjoin/RecursiveAction;;
const #185 = Method	#122.#165;	//  scala/actors/scheduler/DrainableForkJoinPool.execute:(Ljava/lang/Runnable;)V
const #186 = Asciz	task;
const #187 = Asciz	run;
const #188 = NameAndType	#67:#35;//  liftedTree1$1:()V
const #189 = Method	#26.#188;	//  scala/actors/scheduler/ForkJoinScheduler.liftedTree1$1:()V
const #190 = Asciz	scala/actors/scheduler/QuitException;
const #191 = class	#190;	//  scala/actors/scheduler/QuitException
const #192 = Method	#191.#36;	//  scala/actors/scheduler/QuitException."<init>":()V
const #193 = Asciz	scala/actors/scheduler/TerminationMonitor;
const #194 = class	#193;	//  scala/actors/scheduler/TerminationMonitor
const #195 = Asciz	allTerminated;
const #196 = NameAndType	#195:#78;//  allTerminated:()Z
const #197 = InterfaceMethod	#194.#196;	//  scala/actors/scheduler/TerminationMonitor.allTerminated:()Z
const #198 = Asciz	scala/actors/Debug$;
const #199 = class	#198;	//  scala/actors/Debug$
const #200 = Asciz	MODULE$;
const #201 = Asciz	Lscala/actors/Debug$;;
const #202 = NameAndType	#200:#201;//  MODULE$:Lscala/actors/Debug$;
const #203 = Field	#199.#202;	//  scala/actors/Debug$.MODULE$:Lscala/actors/Debug$;
const #204 = Asciz	scala/runtime/StringAdd;
const #205 = class	#204;	//  scala/runtime/StringAdd
const #206 = Asciz	(Ljava/lang/Object;)V;
const #207 = NameAndType	#21:#206;//  "<init>":(Ljava/lang/Object;)V
const #208 = Method	#205.#207;	//  scala/runtime/StringAdd."<init>":(Ljava/lang/Object;)V
const #209 = Asciz	: all actors terminated;
const #210 = String	#209;	//  : all actors terminated
const #211 = Asciz	$plus;
const #212 = Asciz	(Ljava/lang/String;)Ljava/lang/String;;
const #213 = NameAndType	#211:#212;//  $plus:(Ljava/lang/String;)Ljava/lang/String;
const #214 = Method	#205.#213;	//  scala/runtime/StringAdd.$plus:(Ljava/lang/String;)Ljava/lang/String;
const #215 = Asciz	info;
const #216 = NameAndType	#215:#88;//  info:(Ljava/lang/String;)V
const #217 = Method	#199.#216;	//  scala/actors/Debug$.info:(Ljava/lang/String;)V
const #218 = Asciz	isQuiescent;
const #219 = NameAndType	#218:#78;//  isQuiescent:()Z
const #220 = Method	#122.#219;	//  scala/actors/scheduler/DrainableForkJoinPool.isQuiescent:()Z
const #221 = Asciz	java/util/ArrayList;
const #222 = class	#221;	//  java/util/ArrayList
const #223 = Method	#222.#36;	//  java/util/ArrayList."<init>":()V
const #224 = Asciz	drainTasksTo;
const #225 = Asciz	(Ljava/util/Collection;)I;
const #226 = NameAndType	#224:#225;//  drainTasksTo:(Ljava/util/Collection;)I
const #227 = Method	#122.#226;	//  scala/actors/scheduler/DrainableForkJoinPool.drainTasksTo:(Ljava/util/Collection;)I
const #228 = Asciz	scala/collection/mutable/StringBuilder;
const #229 = class	#228;	//  scala/collection/mutable/StringBuilder
const #230 = Method	#229.#36;	//  scala/collection/mutable/StringBuilder."<init>":()V
const #231 = Asciz	: drained ;
const #232 = String	#231;	//  : drained 
const #233 = Asciz	append;
const #234 = Asciz	(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;;
const #235 = NameAndType	#233:#234;//  append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
const #236 = Method	#229.#235;	//  scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
const #237 = Asciz	scala/runtime/BoxesRunTime;
const #238 = class	#237;	//  scala/runtime/BoxesRunTime
const #239 = Asciz	boxToInteger;
const #240 = Asciz	(I)Ljava/lang/Integer;;
const #241 = NameAndType	#239:#240;//  boxToInteger:(I)Ljava/lang/Integer;
const #242 = Method	#238.#241;	//  scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
const #243 = Asciz	 tasks;
const #244 = String	#243;	//   tasks
const #245 = Asciz	toString;
const #246 = Asciz	()Ljava/lang/String;;
const #247 = NameAndType	#245:#246;//  toString:()Ljava/lang/String;
const #248 = Method	#229.#247;	//  scala/collection/mutable/StringBuilder.toString:()Ljava/lang/String;
const #249 = Asciz	drainedTasks_$eq;
const #250 = Asciz	(Ljava/util/Collection;)V;
const #251 = NameAndType	#249:#250;//  drainedTasks_$eq:(Ljava/util/Collection;)V
const #252 = Method	#26.#251;	//  scala/actors/scheduler/ForkJoinScheduler.drainedTasks_$eq:(Ljava/util/Collection;)V
const #253 = Asciz	gc;
const #254 = NameAndType	#253:#35;//  gc:()V
const #255 = InterfaceMethod	#194.#254;	//  scala/actors/scheduler/TerminationMonitor.gc:()V
const #256 = Asciz	: initiating shutdown...;
const #257 = String	#256;	//  : initiating shutdown...
const #258 = NameAndType	#154:#35;//  shutdown:()V
const #259 = Method	#122.#258;	//  scala/actors/scheduler/DrainableForkJoinPool.shutdown:()V
const #260 = long	10l;
const #262 = Asciz	java/lang/Thread;
const #263 = class	#262;	//  java/lang/Thread
const #264 = Asciz	sleep;
const #265 = NameAndType	#264:#72;//  sleep:(J)V
const #266 = Method	#263.#265;	//  java/lang/Thread.sleep:(J)V
const #267 = Asciz	num;
const #268 = Asciz	list;
const #269 = Asciz	Ljava/util/ArrayList;;
const #270 = NameAndType	#21:#164;//  "<init>":(Ljava/lang/Runnable;)V
const #271 = Method	#263.#270;	//  java/lang/Thread."<init>":(Ljava/lang/Runnable;)V
const #272 = Asciz	setDaemon;
const #273 = NameAndType	#272:#92;//  setDaemon:(Z)V
const #274 = Method	#263.#273;	//  java/lang/Thread.setDaemon:(Z)V
const #275 = Asciz	ForkJoinScheduler;
const #276 = String	#275;	//  ForkJoinScheduler
const #277 = Asciz	setName;
const #278 = NameAndType	#277:#88;//  setName:(Ljava/lang/String;)V
const #279 = Method	#263.#278;	//  java/lang/Thread.setName:(Ljava/lang/String;)V
const #280 = Method	#263.#128;	//  java/lang/Thread.start:()V
const #281 = Asciz	: could not create scheduler thread: ;
const #282 = String	#281;	//  : could not create scheduler thread: 
const #283 = Asciz	java/lang/Exception;
const #284 = class	#283;	//  java/lang/Exception
const #285 = Asciz	t;
const #286 = Asciz	Ljava/lang/Thread;;
const #287 = Method	#122.#36;	//  scala/actors/scheduler/DrainableForkJoinPool."<init>":()V
const #288 = Asciz	setAsyncMode;
const #289 = Asciz	(Z)Z;
const #290 = NameAndType	#288:#289;//  setAsyncMode:(Z)Z
const #291 = Method	#122.#290;	//  scala/actors/scheduler/DrainableForkJoinPool.setAsyncMode:(Z)Z
const #292 = NameAndType	#20:#68;//  initCoreSize:()I
const #293 = Method	#26.#292;	//  scala/actors/scheduler/ForkJoinScheduler.initCoreSize:()I
const #294 = Asciz	setParallelism;
const #295 = Asciz	(I)V;
const #296 = NameAndType	#294:#295;//  setParallelism:(I)V
const #297 = Method	#122.#296;	//  scala/actors/scheduler/DrainableForkJoinPool.setParallelism:(I)V
const #298 = NameAndType	#19:#68;//  maxSize:()I
const #299 = Method	#26.#298;	//  scala/actors/scheduler/ForkJoinScheduler.maxSize:()I
const #300 = Asciz	setMaximumPoolSize;
const #301 = NameAndType	#300:#295;//  setMaximumPoolSize:(I)V
const #302 = Method	#122.#301;	//  scala/actors/scheduler/DrainableForkJoinPool.setMaximumPoolSize:(I)V
const #303 = Asciz	scala/Predef$;
const #304 = class	#303;	//  scala/Predef$
const #305 = Asciz	Lscala/Predef$;;
const #306 = NameAndType	#200:#305;//  MODULE$:Lscala/Predef$;
const #307 = Field	#304.#306;	//  scala/Predef$.MODULE$:Lscala/Predef$;
const #308 = Asciz	any2stringadd;
const #309 = Asciz	(Ljava/lang/Object;)Lscala/runtime/StringAdd;;
const #310 = NameAndType	#308:#309;//  any2stringadd:(Ljava/lang/Object;)Lscala/runtime/StringAdd;
const #311 = Method	#304.#310;	//  scala/Predef$.any2stringadd:(Ljava/lang/Object;)Lscala/runtime/StringAdd;
const #312 = Asciz	: parallelism ;
const #313 = String	#312;	//  : parallelism 
const #314 = Asciz	getParallelism;
const #315 = NameAndType	#314:#68;//  getParallelism:()I
const #316 = Method	#122.#315;	//  scala/actors/scheduler/DrainableForkJoinPool.getParallelism:()I
const #317 = Asciz	: max pool size ;
const #318 = String	#317;	//  : max pool size 
const #319 = Asciz	getMaximumPoolSize;
const #320 = NameAndType	#319:#68;//  getMaximumPoolSize:()I
const #321 = Method	#122.#320;	//  scala/actors/scheduler/DrainableForkJoinPool.getMaximumPoolSize:()I
const #322 = Asciz	p;
const #323 = NameAndType	#21:#92;//  "<init>":(Z)V
const #324 = Method	#26.#323;	//  scala/actors/scheduler/ForkJoinScheduler."<init>":(Z)V
const #325 = Asciz	scala/actors/scheduler/ThreadPoolConfig$;
const #326 = class	#325;	//  scala/actors/scheduler/ThreadPoolConfig$
const #327 = Asciz	Lscala/actors/scheduler/ThreadPoolConfig$;;
const #328 = NameAndType	#200:#327;//  MODULE$:Lscala/actors/scheduler/ThreadPoolConfig$;
const #329 = Field	#326.#328;	//  scala/actors/scheduler/ThreadPoolConfig$.MODULE$:Lscala/actors/scheduler/ThreadPoolConfig$;
const #330 = Asciz	corePoolSize;
const #331 = NameAndType	#330:#68;//  corePoolSize:()I
const #332 = Method	#326.#331;	//  scala/actors/scheduler/ThreadPoolConfig$.corePoolSize:()I
const #333 = Asciz	maxPoolSize;
const #334 = NameAndType	#333:#68;//  maxPoolSize:()I
const #335 = Method	#326.#334;	//  scala/actors/scheduler/ThreadPoolConfig$.maxPoolSize:()I
const #336 = NameAndType	#21:#22;//  "<init>":(IIZ)V
const #337 = Method	#26.#336;	//  scala/actors/scheduler/ForkJoinScheduler."<init>":(IIZ)V
const #338 = Asciz	d;
const #339 = Asciz	(Ljava/util/Collection<Lscala/concurrent/forkjoin/ForkJoinTask<*>;>;)V;
const #340 = Asciz	()Ljava/util/Collection<Lscala/concurrent/forkjoin/ForkJoinTask<*>;>;;
const #341 = Asciz	printActorDump;
const #342 = NameAndType	#341:#41;//  printActorDump:(Lscala/actors/IScheduler;)V
const #343 = Method	#39.#342;	//  scala/actors/IScheduler$class.printActorDump:(Lscala/actors/IScheduler;)V
const #344 = Asciz	onLockup;
const #345 = Asciz	(ILscala/Function0;)V;
const #346 = Asciz	(Lscala/actors/IScheduler;ILscala/Function0;)V;
const #347 = NameAndType	#344:#346;//  onLockup:(Lscala/actors/IScheduler;ILscala/Function0;)V
const #348 = Method	#39.#347;	//  scala/actors/IScheduler$class.onLockup:(Lscala/actors/IScheduler;ILscala/Function0;)V
const #349 = Asciz	millis;
const #350 = Asciz	handler;
const #351 = Asciz	(Lscala/actors/IScheduler;Lscala/Function0;)V;
const #352 = NameAndType	#344:#351;//  onLockup:(Lscala/actors/IScheduler;Lscala/Function0;)V
const #353 = Method	#39.#352;	//  scala/actors/IScheduler$class.onLockup:(Lscala/actors/IScheduler;Lscala/Function0;)V
const #354 = Asciz	tick;
const #355 = Asciz	(Lscala/actors/Actor;)V;
const #356 = Asciz	(Lscala/actors/IScheduler;Lscala/actors/Actor;)V;
const #357 = NameAndType	#354:#356;//  tick:(Lscala/actors/IScheduler;Lscala/actors/Actor;)V
const #358 = Method	#39.#357;	//  scala/actors/IScheduler$class.tick:(Lscala/actors/IScheduler;Lscala/actors/Actor;)V
const #359 = Asciz	a;
const #360 = Asciz	Lscala/actors/Actor;;
const #361 = NameAndType	#253:#46;//  gc:(Lscala/actors/scheduler/TerminationMonitor;)V
const #362 = Method	#45.#361;	//  scala/actors/scheduler/TerminationMonitor$class.gc:(Lscala/actors/scheduler/TerminationMonitor;)V
const #363 = Asciz	(Lscala/actors/scheduler/TerminationMonitor;)Z;
const #364 = NameAndType	#195:#363;//  allTerminated:(Lscala/actors/scheduler/TerminationMonitor;)Z
const #365 = Method	#45.#364;	//  scala/actors/scheduler/TerminationMonitor$class.allTerminated:(Lscala/actors/scheduler/TerminationMonitor;)Z
const #366 = Asciz	terminated;
const #367 = Asciz	(Lscala/actors/Reactor;)V;
const #368 = Asciz	(Lscala/actors/scheduler/TerminationMonitor;Lscala/actors/Reactor;)V;
const #369 = NameAndType	#366:#368;//  terminated:(Lscala/actors/scheduler/TerminationMonitor;Lscala/actors/Reactor;)V
const #370 = Method	#45.#369;	//  scala/actors/scheduler/TerminationMonitor$class.terminated:(Lscala/actors/scheduler/TerminationMonitor;Lscala/actors/Reactor;)V
const #371 = Asciz	Lscala/actors/Reactor;;
const #372 = Asciz	onTerminate;
const #373 = Asciz	(Lscala/actors/Reactor;Lscala/Function0;)V;
const #374 = Asciz	(Lscala/actors/scheduler/TerminationMonitor;Lscala/actors/Reactor;Lscala/Function0;)V;
const #375 = NameAndType	#372:#374;//  onTerminate:(Lscala/actors/scheduler/TerminationMonitor;Lscala/actors/Reactor;Lscala/Function0;)V
const #376 = Method	#45.#375;	//  scala/actors/scheduler/TerminationMonitor$class.onTerminate:(Lscala/actors/scheduler/TerminationMonitor;Lscala/actors/Reactor;Lscala/Function0;)V
const #377 = Asciz	f;
const #378 = Asciz	newActor;
const #379 = NameAndType	#378:#368;//  newActor:(Lscala/actors/scheduler/TerminationMonitor;Lscala/actors/Reactor;)V
const #380 = Method	#45.#379;	//  scala/actors/scheduler/TerminationMonitor$class.newActor:(Lscala/actors/scheduler/TerminationMonitor;Lscala/actors/Reactor;)V
const #381 = Asciz	scala$actors$scheduler$TerminationMonitor$_setter_$terminationHandlers_$eq;
const #382 = Asciz	(Lscala/collection/mutable/HashMap;)V;
const #383 = NameAndType	#5:#6;//  terminationHandlers:Lscala/collection/mutable/HashMap;
const #384 = Field	#26.#383;	//  scala/actors/scheduler/ForkJoinScheduler.terminationHandlers:Lscala/collection/mutable/HashMap;
const #385 = Asciz	scala$actors$scheduler$TerminationMonitor$$started_$eq;
const #386 = NameAndType	#3:#4;//  scala$actors$scheduler$TerminationMonitor$$started:Z
const #387 = Field	#26.#386;	//  scala/actors/scheduler/ForkJoinScheduler.scala$actors$scheduler$TerminationMonitor$$started:Z
const #388 = Asciz	()Lscala/collection/mutable/HashMap;;
const #389 = Asciz	activeActors_$eq;
const #390 = NameAndType	#7:#8;//  activeActors:I
const #391 = Field	#26.#390;	//  scala/actors/scheduler/ForkJoinScheduler.activeActors:I
const #392 = Asciz	ScalaSig;
const #393 = Asciz	InnerClasses;
const #394 = Asciz	$anon$1;
const #395 = Asciz	$anon$2;
const #396 = Asciz	$anon$3;
const #397 = Asciz	scala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;
const #398 = class	#397;	//  scala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker
const #399 = Asciz	ManagedBlocker;
const #400 = Asciz	java/lang/Runnable;
const #401 = class	#400;	//  java/lang/Runnable
const #402 = Asciz	scala/actors/IScheduler;
const #403 = class	#402;	//  scala/actors/IScheduler
const #404 = Asciz	scala/ScalaObject;
const #405 = class	#404;	//  scala/ScalaObject

{
public scala.actors.scheduler.ForkJoinScheduler(int, int, boolean);
  Code:
   Stack=2, Locals=4, Args_size=4
   0:	aload_0
   1:	iload_1
   2:	putfield	#28; //Field initCoreSize:I
   5:	aload_0
   6:	iload_2
   7:	putfield	#30; //Field maxSize:I
   10:	aload_0
   11:	iload_3
   12:	putfield	#32; //Field daemon:Z
   15:	aload_0
   16:	invokespecial	#37; //Method java/lang/Object."<init>":()V
   19:	aload_0
   20:	invokestatic	#43; //Method scala/actors/IScheduler$class.$init$:(Lscala/actors/IScheduler;)V
   23:	aload_0
   24:	invokestatic	#48; //Method scala/actors/scheduler/TerminationMonitor$class.$init$:(Lscala/actors/scheduler/TerminationMonitor;)V
   27:	aload_0
   28:	aload_0
   29:	invokespecial	#52; //Method makeNewPool:()Lscala/actors/scheduler/DrainableForkJoinPool;
   32:	putfield	#54; //Field pool:Lscala/actors/scheduler/DrainableForkJoinPool;
   35:	aload_0
   36:	iconst_0
   37:	putfield	#56; //Field terminating:Z
   40:	aload_0
   41:	iconst_0
   42:	putfield	#58; //Field snapshoting:Z
   45:	aload_0
   46:	aconst_null
   47:	putfield	#60; //Field drainedTasks:Ljava/util/Collection;
   50:	aload_0
   51:	ldc	#61; //int 10
   53:	putfield	#63; //Field CHECK_FREQ:I
   56:	return
  LineNumberTable: 
   line 12: 0
   line 14: 27
   line 15: 35
   line 16: 40
   line 20: 45
   line 22: 50

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      57      0    this       Lscala/actors/scheduler/ForkJoinScheduler;
   0      57      1    initCoreSize       I
   0      57      2    maxSize       I
   0      57      3    daemon       Z


public void restart();
  Code:
   Stack=3, Locals=4, Args_size=1
   0:	aload_0
   1:	dup
   2:	pop
   3:	monitorenter
   4:	aload_0
   5:	invokespecial	#80; //Method snapshoting:()Z
   8:	ifeq	88
   11:	aload_0
   12:	invokevirtual	#83; //Method isActive:()Z
   15:	ifeq	30
   18:	ldc	#85; //String scheduler is still active
   20:	astore_1
   21:	new	#87; //class java/lang/RuntimeException
   24:	dup
   25:	aload_1
   26:	invokespecial	#90; //Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
   29:	athrow
   30:	aload_0
   31:	iconst_0
   32:	invokespecial	#94; //Method snapshoting_$eq:(Z)V
   35:	aload_0
   36:	aload_0
   37:	invokespecial	#52; //Method makeNewPool:()Lscala/actors/scheduler/DrainableForkJoinPool;
   40:	invokespecial	#98; //Method pool_$eq:(Lscala/actors/scheduler/DrainableForkJoinPool;)V
   43:	aload_0
   44:	monitorexit
   45:	aload_0
   46:	invokespecial	#101; //Method drainedTasks:()Ljava/util/Collection;
   49:	invokeinterface	#107,  1; //InterfaceMethod java/util/Collection.iterator:()Ljava/util/Iterator;
   54:	astore_2
   55:	aload_2
   56:	invokeinterface	#112,  1; //InterfaceMethod java/util/Iterator.hasNext:()Z
   61:	ifeq	83
   64:	aload_0
   65:	invokespecial	#114; //Method pool:()Lscala/actors/scheduler/DrainableForkJoinPool;
   68:	aload_2
   69:	invokeinterface	#118,  1; //InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;
   74:	checkcast	#120; //class scala/concurrent/forkjoin/ForkJoinTask
   77:	invokevirtual	#126; //Method scala/actors/scheduler/DrainableForkJoinPool.execute:(Lscala/concurrent/forkjoin/ForkJoinTask;)V
   80:	goto	55
   83:	aload_0
   84:	invokevirtual	#129; //Method start:()V
   87:	return
   88:	ldc	#131; //String snapshot has not been invoked
   90:	astore_3
   91:	new	#87; //class java/lang/RuntimeException
   94:	dup
   95:	aload_3
   96:	invokespecial	#90; //Method java/lang/RuntimeException."<init>":(Ljava/lang/String;)V
   99:	athrow
   100:	aload_0
   101:	monitorexit
   102:	athrow
  Exception table:
   from   to  target type
     4    45   100   any
    88   100   100   any
  LineNumberTable: 
   line 153: 0
   line 154: 4
   line 156: 11
   line 157: 18
   line 159: 30
   line 161: 35
   line 153: 44
   line 163: 45
   line 164: 55
   line 165: 64
   line 167: 83
   line 155: 88
   line 153: 101

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      103      0    this       Lscala/actors/scheduler/ForkJoinScheduler;
   55      32      2    iter       Ljava/util/Iterator;


public void snapshot();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	aload_0
   1:	dup
   2:	pop
   3:	monitorenter
   4:	aload_0
   5:	iconst_1
   6:	invokespecial	#94; //Method snapshoting_$eq:(Z)V
   9:	aload_0
   10:	monitorexit
   11:	return
   12:	aload_0
   13:	monitorexit
   14:	athrow
  Exception table:
   from   to  target type
     4    11    12   any
  LineNumberTable: 
   line 145: 0
   line 146: 4
   line 145: 10


public void managedBlock(scala.concurrent.ManagedBlocker);
  Code:
   Stack=4, Locals=2, Args_size=2
   0:	new	#138; //class scala/actors/scheduler/ForkJoinScheduler$$anon$3
   3:	dup
   4:	aload_0
   5:	aload_1
   6:	invokespecial	#141; //Method scala/actors/scheduler/ForkJoinScheduler$$anon$3."<init>":(Lscala/actors/scheduler/ForkJoinScheduler;Lscala/concurrent/ManagedBlocker;)V
   9:	iconst_1
   10:	invokestatic	#146; //Method scala/concurrent/forkjoin/ForkJoinPool.managedBlock:(Lscala/concurrent/forkjoin/ForkJoinPool$ManagedBlocker;Z)V
   13:	return
  LineNumberTable: 
   line 136: 0
   line 139: 9
   line 136: 10

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      14      0    this       Lscala/actors/scheduler/ForkJoinScheduler;
   0      14      1    blocker$1       Lscala/concurrent/ManagedBlocker;


public boolean isActive();
  Code:
   Stack=2, Locals=2, Args_size=1
   0:	aload_0
   1:	dup
   2:	pop
   3:	monitorenter
   4:	aload_0
   5:	invokespecial	#150; //Method terminating:()Z
   8:	ifne	32
   11:	aload_0
   12:	invokespecial	#114; //Method pool:()Lscala/actors/scheduler/DrainableForkJoinPool;
   15:	ifnull	32
   18:	aload_0
   19:	invokespecial	#114; //Method pool:()Lscala/actors/scheduler/DrainableForkJoinPool;
   22:	invokevirtual	#153; //Method scala/actors/scheduler/DrainableForkJoinPool.isShutdown:()Z
   25:	ifne	32
   28:	iconst_1
   29:	goto	33
   32:	iconst_0
   33:	istore_1
   34:	aload_0
   35:	monitorexit
   36:	iload_1
   37:	ireturn
   38:	aload_0
   39:	monitorexit
   40:	athrow
  Exception table:
   from   to  target type
     4    36    38   any
  LineNumberTable: 
   line 131: 0
   line 132: 4
   line 131: 35


public void shutdown();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	aload_0
   1:	dup
   2:	pop
   3:	monitorenter
   4:	aload_0
   5:	iconst_1
   6:	invokespecial	#157; //Method terminating_$eq:(Z)V
   9:	aload_0
   10:	monitorexit
   11:	return
   12:	aload_0
   13:	monitorexit
   14:	athrow
  Exception table:
   from   to  target type
     4    11    12   any
  LineNumberTable: 
   line 127: 0
   line 128: 4
   line 127: 10


public void execute(scala.Function0);
  Code:
   Stack=5, Locals=2, Args_size=2
   0:	aload_0
   1:	new	#160; //class scala/actors/scheduler/ForkJoinScheduler$$anon$2
   4:	dup
   5:	aload_0
   6:	aload_1
   7:	invokespecial	#163; //Method scala/actors/scheduler/ForkJoinScheduler$$anon$2."<init>":(Lscala/actors/scheduler/ForkJoinScheduler;Lscala/Function0;)V
   10:	invokevirtual	#166; //Method execute:(Ljava/lang/Runnable;)V
   13:	return
  LineNumberTable: 
   line 121: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      14      0    this       Lscala/actors/scheduler/ForkJoinScheduler;
   0      14      1    fun$1       Lscala/Function0;

  Signature: length = 0x2
   00 FFFFFFA9 

public void executeFromActor(java.lang.Runnable);
  Code:
   Stack=4, Locals=3, Args_size=2
   0:	new	#172; //class scala/actors/scheduler/ForkJoinScheduler$$anon$1
   3:	dup
   4:	aload_0
   5:	aload_1
   6:	invokespecial	#175; //Method scala/actors/scheduler/ForkJoinScheduler$$anon$1."<init>":(Lscala/actors/scheduler/ForkJoinScheduler;Ljava/lang/Runnable;)V
   9:	astore_2
   10:	aload_2
   11:	invokevirtual	#180; //Method scala/concurrent/forkjoin/RecursiveAction.fork:()V
   14:	return
  LineNumberTable: 
   line 110: 0
   line 113: 10

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      15      0    this       Lscala/actors/scheduler/ForkJoinScheduler;
   0      15      1    task$1       Ljava/lang/Runnable;
   10      4      2    recAction       Lscala/concurrent/forkjoin/RecursiveAction;


public void execute(java.lang.Runnable);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	invokespecial	#114; //Method pool:()Lscala/actors/scheduler/DrainableForkJoinPool;
   4:	aload_1
   5:	invokevirtual	#185; //Method scala/actors/scheduler/DrainableForkJoinPool.execute:(Ljava/lang/Runnable;)V
   8:	return
  LineNumberTable: 
   line 105: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      9      0    this       Lscala/actors/scheduler/ForkJoinScheduler;
   0      9      1    task       Ljava/lang/Runnable;


public void run();
  Code:
   Stack=5, Locals=3, Args_size=1
   0:	aload_0
   1:	dup
   2:	pop
   3:	monitorenter
   4:	aload_0
   5:	invokespecial	#189; //Method liftedTree1$1:()V
   8:	aload_0
   9:	invokespecial	#150; //Method terminating:()Z
   12:	ifeq	23
   15:	new	#191; //class scala/actors/scheduler/QuitException
   18:	dup
   19:	invokespecial	#192; //Method scala/actors/scheduler/QuitException."<init>":()V
   22:	athrow
   23:	aload_0
   24:	invokeinterface	#197,  1; //InterfaceMethod scala/actors/scheduler/TerminationMonitor.allTerminated:()Z
   29:	ifeq	64
   32:	getstatic	#203; //Field scala/actors/Debug$.MODULE$:Lscala/actors/Debug$;
   35:	new	#205; //class scala/runtime/StringAdd
   38:	dup
   39:	aload_0
   40:	invokespecial	#208; //Method scala/runtime/StringAdd."<init>":(Ljava/lang/Object;)V
   43:	ldc	#210; //String : all actors terminated
   45:	invokevirtual	#214; //Method scala/runtime/StringAdd.$plus:(Ljava/lang/String;)Ljava/lang/String;
   48:	invokevirtual	#217; //Method scala/actors/Debug$.info:(Ljava/lang/String;)V
   51:	aload_0
   52:	iconst_1
   53:	invokespecial	#157; //Method terminating_$eq:(Z)V
   56:	new	#191; //class scala/actors/scheduler/QuitException
   59:	dup
   60:	invokespecial	#192; //Method scala/actors/scheduler/QuitException."<init>":()V
   63:	athrow
   64:	aload_0
   65:	invokespecial	#80; //Method snapshoting:()Z
   68:	ifeq	163
   71:	aload_0
   72:	invokespecial	#114; //Method pool:()Lscala/actors/scheduler/DrainableForkJoinPool;
   75:	invokevirtual	#220; //Method scala/actors/scheduler/DrainableForkJoinPool.isQuiescent:()Z
   78:	ifeq	160
   81:	new	#222; //class java/util/ArrayList
   84:	dup
   85:	invokespecial	#223; //Method java/util/ArrayList."<init>":()V
   88:	astore_2
   89:	aload_0
   90:	invokespecial	#114; //Method pool:()Lscala/actors/scheduler/DrainableForkJoinPool;
   93:	aload_2
   94:	invokevirtual	#227; //Method scala/actors/scheduler/DrainableForkJoinPool.drainTasksTo:(Ljava/util/Collection;)I
   97:	istore_1
   98:	getstatic	#203; //Field scala/actors/Debug$.MODULE$:Lscala/actors/Debug$;
   101:	new	#229; //class scala/collection/mutable/StringBuilder
   104:	dup
   105:	invokespecial	#230; //Method scala/collection/mutable/StringBuilder."<init>":()V
   108:	new	#205; //class scala/runtime/StringAdd
   111:	dup
   112:	aload_0
   113:	invokespecial	#208; //Method scala/runtime/StringAdd."<init>":(Ljava/lang/Object;)V
   116:	ldc	#232; //String : drained 
   118:	invokevirtual	#214; //Method scala/runtime/StringAdd.$plus:(Ljava/lang/String;)Ljava/lang/String;
   121:	invokevirtual	#236; //Method scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
   124:	iload_1
   125:	invokestatic	#242; //Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
   128:	invokevirtual	#236; //Method scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
   131:	ldc	#244; //String  tasks
   133:	invokevirtual	#236; //Method scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
   136:	invokevirtual	#248; //Method scala/collection/mutable/StringBuilder.toString:()Ljava/lang/String;
   139:	invokevirtual	#217; //Method scala/actors/Debug$.info:(Ljava/lang/String;)V
   142:	aload_0
   143:	aload_2
   144:	invokespecial	#252; //Method drainedTasks_$eq:(Ljava/util/Collection;)V
   147:	aload_0
   148:	iconst_1
   149:	invokespecial	#157; //Method terminating_$eq:(Z)V
   152:	new	#191; //class scala/actors/scheduler/QuitException
   155:	dup
   156:	invokespecial	#192; //Method scala/actors/scheduler/QuitException."<init>":()V
   159:	athrow
   160:	goto	169
   163:	aload_0
   164:	invokeinterface	#255,  1; //InterfaceMethod scala/actors/scheduler/TerminationMonitor.gc:()V
   169:	aload_0
   170:	monitorexit
   171:	goto	0
   174:	aload_0
   175:	monitorexit
   176:	athrow
   177:	pop
   178:	getstatic	#203; //Field scala/actors/Debug$.MODULE$:Lscala/actors/Debug$;
   181:	new	#205; //class scala/runtime/StringAdd
   184:	dup
   185:	aload_0
   186:	invokespecial	#208; //Method scala/runtime/StringAdd."<init>":(Ljava/lang/Object;)V
   189:	ldc_w	#257; //String : initiating shutdown...
   192:	invokevirtual	#214; //Method scala/runtime/StringAdd.$plus:(Ljava/lang/String;)Ljava/lang/String;
   195:	invokevirtual	#217; //Method scala/actors/Debug$.info:(Ljava/lang/String;)V
   198:	aload_0
   199:	invokespecial	#114; //Method pool:()Lscala/actors/scheduler/DrainableForkJoinPool;
   202:	invokevirtual	#220; //Method scala/actors/scheduler/DrainableForkJoinPool.isQuiescent:()Z
   205:	ifeq	216
   208:	aload_0
   209:	invokespecial	#114; //Method pool:()Lscala/actors/scheduler/DrainableForkJoinPool;
   212:	invokevirtual	#259; //Method scala/actors/scheduler/DrainableForkJoinPool.shutdown:()V
   215:	return
   216:	ldc2_w	#260; //long 10l
   219:	invokestatic	#266; //Method java/lang/Thread.sleep:(J)V
   222:	goto	198
   225:	pop
   226:	goto	198
  Exception table:
   from   to  target type
     4   174   174   any
   216   225   225   Class java/lang/InterruptedException

     0   177   177   Class scala/actors/scheduler/QuitException

  LineNumberTable: 
   line 60: 0
   line 61: 4
   line 67: 8
   line 68: 15
   line 70: 23
   line 71: 32
   line 72: 51
   line 73: 56
   line 76: 64
   line 78: 71
   line 79: 81
   line 80: 89
   line 81: 98
   line 82: 142
   line 83: 147
   line 84: 152
   line 78: 160
   line 77: 163
   line 91: 169
   line 60: 170
   line 91: 174
   line 60: 175
   line 91: 177
   line 90: 178
   line 91: 198
   line 98: 208
   line 58: 215
   line 93: 216
   line 95: 226

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      229      0    this       Lscala/actors/scheduler/ForkJoinScheduler;
   98      62      1    num       I
   89      71      2    list       Ljava/util/ArrayList;


public void start();
  Code:
   Stack=5, Locals=3, Args_size=1
   0:	new	#263; //class java/lang/Thread
   3:	dup
   4:	aload_0
   5:	invokespecial	#271; //Method java/lang/Thread."<init>":(Ljava/lang/Runnable;)V
   8:	astore_1
   9:	aload_1
   10:	aload_0
   11:	getfield	#32; //Field daemon:Z
   14:	invokevirtual	#274; //Method java/lang/Thread.setDaemon:(Z)V
   17:	aload_1
   18:	ldc_w	#276; //String ForkJoinScheduler
   21:	invokevirtual	#279; //Method java/lang/Thread.setName:(Ljava/lang/String;)V
   24:	aload_1
   25:	invokevirtual	#280; //Method java/lang/Thread.start:()V
   28:	goto	69
   31:	astore_2
   32:	getstatic	#203; //Field scala/actors/Debug$.MODULE$:Lscala/actors/Debug$;
   35:	new	#229; //class scala/collection/mutable/StringBuilder
   38:	dup
   39:	invokespecial	#230; //Method scala/collection/mutable/StringBuilder."<init>":()V
   42:	new	#205; //class scala/runtime/StringAdd
   45:	dup
   46:	aload_0
   47:	invokespecial	#208; //Method scala/runtime/StringAdd."<init>":(Ljava/lang/Object;)V
   50:	ldc_w	#282; //String : could not create scheduler thread: 
   53:	invokevirtual	#214; //Method scala/runtime/StringAdd.$plus:(Ljava/lang/String;)Ljava/lang/String;
   56:	invokevirtual	#236; //Method scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
   59:	aload_2
   60:	invokevirtual	#236; //Method scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
   63:	invokevirtual	#248; //Method scala/collection/mutable/StringBuilder.toString:()Ljava/lang/String;
   66:	invokevirtual	#217; //Method scala/actors/Debug$.info:(Ljava/lang/String;)V
   69:	return
  Exception table:
   from   to  target type
     0    31    31   Class java/lang/Exception

  LineNumberTable: 
   line 47: 0
   line 50: 9
   line 48: 10
   line 49: 17
   line 50: 24
   line 52: 31
   line 53: 32
   line 46: 69

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      70      0    this       Lscala/actors/scheduler/ForkJoinScheduler;
   9      19      1    t       Ljava/lang/Thread;


public scala.actors.scheduler.ForkJoinScheduler();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	aload_0
   1:	iconst_0
   2:	invokespecial	#324; //Method "<init>":(Z)V
   5:	return
  LineNumberTable: 
   line 29: 0


public scala.actors.scheduler.ForkJoinScheduler(boolean);
  Code:
   Stack=4, Locals=2, Args_size=2
   0:	aload_0
   1:	getstatic	#329; //Field scala/actors/scheduler/ThreadPoolConfig$.MODULE$:Lscala/actors/scheduler/ThreadPoolConfig$;
   4:	invokevirtual	#332; //Method scala/actors/scheduler/ThreadPoolConfig$.corePoolSize:()I
   7:	getstatic	#329; //Field scala/actors/scheduler/ThreadPoolConfig$.MODULE$:Lscala/actors/scheduler/ThreadPoolConfig$;
   10:	invokevirtual	#335; //Method scala/actors/scheduler/ThreadPoolConfig$.maxPoolSize:()I
   13:	iload_1
   14:	invokespecial	#337; //Method "<init>":(IIZ)V
   17:	return
  LineNumberTable: 
   line 25: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      18      0    this       Lscala/actors/scheduler/ForkJoinScheduler;
   0      18      1    d       Z


public int CHECK_FREQ();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#63; //Field CHECK_FREQ:I
   4:	ireturn
  LineNumberTable: 
   line 22: 0


public int maxSize();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#30; //Field maxSize:I
   4:	ireturn
  LineNumberTable: 
   line 12: 0


public int initCoreSize();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#28; //Field initCoreSize:I
   4:	ireturn
  LineNumberTable: 
   line 12: 0


public void printActorDump();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokestatic	#343; //Method scala/actors/IScheduler$class.printActorDump:(Lscala/actors/IScheduler;)V
   4:	return
  LineNumberTable: 
   line 12: 0


public void onLockup(int, scala.Function0);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	iload_1
   2:	aload_2
   3:	invokestatic	#348; //Method scala/actors/IScheduler$class.onLockup:(Lscala/actors/IScheduler;ILscala/Function0;)V
   6:	return
  LineNumberTable: 
   line 12: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/actors/scheduler/ForkJoinScheduler;
   0      7      1    millis       I
   0      7      2    handler       Lscala/Function0;


public void onLockup(scala.Function0);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#353; //Method scala/actors/IScheduler$class.onLockup:(Lscala/actors/IScheduler;Lscala/Function0;)V
   5:	return
  LineNumberTable: 
   line 12: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/actors/scheduler/ForkJoinScheduler;
   0      6      1    handler       Lscala/Function0;


public void tick(scala.actors.Actor);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#358; //Method scala/actors/IScheduler$class.tick:(Lscala/actors/IScheduler;Lscala/actors/Actor;)V
   5:	return
  LineNumberTable: 
   line 12: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/actors/scheduler/ForkJoinScheduler;
   0      6      1    a       Lscala/actors/Actor;


public void gc();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokestatic	#362; //Method scala/actors/scheduler/TerminationMonitor$class.gc:(Lscala/actors/scheduler/TerminationMonitor;)V
   4:	return
  LineNumberTable: 
   line 12: 0


public boolean allTerminated();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokestatic	#365; //Method scala/actors/scheduler/TerminationMonitor$class.allTerminated:(Lscala/actors/scheduler/TerminationMonitor;)Z
   4:	ireturn
  LineNumberTable: 
   line 12: 0


public void terminated(scala.actors.Reactor);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#370; //Method scala/actors/scheduler/TerminationMonitor$class.terminated:(Lscala/actors/scheduler/TerminationMonitor;Lscala/actors/Reactor;)V
   5:	return
  LineNumberTable: 
   line 12: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/actors/scheduler/ForkJoinScheduler;
   0      6      1    a       Lscala/actors/Reactor;


public void onTerminate(scala.actors.Reactor, scala.Function0);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokestatic	#376; //Method scala/actors/scheduler/TerminationMonitor$class.onTerminate:(Lscala/actors/scheduler/TerminationMonitor;Lscala/actors/Reactor;Lscala/Function0;)V
   6:	return
  LineNumberTable: 
   line 12: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/actors/scheduler/ForkJoinScheduler;
   0      7      1    a       Lscala/actors/Reactor;
   0      7      2    f       Lscala/Function0;


public void newActor(scala.actors.Reactor);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#380; //Method scala/actors/scheduler/TerminationMonitor$class.newActor:(Lscala/actors/scheduler/TerminationMonitor;Lscala/actors/Reactor;)V
   5:	return
  LineNumberTable: 
   line 12: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/actors/scheduler/ForkJoinScheduler;
   0      6      1    a       Lscala/actors/Reactor;


public void scala$actors$scheduler$TerminationMonitor$_setter_$terminationHandlers_$eq(scala.collection.mutable.HashMap);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	putfield	#384; //Field terminationHandlers:Lscala/collection/mutable/HashMap;
   5:	return
  LineNumberTable: 
   line 12: 0


public final void scala$actors$scheduler$TerminationMonitor$$started_$eq(boolean);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	iload_1
   2:	putfield	#387; //Field scala$actors$scheduler$TerminationMonitor$$started:Z
   5:	return
  LineNumberTable: 
   line 12: 0


public final boolean scala$actors$scheduler$TerminationMonitor$$started();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#387; //Field scala$actors$scheduler$TerminationMonitor$$started:Z
   4:	ireturn
  LineNumberTable: 
   line 12: 0


public scala.collection.mutable.HashMap terminationHandlers();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#384; //Field terminationHandlers:Lscala/collection/mutable/HashMap;
   4:	areturn
  LineNumberTable: 
   line 12: 0


public void activeActors_$eq(int);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	iload_1
   2:	putfield	#391; //Field activeActors:I
   5:	return
  LineNumberTable: 
   line 12: 0


public int activeActors();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#391; //Field activeActors:I
   4:	ireturn
  LineNumberTable: 
   line 12: 0


}

