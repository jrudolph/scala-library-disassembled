Compiled from "ThreadPoolConfig.scala"
public final class scala.actors.scheduler.ThreadPoolConfig$ extends java.lang.Object implements scala.ScalaObject
  SourceFile: "ThreadPoolConfig.scala"
  Scala: length = 0x
   
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	ThreadPoolConfig.scala;
const #3 = Asciz	Scala;
const #4 = Asciz	MODULE$;
const #5 = Asciz	Lscala/actors/scheduler/ThreadPoolConfig$;;
const #6 = Asciz	<clinit>;
const #7 = Asciz	()V;
const #8 = Asciz	Code;
const #9 = Asciz	scala/actors/scheduler/ThreadPoolConfig$;
const #10 = class	#9;	//  scala/actors/scheduler/ThreadPoolConfig$
const #11 = Asciz	<init>;
const #12 = NameAndType	#11:#7;//  "<init>":()V
const #13 = Method	#10.#12;	//  scala/actors/scheduler/ThreadPoolConfig$."<init>":()V
const #14 = Asciz	maxPoolSize;
const #15 = Asciz	I;
const #16 = Asciz	corePoolSize;
const #17 = Asciz	minNumThreads;
const #18 = Asciz	rt;
const #19 = Asciz	Ljava/lang/Runtime;;
const #20 = Asciz	LineNumberTable;
const #21 = Asciz	java/lang/Object;
const #22 = class	#21;	//  java/lang/Object
const #23 = Method	#22.#12;	//  java/lang/Object."<init>":()V
const #24 = NameAndType	#4:#5;//  MODULE$:Lscala/actors/scheduler/ThreadPoolConfig$;
const #25 = Field	#10.#24;	//  scala/actors/scheduler/ThreadPoolConfig$.MODULE$:Lscala/actors/scheduler/ThreadPoolConfig$;
const #26 = Asciz	java/lang/Runtime;
const #27 = class	#26;	//  java/lang/Runtime
const #28 = Asciz	getRuntime;
const #29 = Asciz	()Ljava/lang/Runtime;;
const #30 = NameAndType	#28:#29;//  getRuntime:()Ljava/lang/Runtime;
const #31 = Method	#27.#30;	//  java/lang/Runtime.getRuntime:()Ljava/lang/Runtime;
const #32 = NameAndType	#18:#19;//  rt:Ljava/lang/Runtime;
const #33 = Field	#10.#32;	//  scala/actors/scheduler/ThreadPoolConfig$.rt:Ljava/lang/Runtime;
const #34 = NameAndType	#17:#15;//  minNumThreads:I
const #35 = Field	#10.#34;	//  scala/actors/scheduler/ThreadPoolConfig$.minNumThreads:I
const #36 = Asciz	actors.corePoolSize;
const #37 = String	#36;	//  actors.corePoolSize
const #38 = Asciz	getIntegerProp;
const #39 = Asciz	(Ljava/lang/String;)Lscala/Option;;
const #40 = NameAndType	#38:#39;//  getIntegerProp:(Ljava/lang/String;)Lscala/Option;
const #41 = Method	#10.#40;	//  scala/actors/scheduler/ThreadPoolConfig$.getIntegerProp:(Ljava/lang/String;)Lscala/Option;
const #42 = Asciz	scala/Some;
const #43 = class	#42;	//  scala/Some
const #44 = Asciz	x;
const #45 = Asciz	()Ljava/lang/Object;;
const #46 = NameAndType	#44:#45;//  x:()Ljava/lang/Object;
const #47 = Method	#43.#46;	//  scala/Some.x:()Ljava/lang/Object;
const #48 = Asciz	scala/runtime/BoxesRunTime;
const #49 = class	#48;	//  scala/runtime/BoxesRunTime
const #50 = Asciz	unboxToInt;
const #51 = Asciz	(Ljava/lang/Object;)I;
const #52 = NameAndType	#50:#51;//  unboxToInt:(Ljava/lang/Object;)I
const #53 = Method	#49.#52;	//  scala/runtime/BoxesRunTime.unboxToInt:(Ljava/lang/Object;)I
const #54 = Asciz	gd1$1;
const #55 = Asciz	(I)Z;
const #56 = NameAndType	#54:#55;//  gd1$1:(I)Z
const #57 = Method	#10.#56;	//  scala/actors/scheduler/ThreadPoolConfig$.gd1$1:(I)Z
const #58 = Asciz	scala/MatchError;
const #59 = class	#58;	//  scala/MatchError
const #60 = Asciz	scala/Option;
const #61 = class	#60;	//  scala/Option
const #62 = Asciz	toString;
const #63 = Asciz	()Ljava/lang/String;;
const #64 = NameAndType	#62:#63;//  toString:()Ljava/lang/String;
const #65 = Method	#61.#64;	//  scala/Option.toString:()Ljava/lang/String;
const #66 = Asciz	(Ljava/lang/String;)V;
const #67 = NameAndType	#11:#66;//  "<init>":(Ljava/lang/String;)V
const #68 = Method	#59.#67;	//  scala/MatchError."<init>":(Ljava/lang/String;)V
const #69 = NameAndType	#18:#29;//  rt:()Ljava/lang/Runtime;
const #70 = Method	#10.#69;	//  scala/actors/scheduler/ThreadPoolConfig$.rt:()Ljava/lang/Runtime;
const #71 = Asciz	availableProcessors;
const #72 = Asciz	()I;
const #73 = NameAndType	#71:#72;//  availableProcessors:()I
const #74 = Method	#27.#73;	//  java/lang/Runtime.availableProcessors:()I
const #75 = NameAndType	#17:#72;//  minNumThreads:()I
const #76 = Method	#10.#75;	//  scala/actors/scheduler/ThreadPoolConfig$.minNumThreads:()I
const #77 = NameAndType	#16:#15;//  corePoolSize:I
const #78 = Field	#10.#77;	//  scala/actors/scheduler/ThreadPoolConfig$.corePoolSize:I
const #79 = Asciz	actors.maxPoolSize;
const #80 = String	#79;	//  actors.maxPoolSize
const #81 = Asciz	gd2$1;
const #82 = NameAndType	#81:#55;//  gd2$1:(I)Z
const #83 = Method	#10.#82;	//  scala/actors/scheduler/ThreadPoolConfig$.gd2$1:(I)Z
const #84 = Asciz	gd3$1;
const #85 = NameAndType	#84:#55;//  gd3$1:(I)Z
const #86 = Method	#10.#85;	//  scala/actors/scheduler/ThreadPoolConfig$.gd3$1:(I)Z
const #87 = NameAndType	#16:#72;//  corePoolSize:()I
const #88 = Method	#10.#87;	//  scala/actors/scheduler/ThreadPoolConfig$.corePoolSize:()I
const #89 = int	256;
const #90 = NameAndType	#14:#15;//  maxPoolSize:I
const #91 = Field	#10.#90;	//  scala/actors/scheduler/ThreadPoolConfig$.maxPoolSize:I
const #92 = Asciz	this;
const #93 = Asciz	temp2;
const #94 = Asciz	Lscala/Some;;
const #95 = Asciz	temp3;
const #96 = Asciz	byCores;
const #97 = Asciz	temp5;
const #98 = Asciz	temp6;
const #99 = Asciz	temp4;
const #100 = Asciz	Lscala/Option;;
const #101 = Asciz	temp1;
const #102 = Asciz	LocalVariableTable;
const #103 = Asciz	useForkJoin;
const #104 = Asciz	()Z;
const #105 = Asciz	actors.enableForkJoin;
const #106 = String	#105;	//  actors.enableForkJoin
const #107 = Asciz	java/lang/System;
const #108 = class	#107;	//  java/lang/System
const #109 = Asciz	getProperty;
const #110 = Asciz	(Ljava/lang/String;)Ljava/lang/String;;
const #111 = NameAndType	#109:#110;//  getProperty:(Ljava/lang/String;)Ljava/lang/String;
const #112 = Method	#108.#111;	//  java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
const #113 = Asciz	equals;
const #114 = Asciz	(Ljava/lang/Object;)Z;
const #115 = NameAndType	#113:#114;//  equals:(Ljava/lang/Object;)Z
const #116 = Method	#22.#115;	//  java/lang/Object.equals:(Ljava/lang/Object;)Z
const #117 = Asciz	java.version;
const #118 = String	#117;	//  java.version
const #119 = Asciz	java.vm.vendor;
const #120 = String	#119;	//  java.vm.vendor
const #121 = Asciz	scala/actors/Debug$;
const #122 = class	#121;	//  scala/actors/Debug$
const #123 = Asciz	Lscala/actors/Debug$;;
const #124 = NameAndType	#4:#123;//  MODULE$:Lscala/actors/Debug$;
const #125 = Field	#122.#124;	//  scala/actors/Debug$.MODULE$:Lscala/actors/Debug$;
const #126 = Asciz	scala/collection/mutable/StringBuilder;
const #127 = class	#126;	//  scala/collection/mutable/StringBuilder
const #128 = Method	#127.#12;	//  scala/collection/mutable/StringBuilder."<init>":()V
const #129 = Asciz	scala/runtime/StringAdd;
const #130 = class	#129;	//  scala/runtime/StringAdd
const #131 = Asciz	(Ljava/lang/Object;)V;
const #132 = NameAndType	#11:#131;//  "<init>":(Ljava/lang/Object;)V
const #133 = Method	#130.#132;	//  scala/runtime/StringAdd."<init>":(Ljava/lang/Object;)V
const #134 = Asciz	: java.version = ;
const #135 = String	#134;	//  : java.version = 
const #136 = Asciz	$plus;
const #137 = NameAndType	#136:#110;//  $plus:(Ljava/lang/String;)Ljava/lang/String;
const #138 = Method	#130.#137;	//  scala/runtime/StringAdd.$plus:(Ljava/lang/String;)Ljava/lang/String;
const #139 = Asciz	append;
const #140 = Asciz	(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;;
const #141 = NameAndType	#139:#140;//  append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
const #142 = Method	#127.#141;	//  scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
const #143 = Method	#127.#64;	//  scala/collection/mutable/StringBuilder.toString:()Ljava/lang/String;
const #144 = Asciz	info;
const #145 = NameAndType	#144:#66;//  info:(Ljava/lang/String;)V
const #146 = Method	#122.#145;	//  scala/actors/Debug$.info:(Ljava/lang/String;)V
const #147 = Asciz	: java.vm.vendor = ;
const #148 = String	#147;	//  : java.vm.vendor = 
const #149 = Asciz	1.6;
const #150 = String	#149;	//  1.6
const #151 = Asciz	java/lang/String;
const #152 = class	#151;	//  java/lang/String
const #153 = Asciz	indexOf;
const #154 = Asciz	(Ljava/lang/String;)I;
const #155 = NameAndType	#153:#154;//  indexOf:(Ljava/lang/String;)I
const #156 = Method	#152.#155;	//  java/lang/String.indexOf:(Ljava/lang/String;)I
const #157 = Asciz	1.7;
const #158 = String	#157;	//  1.7
const #159 = Asciz	Sun;
const #160 = String	#159;	//  Sun
const #161 = Asciz	true;
const #162 = String	#161;	//  true
const #163 = Method	#152.#115;	//  java/lang/String.equals:(Ljava/lang/Object;)Z
const #164 = Asciz	java/lang/SecurityException;
const #165 = class	#164;	//  java/lang/SecurityException
const #166 = Asciz	javaVersion;
const #167 = Asciz	Ljava/lang/String;;
const #168 = Asciz	jvmVendor;
const #169 = Asciz	fjProp;
const #170 = Asciz	exceptionResult2;
const #171 = Asciz	Z;
const #172 = Asciz	java/lang/Integer;
const #173 = class	#172;	//  java/lang/Integer
const #174 = Asciz	parseInt;
const #175 = NameAndType	#174:#154;//  parseInt:(Ljava/lang/String;)I
const #176 = Method	#173.#175;	//  java/lang/Integer.parseInt:(Ljava/lang/String;)I
const #177 = Asciz	boxToInteger;
const #178 = Asciz	(I)Ljava/lang/Integer;;
const #179 = NameAndType	#177:#178;//  boxToInteger:(I)Ljava/lang/Integer;
const #180 = Method	#49.#179;	//  scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;
const #181 = Method	#43.#132;	//  scala/Some."<init>":(Ljava/lang/Object;)V
const #182 = Asciz	scala/None$;
const #183 = class	#182;	//  scala/None$
const #184 = Asciz	Lscala/None$;;
const #185 = NameAndType	#4:#184;//  MODULE$:Lscala/None$;
const #186 = Field	#183.#185;	//  scala/None$.MODULE$:Lscala/None$;
const #187 = Asciz	java/security/AccessControlException;
const #188 = class	#187;	//  java/security/AccessControlException
const #189 = Asciz	java/lang/NumberFormatException;
const #190 = class	#189;	//  java/lang/NumberFormatException
const #191 = Asciz	propName;
const #192 = Asciz	prop;
const #193 = Asciz	exceptionResult1;
const #194 = Asciz	(Ljava/lang/String;)Lscala/Option<Ljava/lang/Integer;>;;
const #195 = Asciz	Signature;
const #196 = Asciz	scala/ScalaObject;
const #197 = class	#196;	//  scala/ScalaObject

{
public static final scala.actors.scheduler.ThreadPoolConfig$ MODULE$;

public static {};
  Code:
   Stack=1, Locals=0, Args_size=0
   0:	new	#10; //class scala/actors/scheduler/ThreadPoolConfig$
   3:	invokespecial	#13; //Method "<init>":()V
   6:	return

public boolean useForkJoin();
  Code:
   Stack=5, Locals=5, Args_size=1
   0:	ldc	#106; //String actors.enableForkJoin
   2:	invokestatic	#112; //Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
   5:	astore_3
   6:	aload_3
   7:	dup
   8:	pop
   9:	ifnull	20
   12:	aload_3
   13:	aconst_null
   14:	invokevirtual	#116; //Method java/lang/Object.equals:(Ljava/lang/Object;)Z
   17:	ifeq	142
   20:	ldc	#118; //String java.version
   22:	invokestatic	#112; //Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
   25:	astore_1
   26:	ldc	#120; //String java.vm.vendor
   28:	invokestatic	#112; //Method java/lang/System.getProperty:(Ljava/lang/String;)Ljava/lang/String;
   31:	astore_2
   32:	getstatic	#125; //Field scala/actors/Debug$.MODULE$:Lscala/actors/Debug$;
   35:	new	#127; //class scala/collection/mutable/StringBuilder
   38:	dup
   39:	invokespecial	#128; //Method scala/collection/mutable/StringBuilder."<init>":()V
   42:	new	#130; //class scala/runtime/StringAdd
   45:	dup
   46:	aload_0
   47:	invokespecial	#133; //Method scala/runtime/StringAdd."<init>":(Ljava/lang/Object;)V
   50:	ldc	#135; //String : java.version = 
   52:	invokevirtual	#138; //Method scala/runtime/StringAdd.$plus:(Ljava/lang/String;)Ljava/lang/String;
   55:	invokevirtual	#142; //Method scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
   58:	aload_1
   59:	invokevirtual	#142; //Method scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
   62:	invokevirtual	#143; //Method scala/collection/mutable/StringBuilder.toString:()Ljava/lang/String;
   65:	invokevirtual	#146; //Method scala/actors/Debug$.info:(Ljava/lang/String;)V
   68:	getstatic	#125; //Field scala/actors/Debug$.MODULE$:Lscala/actors/Debug$;
   71:	new	#127; //class scala/collection/mutable/StringBuilder
   74:	dup
   75:	invokespecial	#128; //Method scala/collection/mutable/StringBuilder."<init>":()V
   78:	new	#130; //class scala/runtime/StringAdd
   81:	dup
   82:	aload_0
   83:	invokespecial	#133; //Method scala/runtime/StringAdd."<init>":(Ljava/lang/Object;)V
   86:	ldc	#148; //String : java.vm.vendor = 
   88:	invokevirtual	#138; //Method scala/runtime/StringAdd.$plus:(Ljava/lang/String;)Ljava/lang/String;
   91:	invokevirtual	#142; //Method scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
   94:	aload_2
   95:	invokevirtual	#142; //Method scala/collection/mutable/StringBuilder.append:(Ljava/lang/Object;)Lscala/collection/mutable/StringBuilder;
   98:	invokevirtual	#143; //Method scala/collection/mutable/StringBuilder.toString:()Ljava/lang/String;
   101:	invokevirtual	#146; //Method scala/actors/Debug$.info:(Ljava/lang/String;)V
   104:	aload_1
   105:	ldc	#150; //String 1.6
   107:	invokevirtual	#156; //Method java/lang/String.indexOf:(Ljava/lang/String;)I
   110:	iconst_m1
   111:	if_icmpne	124
   114:	aload_1
   115:	ldc	#158; //String 1.7
   117:	invokevirtual	#156; //Method java/lang/String.indexOf:(Ljava/lang/String;)I
   120:	iconst_m1
   121:	if_icmpeq	138
   124:	aload_2
   125:	ldc	#160; //String Sun
   127:	invokevirtual	#156; //Method java/lang/String.indexOf:(Ljava/lang/String;)I
   130:	iconst_m1
   131:	if_icmpeq	138
   134:	iconst_1
   135:	goto	148
   138:	iconst_0
   139:	goto	148
   142:	aload_3
   143:	ldc	#162; //String true
   145:	invokevirtual	#163; //Method java/lang/String.equals:(Ljava/lang/Object;)Z
   148:	istore	4
   150:	goto	157
   153:	pop
   154:	iconst_0
   155:	istore	4
   157:	iload	4
   159:	ireturn
  Exception table:
   from   to  target type
     0   153   153   Class java/lang/SecurityException

  LineNumberTable: 
   line 47: 0
   line 48: 6
   line 51: 20
   line 52: 26
   line 53: 32
   line 54: 68
   line 55: 104
   line 56: 114
   line 58: 124
   line 56: 134
   line 49: 142
   line 61: 154

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      160      0    this       Lscala/actors/scheduler/ThreadPoolConfig$;
   26      116      1    javaVersion       Ljava/lang/String;
   32      110      2    jvmVendor       Ljava/lang/String;
   6      147      3    fjProp       Ljava/lang/String;
   0      159      4    exceptionResult2       Z


public int maxPoolSize();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#91; //Field maxPoolSize:I
   4:	ireturn
  LineNumberTable: 
   line 39: 0


public int corePoolSize();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#78; //Field corePoolSize:I
   4:	ireturn
  LineNumberTable: 
   line 31: 0


}

