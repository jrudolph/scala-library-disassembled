Compiled from "ThreadPoolScheduler.scala"
public class scala.actors.scheduler.ThreadPoolScheduler extends java.lang.Thread implements scala.actors.scheduler.TerminationMonitor,scala.actors.scheduler.ExecutorScheduler,scala.ScalaObject
  SourceFile: "ThreadPoolScheduler.scala"
  ScalaSig: length = 0x31F
   05 00 6C 06 08 01 02 FFFFFF84 FFFFFF80 FFFFFF80 FFFFFF80 00 09 02 13 54
   68 72 65 61 64 50 6F 6F 6C 53 63 68 65 64 75 6C
   65 72 0A 02 03 04 01 09 73 63 68 65 64 75 6C 65
   72 0A 02 05 06 01 06 61 63 74 6F 72 73 0A 01 07
   01 05 73 63 61 6C 61 03 00 13 05 00 0A 12 16 19
   10 02 0B 10 0D 01 0C 0A 02 0D 0E 01 04 6C 61 6E
   67 0A 01 0F 01 04 6A 61 76 61 09 02 11 0C 02 06
   54 68 72 65 61 64 10 02 13 14 0D 01 02 09 02 15
   02 02 12 54 65 72 6D 69 6E 61 74 69 6F 6E 4D 6F
   6E 69 74 6F 72 10 02 13 17 09 02 18 02 02 11 45
   78 65 63 75 74 6F 72 53 63 68 65 64 75 6C 65 72
   10 02 1A 1B 0D 01 06 09 02 1C 06 02 0B 53 63 61
   6C 61 4F 62 6A 65 63 74 08 08 1E 00 FFFFFF82 FFFFFFC0 FFFFFF80 FFFFFF84
   08 1F 01 08 65 78 65 63 75 74 6F 72 15 01 20 10
   02 21 26 0D 01 22 0A 02 23 24 01 0A 63 6F 6E 63
   75 72 72 65 6E 74 0A 02 25 0E 01 04 75 74 69 6C
   09 02 27 22 02 12 54 68 72 65 61 64 50 6F 6F 6C
   45 78 65 63 75 74 6F 72 08 08 29 00 FFFFFF82 FFFFFFC0 FFFFFF80 FFFFFF84
   08 2A 01 0C 65 78 65 63 75 74 6F 72 5F 24 65 71
   14 02 2B 2E 10 02 1A 2C 09 02 2D 06 02 04 55 6E
   69 74 08 07 2F 28 FFFFFF81 FFFFFF80 FFFFFFC0 00 20 01 03 78 24 31
   08 08 31 00 FFFFFF82 FFFFFF80 FFFFFFA0 FFFFFFA0 04 20 01 09 65 78 65 63
   75 74 6F 72 20 08 08 33 00 FFFFFF82 FFFFFFC0 FFFFFF80 FFFFFF84 08 34 01
   09 74 65 72 6D 69 6E 61 74 65 15 01 35 10 02 1A
   36 09 02 37 06 02 07 42 6F 6F 6C 65 61 6E 08 08
   39 00 FFFFFF82 FFFFFFC0 FFFFFF80 FFFFFF84 08 3A 01 0D 74 65 72 6D 69 6E
   61 74 65 5F 24 65 71 14 02 2B 3B 08 07 2F 38 FFFFFF81
   FFFFFF80 FFFFFFC0 00 35 08 08 3D 00 FFFFFF82 FFFFFF80 FFFFFFA0 FFFFFFA0 04 35 01 0A
   74 65 72 6D 69 6E 61 74 65 20 08 05 3F 00 FFFFFF84 00
   40 01 06 3C 69 6E 69 74 3E 14 03 41 42 43 10 02
   13 00 08 05 1E 3E FFFFFFC0 00 20 08 05 33 3E FFFFFFC0 00 35
   08 07 45 00 FFFFFFC0 FFFFFF80 FFFFFF84 04 34 01 0B 74 65 72 6D 69
   6E 61 74 69 6E 67 08 07 47 00 FFFFFFC0 FFFFFF80 FFFFFF84 04 48 01
   0F 74 65 72 6D 69 6E 61 74 69 6E 67 5F 24 65 71
   14 02 2B 49 08 07 2F 46 FFFFFF81 FFFFFF80 FFFFFFC0 00 35 08 06 4B
   00 FFFFFFA0 FFFFFFA0 04 35 01 0C 74 65 72 6D 69 6E 61 74 69
   6E 67 20 08 07 4D 00 FFFFFFC2 FFFFFF80 FFFFFF84 08 4E 01 0A 43 48
   45 43 4B 5F 46 52 45 51 15 01 4F 10 02 1A 50 09
   02 51 06 02 03 49 6E 74 08 06 53 00 FFFFFFA0 FFFFFF80 04 4F
   01 0B 43 48 45 43 4B 5F 46 52 45 51 20 08 05 3F
   00 FFFFFF84 00 55 14 01 41 08 05 57 00 FFFFFF84 20 58 01 0C
   6D 61 6E 61 67 65 64 42 6C 6F 63 6B 14 02 2B 59
   08 05 5A 56 FFFFFFC0 00 5B 01 07 62 6C 6F 63 6B 65 72
   10 02 5C 5D 0D 01 04 09 02 5E 04 02 0E 4D 61 6E
   61 67 65 64 42 6C 6F 63 6B 65 72 08 05 60 00 FFFFFF84
   20 61 01 03 72 75 6E 14 01 2B 08 05 63 00 FFFFFF84 00
   64 01 07 65 78 65 63 75 74 65 14 02 2B 65 08 06
   66 62 FFFFFF84 FFFFFFC0 00 67 01 03 66 75 6E 10 03 1A 68 2B
   09 02 69 06 02 08 3C 62 79 6E 61 6D 65 3E 08 05
   6B 00 FFFFFF84 00 61 01 08 73 68 75 74 64 6F 77 6E 
  InnerClass: 
   public final #225= #91 of #19; //$anon$1=class scala/actors/scheduler/ThreadPoolScheduler$$anon$1 of class scala/actors/scheduler/ThreadPoolScheduler
   public abstract #228= #168 of #227; //ManagedBlocker=class scala/actors/forkjoin/ForkJoinPool$ManagedBlocker of class scala/actors/forkjoin/ForkJoinPool
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	ThreadPoolScheduler.scala;
const #3 = Asciz	scala$actors$scheduler$TerminationMonitor$$started;
const #4 = Asciz	Z;
const #5 = Asciz	scala$actors$scheduler$TerminationMonitor$$termHandlers;
const #6 = Asciz	Lscala/collection/mutable/HashMap;;
const #7 = Asciz	scala$actors$scheduler$TerminationMonitor$$pendingReactions;
const #8 = Asciz	I;
const #9 = Asciz	CHECK_FREQ;
const #10 = Asciz	terminating;
const #11 = Asciz	terminate;
const #12 = Asciz	executor;
const #13 = Asciz	Ljava/util/concurrent/ThreadPoolExecutor;;
const #14 = Asciz	<init>;
const #15 = Asciz	(Ljava/util/concurrent/ThreadPoolExecutor;Z)V;
const #16 = Asciz	Code;
const #17 = Asciz	LineNumberTable;
const #18 = Asciz	scala/actors/scheduler/ThreadPoolScheduler;
const #19 = class	#18;	//  scala/actors/scheduler/ThreadPoolScheduler
const #20 = NameAndType	#12:#13;//  executor:Ljava/util/concurrent/ThreadPoolExecutor;
const #21 = Field	#19.#20;	//  scala/actors/scheduler/ThreadPoolScheduler.executor:Ljava/util/concurrent/ThreadPoolExecutor;
const #22 = NameAndType	#11:#4;//  terminate:Z
const #23 = Field	#19.#22;	//  scala/actors/scheduler/ThreadPoolScheduler.terminate:Z
const #24 = Asciz	java/lang/Thread;
const #25 = class	#24;	//  java/lang/Thread
const #26 = Asciz	()V;
const #27 = NameAndType	#14:#26;//  "<init>":()V
const #28 = Method	#25.#27;	//  java/lang/Thread."<init>":()V
const #29 = Asciz	scala/actors/scheduler/TerminationMonitor$class;
const #30 = class	#29;	//  scala/actors/scheduler/TerminationMonitor$class
const #31 = Asciz	$init$;
const #32 = Asciz	(Lscala/actors/scheduler/TerminationMonitor;)V;
const #33 = NameAndType	#31:#32;//  $init$:(Lscala/actors/scheduler/TerminationMonitor;)V
const #34 = Method	#30.#33;	//  scala/actors/scheduler/TerminationMonitor$class.$init$:(Lscala/actors/scheduler/TerminationMonitor;)V
const #35 = Asciz	scala/actors/IScheduler$class;
const #36 = class	#35;	//  scala/actors/IScheduler$class
const #37 = Asciz	(Lscala/actors/IScheduler;)V;
const #38 = NameAndType	#31:#37;//  $init$:(Lscala/actors/IScheduler;)V
const #39 = Method	#36.#38;	//  scala/actors/IScheduler$class.$init$:(Lscala/actors/IScheduler;)V
const #40 = Asciz	scala/actors/scheduler/ExecutorScheduler$class;
const #41 = class	#40;	//  scala/actors/scheduler/ExecutorScheduler$class
const #42 = Asciz	(Lscala/actors/scheduler/ExecutorScheduler;)V;
const #43 = NameAndType	#31:#42;//  $init$:(Lscala/actors/scheduler/ExecutorScheduler;)V
const #44 = Method	#41.#43;	//  scala/actors/scheduler/ExecutorScheduler$class.$init$:(Lscala/actors/scheduler/ExecutorScheduler;)V
const #45 = NameAndType	#10:#4;//  terminating:Z
const #46 = Field	#19.#45;	//  scala/actors/scheduler/ThreadPoolScheduler.terminating:Z
const #47 = int	10;
const #48 = NameAndType	#9:#8;//  CHECK_FREQ:I
const #49 = Field	#19.#48;	//  scala/actors/scheduler/ThreadPoolScheduler.CHECK_FREQ:I
const #50 = Asciz	this;
const #51 = Asciz	Lscala/actors/scheduler/ThreadPoolScheduler;;
const #52 = Asciz	LocalVariableTable;
const #53 = Asciz	liftedTree1$1;
const #54 = Asciz	scala/Predef$;
const #55 = class	#54;	//  scala/Predef$
const #56 = Asciz	MODULE$;
const #57 = Asciz	Lscala/Predef$;;
const #58 = NameAndType	#56:#57;//  MODULE$:Lscala/Predef$;
const #59 = Field	#55.#58;	//  scala/Predef$.MODULE$:Lscala/Predef$;
const #60 = Asciz	()I;
const #61 = NameAndType	#9:#60;//  CHECK_FREQ:()I
const #62 = Method	#19.#61;	//  scala/actors/scheduler/ThreadPoolScheduler.CHECK_FREQ:()I
const #63 = Asciz	int2long;
const #64 = Asciz	(I)J;
const #65 = NameAndType	#63:#64;//  int2long:(I)J
const #66 = Method	#55.#65;	//  scala/Predef$.int2long:(I)J
const #67 = Asciz	wait;
const #68 = Asciz	(J)V;
const #69 = NameAndType	#67:#68;//  wait:(J)V
const #70 = Method	#19.#69;	//  scala/actors/scheduler/ThreadPoolScheduler.wait:(J)V
const #71 = Asciz	java/lang/InterruptedException;
const #72 = class	#71;	//  java/lang/InterruptedException
const #73 = Asciz	()Ljava/util/concurrent/ExecutorService;;
const #74 = Asciz	()Ljava/util/concurrent/ThreadPoolExecutor;;
const #75 = NameAndType	#12:#74;//  executor:()Ljava/util/concurrent/ThreadPoolExecutor;
const #76 = Method	#19.#75;	//  scala/actors/scheduler/ThreadPoolScheduler.executor:()Ljava/util/concurrent/ThreadPoolExecutor;
const #77 = Asciz	shutdown;
const #78 = Asciz	terminating_$eq;
const #79 = Asciz	(Z)V;
const #80 = NameAndType	#78:#79;//  terminating_$eq:(Z)V
const #81 = Method	#19.#80;	//  scala/actors/scheduler/ThreadPoolScheduler.terminating_$eq:(Z)V
const #82 = Asciz	scala/runtime/BoxedUnit;
const #83 = class	#82;	//  scala/runtime/BoxedUnit
const #84 = Asciz	UNIT;
const #85 = Asciz	Lscala/runtime/BoxedUnit;;
const #86 = NameAndType	#84:#85;//  UNIT:Lscala/runtime/BoxedUnit;
const #87 = Field	#83.#86;	//  scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
const #88 = Asciz	execute;
const #89 = Asciz	(Lscala/Function0;)V;
const #90 = Asciz	scala/actors/scheduler/ThreadPoolScheduler$$anon$1;
const #91 = class	#90;	//  scala/actors/scheduler/ThreadPoolScheduler$$anon$1
const #92 = Asciz	(Lscala/actors/scheduler/ThreadPoolScheduler;Lscala/Function0;)V;
const #93 = NameAndType	#14:#92;//  "<init>":(Lscala/actors/scheduler/ThreadPoolScheduler;Lscala/Function0;)V
const #94 = Method	#91.#93;	//  scala/actors/scheduler/ThreadPoolScheduler$$anon$1."<init>":(Lscala/actors/scheduler/ThreadPoolScheduler;Lscala/Function0;)V
const #95 = Asciz	scala/actors/scheduler/ExecutorScheduler;
const #96 = class	#95;	//  scala/actors/scheduler/ExecutorScheduler
const #97 = Asciz	(Ljava/lang/Runnable;)V;
const #98 = NameAndType	#88:#97;//  execute:(Ljava/lang/Runnable;)V
const #99 = InterfaceMethod	#96.#98;	//  scala/actors/scheduler/ExecutorScheduler.execute:(Ljava/lang/Runnable;)V
const #100 = Asciz	fun$1;
const #101 = Asciz	Lscala/Function0;;
const #102 = Asciz	(Lscala/Function0<Ljava/lang/Object;>;)V;
const #103 = Asciz	Signature;
const #104 = Asciz	run;
const #105 = NameAndType	#53:#26;//  liftedTree1$1:()V
const #106 = Method	#19.#105;	//  scala/actors/scheduler/ThreadPoolScheduler.liftedTree1$1:()V
const #107 = Asciz	()Z;
const #108 = NameAndType	#10:#107;//  terminating:()Z
const #109 = Method	#19.#108;	//  scala/actors/scheduler/ThreadPoolScheduler.terminating:()Z
const #110 = Asciz	scala/actors/scheduler/QuitException;
const #111 = class	#110;	//  scala/actors/scheduler/QuitException
const #112 = Method	#111.#27;	//  scala/actors/scheduler/QuitException."<init>":()V
const #113 = NameAndType	#11:#107;//  terminate:()Z
const #114 = Method	#19.#113;	//  scala/actors/scheduler/ThreadPoolScheduler.terminate:()Z
const #115 = Asciz	scala/actors/scheduler/TerminationMonitor;
const #116 = class	#115;	//  scala/actors/scheduler/TerminationMonitor
const #117 = Asciz	allTerminated;
const #118 = NameAndType	#117:#107;//  allTerminated:()Z
const #119 = InterfaceMethod	#116.#118;	//  scala/actors/scheduler/TerminationMonitor.allTerminated:()Z
const #120 = Asciz	java/util/concurrent/ThreadPoolExecutor;
const #121 = class	#120;	//  java/util/concurrent/ThreadPoolExecutor
const #122 = Asciz	getCorePoolSize;
const #123 = NameAndType	#122:#60;//  getCorePoolSize:()I
const #124 = Method	#121.#123;	//  java/util/concurrent/ThreadPoolExecutor.getCorePoolSize:()I
const #125 = Asciz	getActiveCount;
const #126 = NameAndType	#125:#60;//  getActiveCount:()I
const #127 = Method	#121.#126;	//  java/util/concurrent/ThreadPoolExecutor.getActiveCount:()I
const #128 = Asciz	scala/actors/scheduler/ThreadPoolConfig$;
const #129 = class	#128;	//  scala/actors/scheduler/ThreadPoolConfig$
const #130 = Asciz	Lscala/actors/scheduler/ThreadPoolConfig$;;
const #131 = NameAndType	#56:#130;//  MODULE$:Lscala/actors/scheduler/ThreadPoolConfig$;
const #132 = Field	#129.#131;	//  scala/actors/scheduler/ThreadPoolConfig$.MODULE$:Lscala/actors/scheduler/ThreadPoolConfig$;
const #133 = Asciz	maxPoolSize;
const #134 = NameAndType	#133:#60;//  maxPoolSize:()I
const #135 = Method	#129.#134;	//  scala/actors/scheduler/ThreadPoolConfig$.maxPoolSize:()I
const #136 = Asciz	setCorePoolSize;
const #137 = Asciz	(I)V;
const #138 = NameAndType	#136:#137;//  setCorePoolSize:(I)V
const #139 = Method	#121.#138;	//  java/util/concurrent/ThreadPoolExecutor.setCorePoolSize:(I)V
const #140 = Asciz	scala/actors/Debug$;
const #141 = class	#140;	//  scala/actors/Debug$
const #142 = Asciz	Lscala/actors/Debug$;;
const #143 = NameAndType	#56:#142;//  MODULE$:Lscala/actors/Debug$;
const #144 = Field	#141.#143;	//  scala/actors/Debug$.MODULE$:Lscala/actors/Debug$;
const #145 = Asciz	any2stringadd;
const #146 = Asciz	(Ljava/lang/Object;)Lscala/runtime/StringAdd;;
const #147 = NameAndType	#145:#146;//  any2stringadd:(Ljava/lang/Object;)Lscala/runtime/StringAdd;
const #148 = Method	#55.#147;	//  scala/Predef$.any2stringadd:(Ljava/lang/Object;)Lscala/runtime/StringAdd;
const #149 = Asciz	: initiating shutdown...;
const #150 = String	#149;	//  : initiating shutdown...
const #151 = Asciz	scala/runtime/StringAdd;
const #152 = class	#151;	//  scala/runtime/StringAdd
const #153 = Asciz	$plus;
const #154 = Asciz	(Ljava/lang/String;)Ljava/lang/String;;
const #155 = NameAndType	#153:#154;//  $plus:(Ljava/lang/String;)Ljava/lang/String;
const #156 = Method	#152.#155;	//  scala/runtime/StringAdd.$plus:(Ljava/lang/String;)Ljava/lang/String;
const #157 = Asciz	info;
const #158 = Asciz	(Ljava/lang/String;)V;
const #159 = NameAndType	#157:#158;//  info:(Ljava/lang/String;)V
const #160 = Method	#141.#159;	//  scala/actors/Debug$.info:(Ljava/lang/String;)V
const #161 = Asciz	onShutdown;
const #162 = NameAndType	#161:#26;//  onShutdown:()V
const #163 = InterfaceMethod	#96.#162;	//  scala/actors/scheduler/ExecutorScheduler.onShutdown:()V
const #164 = Asciz	coreSize;
const #165 = Asciz	managedBlock;
const #166 = Asciz	(Lscala/actors/ManagedBlocker;)V;
const #167 = Asciz	scala/actors/forkjoin/ForkJoinPool$ManagedBlocker;
const #168 = class	#167;	//  scala/actors/forkjoin/ForkJoinPool$ManagedBlocker
const #169 = Asciz	block;
const #170 = NameAndType	#169:#107;//  block:()Z
const #171 = InterfaceMethod	#168.#170;	//  scala/actors/forkjoin/ForkJoinPool$ManagedBlocker.block:()Z
const #172 = Asciz	blocker;
const #173 = Asciz	Lscala/actors/ManagedBlocker;;
const #174 = NameAndType	#14:#15;//  "<init>":(Ljava/util/concurrent/ThreadPoolExecutor;Z)V
const #175 = Method	#19.#174;	//  scala/actors/scheduler/ThreadPoolScheduler."<init>":(Ljava/util/concurrent/ThreadPoolExecutor;Z)V
const #176 = Asciz	terminate_$eq;
const #177 = Asciz	executor_$eq;
const #178 = Asciz	(Ljava/util/concurrent/ThreadPoolExecutor;)V;
const #179 = Asciz	(Lscala/actors/scheduler/TerminationMonitor;)Z;
const #180 = NameAndType	#117:#179;//  allTerminated:(Lscala/actors/scheduler/TerminationMonitor;)Z
const #181 = Method	#30.#180;	//  scala/actors/scheduler/TerminationMonitor$class.allTerminated:(Lscala/actors/scheduler/TerminationMonitor;)Z
const #182 = Asciz	terminated;
const #183 = Asciz	(Lscala/actors/Reactor;)V;
const #184 = Asciz	(Lscala/actors/scheduler/TerminationMonitor;Lscala/actors/Reactor;)V;
const #185 = NameAndType	#182:#184;//  terminated:(Lscala/actors/scheduler/TerminationMonitor;Lscala/actors/Reactor;)V
const #186 = Method	#30.#185;	//  scala/actors/scheduler/TerminationMonitor$class.terminated:(Lscala/actors/scheduler/TerminationMonitor;Lscala/actors/Reactor;)V
const #187 = Asciz	a;
const #188 = Asciz	Lscala/actors/Reactor;;
const #189 = Asciz	onTerminate;
const #190 = Asciz	(Lscala/actors/Reactor;Lscala/Function0;)V;
const #191 = Asciz	(Lscala/actors/scheduler/TerminationMonitor;Lscala/actors/Reactor;Lscala/Function0;)V;
const #192 = NameAndType	#189:#191;//  onTerminate:(Lscala/actors/scheduler/TerminationMonitor;Lscala/actors/Reactor;Lscala/Function0;)V
const #193 = Method	#30.#192;	//  scala/actors/scheduler/TerminationMonitor$class.onTerminate:(Lscala/actors/scheduler/TerminationMonitor;Lscala/actors/Reactor;Lscala/Function0;)V
const #194 = Asciz	f;
const #195 = Asciz	newActor;
const #196 = NameAndType	#195:#184;//  newActor:(Lscala/actors/scheduler/TerminationMonitor;Lscala/actors/Reactor;)V
const #197 = Method	#30.#196;	//  scala/actors/scheduler/TerminationMonitor$class.newActor:(Lscala/actors/scheduler/TerminationMonitor;Lscala/actors/Reactor;)V
const #198 = Asciz	scala$actors$scheduler$TerminationMonitor$_setter_$scala$actors$scheduler$TerminationMonitor$$termHandlers_$eq;
const #199 = Asciz	(Lscala/collection/mutable/HashMap;)V;
const #200 = NameAndType	#5:#6;//  scala$actors$scheduler$TerminationMonitor$$termHandlers:Lscala/collection/mutable/HashMap;
const #201 = Field	#19.#200;	//  scala/actors/scheduler/ThreadPoolScheduler.scala$actors$scheduler$TerminationMonitor$$termHandlers:Lscala/collection/mutable/HashMap;
const #202 = Asciz	scala$actors$scheduler$TerminationMonitor$$started_$eq;
const #203 = NameAndType	#3:#4;//  scala$actors$scheduler$TerminationMonitor$$started:Z
const #204 = Field	#19.#203;	//  scala/actors/scheduler/ThreadPoolScheduler.scala$actors$scheduler$TerminationMonitor$$started:Z
const #205 = Asciz	()Lscala/collection/mutable/HashMap;;
const #206 = Asciz	scala$actors$scheduler$TerminationMonitor$$pendingReactions_$eq;
const #207 = NameAndType	#7:#8;//  scala$actors$scheduler$TerminationMonitor$$pendingReactions:I
const #208 = Field	#19.#207;	//  scala/actors/scheduler/ThreadPoolScheduler.scala$actors$scheduler$TerminationMonitor$$pendingReactions:I
const #209 = Asciz	isActive;
const #210 = Asciz	(Lscala/actors/scheduler/ExecutorScheduler;)Z;
const #211 = NameAndType	#209:#210;//  isActive:(Lscala/actors/scheduler/ExecutorScheduler;)Z
const #212 = Method	#41.#211;	//  scala/actors/scheduler/ExecutorScheduler$class.isActive:(Lscala/actors/scheduler/ExecutorScheduler;)Z
const #213 = NameAndType	#161:#42;//  onShutdown:(Lscala/actors/scheduler/ExecutorScheduler;)V
const #214 = Method	#41.#213;	//  scala/actors/scheduler/ExecutorScheduler$class.onShutdown:(Lscala/actors/scheduler/ExecutorScheduler;)V
const #215 = Asciz	executeFromActor;
const #216 = Asciz	(Lscala/actors/scheduler/ExecutorScheduler;Ljava/lang/Runnable;)V;
const #217 = NameAndType	#215:#216;//  executeFromActor:(Lscala/actors/scheduler/ExecutorScheduler;Ljava/lang/Runnable;)V
const #218 = Method	#41.#217;	//  scala/actors/scheduler/ExecutorScheduler$class.executeFromActor:(Lscala/actors/scheduler/ExecutorScheduler;Ljava/lang/Runnable;)V
const #219 = Asciz	task;
const #220 = Asciz	Ljava/lang/Runnable;;
const #221 = NameAndType	#88:#216;//  execute:(Lscala/actors/scheduler/ExecutorScheduler;Ljava/lang/Runnable;)V
const #222 = Method	#41.#221;	//  scala/actors/scheduler/ExecutorScheduler$class.execute:(Lscala/actors/scheduler/ExecutorScheduler;Ljava/lang/Runnable;)V
const #223 = Asciz	ScalaSig;
const #224 = Asciz	InnerClasses;
const #225 = Asciz	$anon$1;
const #226 = Asciz	scala/actors/forkjoin/ForkJoinPool;
const #227 = class	#226;	//  scala/actors/forkjoin/ForkJoinPool
const #228 = Asciz	ManagedBlocker;
const #229 = Asciz	scala/ScalaObject;
const #230 = class	#229;	//  scala/ScalaObject

{
public scala.actors.scheduler.ThreadPoolScheduler(java.util.concurrent.ThreadPoolExecutor, boolean);
  Code:
   Stack=2, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	putfield	#21; //Field executor:Ljava/util/concurrent/ThreadPoolExecutor;
   5:	aload_0
   6:	iload_2
   7:	putfield	#23; //Field terminate:Z
   10:	aload_0
   11:	invokespecial	#28; //Method java/lang/Thread."<init>":()V
   14:	aload_0
   15:	invokestatic	#34; //Method scala/actors/scheduler/TerminationMonitor$class.$init$:(Lscala/actors/scheduler/TerminationMonitor;)V
   18:	aload_0
   19:	invokestatic	#39; //Method scala/actors/IScheduler$class.$init$:(Lscala/actors/IScheduler;)V
   22:	aload_0
   23:	invokestatic	#44; //Method scala/actors/scheduler/ExecutorScheduler$class.$init$:(Lscala/actors/scheduler/ExecutorScheduler;)V
   26:	aload_0
   27:	iconst_0
   28:	putfield	#46; //Field terminating:Z
   31:	aload_0
   32:	ldc	#47; //int 10
   34:	putfield	#49; //Field CHECK_FREQ:I
   37:	return
  LineNumberTable: 
   line 30: 0
   line 31: 5
   line 30: 10
   line 34: 26
   line 35: 31

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      38      0    this       Lscala/actors/scheduler/ThreadPoolScheduler;
   0      38      1    executor       Ljava/util/concurrent/ThreadPoolExecutor;
   0      38      2    terminate       Z


public java.util.concurrent.ExecutorService executor();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokevirtual	#76; //Method executor:()Ljava/util/concurrent/ThreadPoolExecutor;
   4:	areturn
  LineNumberTable: 
   line 30: 0


public void shutdown();
  Code:
   Stack=2, Locals=2, Args_size=1
   0:	aload_0
   1:	dup
   2:	astore_1
   3:	monitorenter
   4:	aload_0
   5:	iconst_1
   6:	invokespecial	#81; //Method terminating_$eq:(Z)V
   9:	getstatic	#87; //Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
   12:	pop
   13:	aload_1
   14:	monitorexit
   15:	return
   16:	aload_1
   17:	monitorexit
   18:	athrow
  Exception table:
   from   to  target type
     4    15    16   any
  LineNumberTable: 
   line 95: 0
   line 96: 4
   line 95: 14


public void execute(scala.Function0);
  Code:
   Stack=5, Locals=2, Args_size=2
   0:	aload_0
   1:	new	#91; //class scala/actors/scheduler/ThreadPoolScheduler$$anon$1
   4:	dup
   5:	aload_0
   6:	aload_1
   7:	invokespecial	#94; //Method scala/actors/scheduler/ThreadPoolScheduler$$anon$1."<init>":(Lscala/actors/scheduler/ThreadPoolScheduler;Lscala/Function0;)V
   10:	invokeinterface	#99,  2; //InterfaceMethod scala/actors/scheduler/ExecutorScheduler.execute:(Ljava/lang/Runnable;)V
   15:	return
  LineNumberTable: 
   line 89: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      16      0    this       Lscala/actors/scheduler/ThreadPoolScheduler;
   0      16      1    fun$1       Lscala/Function0;

  Signature: length = 0x2
   00 66 

public void run();
  Code:
   Stack=3, Locals=3, Args_size=1
   0:	aload_0
   1:	dup
   2:	astore_1
   3:	monitorenter
   4:	aload_0
   5:	invokespecial	#106; //Method liftedTree1$1:()V
   8:	aload_0
   9:	invokespecial	#109; //Method terminating:()Z
   12:	ifeq	23
   15:	new	#111; //class scala/actors/scheduler/QuitException
   18:	dup
   19:	invokespecial	#112; //Method scala/actors/scheduler/QuitException."<init>":()V
   22:	athrow
   23:	aload_0
   24:	invokevirtual	#114; //Method terminate:()Z
   27:	ifeq	47
   30:	aload_0
   31:	invokeinterface	#119,  1; //InterfaceMethod scala/actors/scheduler/TerminationMonitor.allTerminated:()Z
   36:	ifeq	47
   39:	new	#111; //class scala/actors/scheduler/QuitException
   42:	dup
   43:	invokespecial	#112; //Method scala/actors/scheduler/QuitException."<init>":()V
   46:	athrow
   47:	aload_0
   48:	invokevirtual	#76; //Method executor:()Ljava/util/concurrent/ThreadPoolExecutor;
   51:	invokevirtual	#124; //Method java/util/concurrent/ThreadPoolExecutor.getCorePoolSize:()I
   54:	istore_2
   55:	aload_0
   56:	invokevirtual	#76; //Method executor:()Ljava/util/concurrent/ThreadPoolExecutor;
   59:	invokevirtual	#127; //Method java/util/concurrent/ThreadPoolExecutor.getActiveCount:()I
   62:	iload_2
   63:	iconst_1
   64:	isub
   65:	if_icmplt	94
   68:	iload_2
   69:	getstatic	#132; //Field scala/actors/scheduler/ThreadPoolConfig$.MODULE$:Lscala/actors/scheduler/ThreadPoolConfig$;
   72:	invokevirtual	#135; //Method scala/actors/scheduler/ThreadPoolConfig$.maxPoolSize:()I
   75:	if_icmpge	94
   78:	aload_0
   79:	invokevirtual	#76; //Method executor:()Ljava/util/concurrent/ThreadPoolExecutor;
   82:	iload_2
   83:	iconst_1
   84:	iadd
   85:	invokevirtual	#139; //Method java/util/concurrent/ThreadPoolExecutor.setCorePoolSize:(I)V
   88:	getstatic	#87; //Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
   91:	goto	97
   94:	getstatic	#87; //Field scala/runtime/BoxedUnit.UNIT:Lscala/runtime/BoxedUnit;
   97:	pop
   98:	aload_1
   99:	monitorexit
   100:	goto	0
   103:	aload_1
   104:	monitorexit
   105:	athrow
   106:	pop
   107:	getstatic	#144; //Field scala/actors/Debug$.MODULE$:Lscala/actors/Debug$;
   110:	getstatic	#59; //Field scala/Predef$.MODULE$:Lscala/Predef$;
   113:	aload_0
   114:	invokevirtual	#148; //Method scala/Predef$.any2stringadd:(Ljava/lang/Object;)Lscala/runtime/StringAdd;
   117:	ldc	#150; //String : initiating shutdown...
   119:	invokevirtual	#156; //Method scala/runtime/StringAdd.$plus:(Ljava/lang/String;)Ljava/lang/String;
   122:	invokevirtual	#160; //Method scala/actors/Debug$.info:(Ljava/lang/String;)V
   125:	aload_0
   126:	invokeinterface	#163,  1; //InterfaceMethod scala/actors/scheduler/ExecutorScheduler.onShutdown:()V
   131:	return
  Exception table:
   from   to  target type
     4   103   103   any
     0   106   106   Class scala/actors/scheduler/QuitException

  LineNumberTable: 
   line 56: 0
   line 57: 4
   line 63: 8
   line 64: 15
   line 66: 23
   line 67: 39
   line 69: 47
   line 70: 55
   line 71: 78
   line 70: 94
   line 56: 99
   line 54: 103
   line 56: 104
   line 54: 106
   line 77: 107
   line 79: 125
   line 54: 131

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      132      0    this       Lscala/actors/scheduler/ThreadPoolScheduler;
   55      43      2    coreSize       I


public void managedBlock(scala.actors.ManagedBlocker);
  Code:
   Stack=3, Locals=3, Args_size=2
   0:	aload_0
   1:	invokevirtual	#76; //Method executor:()Ljava/util/concurrent/ThreadPoolExecutor;
   4:	invokevirtual	#124; //Method java/util/concurrent/ThreadPoolExecutor.getCorePoolSize:()I
   7:	istore_2
   8:	aload_0
   9:	invokevirtual	#76; //Method executor:()Ljava/util/concurrent/ThreadPoolExecutor;
   12:	invokevirtual	#127; //Method java/util/concurrent/ThreadPoolExecutor.getActiveCount:()I
   15:	iload_2
   16:	iconst_1
   17:	isub
   18:	if_icmplt	41
   21:	iload_2
   22:	getstatic	#132; //Field scala/actors/scheduler/ThreadPoolConfig$.MODULE$:Lscala/actors/scheduler/ThreadPoolConfig$;
   25:	invokevirtual	#135; //Method scala/actors/scheduler/ThreadPoolConfig$.maxPoolSize:()I
   28:	if_icmpge	41
   31:	aload_0
   32:	invokevirtual	#76; //Method executor:()Ljava/util/concurrent/ThreadPoolExecutor;
   35:	iload_2
   36:	iconst_1
   37:	iadd
   38:	invokevirtual	#139; //Method java/util/concurrent/ThreadPoolExecutor.setCorePoolSize:(I)V
   41:	aload_1
   42:	invokeinterface	#171,  1; //InterfaceMethod scala/actors/forkjoin/ForkJoinPool$ManagedBlocker.block:()Z
   47:	pop
   48:	return
  LineNumberTable: 
   line 46: 0
   line 47: 8
   line 48: 31
   line 50: 41

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      49      0    this       Lscala/actors/scheduler/ThreadPoolScheduler;
   0      49      1    blocker       Lscala/actors/ManagedBlocker;
   8      40      2    coreSize       I


public scala.actors.scheduler.ThreadPoolScheduler();
  Code:
   Stack=3, Locals=1, Args_size=1
   0:	aload_0
   1:	aconst_null
   2:	pop
   3:	aconst_null
   4:	iconst_1
   5:	invokespecial	#175; //Method "<init>":(Ljava/util/concurrent/ThreadPoolExecutor;Z)V
   8:	return
  LineNumberTable: 
   line 42: 0


public int CHECK_FREQ();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#49; //Field CHECK_FREQ:I
   4:	ireturn
  LineNumberTable: 
   line 35: 0


public void terminate_$eq(boolean);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	iload_1
   2:	putfield	#23; //Field terminate:Z
   5:	return
  LineNumberTable: 
   line 31: 0


public boolean terminate();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#23; //Field terminate:Z
   4:	ireturn
  LineNumberTable: 
   line 31: 0


public void executor_$eq(java.util.concurrent.ThreadPoolExecutor);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	putfield	#21; //Field executor:Ljava/util/concurrent/ThreadPoolExecutor;
   5:	return
  LineNumberTable: 
   line 30: 0


public java.util.concurrent.ThreadPoolExecutor executor();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#21; //Field executor:Ljava/util/concurrent/ThreadPoolExecutor;
   4:	areturn
  LineNumberTable: 
   line 30: 0


public boolean allTerminated();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokestatic	#181; //Method scala/actors/scheduler/TerminationMonitor$class.allTerminated:(Lscala/actors/scheduler/TerminationMonitor;)Z
   4:	ireturn
  LineNumberTable: 
   line 30: 0


public void terminated(scala.actors.Reactor);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#186; //Method scala/actors/scheduler/TerminationMonitor$class.terminated:(Lscala/actors/scheduler/TerminationMonitor;Lscala/actors/Reactor;)V
   5:	return
  LineNumberTable: 
   line 30: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/actors/scheduler/ThreadPoolScheduler;
   0      6      1    a       Lscala/actors/Reactor;


public void onTerminate(scala.actors.Reactor, scala.Function0);
  Code:
   Stack=3, Locals=3, Args_size=3
   0:	aload_0
   1:	aload_1
   2:	aload_2
   3:	invokestatic	#193; //Method scala/actors/scheduler/TerminationMonitor$class.onTerminate:(Lscala/actors/scheduler/TerminationMonitor;Lscala/actors/Reactor;Lscala/Function0;)V
   6:	return
  LineNumberTable: 
   line 30: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      7      0    this       Lscala/actors/scheduler/ThreadPoolScheduler;
   0      7      1    a       Lscala/actors/Reactor;
   0      7      2    f       Lscala/Function0;


public void newActor(scala.actors.Reactor);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#197; //Method scala/actors/scheduler/TerminationMonitor$class.newActor:(Lscala/actors/scheduler/TerminationMonitor;Lscala/actors/Reactor;)V
   5:	return
  LineNumberTable: 
   line 30: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/actors/scheduler/ThreadPoolScheduler;
   0      6      1    a       Lscala/actors/Reactor;


public void scala$actors$scheduler$TerminationMonitor$_setter_$scala$actors$scheduler$TerminationMonitor$$termHandlers_$eq(scala.collection.mutable.HashMap);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	putfield	#201; //Field scala$actors$scheduler$TerminationMonitor$$termHandlers:Lscala/collection/mutable/HashMap;
   5:	return
  LineNumberTable: 
   line 30: 0


public final void scala$actors$scheduler$TerminationMonitor$$started_$eq(boolean);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	iload_1
   2:	putfield	#204; //Field scala$actors$scheduler$TerminationMonitor$$started:Z
   5:	return
  LineNumberTable: 
   line 30: 0


public final boolean scala$actors$scheduler$TerminationMonitor$$started();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#204; //Field scala$actors$scheduler$TerminationMonitor$$started:Z
   4:	ireturn
  LineNumberTable: 
   line 30: 0


public final scala.collection.mutable.HashMap scala$actors$scheduler$TerminationMonitor$$termHandlers();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#201; //Field scala$actors$scheduler$TerminationMonitor$$termHandlers:Lscala/collection/mutable/HashMap;
   4:	areturn
  LineNumberTable: 
   line 30: 0


public final void scala$actors$scheduler$TerminationMonitor$$pendingReactions_$eq(int);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	iload_1
   2:	putfield	#208; //Field scala$actors$scheduler$TerminationMonitor$$pendingReactions:I
   5:	return
  LineNumberTable: 
   line 30: 0


public final int scala$actors$scheduler$TerminationMonitor$$pendingReactions();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#208; //Field scala$actors$scheduler$TerminationMonitor$$pendingReactions:I
   4:	ireturn
  LineNumberTable: 
   line 30: 0


public boolean isActive();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokestatic	#212; //Method scala/actors/scheduler/ExecutorScheduler$class.isActive:(Lscala/actors/scheduler/ExecutorScheduler;)Z
   4:	ireturn
  LineNumberTable: 
   line 30: 0


public void onShutdown();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokestatic	#214; //Method scala/actors/scheduler/ExecutorScheduler$class.onShutdown:(Lscala/actors/scheduler/ExecutorScheduler;)V
   4:	return
  LineNumberTable: 
   line 30: 0


public void executeFromActor(java.lang.Runnable);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#218; //Method scala/actors/scheduler/ExecutorScheduler$class.executeFromActor:(Lscala/actors/scheduler/ExecutorScheduler;Ljava/lang/Runnable;)V
   5:	return
  LineNumberTable: 
   line 30: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/actors/scheduler/ThreadPoolScheduler;
   0      6      1    task       Ljava/lang/Runnable;


public void execute(java.lang.Runnable);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokestatic	#222; //Method scala/actors/scheduler/ExecutorScheduler$class.execute:(Lscala/actors/scheduler/ExecutorScheduler;Ljava/lang/Runnable;)V
   5:	return
  LineNumberTable: 
   line 30: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/actors/scheduler/ThreadPoolScheduler;
   0      6      1    task       Ljava/lang/Runnable;


}

