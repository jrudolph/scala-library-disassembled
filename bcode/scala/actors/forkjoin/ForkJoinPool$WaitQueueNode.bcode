final class scala.actors.forkjoin.ForkJoinPool$WaitQueueNode extends java.lang.Object
  InnerClass: 
   final #11= #8 of #32; //WaitQueueNode=class scala/actors/forkjoin/ForkJoinPool$WaitQueueNode of class scala/actors/forkjoin/ForkJoinPool
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Method	#9.#27;	//  java/lang/Object."<init>":()V
const #2 = Field	#8.#28;	//  scala/actors/forkjoin/ForkJoinPool$WaitQueueNode.count:J
const #3 = Field	#8.#29;	//  scala/actors/forkjoin/ForkJoinPool$WaitQueueNode.thread:Lscala/actors/forkjoin/ForkJoinWorkerThread;
const #4 = Method	#30.#31;	//  java/util/concurrent/locks/LockSupport.unpark:(Ljava/lang/Thread;)V
const #5 = Method	#32.#33;	//  scala/actors/forkjoin/ForkJoinPool.syncIsReleasable:(Lscala/actors/forkjoin/ForkJoinPool$WaitQueueNode;)Z
const #6 = Method	#30.#34;	//  java/util/concurrent/locks/LockSupport.park:()V
const #7 = Method	#35.#36;	//  java/lang/Thread.interrupted:()Z
const #8 = class	#37;	//  scala/actors/forkjoin/ForkJoinPool$WaitQueueNode
const #9 = class	#38;	//  java/lang/Object
const #10 = Asciz	next;
const #11 = Asciz	WaitQueueNode;
const #12 = Asciz	InnerClasses;
const #13 = Asciz	Lscala/actors/forkjoin/ForkJoinPool$WaitQueueNode;;
const #14 = Asciz	thread;
const #15 = Asciz	Lscala/actors/forkjoin/ForkJoinWorkerThread;;
const #16 = Asciz	count;
const #17 = Asciz	J;
const #18 = Asciz	<init>;
const #19 = Asciz	(JLscala/actors/forkjoin/ForkJoinWorkerThread;)V;
const #20 = Asciz	Code;
const #21 = Asciz	signal;
const #22 = Asciz	()Z;
const #23 = Asciz	awaitSyncRelease;
const #24 = Asciz	(Lscala/actors/forkjoin/ForkJoinPool;)V;
const #25 = Asciz	awaitSpareRelease;
const #26 = Asciz	()V;
const #27 = NameAndType	#18:#26;//  "<init>":()V
const #28 = NameAndType	#16:#17;//  count:J
const #29 = NameAndType	#14:#15;//  thread:Lscala/actors/forkjoin/ForkJoinWorkerThread;
const #30 = class	#39;	//  java/util/concurrent/locks/LockSupport
const #31 = NameAndType	#40:#41;//  unpark:(Ljava/lang/Thread;)V
const #32 = class	#42;	//  scala/actors/forkjoin/ForkJoinPool
const #33 = NameAndType	#43:#44;//  syncIsReleasable:(Lscala/actors/forkjoin/ForkJoinPool$WaitQueueNode;)Z
const #34 = NameAndType	#45:#26;//  park:()V
const #35 = class	#46;	//  java/lang/Thread
const #36 = NameAndType	#47:#22;//  interrupted:()Z
const #37 = Asciz	scala/actors/forkjoin/ForkJoinPool$WaitQueueNode;
const #38 = Asciz	java/lang/Object;
const #39 = Asciz	java/util/concurrent/locks/LockSupport;
const #40 = Asciz	unpark;
const #41 = Asciz	(Ljava/lang/Thread;)V;
const #42 = Asciz	scala/actors/forkjoin/ForkJoinPool;
const #43 = Asciz	syncIsReleasable;
const #44 = Asciz	(Lscala/actors/forkjoin/ForkJoinPool$WaitQueueNode;)Z;
const #45 = Asciz	park;
const #46 = Asciz	java/lang/Thread;
const #47 = Asciz	interrupted;

{
scala.actors.forkjoin.ForkJoinPool$WaitQueueNode next;

volatile scala.actors.forkjoin.ForkJoinWorkerThread thread;

final long count;

scala.actors.forkjoin.ForkJoinPool$WaitQueueNode(long, scala.actors.forkjoin.ForkJoinWorkerThread);
  Code:
   Stack=3, Locals=4, Args_size=3
   0:	aload_0
   1:	invokespecial	#1; //Method java/lang/Object."<init>":()V
   4:	aload_0
   5:	lload_1
   6:	putfield	#2; //Field count:J
   9:	aload_0
   10:	aload_3
   11:	putfield	#3; //Field thread:Lscala/actors/forkjoin/ForkJoinWorkerThread;
   14:	return

boolean signal();
  Code:
   Stack=2, Locals=2, Args_size=1
   0:	aload_0
   1:	getfield	#3; //Field thread:Lscala/actors/forkjoin/ForkJoinWorkerThread;
   4:	astore_1
   5:	aload_1
   6:	ifnonnull	11
   9:	iconst_0
   10:	ireturn
   11:	aload_0
   12:	aconst_null
   13:	putfield	#3; //Field thread:Lscala/actors/forkjoin/ForkJoinWorkerThread;
   16:	aload_1
   17:	invokestatic	#4; //Method java/util/concurrent/locks/LockSupport.unpark:(Ljava/lang/Thread;)V
   20:	iconst_1
   21:	ireturn

void awaitSyncRelease(scala.actors.forkjoin.ForkJoinPool);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	getfield	#3; //Field thread:Lscala/actors/forkjoin/ForkJoinWorkerThread;
   4:	ifnull	21
   7:	aload_1
   8:	aload_0
   9:	invokevirtual	#5; //Method scala/actors/forkjoin/ForkJoinPool.syncIsReleasable:(Lscala/actors/forkjoin/ForkJoinPool$WaitQueueNode;)Z
   12:	ifne	21
   15:	invokestatic	#6; //Method java/util/concurrent/locks/LockSupport.park:()V
   18:	goto	0
   21:	return

void awaitSpareRelease();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#3; //Field thread:Lscala/actors/forkjoin/ForkJoinWorkerThread;
   4:	ifnull	19
   7:	invokestatic	#7; //Method java/lang/Thread.interrupted:()Z
   10:	ifne	0
   13:	invokestatic	#6; //Method java/util/concurrent/locks/LockSupport.park:()V
   16:	goto	0
   19:	return

}

