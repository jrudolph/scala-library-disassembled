Compiled from "Range.scala"
public final class scala.collection.immutable.Range$Double$ extends java.lang.Object implements scala.ScalaObject
  SourceFile: "Range.scala"
  Scala: length = 0x
   
  InnerClass: 
   public Inclusive=class scala/collection/immutable/NumericRange$Inclusive of class scala/collection/immutable/NumericRange
   public Exclusive=class scala/collection/immutable/NumericRange$Exclusive of class scala/collection/immutable/NumericRange
   public final $anonfun$apply$1=class scala/collection/immutable/Range$Double$$anonfun$apply$1 of class scala/collection/immutable/Range$Double$
   public final $anonfun$inclusive$1=class scala/collection/immutable/Range$Double$$anonfun$inclusive$1 of class scala/collection/immutable/Range$Double$
  minor version: 0
  major version: 49
  Constant pool:
Asciz	SourceFile;
Asciz	Range.scala;
Asciz	Scala;
Asciz	MODULE$;
Asciz	Lscala/collection/immutable/Range$Double$;;
Asciz	<clinit>;
Asciz	()V;
Asciz	Code;
Asciz	scala/collection/immutable/Range$Double$;
class	scala/collection/immutable/Range$Double$
Asciz	<init>;
NameAndType	"<init>":()V
Method	scala/collection/immutable/Range$Double$."<init>":()V
Asciz	doubleAsIntegral;
Asciz	Lscala/math/Numeric$DoubleAsIfIntegral$;;
Asciz	bigDecAsIntegral;
Asciz	Lscala/math/Numeric$BigDecimalAsIfIntegral$;;
Asciz	()Lscala/math/Numeric$BigDecimalAsIfIntegral$;;
Asciz	LineNumberTable;
NameAndType	bigDecAsIntegral:Lscala/math/Numeric$BigDecimalAsIfIntegral$;
Field	scala/collection/immutable/Range$Double$.bigDecAsIntegral:Lscala/math/Numeric$BigDecimalAsIfIntegral$;
Asciz	()Lscala/math/Numeric$DoubleAsIfIntegral$;;
NameAndType	doubleAsIntegral:Lscala/math/Numeric$DoubleAsIfIntegral$;
Field	scala/collection/immutable/Range$Double$.doubleAsIntegral:Lscala/math/Numeric$DoubleAsIfIntegral$;
Asciz	toBD;
Asciz	(D)Lscala/math/BigDecimal;;
Asciz	scala/package$;
class	scala/package$
Asciz	Lscala/package$;;
NameAndType	MODULE$:Lscala/package$;
Field	scala/package$.MODULE$:Lscala/package$;
Asciz	BigDecimal;
Asciz	()Lscala/math/BigDecimal$;;
NameAndType	BigDecimal:()Lscala/math/BigDecimal$;
Method	scala/package$.BigDecimal:()Lscala/math/BigDecimal$;
Asciz	scala/math/BigDecimal$;
class	scala/math/BigDecimal$
Asciz	valueOf;
NameAndType	valueOf:(D)Lscala/math/BigDecimal;
Method	scala/math/BigDecimal$.valueOf:(D)Lscala/math/BigDecimal;
Asciz	this;
Asciz	x;
Asciz	D;
Asciz	LocalVariableTable;
Asciz	apply;
Asciz	(DDD)Lscala/collection/immutable/NumericRange;;
Asciz	scala/collection/immutable/Range$BigDecimal$;
class	scala/collection/immutable/Range$BigDecimal$
Asciz	Lscala/collection/immutable/Range$BigDecimal$;;
NameAndType	MODULE$:Lscala/collection/immutable/Range$BigDecimal$;
Field	scala/collection/immutable/Range$BigDecimal$.MODULE$:Lscala/collection/immutable/Range$BigDecimal$;
NameAndType	toBD:(D)Lscala/math/BigDecimal;
Method	scala/collection/immutable/Range$Double$.toBD:(D)Lscala/math/BigDecimal;
Asciz	(Lscala/math/BigDecimal;Lscala/math/BigDecimal;Lscala/math/BigDecimal;)Lscala/collection/immutable/NumericRange$Exclusive;;
NameAndType	apply:(Lscala/math/BigDecimal;Lscala/math/BigDecimal;Lscala/math/BigDecimal;)Lscala/collection/immutable/NumericRange$Exclusive;
Method	scala/collection/immutable/Range$BigDecimal$.apply:(Lscala/math/BigDecimal;Lscala/math/BigDecimal;Lscala/math/BigDecimal;)Lscala/collection/immutable/NumericRange$Exclusive;
Asciz	scala/collection/immutable/Range$Double$$anonfun$apply$1;
class	scala/collection/immutable/Range$Double$$anonfun$apply$1
Method	scala/collection/immutable/Range$Double$$anonfun$apply$1."<init>":()V
NameAndType	doubleAsIntegral:()Lscala/math/Numeric$DoubleAsIfIntegral$;
Method	scala/collection/immutable/Range$Double$.doubleAsIntegral:()Lscala/math/Numeric$DoubleAsIfIntegral$;
Asciz	scala/collection/immutable/NumericRange$Exclusive;
class	scala/collection/immutable/NumericRange$Exclusive
Asciz	mapRange;
Asciz	(Lscala/Function1;Lscala/math/Integral;)Lscala/collection/immutable/NumericRange;;
NameAndType	mapRange:(Lscala/Function1;Lscala/math/Integral;)Lscala/collection/immutable/NumericRange;
Method	scala/collection/immutable/NumericRange$Exclusive.mapRange:(Lscala/Function1;Lscala/math/Integral;)Lscala/collection/immutable/NumericRange;
Asciz	start;
Asciz	end;
Asciz	step;
Asciz	(DDD)Lscala/collection/immutable/NumericRange<Ljava/lang/Double;>;;
Asciz	Signature;
Asciz	inclusive;
Asciz	(Lscala/math/BigDecimal;Lscala/math/BigDecimal;Lscala/math/BigDecimal;)Lscala/collection/immutable/NumericRange$Inclusive;;
NameAndType	inclusive:(Lscala/math/BigDecimal;Lscala/math/BigDecimal;Lscala/math/BigDecimal;)Lscala/collection/immutable/NumericRange$Inclusive;
Method	scala/collection/immutable/Range$BigDecimal$.inclusive:(Lscala/math/BigDecimal;Lscala/math/BigDecimal;Lscala/math/BigDecimal;)Lscala/collection/immutable/NumericRange$Inclusive;
Asciz	scala/collection/immutable/Range$Double$$anonfun$inclusive$1;
class	scala/collection/immutable/Range$Double$$anonfun$inclusive$1
Method	scala/collection/immutable/Range$Double$$anonfun$inclusive$1."<init>":()V
Asciz	scala/collection/immutable/NumericRange$Inclusive;
class	scala/collection/immutable/NumericRange$Inclusive
Method	scala/collection/immutable/NumericRange$Inclusive.mapRange:(Lscala/Function1;Lscala/math/Integral;)Lscala/collection/immutable/NumericRange;
Asciz	java/lang/Object;
class	java/lang/Object
Method	java/lang/Object."<init>":()V
NameAndType	MODULE$:Lscala/collection/immutable/Range$Double$;
Field	scala/collection/immutable/Range$Double$.MODULE$:Lscala/collection/immutable/Range$Double$;
Asciz	scala/math/Numeric$BigDecimalAsIfIntegral$;
class	scala/math/Numeric$BigDecimalAsIfIntegral$
NameAndType	MODULE$:Lscala/math/Numeric$BigDecimalAsIfIntegral$;
Field	scala/math/Numeric$BigDecimalAsIfIntegral$.MODULE$:Lscala/math/Numeric$BigDecimalAsIfIntegral$;
Asciz	scala/math/Numeric$DoubleAsIfIntegral$;
class	scala/math/Numeric$DoubleAsIfIntegral$
NameAndType	MODULE$:Lscala/math/Numeric$DoubleAsIfIntegral$;
Field	scala/math/Numeric$DoubleAsIfIntegral$.MODULE$:Lscala/math/Numeric$DoubleAsIfIntegral$;
Asciz	InnerClasses;
Asciz	scala/collection/immutable/NumericRange;
class	scala/collection/immutable/NumericRange
Asciz	Inclusive;
Asciz	Exclusive;
Asciz	$anonfun$apply$1;
Asciz	$anonfun$inclusive$1;
Asciz	scala/ScalaObject;
class	scala/ScalaObject

{
public static final scala.collection.immutable.Range$Double$ MODULE$;
  Signature: Lscala/collection/immutable/Range$Double$;

private final scala.math.Numeric$DoubleAsIfIntegral$ doubleAsIntegral;
  Signature: Lscala/math/Numeric$DoubleAsIfIntegral$;

private final scala.math.Numeric$BigDecimalAsIfIntegral$ bigDecAsIntegral;
  Signature: Lscala/math/Numeric$BigDecimalAsIfIntegral$;

public static {};
  Signature: ()V
  Code:
   Stack=1, Locals=0, Args_size=0
	new	class scala/collection/immutable/Range$Double$
	invokespecial	Method "<init>":()V
	return
  Labels:

public scala.math.Numeric$BigDecimalAsIfIntegral$ bigDecAsIntegral();
  Signature: ()Lscala/math/Numeric$BigDecimalAsIfIntegral$;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field bigDecAsIntegral:Lscala/math/Numeric$BigDecimalAsIfIntegral$;
	areturn
  Labels:

public scala.math.Numeric$DoubleAsIfIntegral$ doubleAsIntegral();
  Signature: ()Lscala/math/Numeric$DoubleAsIfIntegral$;
  Code:
   Stack=1, Locals=1, Args_size=1
	aload_0
	getfield	Field doubleAsIntegral:Lscala/math/Numeric$DoubleAsIfIntegral$;
	areturn
  Labels:

public scala.math.BigDecimal toBD(double);
  Signature: (D)Lscala/math/BigDecimal;
  Code:
   Stack=3, Locals=3, Args_size=2
	getstatic	Field scala/package$.MODULE$:Lscala/package$;
	invokevirtual	Method scala/package$.BigDecimal:()Lscala/math/BigDecimal$;
	dload_1
	invokevirtual	Method scala/math/BigDecimal$.valueOf:(D)Lscala/math/BigDecimal;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/collection/immutable/Range$Double$;
   0      11      1    x       D


public scala.collection.immutable.NumericRange apply(double, double, double);
  Signature: (DDD)Lscala/collection/immutable/NumericRange;
  Code:
   Stack=6, Locals=7, Args_size=4
	getstatic	Field scala/collection/immutable/Range$BigDecimal$.MODULE$:Lscala/collection/immutable/Range$BigDecimal$;
	aload_0
	dload_1
	invokevirtual	Method toBD:(D)Lscala/math/BigDecimal;
	aload_0
	dload_3
	invokevirtual	Method toBD:(D)Lscala/math/BigDecimal;
	aload_0
	dload	5
	invokevirtual	Method toBD:(D)Lscala/math/BigDecimal;
	invokevirtual	Method scala/collection/immutable/Range$BigDecimal$.apply:(Lscala/math/BigDecimal;Lscala/math/BigDecimal;Lscala/math/BigDecimal;)Lscala/collection/immutable/NumericRange$Exclusive;
	new	class scala/collection/immutable/Range$Double$$anonfun$apply$1
	dup
	invokespecial	Method scala/collection/immutable/Range$Double$$anonfun$apply$1."<init>":()V
	aload_0
	invokevirtual	Method doubleAsIntegral:()Lscala/math/Numeric$DoubleAsIfIntegral$;
	invokevirtual	Method scala/collection/immutable/NumericRange$Exclusive.mapRange:(Lscala/Function1;Lscala/math/Integral;)Lscala/collection/immutable/NumericRange;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      37      0    this       Lscala/collection/immutable/Range$Double$;
   0      37      1    start       D
   0      37      3    end       D
   0      37      5    step       D

  Signature: length = 0x2
   00 47 

public scala.collection.immutable.NumericRange inclusive(double, double, double);
  Signature: (DDD)Lscala/collection/immutable/NumericRange;
  Code:
   Stack=6, Locals=7, Args_size=4
	getstatic	Field scala/collection/immutable/Range$BigDecimal$.MODULE$:Lscala/collection/immutable/Range$BigDecimal$;
	aload_0
	dload_1
	invokevirtual	Method toBD:(D)Lscala/math/BigDecimal;
	aload_0
	dload_3
	invokevirtual	Method toBD:(D)Lscala/math/BigDecimal;
	aload_0
	dload	5
	invokevirtual	Method toBD:(D)Lscala/math/BigDecimal;
	invokevirtual	Method scala/collection/immutable/Range$BigDecimal$.inclusive:(Lscala/math/BigDecimal;Lscala/math/BigDecimal;Lscala/math/BigDecimal;)Lscala/collection/immutable/NumericRange$Inclusive;
	new	class scala/collection/immutable/Range$Double$$anonfun$inclusive$1
	dup
	invokespecial	Method scala/collection/immutable/Range$Double$$anonfun$inclusive$1."<init>":()V
	aload_0
	invokevirtual	Method doubleAsIntegral:()Lscala/math/Numeric$DoubleAsIfIntegral$;
	invokevirtual	Method scala/collection/immutable/NumericRange$Inclusive.mapRange:(Lscala/Function1;Lscala/math/Integral;)Lscala/collection/immutable/NumericRange;
	areturn
  Labels:
  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      37      0    this       Lscala/collection/immutable/Range$Double$;
   0      37      1    start       D
   0      37      3    end       D
   0      37      5    step       D

  Signature: length = 0x2
   00 47 

public scala.collection.immutable.Range$Double$();
  Signature: ()V
  Code:
   Stack=2, Locals=1, Args_size=1
	aload_0
	invokespecial	Method java/lang/Object."<init>":()V
	aload_0
	putstatic	Field MODULE$:Lscala/collection/immutable/Range$Double$;
	aload_0
	getstatic	Field scala/math/Numeric$BigDecimalAsIfIntegral$.MODULE$:Lscala/math/Numeric$BigDecimalAsIfIntegral$;
	putfield	Field bigDecAsIntegral:Lscala/math/Numeric$BigDecimalAsIfIntegral$;
	aload_0
	getstatic	Field scala/math/Numeric$DoubleAsIfIntegral$.MODULE$:Lscala/math/Numeric$DoubleAsIfIntegral$;
	putfield	Field doubleAsIntegral:Lscala/math/Numeric$DoubleAsIfIntegral$;
	return
  Labels:

}

