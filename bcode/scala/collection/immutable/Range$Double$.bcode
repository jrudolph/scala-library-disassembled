Compiled from "Range.scala"
public final class scala.collection.immutable.Range$Double$ extends java.lang.Object implements scala.ScalaObject
  SourceFile: "Range.scala"
  Scala: length = 0x
   
  InnerClass: 
   public #99= #78 of #98; //Exclusive=class scala/collection/immutable/NumericRange$Exclusive of class scala/collection/immutable/NumericRange
   public #100= #57 of #98; //Inclusive=class scala/collection/immutable/NumericRange$Inclusive of class scala/collection/immutable/NumericRange
   public final #101= #75 of #10; //$anonfun$apply$1=class scala/collection/immutable/Range$Double$$anonfun$apply$1 of class scala/collection/immutable/Range$Double$
   public final #102= #51 of #10; //$anonfun$inclusive$1=class scala/collection/immutable/Range$Double$$anonfun$inclusive$1 of class scala/collection/immutable/Range$Double$
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	Range.scala;
const #3 = Asciz	Scala;
const #4 = Asciz	MODULE$;
const #5 = Asciz	Lscala/collection/immutable/Range$Double$;;
const #6 = Asciz	<clinit>;
const #7 = Asciz	()V;
const #8 = Asciz	Code;
const #9 = Asciz	scala/collection/immutable/Range$Double$;
const #10 = class	#9;	//  scala/collection/immutable/Range$Double$
const #11 = Asciz	<init>;
const #12 = NameAndType	#11:#7;//  "<init>":()V
const #13 = Method	#10.#12;	//  scala/collection/immutable/Range$Double$."<init>":()V
const #14 = Asciz	doubleAsIntegral;
const #15 = Asciz	Lscala/math/Numeric$DoubleAsIfIntegral$;;
const #16 = Asciz	bigDecAsIntegral;
const #17 = Asciz	Lscala/math/Numeric$BigDecimalAsIfIntegral$;;
const #18 = Asciz	LineNumberTable;
const #19 = Asciz	java/lang/Object;
const #20 = class	#19;	//  java/lang/Object
const #21 = Method	#20.#12;	//  java/lang/Object."<init>":()V
const #22 = NameAndType	#4:#5;//  MODULE$:Lscala/collection/immutable/Range$Double$;
const #23 = Field	#10.#22;	//  scala/collection/immutable/Range$Double$.MODULE$:Lscala/collection/immutable/Range$Double$;
const #24 = Asciz	scala/math/Numeric$BigDecimalAsIfIntegral$;
const #25 = class	#24;	//  scala/math/Numeric$BigDecimalAsIfIntegral$
const #26 = NameAndType	#4:#17;//  MODULE$:Lscala/math/Numeric$BigDecimalAsIfIntegral$;
const #27 = Field	#25.#26;	//  scala/math/Numeric$BigDecimalAsIfIntegral$.MODULE$:Lscala/math/Numeric$BigDecimalAsIfIntegral$;
const #28 = NameAndType	#16:#17;//  bigDecAsIntegral:Lscala/math/Numeric$BigDecimalAsIfIntegral$;
const #29 = Field	#10.#28;	//  scala/collection/immutable/Range$Double$.bigDecAsIntegral:Lscala/math/Numeric$BigDecimalAsIfIntegral$;
const #30 = Asciz	scala/math/Numeric$DoubleAsIfIntegral$;
const #31 = class	#30;	//  scala/math/Numeric$DoubleAsIfIntegral$
const #32 = NameAndType	#4:#15;//  MODULE$:Lscala/math/Numeric$DoubleAsIfIntegral$;
const #33 = Field	#31.#32;	//  scala/math/Numeric$DoubleAsIfIntegral$.MODULE$:Lscala/math/Numeric$DoubleAsIfIntegral$;
const #34 = NameAndType	#14:#15;//  doubleAsIntegral:Lscala/math/Numeric$DoubleAsIfIntegral$;
const #35 = Field	#10.#34;	//  scala/collection/immutable/Range$Double$.doubleAsIntegral:Lscala/math/Numeric$DoubleAsIfIntegral$;
const #36 = Asciz	inclusive;
const #37 = Asciz	(DDD)Lscala/collection/immutable/NumericRange;;
const #38 = Asciz	scala/collection/immutable/Range$BigDecimal$;
const #39 = class	#38;	//  scala/collection/immutable/Range$BigDecimal$
const #40 = Asciz	Lscala/collection/immutable/Range$BigDecimal$;;
const #41 = NameAndType	#4:#40;//  MODULE$:Lscala/collection/immutable/Range$BigDecimal$;
const #42 = Field	#39.#41;	//  scala/collection/immutable/Range$BigDecimal$.MODULE$:Lscala/collection/immutable/Range$BigDecimal$;
const #43 = Asciz	toBD;
const #44 = Asciz	(D)Lscala/math/BigDecimal;;
const #45 = NameAndType	#43:#44;//  toBD:(D)Lscala/math/BigDecimal;
const #46 = Method	#10.#45;	//  scala/collection/immutable/Range$Double$.toBD:(D)Lscala/math/BigDecimal;
const #47 = Asciz	(Lscala/math/BigDecimal;Lscala/math/BigDecimal;Lscala/math/BigDecimal;)Lscala/collection/immutable/NumericRange$Inclusive;;
const #48 = NameAndType	#36:#47;//  inclusive:(Lscala/math/BigDecimal;Lscala/math/BigDecimal;Lscala/math/BigDecimal;)Lscala/collection/immutable/NumericRange$Inclusive;
const #49 = Method	#39.#48;	//  scala/collection/immutable/Range$BigDecimal$.inclusive:(Lscala/math/BigDecimal;Lscala/math/BigDecimal;Lscala/math/BigDecimal;)Lscala/collection/immutable/NumericRange$Inclusive;
const #50 = Asciz	scala/collection/immutable/Range$Double$$anonfun$inclusive$1;
const #51 = class	#50;	//  scala/collection/immutable/Range$Double$$anonfun$inclusive$1
const #52 = Method	#51.#12;	//  scala/collection/immutable/Range$Double$$anonfun$inclusive$1."<init>":()V
const #53 = Asciz	()Lscala/math/Numeric$DoubleAsIfIntegral$;;
const #54 = NameAndType	#14:#53;//  doubleAsIntegral:()Lscala/math/Numeric$DoubleAsIfIntegral$;
const #55 = Method	#10.#54;	//  scala/collection/immutable/Range$Double$.doubleAsIntegral:()Lscala/math/Numeric$DoubleAsIfIntegral$;
const #56 = Asciz	scala/collection/immutable/NumericRange$Inclusive;
const #57 = class	#56;	//  scala/collection/immutable/NumericRange$Inclusive
const #58 = Asciz	mapRange;
const #59 = Asciz	(Lscala/Function1;Lscala/math/Integral;)Lscala/collection/immutable/NumericRange;;
const #60 = NameAndType	#58:#59;//  mapRange:(Lscala/Function1;Lscala/math/Integral;)Lscala/collection/immutable/NumericRange;
const #61 = Method	#57.#60;	//  scala/collection/immutable/NumericRange$Inclusive.mapRange:(Lscala/Function1;Lscala/math/Integral;)Lscala/collection/immutable/NumericRange;
const #62 = Asciz	this;
const #63 = Asciz	start;
const #64 = Asciz	D;
const #65 = Asciz	end;
const #66 = Asciz	step;
const #67 = Asciz	LocalVariableTable;
const #68 = Asciz	(DDD)Lscala/collection/immutable/NumericRange<Ljava/lang/Double;>;;
const #69 = Asciz	Signature;
const #70 = Asciz	apply;
const #71 = Asciz	(Lscala/math/BigDecimal;Lscala/math/BigDecimal;Lscala/math/BigDecimal;)Lscala/collection/immutable/NumericRange$Exclusive;;
const #72 = NameAndType	#70:#71;//  apply:(Lscala/math/BigDecimal;Lscala/math/BigDecimal;Lscala/math/BigDecimal;)Lscala/collection/immutable/NumericRange$Exclusive;
const #73 = Method	#39.#72;	//  scala/collection/immutable/Range$BigDecimal$.apply:(Lscala/math/BigDecimal;Lscala/math/BigDecimal;Lscala/math/BigDecimal;)Lscala/collection/immutable/NumericRange$Exclusive;
const #74 = Asciz	scala/collection/immutable/Range$Double$$anonfun$apply$1;
const #75 = class	#74;	//  scala/collection/immutable/Range$Double$$anonfun$apply$1
const #76 = Method	#75.#12;	//  scala/collection/immutable/Range$Double$$anonfun$apply$1."<init>":()V
const #77 = Asciz	scala/collection/immutable/NumericRange$Exclusive;
const #78 = class	#77;	//  scala/collection/immutable/NumericRange$Exclusive
const #79 = Method	#78.#60;	//  scala/collection/immutable/NumericRange$Exclusive.mapRange:(Lscala/Function1;Lscala/math/Integral;)Lscala/collection/immutable/NumericRange;
const #80 = Asciz	scala/package$;
const #81 = class	#80;	//  scala/package$
const #82 = Asciz	Lscala/package$;;
const #83 = NameAndType	#4:#82;//  MODULE$:Lscala/package$;
const #84 = Field	#81.#83;	//  scala/package$.MODULE$:Lscala/package$;
const #85 = Asciz	BigDecimal;
const #86 = Asciz	()Lscala/math/BigDecimal$;;
const #87 = NameAndType	#85:#86;//  BigDecimal:()Lscala/math/BigDecimal$;
const #88 = Method	#81.#87;	//  scala/package$.BigDecimal:()Lscala/math/BigDecimal$;
const #89 = Asciz	scala/math/BigDecimal$;
const #90 = class	#89;	//  scala/math/BigDecimal$
const #91 = Asciz	valueOf;
const #92 = NameAndType	#91:#44;//  valueOf:(D)Lscala/math/BigDecimal;
const #93 = Method	#90.#92;	//  scala/math/BigDecimal$.valueOf:(D)Lscala/math/BigDecimal;
const #94 = Asciz	x;
const #95 = Asciz	()Lscala/math/Numeric$BigDecimalAsIfIntegral$;;
const #96 = Asciz	InnerClasses;
const #97 = Asciz	scala/collection/immutable/NumericRange;
const #98 = class	#97;	//  scala/collection/immutable/NumericRange
const #99 = Asciz	Exclusive;
const #100 = Asciz	Inclusive;
const #101 = Asciz	$anonfun$apply$1;
const #102 = Asciz	$anonfun$inclusive$1;
const #103 = Asciz	scala/ScalaObject;
const #104 = class	#103;	//  scala/ScalaObject

{
public static final scala.collection.immutable.Range$Double$ MODULE$;

public static {};
  Code:
   Stack=1, Locals=0, Args_size=0
   0:	new	#10; //class scala/collection/immutable/Range$Double$
   3:	invokespecial	#13; //Method "<init>":()V
   6:	return

public scala.collection.immutable.Range$Double$();
  Code:
   Stack=2, Locals=1, Args_size=1
   0:	aload_0
   1:	invokespecial	#21; //Method java/lang/Object."<init>":()V
   4:	aload_0
   5:	putstatic	#23; //Field MODULE$:Lscala/collection/immutable/Range$Double$;
   8:	aload_0
   9:	getstatic	#27; //Field scala/math/Numeric$BigDecimalAsIfIntegral$.MODULE$:Lscala/math/Numeric$BigDecimalAsIfIntegral$;
   12:	putfield	#29; //Field bigDecAsIntegral:Lscala/math/Numeric$BigDecimalAsIfIntegral$;
   15:	aload_0
   16:	getstatic	#33; //Field scala/math/Numeric$DoubleAsIfIntegral$.MODULE$:Lscala/math/Numeric$DoubleAsIfIntegral$;
   19:	putfield	#35; //Field doubleAsIntegral:Lscala/math/Numeric$DoubleAsIfIntegral$;
   22:	return
  LineNumberTable: 
   line 208: 0
   line 209: 8
   line 210: 15


public scala.collection.immutable.NumericRange inclusive(double, double, double);
  Code:
   Stack=6, Locals=7, Args_size=4
   0:	getstatic	#42; //Field scala/collection/immutable/Range$BigDecimal$.MODULE$:Lscala/collection/immutable/Range$BigDecimal$;
   3:	aload_0
   4:	dload_1
   5:	invokevirtual	#46; //Method toBD:(D)Lscala/math/BigDecimal;
   8:	aload_0
   9:	dload_3
   10:	invokevirtual	#46; //Method toBD:(D)Lscala/math/BigDecimal;
   13:	aload_0
   14:	dload	5
   16:	invokevirtual	#46; //Method toBD:(D)Lscala/math/BigDecimal;
   19:	invokevirtual	#49; //Method scala/collection/immutable/Range$BigDecimal$.inclusive:(Lscala/math/BigDecimal;Lscala/math/BigDecimal;Lscala/math/BigDecimal;)Lscala/collection/immutable/NumericRange$Inclusive;
   22:	new	#51; //class scala/collection/immutable/Range$Double$$anonfun$inclusive$1
   25:	dup
   26:	invokespecial	#52; //Method scala/collection/immutable/Range$Double$$anonfun$inclusive$1."<init>":()V
   29:	aload_0
   30:	invokevirtual	#55; //Method doubleAsIntegral:()Lscala/math/Numeric$DoubleAsIfIntegral$;
   33:	invokevirtual	#61; //Method scala/collection/immutable/NumericRange$Inclusive.mapRange:(Lscala/Function1;Lscala/math/Integral;)Lscala/collection/immutable/NumericRange;
   36:	areturn
  LineNumberTable: 
   line 217: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      37      0    this       Lscala/collection/immutable/Range$Double$;
   0      37      1    start       D
   0      37      3    end       D
   0      37      5    step       D

  Signature: length = 0x2
   00 44 

public scala.collection.immutable.NumericRange apply(double, double, double);
  Code:
   Stack=6, Locals=7, Args_size=4
   0:	getstatic	#42; //Field scala/collection/immutable/Range$BigDecimal$.MODULE$:Lscala/collection/immutable/Range$BigDecimal$;
   3:	aload_0
   4:	dload_1
   5:	invokevirtual	#46; //Method toBD:(D)Lscala/math/BigDecimal;
   8:	aload_0
   9:	dload_3
   10:	invokevirtual	#46; //Method toBD:(D)Lscala/math/BigDecimal;
   13:	aload_0
   14:	dload	5
   16:	invokevirtual	#46; //Method toBD:(D)Lscala/math/BigDecimal;
   19:	invokevirtual	#73; //Method scala/collection/immutable/Range$BigDecimal$.apply:(Lscala/math/BigDecimal;Lscala/math/BigDecimal;Lscala/math/BigDecimal;)Lscala/collection/immutable/NumericRange$Exclusive;
   22:	new	#75; //class scala/collection/immutable/Range$Double$$anonfun$apply$1
   25:	dup
   26:	invokespecial	#76; //Method scala/collection/immutable/Range$Double$$anonfun$apply$1."<init>":()V
   29:	aload_0
   30:	invokevirtual	#55; //Method doubleAsIntegral:()Lscala/math/Numeric$DoubleAsIfIntegral$;
   33:	invokevirtual	#79; //Method scala/collection/immutable/NumericRange$Exclusive.mapRange:(Lscala/Function1;Lscala/math/Integral;)Lscala/collection/immutable/NumericRange;
   36:	areturn
  LineNumberTable: 
   line 214: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      37      0    this       Lscala/collection/immutable/Range$Double$;
   0      37      1    start       D
   0      37      3    end       D
   0      37      5    step       D

  Signature: length = 0x2
   00 44 

public scala.math.BigDecimal toBD(double);
  Code:
   Stack=3, Locals=3, Args_size=2
   0:	getstatic	#84; //Field scala/package$.MODULE$:Lscala/package$;
   3:	invokevirtual	#88; //Method scala/package$.BigDecimal:()Lscala/math/BigDecimal$;
   6:	dload_1
   7:	invokevirtual	#93; //Method scala/math/BigDecimal$.valueOf:(D)Lscala/math/BigDecimal;
   10:	areturn
  LineNumberTable: 
   line 211: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/collection/immutable/Range$Double$;
   0      11      1    x       D


public scala.math.Numeric$DoubleAsIfIntegral$ doubleAsIntegral();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#35; //Field doubleAsIntegral:Lscala/math/Numeric$DoubleAsIfIntegral$;
   4:	areturn
  LineNumberTable: 
   line 210: 0


public scala.math.Numeric$BigDecimalAsIfIntegral$ bigDecAsIntegral();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#29; //Field bigDecAsIntegral:Lscala/math/Numeric$BigDecimalAsIfIntegral$;
   4:	areturn
  LineNumberTable: 
   line 209: 0


}

