Compiled from "RedBlack.scala"
public abstract class scala.collection.immutable.RedBlack$Tree extends java.lang.Object implements scala.ScalaObject,java.io.Serializable
  SourceFile: "RedBlack.scala"
  Signature: length = 0x2
   00 53 
  Scala: length = 0x
   
  InnerClass: 
   public abstract #86= #15 of #73; //Tree=class scala/collection/immutable/RedBlack$Tree of class scala/collection/immutable/RedBlack
   public abstract #89= #88 of #73; //NonEmpty=class scala/collection/immutable/RedBlack$NonEmpty of class scala/collection/immutable/RedBlack
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	RedBlack.scala;
const #3 = Asciz	$outer;
const #4 = Asciz	Lscala/collection/immutable/RedBlack;;
const #5 = Asciz	<init>;
const #6 = Asciz	(Lscala/collection/immutable/RedBlack;)V;
const #7 = Asciz	Code;
const #8 = Asciz	LineNumberTable;
const #9 = Asciz	java/lang/NullPointerException;
const #10 = class	#9;	//  java/lang/NullPointerException
const #11 = Asciz	()V;
const #12 = NameAndType	#5:#11;//  "<init>":()V
const #13 = Method	#10.#12;	//  java/lang/NullPointerException."<init>":()V
const #14 = Asciz	scala/collection/immutable/RedBlack$Tree;
const #15 = class	#14;	//  scala/collection/immutable/RedBlack$Tree
const #16 = NameAndType	#3:#4;//  $outer:Lscala/collection/immutable/RedBlack;
const #17 = Field	#15.#16;	//  scala/collection/immutable/RedBlack$Tree.$outer:Lscala/collection/immutable/RedBlack;
const #18 = Asciz	java/lang/Object;
const #19 = class	#18;	//  java/lang/Object
const #20 = Method	#19.#12;	//  java/lang/Object."<init>":()V
const #21 = Asciz	this;
const #22 = Asciz	Lscala/collection/immutable/RedBlack$Tree;;
const #23 = Asciz	LocalVariableTable;
const #24 = Asciz	(Lscala/collection/immutable/RedBlack<TA;>;)V;
const #25 = Asciz	Signature;
const #26 = Asciz	scala$collection$immutable$RedBlack$Tree$$$outer;
const #27 = Asciz	()Lscala/collection/immutable/RedBlack;;
const #28 = Asciz	count;
const #29 = Asciz	()I;
const #30 = Asciz	last;
const #31 = Asciz	()Ljava/lang/Object;;
const #32 = Asciz	()TA;;
const #33 = Asciz	first;
const #34 = Asciz	range;
const #35 = Asciz	(Lscala/Option;Lscala/Option;)Lscala/collection/immutable/RedBlack$Tree;;
const #36 = Asciz	(Lscala/Option<TA;>;Lscala/Option<TA;>;)Lscala/collection/immutable/RedBlack<TA;>.Tree<TB;>;;
const #37 = Asciz	smallest;
const #38 = Asciz	()Lscala/collection/immutable/RedBlack$NonEmpty;;
const #39 = Asciz	()Lscala/collection/immutable/RedBlack<TA;>.NonEmpty<TB;>;;
const #40 = Asciz	del;
const #41 = Asciz	(Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;;
const #42 = Asciz	(TA;)Lscala/collection/immutable/RedBlack<TA;>.Tree<TB;>;;
const #43 = Asciz	upd;
const #44 = Asciz	(Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;;
const #45 = Asciz	<B1:Ljava/lang/Object;>(TA;TB1;)Lscala/collection/immutable/RedBlack<TA;>.Tree<TB1;>;;
const #46 = Asciz	elements;
const #47 = Asciz	()Lscala/collection/Iterator;;
const #48 = Asciz	iterator;
const #49 = NameAndType	#48:#47;//  iterator:()Lscala/collection/Iterator;
const #50 = Method	#15.#49;	//  scala/collection/immutable/RedBlack$Tree.iterator:()Lscala/collection/Iterator;
const #51 = Asciz	()Lscala/collection/Iterator<Lscala/Tuple2<TA;TB;>;>;;
const #52 = Asciz	Deprecated;
const #53 = Asciz	toStream;
const #54 = Asciz	()Lscala/collection/immutable/Stream;;
const #55 = Asciz	()Lscala/collection/immutable/Stream<Lscala/Tuple2<TA;TB;>;>;;
const #56 = Asciz	visit;
const #57 = Asciz	(Ljava/lang/Object;Lscala/Function3;)Lscala/Tuple2;;
const #58 = Asciz	<T:Ljava/lang/Object;>(TT;Lscala/Function3<TT;TA;TB;Lscala/Tuple2<Ljava/lang/Boolean;TT;>;>;)Lscala/Tuple2<Ljava/lang/Boolean;TT;>;;
const #59 = Asciz	foreach;
const #60 = Asciz	(Lscala/Function2;)V;
const #61 = Asciz	<U:Ljava/lang/Object;>(Lscala/Function2<TA;TB;TU;>;)V;
const #62 = Asciz	delete;
const #63 = NameAndType	#40:#41;//  del:(Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;
const #64 = Method	#15.#63;	//  scala/collection/immutable/RedBlack$Tree.del:(Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;
const #65 = Asciz	k;
const #66 = Asciz	Ljava/lang/Object;;
const #67 = Asciz	update;
const #68 = NameAndType	#26:#27;//  scala$collection$immutable$RedBlack$Tree$$$outer:()Lscala/collection/immutable/RedBlack;
const #69 = Method	#15.#68;	//  scala/collection/immutable/RedBlack$Tree.scala$collection$immutable$RedBlack$Tree$$$outer:()Lscala/collection/immutable/RedBlack;
const #70 = NameAndType	#43:#44;//  upd:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;
const #71 = Method	#15.#70;	//  scala/collection/immutable/RedBlack$Tree.upd:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;
const #72 = Asciz	scala/collection/immutable/RedBlack;
const #73 = class	#72;	//  scala/collection/immutable/RedBlack
const #74 = Asciz	scala$collection$immutable$RedBlack$$blacken;
const #75 = Asciz	(Lscala/collection/immutable/RedBlack$Tree;)Lscala/collection/immutable/RedBlack$Tree;;
const #76 = NameAndType	#74:#75;//  scala$collection$immutable$RedBlack$$blacken:(Lscala/collection/immutable/RedBlack$Tree;)Lscala/collection/immutable/RedBlack$Tree;
const #77 = Method	#73.#76;	//  scala/collection/immutable/RedBlack.scala$collection$immutable$RedBlack$$blacken:(Lscala/collection/immutable/RedBlack$Tree;)Lscala/collection/immutable/RedBlack$Tree;
const #78 = Asciz	v;
const #79 = Asciz	lookup;
const #80 = Asciz	isBlack;
const #81 = Asciz	()Z;
const #82 = Asciz	isEmpty;
const #83 = Asciz	<B:Ljava/lang/Object;>Ljava/lang/Object;Lscala/ScalaObject;;
const #84 = Asciz	Scala;
const #85 = Asciz	InnerClasses;
const #86 = Asciz	Tree;
const #87 = Asciz	scala/collection/immutable/RedBlack$NonEmpty;
const #88 = class	#87;	//  scala/collection/immutable/RedBlack$NonEmpty
const #89 = Asciz	NonEmpty;
const #90 = Asciz	scala/ScalaObject;
const #91 = class	#90;	//  scala/ScalaObject
const #92 = Asciz	java/io/Serializable;
const #93 = class	#92;	//  java/io/Serializable

{
public final scala.collection.immutable.RedBlack $outer;

public scala.collection.immutable.RedBlack$Tree(scala.collection.immutable.RedBlack);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_1
   1:	ifnonnull	12
   4:	new	#10; //class java/lang/NullPointerException
   7:	dup
   8:	invokespecial	#13; //Method java/lang/NullPointerException."<init>":()V
   11:	athrow
   12:	aload_0
   13:	aload_1
   14:	putfield	#17; //Field $outer:Lscala/collection/immutable/RedBlack;
   17:	aload_0
   18:	invokespecial	#20; //Method java/lang/Object."<init>":()V
   21:	return
  LineNumberTable: 
   line 31: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      22      0    this       Lscala/collection/immutable/RedBlack$Tree;
   0      22      1    $outer       Lscala/collection/immutable/RedBlack;

  Signature: length = 0x2
   00 18 

public scala.collection.immutable.RedBlack scala$collection$immutable$RedBlack$Tree$$$outer();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#17; //Field $outer:Lscala/collection/immutable/RedBlack;
   4:	areturn
  LineNumberTable: 
   line 31: 0


public abstract int count();

public abstract java.lang.Object last();
  Signature: length = 0x2
   00 20 

public abstract java.lang.Object first();
  Signature: length = 0x2
   00 20 

public abstract scala.collection.immutable.RedBlack$Tree range(scala.Option, scala.Option);
  Signature: length = 0x2
   00 24 

public abstract scala.collection.immutable.RedBlack$NonEmpty smallest();
  Signature: length = 0x2
   00 27 

public abstract scala.collection.immutable.RedBlack$Tree del(java.lang.Object);
  Signature: length = 0x2
   00 2A 

public abstract scala.collection.immutable.RedBlack$Tree upd(java.lang.Object, java.lang.Object);
  Signature: length = 0x2
   00 2D 

public scala.collection.Iterator elements();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	invokevirtual	#50; //Method iterator:()Lscala/collection/Iterator;
   4:	areturn
  LineNumberTable: 
   line 42: 0

  Signature: length = 0x2
   00 33 
  Deprecated: true

public abstract scala.collection.Iterator iterator();
  Signature: length = 0x2
   00 33 

public abstract scala.collection.immutable.Stream toStream();
  Signature: length = 0x2
   00 37 

public abstract scala.Tuple2 visit(java.lang.Object, scala.Function3);
  Signature: length = 0x2
   00 3A 
  Deprecated: true

public abstract void foreach(scala.Function2);
  Signature: length = 0x2
   00 3D 

public scala.collection.immutable.RedBlack$Tree delete(java.lang.Object);
  Code:
   Stack=2, Locals=2, Args_size=2
   0:	aload_0
   1:	aload_1
   2:	invokevirtual	#64; //Method del:(Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;
   5:	areturn
  LineNumberTable: 
   line 36: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      6      0    this       Lscala/collection/immutable/RedBlack$Tree;
   0      6      1    k       Ljava/lang/Object;

  Signature: length = 0x2
   00 2A 

public scala.collection.immutable.RedBlack$Tree update(java.lang.Object, java.lang.Object);
  Code:
   Stack=4, Locals=3, Args_size=3
   0:	aload_0
   1:	invokevirtual	#69; //Method scala$collection$immutable$RedBlack$Tree$$$outer:()Lscala/collection/immutable/RedBlack;
   4:	aload_0
   5:	aload_1
   6:	aload_2
   7:	invokevirtual	#71; //Method upd:(Ljava/lang/Object;Ljava/lang/Object;)Lscala/collection/immutable/RedBlack$Tree;
   10:	invokevirtual	#77; //Method scala/collection/immutable/RedBlack.scala$collection$immutable$RedBlack$$blacken:(Lscala/collection/immutable/RedBlack$Tree;)Lscala/collection/immutable/RedBlack$Tree;
   13:	areturn
  LineNumberTable: 
   line 35: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      14      0    this       Lscala/collection/immutable/RedBlack$Tree;
   0      14      1    k       Ljava/lang/Object;
   0      14      2    v       Ljava/lang/Object;

  Signature: length = 0x2
   00 2D 

public abstract scala.collection.immutable.RedBlack$Tree lookup(java.lang.Object);
  Signature: length = 0x2
   00 2A 

public abstract boolean isBlack();

public abstract boolean isEmpty();

}

