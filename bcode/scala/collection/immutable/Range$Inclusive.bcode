Compiled from "Range.scala"
public class scala.collection.immutable.Range$Inclusive extends scala.collection.immutable.Range implements scala.ScalaObject
  SourceFile: "Range.scala"
  Scala: length = 0x
   
  InnerClass: 
   public #47= #33 of #10; //Inclusive=class scala/collection/immutable/Range$Inclusive of class scala/collection/immutable/Range
  minor version: 0
  major version: 49
  Constant pool:
const #1 = Asciz	SourceFile;
const #2 = Asciz	Range.scala;
const #3 = Asciz	limit;
const #4 = Asciz	I;
const #5 = Asciz	<init>;
const #6 = Asciz	(III)V;
const #7 = Asciz	Code;
const #8 = Asciz	LineNumberTable;
const #9 = Asciz	scala/collection/immutable/Range;
const #10 = class	#9;	//  scala/collection/immutable/Range
const #11 = NameAndType	#5:#6;//  "<init>":(III)V
const #12 = Method	#10.#11;	//  scala/collection/immutable/Range."<init>":(III)V
const #13 = Asciz	end;
const #14 = Asciz	()I;
const #15 = NameAndType	#13:#14;//  end:()I
const #16 = Method	#10.#15;	//  scala/collection/immutable/Range.end:()I
const #17 = Asciz	scala/math/package$;
const #18 = class	#17;	//  scala/math/package$
const #19 = Asciz	MODULE$;
const #20 = Asciz	Lscala/math/package$;;
const #21 = NameAndType	#19:#20;//  MODULE$:Lscala/math/package$;
const #22 = Field	#18.#21;	//  scala/math/package$.MODULE$:Lscala/math/package$;
const #23 = Asciz	step;
const #24 = NameAndType	#23:#14;//  step:()I
const #25 = Method	#10.#24;	//  scala/collection/immutable/Range.step:()I
const #26 = Asciz	scala/MathCommon;
const #27 = class	#26;	//  scala/MathCommon
const #28 = Asciz	signum;
const #29 = Asciz	(I)I;
const #30 = NameAndType	#28:#29;//  signum:(I)I
const #31 = InterfaceMethod	#27.#30;	//  scala/MathCommon.signum:(I)I
const #32 = Asciz	scala/collection/immutable/Range$Inclusive;
const #33 = class	#32;	//  scala/collection/immutable/Range$Inclusive
const #34 = NameAndType	#3:#4;//  limit:I
const #35 = Field	#33.#34;	//  scala/collection/immutable/Range$Inclusive.limit:I
const #36 = Asciz	this;
const #37 = Asciz	Lscala/collection/immutable/Range$Inclusive;;
const #38 = Asciz	start;
const #39 = Asciz	LocalVariableTable;
const #40 = Asciz	copy;
const #41 = Asciz	(III)Lscala/collection/immutable/Range;;
const #42 = Method	#33.#11;	//  scala/collection/immutable/Range$Inclusive."<init>":(III)V
const #43 = Asciz	isInclusive;
const #44 = Asciz	()Z;
const #45 = Asciz	Scala;
const #46 = Asciz	InnerClasses;
const #47 = Asciz	Inclusive;
const #48 = Asciz	scala/ScalaObject;
const #49 = class	#48;	//  scala/ScalaObject

{
public scala.collection.immutable.Range$Inclusive(int, int, int);
  Code:
   Stack=4, Locals=4, Args_size=4
   0:	aload_0
   1:	iload_1
   2:	iload_2
   3:	iload_3
   4:	invokespecial	#12; //Method scala/collection/immutable/Range."<init>":(III)V
   7:	aload_0
   8:	aload_0
   9:	invokespecial	#16; //Method scala/collection/immutable/Range.end:()I
   12:	getstatic	#22; //Field scala/math/package$.MODULE$:Lscala/math/package$;
   15:	aload_0
   16:	invokespecial	#25; //Method scala/collection/immutable/Range.step:()I
   19:	invokeinterface	#31,  2; //InterfaceMethod scala/MathCommon.signum:(I)I
   24:	iadd
   25:	putfield	#35; //Field limit:I
   28:	return
  LineNumberTable: 
   line 140: 0
   line 142: 7

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      29      0    this       Lscala/collection/immutable/Range$Inclusive;
   0      29      1    start       I
   0      29      2    end       I
   0      29      3    step       I


public scala.collection.immutable.Range copy(int, int, int);
  Code:
   Stack=5, Locals=4, Args_size=4
   0:	new	#33; //class scala/collection/immutable/Range$Inclusive
   3:	dup
   4:	iload_1
   5:	iload_2
   6:	iload_3
   7:	invokespecial	#42; //Method "<init>":(III)V
   10:	areturn
  LineNumberTable: 
   line 143: 0

  LocalVariableTable: 
   Start  Length  Slot  Name   Signature
   0      11      0    this       Lscala/collection/immutable/Range$Inclusive;
   0      11      1    start       I
   0      11      2    end       I
   0      11      3    step       I


public int limit();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	aload_0
   1:	getfield	#35; //Field limit:I
   4:	ireturn
  LineNumberTable: 
   line 142: 0


public boolean isInclusive();
  Code:
   Stack=1, Locals=1, Args_size=1
   0:	iconst_1
   1:	ireturn
  LineNumberTable: 
   line 141: 0


}

